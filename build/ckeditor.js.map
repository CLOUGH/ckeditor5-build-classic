{"version":3,"sources":["webpack://ClassicEditor/webpack/universalModuleDefinition","webpack://ClassicEditor/webpack/bootstrap","webpack://ClassicEditor/./node_modules/style-loader/lib/addStyles.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_root.js","webpack://ClassicEditor/../ckeditor5-core/theme/icons/cancel.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/check.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/object-right.svg","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_checkGlobal.js","webpack://ClassicEditor/../ckeditor5-core/theme/icons/object-center.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/object-left.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/object-full-width.svg","webpack://ClassicEditor/../ckeditor5-heading/theme/heading.css?5da9","webpack://ClassicEditor/(webpack)/buildin/harmony-module.js","webpack://ClassicEditor/../ckeditor5-list/theme/icons/bulletedlist.svg","webpack://ClassicEditor/../ckeditor5-list/theme/icons/numberedlist.svg","webpack://ClassicEditor/../ckeditor5-link/theme/icons/link.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/pencil.svg","webpack://ClassicEditor/../ckeditor5-link/theme/icons/unlink.svg","webpack://ClassicEditor/../ckeditor5-ui/theme/icons/dropdown-arrow.svg","webpack://ClassicEditor/../ckeditor5-image/theme/icons/image_placeholder.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/image.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/low-vision.svg","webpack://ClassicEditor/../ckeditor5-core/theme/icons/quote.svg","webpack://ClassicEditor/../ckeditor5-basic-styles/theme/icons/italic.svg","webpack://ClassicEditor/../ckeditor5-basic-styles/theme/icons/bold.svg","webpack://ClassicEditor/../ckeditor5-undo/theme/icons/redo.svg","webpack://ClassicEditor/../ckeditor5-undo/theme/icons/undo.svg","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getPrototype.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isHostObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isObjectLike.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isPlainObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/config.js","webpack://ClassicEditor/../ckeditor5-utils/src/ckeditorerror.js","webpack://ClassicEditor/../ckeditor5-utils/src/spy.js","webpack://ClassicEditor/../ckeditor5-utils/src/eventinfo.js","webpack://ClassicEditor/../ckeditor5-utils/src/uid.js","webpack://ClassicEditor/../ckeditor5-utils/src/priorities.js","webpack://ClassicEditor/../ckeditor5-utils/src/emittermixin.js","webpack://ClassicEditor/../ckeditor5-utils/src/mix.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_listCacheClear.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/eq.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_assocIndexOf.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_listCacheDelete.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_listCacheGet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_listCacheHas.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_listCacheSet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_ListCache.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_stackClear.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_stackDelete.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_stackGet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_stackHas.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isFunction.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_toSource.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isNative.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getNative.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_nativeCreate.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_hashClear.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_hashDelete.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_hashGet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_hashHas.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_hashSet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Hash.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Map.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_mapCacheClear.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isKeyable.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getMapData.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_mapCacheDelete.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_mapCacheGet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_mapCacheHas.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_mapCacheSet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_MapCache.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_stackSet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Stack.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arrayEach.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_assignValue.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_copyObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseHas.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseKeys.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseTimes.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseProperty.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getLength.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isLength.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isArrayLike.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isArrayLikeObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isArguments.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isString.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_indexKeys.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isIndex.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isPrototype.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/keys.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseAssign.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneBuffer.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_copyArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getSymbols.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_copySymbols.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arrayPush.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseGetAllKeys.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getAllKeys.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_DataView.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Promise.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Set.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_WeakMap.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getTag.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_initCloneArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Uint8Array.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneArrayBuffer.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneDataView.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_addMapEntry.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arrayReduce.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_mapToArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneMap.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneRegExp.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_addSetEntry.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_setToArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneSet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Symbol.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneSymbol.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cloneTypedArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_initCloneByTag.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseCreate.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_initCloneObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseClone.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/clone.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/node.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/text.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/textproxy.js","webpack://ClassicEditor/../ckeditor5-utils/src/objecttomap.js","webpack://ClassicEditor/../ckeditor5-utils/src/isiterable.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/matcher.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/element.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/containerelement.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isIterateeCall.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_apply.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isSymbol.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/toNumber.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/toFinite.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/toInteger.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/rest.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_createAssigner.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_Reflect.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_iteratorToArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseKeysIn.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/keysIn.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/assignIn.js","webpack://ClassicEditor/../ckeditor5-utils/src/observablemixin.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/editableelement.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/rooteditableelement.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/treewalker.js","webpack://ClassicEditor/../ckeditor5-utils/src/comparearrays.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/position.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/range.js","webpack://ClassicEditor/../ckeditor5-utils/src/count.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/selection.js","webpack://ClassicEditor/../ckeditor5-utils/src/collection.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/document.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/attributeelement.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/emptyelement.js","webpack://ClassicEditor/../ckeditor5-utils/src/env.js","webpack://ClassicEditor/../ckeditor5-utils/src/keyboard.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/uielement.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/documentfragment.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/writer.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/filler.js","webpack://ClassicEditor/../ckeditor5-utils/src/diff.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/insertat.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/remove.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/istext.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/renderer.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/global.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/indexof.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/getancestors.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/domconverter.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/getcommonancestor.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/isnode.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/iswindow.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/emittermixin.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/observer.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_setCacheAdd.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_setCacheHas.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_SetCache.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arraySome.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_equalArrays.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_equalByTag.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_equalObjects.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isTypedArray.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseIsEqualDeep.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseIsEqual.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isEqualWith.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/mutationobserver.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/domeventdata.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/domeventobserver.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/keyobserver.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/now.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/debounce.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/fakeselectionobserver.js","webpack://ClassicEditor/../ckeditor5-utils/src/log.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/selectionobserver.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/focusobserver.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/compositionobserver.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/isrange.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isElement.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/getborderwidths.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/rect.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/scroll.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/view.js","webpack://ClassicEditor/../ckeditor5-utils/src/tomap.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/node.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/text.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/textproxy.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/nodelist.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/element.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/treewalker.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/last.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/position.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/range.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/mapper.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/modelconsumable.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/downcastdispatcher.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/selection.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/liverange.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/documentselection.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/cloneDeep.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/downcast-converters.js","webpack://ClassicEditor/../ckeditor5-engine/src/controller/editingcontroller.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/upcast-selection-converters.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/downcast-selection-converters.js","webpack://ClassicEditor/../ckeditor5-core/src/plugincollection.js","webpack://ClassicEditor/../ckeditor5-core/src/commandcollection.js","webpack://ClassicEditor/../ckeditor5-utils/src/translation-service.js","webpack://ClassicEditor/../ckeditor5-utils/src/locale.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/viewconsumable.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/schema.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/upcastdispatcher.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/upcast-converters.js","webpack://ClassicEditor/../ckeditor5-engine/src/controller/datacontroller.js","webpack://ClassicEditor/../ckeditor5-engine/src/conversion/conversion.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/operation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/documentfragment.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/utils.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isEqual.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/attributeoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/moveoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/reinsertoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/removeoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/insertoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/markeroperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/nooperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/renameoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/rootattributeoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/operationfactory.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/deltafactory.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/delta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/attributedelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/splitdelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/mergedelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/movedelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/removedelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/renamedelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/wrapdelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/unwrapdelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/insertdelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/weakinsertdelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/transform.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseSlice.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/chunk.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/compact.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isFlattenable.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseFlatten.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/concat.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_indexOfNaN.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseIndexOf.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arrayIncludes.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arrayIncludesWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arrayMap.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseUnary.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_cacheHas.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseDifference.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/difference.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseIsMatch.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isStrictComparable.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseToPairs.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_setToPairs.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_createToPairs.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/toPairs.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_getMatchData.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_matchesStrictComparable.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseMatches.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/memoize.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseToString.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/toString.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_stringToPath.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_castPath.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_isKey.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_toKey.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseGet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/get.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseHasIn.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_hasPath.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/hasIn.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseMatchesProperty.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/identity.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_basePropertyDeep.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/property.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseIteratee.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/differenceBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/differenceWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/drop.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/dropRight.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseWhile.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/dropRightWhile.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/dropWhile.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseClamp.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/toLength.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseFill.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/fill.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseFindIndex.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/findIndex.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/findLastIndex.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/head.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/flatten.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/flattenDeep.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/flattenDepth.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/fromPairs.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/indexOf.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/initial.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseIntersection.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_castArrayLikeObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/intersection.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/intersectionBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/intersectionWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/join.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/lastIndexOf.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseNth.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/nth.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseIndexOfWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_basePullAll.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/pullAll.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/pull.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/pullAllBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/pullAllWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseAt.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_parent.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_basePullAt.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_compareAscending.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/pullAt.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/remove.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/reverse.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/slice.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseSortedIndexBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseSortedIndex.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedIndex.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedIndexBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedIndexOf.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedLastIndex.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedLastIndexBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedLastIndexOf.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseSortedUniq.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedUniq.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/sortedUniqBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/tail.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/take.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/takeRight.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/takeRightWhile.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/takeWhile.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/noop.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_createSet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseUniq.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/union.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/unionBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/unionWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/uniq.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/uniqBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/uniqWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_arrayFilter.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/unzip.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/unzipWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/without.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseXor.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/xor.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/xorBy.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/xorWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/zip.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseZipObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/zipObject.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/_baseSet.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/zipObjectDeep.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/zipWith.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/array.default.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/transform.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/markerdelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/basic-transformations.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/batch.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/delta/rootattributedelta.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/operation/detachoperation.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/rootelement.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/writer.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/differ.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/history.js","webpack://ClassicEditor/../ckeditor5-utils/src/unicode.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/document.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/markercollection.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/liveposition.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/utils/insertcontent.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/utils/deletecontent.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/utils/modifyselection.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/utils/getselectedcontent.js","webpack://ClassicEditor/../ckeditor5-engine/src/model/model.js","webpack://ClassicEditor/../ckeditor5-utils/src/keystrokehandler.js","webpack://ClassicEditor/../ckeditor5-core/src/editingkeystrokehandler.js","webpack://ClassicEditor/../ckeditor5-core/src/editor/editor.js","webpack://ClassicEditor/../ckeditor5-core/src/editor/utils/dataapimixin.js","webpack://ClassicEditor/../ckeditor5-core/src/editor/utils/elementapimixin.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/setdatainelement.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/getdatafromelement.js","webpack://ClassicEditor/../ckeditor5-engine/src/dataprocessor/basichtmlwriter.js","webpack://ClassicEditor/../ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","webpack://ClassicEditor/../ckeditor5-ui/src/componentfactory.js","webpack://ClassicEditor/../ckeditor5-utils/src/focustracker.js","webpack://ClassicEditor/../ckeditor5-editor-classic/src/classiceditorui.js","webpack://ClassicEditor/../ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js","webpack://ClassicEditor/../ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus.js","webpack://ClassicEditor/../ckeditor5-ui/src/viewcollection.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/cloneDeepWith.js","webpack://ClassicEditor/../ckeditor5-ui/src/template.js","webpack://ClassicEditor/../ckeditor5-ui/src/view.js","webpack://ClassicEditor/../ckeditor5-ui/src/editorui/editoruiview.js","webpack://ClassicEditor/../ckeditor5-ui/src/label/labelview.js","webpack://ClassicEditor/../ckeditor5-ui/src/editorui/boxed/boxededitoruiview.js","webpack://ClassicEditor/../ckeditor5-ui/src/editableui/editableuiview.js","webpack://ClassicEditor/../ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/tounit.js","webpack://ClassicEditor/../ckeditor5-ui/src/panel/sticky/stickypanelview.js","webpack://ClassicEditor/../ckeditor5-ui/src/focuscycler.js","webpack://ClassicEditor/../ckeditor5-ui/src/toolbar/toolbarseparatorview.js","webpack://ClassicEditor/../ckeditor5-ui/src/toolbar/toolbarview.js","webpack://ClassicEditor/../ckeditor5-ui/src/bindings/preventdefault.js","webpack://ClassicEditor/../ckeditor5-editor-classic/src/classiceditoruiview.js","webpack://ClassicEditor/../ckeditor5-utils/src/elementreplacer.js","webpack://ClassicEditor/../ckeditor5-editor-classic/src/classiceditor.js","webpack://ClassicEditor/../ckeditor5-core/src/editor/utils/attachtoform.js","webpack://ClassicEditor/../ckeditor5-core/src/plugin.js","webpack://ClassicEditor/../ckeditor5-clipboard/src/datatransfer.js","webpack://ClassicEditor/../ckeditor5-clipboard/src/clipboardobserver.js","webpack://ClassicEditor/../ckeditor5-clipboard/src/utils/viewtoplaintext.js","webpack://ClassicEditor/../ckeditor5-clipboard/src/clipboard.js","webpack://ClassicEditor/../ckeditor5-clipboard/src/utils/plaintexttohtml.js","webpack://ClassicEditor/../ckeditor5-clipboard/src/utils/normalizeclipboarddata.js","webpack://ClassicEditor/../ckeditor5-core/src/command.js","webpack://ClassicEditor/../ckeditor5-enter/src/entercommand.js","webpack://ClassicEditor/../ckeditor5-enter/src/enterobserver.js","webpack://ClassicEditor/../ckeditor5-enter/src/enter.js","webpack://ClassicEditor/../ckeditor5-typing/src/changebuffer.js","webpack://ClassicEditor/../ckeditor5-typing/src/inputcommand.js","webpack://ClassicEditor/../ckeditor5-typing/src/input.js","webpack://ClassicEditor/../ckeditor5-utils/src/difftochanges.js","webpack://ClassicEditor/../ckeditor5-typing/src/deletecommand.js","webpack://ClassicEditor/../ckeditor5-typing/src/deleteobserver.js","webpack://ClassicEditor/../ckeditor5-typing/src/delete.js","webpack://ClassicEditor/../ckeditor5-typing/src/typing.js","webpack://ClassicEditor/../ckeditor5-undo/src/basecommand.js","webpack://ClassicEditor/../ckeditor5-undo/src/undocommand.js","webpack://ClassicEditor/../ckeditor5-undo/src/redocommand.js","webpack://ClassicEditor/../ckeditor5-undo/src/undoediting.js","webpack://ClassicEditor/../ckeditor5-ui/src/icon/iconview.js","webpack://ClassicEditor/../ckeditor5-ui/src/tooltip/tooltipview.js","webpack://ClassicEditor/../ckeditor5-ui/src/button/buttonview.js","webpack://ClassicEditor/../ckeditor5-undo/src/undoui.js","webpack://ClassicEditor/../ckeditor5-undo/src/undo.js","webpack://ClassicEditor/../ckeditor5-upload/src/filereader.js","webpack://ClassicEditor/../ckeditor5-upload/src/filerepository.js","webpack://ClassicEditor/../ckeditor5-adapter-ckfinder/src/utils.js","webpack://ClassicEditor/../ckeditor5-adapter-ckfinder/src/uploadadapter.js","webpack://ClassicEditor/../ckeditor5-autoformat/src/blockautoformatediting.js","webpack://ClassicEditor/../ckeditor5-autoformat/src/inlineautoformatediting.js","webpack://ClassicEditor/../ckeditor5-basic-styles/src/attributecommand.js","webpack://ClassicEditor/../ckeditor5-basic-styles/src/bold/boldediting.js","webpack://ClassicEditor/../ckeditor5-basic-styles/src/bold/boldui.js","webpack://ClassicEditor/../ckeditor5-basic-styles/src/italic/italicediting.js","webpack://ClassicEditor/../ckeditor5-basic-styles/src/italic/italicui.js","webpack://ClassicEditor/../ckeditor5-utils/src/first.js","webpack://ClassicEditor/../ckeditor5-block-quote/src/blockquotecommand.js","webpack://ClassicEditor/../ckeditor5-block-quote/src/blockquoteediting.js","webpack://ClassicEditor/../ckeditor5-block-quote/src/blockquoteui.js","webpack://ClassicEditor//Users/maciejbukowski/workspace/ckeditor5/node_modules/@ckeditor/ckeditor-cloudservices-core/src/uploadgateway/fileuploader.js","webpack://ClassicEditor//Users/maciejbukowski/workspace/ckeditor5/node_modules/@ckeditor/ckeditor-cloudservices-core/src/token/token.js","webpack://ClassicEditor/../ckeditor5-cloudservices/src/cloudservices.js","webpack://ClassicEditor/../ckeditor5-easy-image/src/cloudservicesuploadadapter.js","webpack://ClassicEditor/../ckeditor5-image/src/image/converters.js","webpack://ClassicEditor//Users/maciejbukowski/workspace/ckeditor5/node_modules/@ckeditor/ckeditor-cloudservices-core/src/uploadgateway/uploadgateway.js","webpack://ClassicEditor/../ckeditor5-widget/src/highlightstack.js","webpack://ClassicEditor/../ckeditor5-widget/src/utils.js","webpack://ClassicEditor/../ckeditor5-image/src/image/utils.js","webpack://ClassicEditor/../ckeditor5-image/src/image/imageediting.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/mouseobserver.js","webpack://ClassicEditor/../ckeditor5-widget/src/widget.js","webpack://ClassicEditor/../ckeditor5-image/src/imagetextalternative/imagetextalternativecommand.js","webpack://ClassicEditor/../ckeditor5-image/src/imagetextalternative/imagetextalternativeediting.js","webpack://ClassicEditor/../ckeditor5-ui/src/bindings/clickoutsidehandler.js","webpack://ClassicEditor/../ckeditor5-ui/src/labeledinput/labeledinputview.js","webpack://ClassicEditor/../ckeditor5-ui/src/inputtext/inputtextview.js","webpack://ClassicEditor/../ckeditor5-ui/src/bindings/submithandler.js","webpack://ClassicEditor/../ckeditor5-image/src/imagetextalternative/ui/textalternativeformview.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/position.js","webpack://ClassicEditor/../ckeditor5-utils/src/dom/getpositionedancestor.js","webpack://ClassicEditor/../ckeditor5-ui/src/panel/balloon/balloonpanelview.js","webpack://ClassicEditor/../ckeditor5-ui/src/panel/balloon/contextualballoon.js","webpack://ClassicEditor/../ckeditor5-image/src/image/ui/utils.js","webpack://ClassicEditor/../ckeditor5-image/src/imagetextalternative/imagetextalternativeui.js","webpack://ClassicEditor/../ckeditor5-image/src/imagetextalternative.js","webpack://ClassicEditor/../ckeditor5-image/src/image.js","webpack://ClassicEditor/../ckeditor5-upload/src/ui/filedialogbuttonview.js","webpack://ClassicEditor/../ckeditor5-image/src/imageupload/utils.js","webpack://ClassicEditor/../ckeditor5-image/src/imageupload/imageuploadui.js","webpack://ClassicEditor/../ckeditor5-image/src/imageupload/imageuploadprogress.js","webpack://ClassicEditor/../ckeditor5-image/src/imageupload/imageuploadcommand.js","webpack://ClassicEditor/../ckeditor5-ui/src/notification/notification.js","webpack://ClassicEditor/../ckeditor5-image/src/imageupload/imageuploadediting.js","webpack://ClassicEditor/../ckeditor5-image/src/imageupload.js","webpack://ClassicEditor/../ckeditor5-paragraph/src/paragraphcommand.js","webpack://ClassicEditor/../ckeditor5-paragraph/src/paragraph.js","webpack://ClassicEditor/../ckeditor5-heading/src/headingcommand.js","webpack://ClassicEditor/../ckeditor5-heading/src/headingediting.js","webpack://ClassicEditor/../ckeditor5-ui/src/model.js","webpack://ClassicEditor/../ckeditor5-ui/src/dropdown/dropdownpanelview.js","webpack://ClassicEditor/../ckeditor5-ui/src/dropdown/dropdownview.js","webpack://ClassicEditor/../ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js","webpack://ClassicEditor/../ckeditor5-ui/src/list/listview.js","webpack://ClassicEditor/../ckeditor5-ui/src/list/listitemview.js","webpack://ClassicEditor/../ckeditor5-ui/src/dropdown/utils.js","webpack://ClassicEditor/../ckeditor5-heading/src/headingui.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/placeholder.js","webpack://ClassicEditor/../ckeditor5-image/src/imagecaption/utils.js","webpack://ClassicEditor/../ckeditor5-image/src/imagecaption/imagecaptionediting.js","webpack://ClassicEditor/../ckeditor5-image/src/imagestyle/imagestylecommand.js","webpack://ClassicEditor/../ckeditor5-image/src/imagestyle/converters.js","webpack://ClassicEditor/../ckeditor5-image/src/imagestyle/utils.js","webpack://ClassicEditor/../ckeditor5-image/src/imagestyle/imagestyleediting.js","webpack://ClassicEditor/../ckeditor5-image/src/imagestyle/imagestyleui.js","webpack://ClassicEditor/../ckeditor5-image/src/imagetoolbar.js","webpack://ClassicEditor/../ckeditor5-link/src/findlinkrange.js","webpack://ClassicEditor/../ckeditor5-link/src/linkcommand.js","webpack://ClassicEditor/../ckeditor5-link/src/unlinkcommand.js","webpack://ClassicEditor/../ckeditor5-link/src/utils.js","webpack://ClassicEditor/../ckeditor5-engine/src/utils/bindtwostepcarettoattribute.js","webpack://ClassicEditor/../ckeditor5-link/src/linkediting.js","webpack://ClassicEditor/../ckeditor5-engine/src/view/observer/clickobserver.js","webpack://ClassicEditor/../ckeditor5-link/src/ui/linkformview.js","webpack://ClassicEditor/../ckeditor5-link/src/ui/linkactionsview.js","webpack://ClassicEditor/../ckeditor5-link/src/linkui.js","webpack://ClassicEditor/../ckeditor5-list/src/listcommand.js","webpack://ClassicEditor/../ckeditor5-list/src/indentcommand.js","webpack://ClassicEditor/../ckeditor5-list/src/utils.js","webpack://ClassicEditor/../ckeditor5-list/src/converters.js","webpack://ClassicEditor/../ckeditor5-list/src/listediting.js","webpack://ClassicEditor/../ckeditor5-list/src/listui.js","webpack://ClassicEditor/./src/ckeditor.js","webpack://ClassicEditor/../ckeditor5-essentials/src/essentials.js","webpack://ClassicEditor/../ckeditor5-autoformat/src/autoformat.js","webpack://ClassicEditor/../ckeditor5-basic-styles/src/bold.js","webpack://ClassicEditor/../ckeditor5-basic-styles/src/italic.js","webpack://ClassicEditor/../ckeditor5-block-quote/src/blockquote.js","webpack://ClassicEditor/../ckeditor5-easy-image/src/easyimage.js","webpack://ClassicEditor/../ckeditor5-heading/src/heading.js","webpack://ClassicEditor/../ckeditor5-image/src/imagecaption.js","webpack://ClassicEditor/../ckeditor5-image/src/imagestyle.js","webpack://ClassicEditor/../ckeditor5-link/src/link.js","webpack://ClassicEditor/../ckeditor5-list/src/list.js","webpack://ClassicEditor/../ckeditor5-link/theme/linkactions.css","webpack://ClassicEditor/../ckeditor5-link/theme/linkactions.css?8e1b","webpack://ClassicEditor/../ckeditor5-link/theme/linkform.css","webpack://ClassicEditor/../ckeditor5-link/theme/linkform.css?c9ea","webpack://ClassicEditor/../ckeditor5-image/theme/imagestyle.css","webpack://ClassicEditor/../ckeditor5-image/theme/imagestyle.css?5122","webpack://ClassicEditor/../ckeditor5-image/theme/imagecaption.css","webpack://ClassicEditor/../ckeditor5-image/theme/imagecaption.css?dadc","webpack://ClassicEditor/../ckeditor5-engine/theme/placeholder.css","webpack://ClassicEditor/../ckeditor5-engine/theme/placeholder.css?4e2e","webpack://ClassicEditor/../ckeditor5-heading/theme/heading.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/dropdown/listdropdown.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/dropdown/listdropdown.css?89e8","webpack://ClassicEditor/../ckeditor5-ui/theme/components/dropdown/toolbardropdown.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/dropdown/toolbardropdown.css?487a","webpack://ClassicEditor/../ckeditor5-ui/theme/components/list/list.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/list/list.css?7db3","webpack://ClassicEditor/../ckeditor5-ui/theme/components/dropdown/dropdown.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/dropdown/dropdown.css?14ca","webpack://ClassicEditor/../ckeditor5-image/theme/imageuploadprogress.css","webpack://ClassicEditor/../ckeditor5-image/theme/imageuploadprogress.css?66d0","webpack://ClassicEditor/../ckeditor5-image/theme/image.css","webpack://ClassicEditor/../ckeditor5-image/theme/image.css?2483","webpack://ClassicEditor/../ckeditor5-ui/theme/components/panel/balloonpanel.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/panel/balloonpanel.css?576b","webpack://ClassicEditor/../ckeditor5-image/theme/textalternativeform.css","webpack://ClassicEditor/../ckeditor5-image/theme/textalternativeform.css?4eb8","webpack://ClassicEditor/../ckeditor5-ui/theme/components/inputtext/inputtext.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/inputtext/inputtext.css?2b56","webpack://ClassicEditor/../ckeditor5-widget/theme/widget.css","webpack://ClassicEditor/../ckeditor5-widget/theme/widget.css?47ba","webpack://ClassicEditor/../ckeditor5-block-quote/theme/blockquote.css","webpack://ClassicEditor/../ckeditor5-block-quote/theme/blockquote.css?9a75","webpack://ClassicEditor/../ckeditor5-ui/theme/components/button/button.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/button/button.css?a7c4","webpack://ClassicEditor/../ckeditor5-ui/theme/components/tooltip/tooltip.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/tooltip/tooltip.css?7ef9","webpack://ClassicEditor/../ckeditor5-ui/theme/components/icon/icon.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/icon/icon.css?e2ba","webpack://ClassicEditor/../ckeditor5-editor-classic/theme/classiceditor.css","webpack://ClassicEditor/../ckeditor5-editor-classic/theme/classiceditor.css?9cf1","webpack://ClassicEditor/../ckeditor5-ui/theme/components/toolbar/toolbar.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/toolbar/toolbar.css?8919","webpack://ClassicEditor/../ckeditor5-ui/theme/components/panel/stickypanel.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/panel/stickypanel.css?0f47","webpack://ClassicEditor/../ckeditor5-ui/theme/components/label/label.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/label/label.css?b212","webpack://ClassicEditor/../ckeditor5-ui/theme/components/editorui/editorui.css","webpack://ClassicEditor/../ckeditor5-ui/theme/components/editorui/editorui.css?1d8a","webpack://ClassicEditor/./node_modules/style-loader/lib/urls.js","webpack://ClassicEditor/../ckeditor5-ui/theme/globals/globals.css","webpack://ClassicEditor/../ckeditor5-ui/theme/globals/globals.css?36e8","webpack://ClassicEditor/(webpack)/buildin/global.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/constant.js","webpack://ClassicEditor/../ckeditor5-utils/src/lib/lodash/isBuffer.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","stylesInDom","isOldIE","fn","memo","apply","this","arguments","memoize","document","all","atob","getElement","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","singleton","singletonCounter","stylesInsertedAtTop","fixUrls","addStylesToDom","styles","options","length","item","domStyle","id","refs","j","parts","push","addStyle","listToStyles","list","newStyles","base","part","css","media","sourceMap","insertStyleElement","style","insertInto","Error","lastStyleElementInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","before","removeStyleElement","parentNode","removeChild","idx","indexOf","splice","createStyleElement","createElement","attrs","type","addAttrs","el","keys","forEach","key","setAttribute","obj","update","remove","result","transform","styleIndex","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","link","rel","createLinkElement","autoFixUrls","undefined","convertToAbsoluteUrls","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","href","styleSheet","cssText","createTextNode","newObj","DEBUG","newList","mayRemove","replaceText","textStore","index","replacement","filter","Boolean","join","cssNode","childNodes","objectTypes","function","freeExports","nodeType","freeModule","freeGlobal","_checkGlobal__WEBPACK_IMPORTED_MODULE_0__","global","freeSelf","self","freeWindow","thisGlobal","Function","__webpack_exports__","content","hmr","locals","originalModule","webpackPolyfill","create","children","nativeGetPrototype","getPrototypeOf","_getPrototype","_isHostObject","toString","lodash_isObjectLike","objectTag","objectProto","funcToString","isPlainObject_hasOwnProperty","objectCtorString","objectToString","lodash_isPlainObject","proto","Ctor","constructor","config_Config","[object Object]","configurations","defaultConfigurations","_config","_setObjectToTarget","_setToTarget","_getFromSource","isDefine","split","pop","source","configuration","DOCUMENTATION_URL","CKEditorError","message","data","attachLinkToDocumentation","super","error","matchedErrorName","match","src_spy","spy","called","eventinfo_EventInfo","path","stop","off","uid","uuid","Math","floor","random","substring","src_priorities","priority","normal","highest","high","low","lowest","_listeningTo","Symbol","_emitterId","event","callback","listenTo","args","stopListening","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","_setEmitterId","emitterId","callbacks","eventName","events","getEvents","childEventName","newEventNodes","childEvents","substr","lastIndexOf","node","slice","createEventNamespace","lists","getCallbacksListsForNamespace","callbackDefinition","added","removeCallback","eventOrInfo","eventInfo","getCallbacksForEvent","_events","callbackArgs","Array","from","_delegations","destinations","passAllDestinations","fireDelegatedEvents","return","to","nameOrFunction","Map","set","delete","clear","eventNode","callbacksLists","childCallbacksLists","concat","fireArgs","delegatedInfo","fire","mix","baseClass","mixins","mixin","getOwnPropertyNames","getOwnPropertySymbols","sourceDescriptor","getOwnPropertyDescriptor","_listCacheClear","__data__","lodash_eq","other","_assocIndexOf","array","_listCacheDelete","_listCacheGet","_listCacheHas","_listCacheSet","ListCache","entries","entry","has","_ListCache","_stackClear","_stackDelete","_stackGet","_stackHas","lodash_isObject","funcTag","genTag","isFunction_objectToString","lodash_isFunction","tag","_toSource_funcToString","_toSource","func","reIsHostCtor","isNative_objectProto","isNative_funcToString","isNative_hasOwnProperty","reIsNative","RegExp","replace","lodash_isNative","test","_getNative","_nativeCreate","_hashClear","_hashDelete","HASH_UNDEFINED","_hashGet_hasOwnProperty","_hashGet","_hashHas_hasOwnProperty","_hashHas","_hashSet_HASH_UNDEFINED","_hashSet","Hash","_Hash","_Map","_root","_mapCacheClear","hash","map","string","_isKeyable","_getMapData","_mapCacheDelete","_mapCacheGet","_mapCacheHas","_mapCacheSet","MapCache","_MapCache","LARGE_ARRAY_SIZE","_stackSet","cache","Stack","_Stack","_arrayEach","iteratee","_assignValue_hasOwnProperty","_assignValue","objValue","_copyObject","props","customizer","newValue","_baseHas_hasOwnProperty","_baseHas","nativeKeys","_baseKeys","_baseTimes","_baseProperty","_getLength","MAX_SAFE_INTEGER","lodash_isLength","lodash_isArrayLike","lodash_isArrayLikeObject","argsTag","isArguments_objectProto","isArguments_hasOwnProperty","isArguments_objectToString","propertyIsEnumerable","lodash_isArguments","lodash_isArray","isArray","stringTag","isString_objectToString","lodash_isString","_indexKeys","String","_isIndex_MAX_SAFE_INTEGER","reIsUint","_isIndex","_isPrototype_objectProto","_isPrototype","lodash_keys","isProto","indexes","skipIndexes","_baseAssign","_cloneBuffer","buffer","isDeep","copy","_copyArray","getSymbols","_getSymbols","_copySymbols","_arrayPush","values","offset","_baseGetAllKeys","keysFunc","symbolsFunc","_getAllKeys","_DataView","_Promise","_Set","_WeakMap","_getTag_objectToString","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","resolve","ctorString","_getTag","_initCloneArray_hasOwnProperty","_initCloneArray","input","_Uint8Array","Uint8Array","_cloneArrayBuffer","arrayBuffer","byteLength","_cloneDataView","dataView","byteOffset","_addMapEntry","pair","_arrayReduce","accumulator","initAccum","_mapToArray","size","_cloneMap","cloneFunc","reFlags","_cloneRegExp","regexp","exec","lastIndex","_addSetEntry","add","_setToArray","_cloneSet","_Symbol","symbolProto","symbolValueOf","valueOf","_cloneSymbol","symbol","_cloneTypedArray","typedArray","boolTag","dateTag","_initCloneByTag_mapTag","numberTag","regexpTag","_initCloneByTag_setTag","_initCloneByTag_stringTag","symbolTag","arrayBufferTag","_initCloneByTag_dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","_initCloneByTag","objectCreate","_baseCreate","_initCloneObject","_baseClone_argsTag","_baseClone_funcTag","_baseClone_genTag","_baseClone_objectTag","cloneableTags","_baseClone","baseClone","isFull","stack","isArr","isFunc","isBuffer","stacked","subValue","lodash_clone","node_Node","parent","pos","getChildIndex","getChild","previousSibling","includeSelf","parentFirst","ancestors","ancestorsA","getAncestors","ancestorsB","removeChildren","_fireChange","json","emittermixin","text_Text","_data","otherNode","textproxy_TextProxy","textNode","offsetInText","offsetSize","isPartial","objectToMap","isIterable","iterator","Matcher","pattern","_patterns","class","element","singleElement","isElementMatching","results","matchName","attribute","patterns","hasAttribute","getAttribute","matchAttributes","classes","getClassNames","hasClass","matchClasses","hasStyle","getStyle","matchStyles","element_Element","_attrs","parseAttributes","_children","insertChildren","_classes","Set","classString","parseClasses","_styles","parseInlineStyles","_customProperties","childCount","isEmpty","deep","childrenClone","child","getChildren","clone","cloned","getFillerOffset","items","styleString","count","nodes","normalize","howMany","otherElement","className","matcher","sort","attributes","stylesMap","stylesString","quoteType","propertyNameStart","propertyValueStart","propertyName","charAt","char","propertyValue","trim","classesSet","classesString","classArray","ContainerElement","is","_isIterateeCall","_apply","thisArg","isSymbol_symbolTag","isSymbol_objectToString","lodash_isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","lodash_toNumber","isBinary","INFINITY","MAX_INTEGER","lodash_toFinite","lodash_toInteger","remainder","FUNC_ERROR_TEXT","nativeMax","max","lodash_rest","start","TypeError","otherArgs","_createAssigner","assigner","sources","guard","_Reflect","Reflect","_iteratorToArray","next","done","_baseKeysIn_objectProto","enumerate","_baseKeysIn_propertyIsEnumerable","baseKeysIn","_baseKeysIn","keysIn_hasOwnProperty","lodash_keysIn","propsLength","nonEnumShadows","lodash_assignIn","observablePropertiesSymbol","boundObservablesSymbol","boundPropertiesSymbol","ObservableMixin","initObservable","properties","oldValue","bindProperties","isStringArray","boundProperties","bindings","a","binding","bindTo","toMany","bindToMany","_observable","_bindProperties","_to","_bindings","unbindProperties","boundObservables","toObservable","toProperty","toProperties","toPropertyBindings","boundObservable","methodName","originalMethod","on","evt","observablemixin","observable","parsedArgs","parsed","lastObservable","parseBindToArgs","bindingsKeys","numberOfBindings","updateBoundObservableProperty","chain","toPropertyName","bindingsToObservable","updateBoundObservables","updateBindToBound","observables","observableAndAttributePairs","getBindingTargets","arr","every","documentSymbol","editableelement_EditableElement","getCustomProperty","_document","_setCustomProperty","isFocused","selection","editableElement","rootNameSymbol","RootEditableElement","rootName","_name","treewalker_TreeWalker","boundaries","startPosition","direction","position","position_Position","createFromPosition","singleCharacters","shallow","ignoreElementEnd","_boundaryStartParent","_boundaryEndParent","end","skip","prevPosition","_next","_previous","previousPosition","isAtEnd","createAfter","_formatReturnValue","charactersCount","textLength","textProxy","isAtStart","createBefore","startOffset","nextPosition","isEqual","compareArrays","b","minLen","min","nodeAfter","nodeBefore","endOffset","editable","shift","shifted","treeWalker","otherPosition","compareWith","otherPath","commonAncestorIndex","commonAncestor","nextAncestor1","nextAncestor2","itemOrPosition","range_Range","isCollapsed","isFlat","getLastMatchingPosition","enlargeTrimSkip","isAfter","nodeAfterStart","nodeBeforeEnd","otherRange","isBefore","loose","containsStart","containsPosition","containsEnd","ranges","isIntersecting","createFromRange","commonRangeStart","commonRangeEnd","getCommonAncestor","startElement","endElement","range","getShiftedBy","createFromParentsAndOffsets","createFromPositionAndShift","createAt","count_count","_","selection_Selection","selectable","backwardSelectionOrOffset","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","_setTo","isFake","fakeSelectionLabel","anchor","focus","rangeCount","isBackward","first","last","firstRange","getFirstRange","lastRange","getLastRange","otherSelection","thisRange","found","numOfRangesA","getRanges","rangeA","getTrimmed","rangeB","_removeAllRanges","_setRanges","createCollapsedAt","newRanges","isLastBackward","_addRange","newFocus","label","_pushRange","storedRange","addedRange","intersectingRange","collection_Collection","_items","_itemMap","_idProperty","idProperty","_bindToExternalToInternalMap","WeakMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","itemId","idOrIndex","idOrItem","subject","itemDoesNotExist","externalItem","ctx","find","_bindToCollection","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","addItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","getIndex","reduce","document_Document","roots","_postFixers","postFixer","writer","wasFixed","DEFAULT_PRIORITY","AttributeElement","_priority","attributeelement_getFillerOffset","isSimilar","nonUiChildrenCount","emptyelement_EmptyElement","emptyelement_getFillerOffset","src_env","isMac","userAgent","navigator","toLowerCase","macGlyphsToModifiers","⌘","⇧","⌥","modifiersToMacGlyphs","ctrl","alt","keyCodes","arrowleft","arrowup","arrowright","arrowdown","backspace","enter","space","esc","tab","cmd","code","letter","fromCharCode","generateKnownKeyCodes","getCode","keyCode","altKey","ctrlKey","shiftKey","parseKeystroke","keystroke","splitKeystrokeText","sum","uielement_UIElement","uielement_getFillerOffset","domDocument","toDomElement","domElement","getAttributeKeys","injectUiElementHandling","view","domConverter","domSelection","domTarget","ownerDocument","defaultView","getSelection","domSelectionCollapsed","getRangeAt","collapsed","domParent","focusNode","domOffset","focusOffset","viewPosition","domPositionToView","jumpedOverAnyUiElement","nextViewPosition","newDomPosition","viewPositionToDom","collapse","extend","jumpOverUiElement","documentfragment_DocumentFragment","documentfragment_normalize","writer_Writer","_setFocus","_setFake","attributeElement","renderFunction","uiElement","render","_setAttribute","_removeAttribute","_addClass","_removeClass","_setStyle","_removeStyle","_removeCustomProperty","positionOrRange","_breakAttributes","_breakAttributesRange","newElement","insert","sourceRange","targetPosition","move","positionOffset","positionParent","mergeAttributes","mergeTextNodes","appendChildren","prev","lastChild","newPosition","createIn","createOn","validateNodesToInsert","validNodesToInsert","some","validNode","container","getParentContainer","insertionPosition","endPosition","validateRangeContainer","breakStart","breakEnd","parentContainer","removed","mergePosition","walker","getWalker","current","rangeToRemove","parentElement","ancestor","countBefore","_wrapPosition","viewSelection","getFirstPosition","setSelection","_wrapRange","_unwrapAttributeElement","newRange","_unwrapChildren","viewElement","newName","getAttributes","wrapPositions","isText","isAttribute","isUI","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","unwrapPositions","unwrapped","rangeSpansOnAllChildren","_wrapAttributeElement","unwrappedRange","movePositionToTextNode","breakTextNode","fakePosition","createAttributeElement","Number","POSITIVE_INFINITY","wrapRange","wrap","wrapper","toWrap","getStyleNames","setStyle","addClass","toUnwrap","removeAttribute","removeClass","removeStyle","isContainerOrFragment","forceSplitText","rangeStart","rangeEnd","offsetAfter","clonedNode","nodesToMove","getIdentity","textToMove","t1","t2","nodeBeforeLength","startContainer","endContainer","BR_FILLER","fillerBr","dataset","ckeFiller","NBSP_FILLER","INLINE_FILLER_LENGTH","INLINE_FILLER","startsWithFiller","domNode","Text","isInlineFiller","domText","getDataWithoutFiller","templateBlockFillers","isBlockFiller","blockFiller","templateBlockFiller","isEqualNode","jumpOverInlineFiller","diff_diff","cmp","_insert","_delete","tmp","delta","es","fp","snake","k","y1","y2","dir","y","x","insertat_insertAt","nodeToInsert","remove_remove","istext_isText","renderer_Renderer","domDocuments","markedAttributes","markedChildren","markedTexts","_inlineFiller","_fakeSelectionContainer","mapViewToDom","inlineFillerPosition","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","_updateText","_updateAttrs","_updateChildren","fillerDomPosition","_addInlineFiller","_updateSelection","_updateFocus","domParentOrArray","nodeAfterFiller","fillerNode","firstPos","selectionPosition","domFillerNode","selectionParent","selectionOffset","findAncestor","_isEditable","viewText","findCorrespondingDomText","newDomText","viewToDom","actualText","expectedText","filler","domAttrKeys","attr","viewAttrKeys","actualDomChildren","expectedDomChildren","viewChildrenToDom","actions","actualDomChild","expectedDomChild","nodesToUnbind","action","unbindDomElement","_removeDomSelection","_removeFakeSelection","domRoot","_updateFakeSelection","_updateDomSelection","assign","top","left","width","domRange","createRange","removeAllRanges","selectNodeContents","addRange","bindFakeSelection","_domSelectionNeedsUpdate","isDomSelectionCorrect","oldViewSelection","domSelectionToView","doc","activeDomElement","activeElement","mapDomToView","indexof_indexOf","Node","DOCUMENT_NODE","unshift","domconverter_DomConverter","preElements","blockElements","_domToViewMapping","_viewToDomMapping","_fakeSelectionMapping","domFragment","viewFragment","viewNode","textData","_processDataFromViewText","createDocumentFragment","bindDocumentFragments","bindElements","withChildren","fillerPositionOffset","childView","viewRange","domStart","domEnd","setStart","setEnd","viewParent","domBefore","domAfter","getParentUIElement","_processDataFromDomText","isComment","isDocumentFragment","viewName","keepOriginalCase","tagName","domChildrenToView","domChild","viewChild","domToView","fakeSelectionToView","isDomSelectionBackward","viewRanges","domRangeToView","viewStart","viewEnd","findCorrespondingViewText","viewBefore","domElementOrDocumentFragment","isElement","documentFragmentOrElement","viewEditable","domEditable","scrollX","scrollY","scrollPositions","forEachDomNodeAncestor","scrollLeft","scrollTop","scrollTo","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","anchorNode","anchorOffset","backward","detach","_isDomSelectionPositionCorrect","includes","prevNode","_getTouchingViewTextNode","_nodeEndsWithSpace","_hasDomParentOfType","_getTouchingDomTextNode","nextNode","getNext","topmostParent","createTreeWalker","NodeFilter","SHOW_TEXT","currentNode","touchingNode","lca","nodeA","nodeB","types","boundaryParent","parents","isNode","Document","isWindow","dom_emittermixin","rest","proxy","_getProxyEmitter","emittermixin_ProxyEmitter","attach","listeningEmitter","listenedToEmitterId","getNodeUID","_domNode","_domListeners","domListener","_createDomListener","useCapture","addEventListener","removeListener","domEvt","removeEventListener","Observer","isEnabled","disable","_setCacheAdd_HASH_UNDEFINED","_setCacheAdd","_setCacheHas","SetCache","_SetCache","_arraySome","predicate","UNORDERED_COMPARE_FLAG","PARTIAL_COMPARE_FLAG","_equalArrays","equalFunc","bitmask","arrLength","othLength","seen","arrValue","othValue","compared","othIndex","_equalByTag_UNORDERED_COMPARE_FLAG","_equalByTag_PARTIAL_COMPARE_FLAG","_equalByTag_boolTag","_equalByTag_dateTag","_equalByTag_errorTag","_equalByTag_mapTag","_equalByTag_numberTag","_equalByTag_regexpTag","_equalByTag_setTag","_equalByTag_stringTag","_equalByTag_symbolTag","_equalByTag_arrayBufferTag","_equalByTag_dataViewTag","_equalByTag_symbolProto","_equalByTag_symbolValueOf","_equalByTag","convert","_equalObjects_PARTIAL_COMPARE_FLAG","_equalObjects","objProps","objLength","skipCtor","objCtor","othCtor","typedArrayTags","isTypedArray_objectToString","lodash_isTypedArray","_baseIsEqualDeep_PARTIAL_COMPARE_FLAG","_baseIsEqualDeep_argsTag","_baseIsEqualDeep_arrayTag","_baseIsEqualDeep_objectTag","_baseIsEqualDeep_hasOwnProperty","_baseIsEqualDeep","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","_baseIsEqual","baseIsEqual","lodash_isEqualWith","mutationobserver_MutationObserver","childList","characterData","characterDataOldValue","subtree","renderer","_renderer","_domElements","_mutationObserver","MutationObserver","_onMutations","takeRecords","observe","enable","disconnect","destroy","domMutations","mutatedTexts","mutatedElements","mutation","_isBogusBrMutation","text","oldText","newText","viewMutations","mutatedText","markToSync","viewChildren","newViewChildren","sameNodes","oldChildren","newChildren","viewSelectionAnchor","viewSelectionFocus","child1","child2","addedNode","removedNodes","addedNodes","domeventdata_DomEventData","domEvent","additionalData","preventDefault","stopPropagation","domeventobserver_DomEventObserver","domEventType","onDomEvent","eventType","keyobserver_KeyObserver","metaKey","lodash_now","Date","now","debounce_FUNC_ERROR_TEXT","debounce_nativeMax","nativeMin","lodash_debounce","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","remainingWait","clearTimeout","debounced","isInvoking","leadingEdge","cancel","flush","fakeselectionobserver_FakeSelectionObserver","_fireSelectionChangeDoneDebounced","_handleSelectionMove","newSelection","getLastPosition","oldSelection","src_log","console","warn","selectionobserver_SelectionObserver","mutationObserver","getObserver","_documents","WeakSet","_clearInfiniteLoopInterval","setInterval","_clearInfiniteLoop","_loopbackCounter","_handleSelectionChange","clearInterval","isReadOnly","newViewSelection","FocusObserver","_renderTimeoutId","selectedEditable","CompositionObserver","isComposing","isRange","lodash_isElement","getBorderWidths","getComputedStyle","borderTopWidth","right","borderRightWidth","bottom","borderBottomWidth","borderLeftWidth","rect_Rect","isSourceRange","_source","writable","sourceNode","body","contains","copyRectProperties","getDomRangeRects","getBoundingClientRect","innerWidth","innerHeight","height","anotherRect","rect","getIntersection","getArea","visibleRect","isBody","commonAncestorContainer","parentRect","intersectionRect","prop","rectProperties","intersectRect","scrollBarWidth","scrollBarHeight","documentElement","clientWidth","clientHeight","borderWidths","offsetWidth","offsetHeight","moveBy","rects","clientRects","getClientRects","elementOrRange","scrollViewportToShowTarget","viewportOffset","targetWindow","getWindow","currentWindow","currentFrame","firstAncestorToScroll","scrollAncestorsToShowRect","getParentElement","getRectRelativeToWindow","targetRect","scrollWindowToShowRect","frameElement","targetShiftedDownRect","targetShiftedUpRect","viewportRect","excludeScrollbarsAndBorders","isAbove","isBelow","isLeftOf","isRightOf","getRect","parentWindow","firstRect","secondRect","relativeWindow","frame","frameRect","scrollAncestorsToShowTarget","view_View","domRoots","_observers","_ongoingChange","_renderingInProgress","_postFixersInProgress","_writer","addObserver","_render","viewRoot","getRoot","observer","viewRangeToDom","_callPostFixers","change","disableObservers","enableObservers","toMap","model_node_Node","getChildStartOffset","model_text_Text","toJSON","model_textproxy_TextProxy","getPath","nodelist_NodeList","_nodes","insertNodes","maxOffset","getNodeIndex","getNodeStartOffset","totalOffset","indexStart","model_element_Element","getNode","offsetToIndex","element_normalize","removeNodes","relativePath","fromJSON","model_treewalker_TreeWalker","model_position_Position","_visitedParent","prevVisitedParent","formatReturnValue","offsetInTextNode","lodash_last","newOffset","diffAt","leftParent","deletePosition","transformed","getParentPath","insertPosition","sourcePosition","sticky","_getTransformedByDeletion","_getCombined","_getTransformedByInsertion","combined","createFromParentAndOffset","graveyard","model_range_Range","getCommonPath","posParent","supportedTypes","operation","operations","_getTransformedByDocumentChange","deltas","getTransformedByDelta","containsRange","deltaType","_getTransformedByMove","spread","isSticky","insertBeforeStart","insertBeforeEnd","newPos","moveRange","differenceSet","getDifference","difference","common","ref","refIndex","mapper_Mapper","_modelToViewMapping","_viewToModelMapping","_viewToModelLengthCallbacks","viewContainer","modelPosition","_findPositionIn","viewBlock","modelParent","modelOffset","_toModelOffset","modelElement","toModelElement","toViewElement","toModelPosition","modelRange","toViewPosition","mapper","isPhantom","viewElementName","lengthCallback","viewOffset","getModelLength","len","expectedOffset","lastLength","_moveViewPositionToTextNode","modelconsumable_ModelConsumable","_consumable","_textProxyRegistry","_normalizeConsumableType","_getSymbolForTextProxy","itemConsumables","startMap","endMap","_addSymbolForTextProxy","downcastdispatcher_DowncastDispatcher","conversionApi","dispatcher","differ","getChanges","convertInsert","convertRemove","convertAttribute","attributeKey","attributeOldValue","attributeNewValue","getMarkersToAdd","convertMarkerAdd","consumable","_createInsertConsumable","_testAndFire","_clearConversionApi","_createConsumableForRange","markers","markersAtSelection","getMarkersAtPosition","_createSelectionConsumable","marker","markerRange","getRange","shouldMarkerChangeBeConverted","markerName","getItems","reverse","containsItem","model_selection_Selection","setTo","_selection","anyNewRange","oldRange","directChange","_popRange","attributeKeys","visited","startBlock","getParentBlock","isUnvisitedBlockContainer","endBlock","isTouching","limitStartPosition","limitEndPosition","_checkRange","model","schema","isBlock","block","LiveRange","isDocumentOperation","changeType","batch","targetRange","getMovedRangeStart","updated","createFromRanges","boundariesChanged","rangeExpanded","rangeShrunk","contentChanged","attrOpTypes","storePrefix","DocumentSelection","documentselection_LiveSelection","delegate","hasOwnRange","isGravityOverridden","getSelectedBlocks","getSelectedElement","containsEntireContent","setFocus","_getStoredAttributes","customRestore","overrideGravity","restoreGravity","startsWith","_model","_attributePriority","_fixGraveyardRangesData","_hasChangedRange","_overriddenGravityCounter","_validateSelectionRange","_updateAttributes","changeParent","enqueueChange","storedAttributes","clearAttributesStoredInElement","liveRange","_fixGraveyardSelection","_getDefaultRange","_refreshAttributes","_prepareRange","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","_setAttributesTo","changed","newKey","oldKey","getAttrsIfCharacter","isObject","removedRangeStart","positionCandidate","selectionRange","getNearestSelectionRange","lodash_cloneDeep","downcastElementToElement","config","_normalizeToElementConfig","elementCreator","consume","downcastAttributeToElement","modelKey","modelValue","_getFromAttributeCreator","oldViewElement","newViewElement","viewWriter","toViewRange","unwrap","downcastAttributeToAttribute","_normalizeToAttributeConfig","attributeCreator","oldAttribute","viewElementType","modelData","viewElementDefinition","createContainerElement","createUIElement","_createViewElementFromDefinition","modelAttributeValue","editingcontroller_EditingController","downcastDispatcher","convertChanges","convertSelection","modelSelection","toModelRange","convertSelectionChange","createText","modelEnd","unbindViewElement","setFakeSelection","brokenPosition","breakAttributes","removedMarkers","_operationAffectsMarker","convertMarkerRemove","bufferMarkerChange","_positionAffectsRange","plugincollection_PluginCollection","editor","availablePlugins","_editor","_availablePlugins","_plugins","PluginConstructor","pluginName","plugins","removePlugins","that","loading","loaded","pluginConstructors","mapToAvailableConstructors","removePluginConstructors","missingPlugins","pluginNameOrConstructor","getPluginConstructor","getMissingPluginNames","errorMsg","Promise","reject","loadPlugin","then","requires","RequiredPluginConstructorOrName","RequiredPluginConstructor","plugin","requiredBy","_add","instantiatePlugin","catch","err","PluginConstructorOrName","promises","pluginInstance","plugin1","plugin2","commandcollection_CommandCollection","_commands","commandName","command","execute","commands","dictionaries","translate","lang","translationKey","numberOfLanguages","hasTranslation","CKEDITOR_TRANSLATIONS","translations","locale_Locale","language","t","_t","str","translatedString","ViewConsumable","_consumables","consumables","elementConsumables","viewconsumable_ViewElementConsumables","revert","instance","consumablesFromElement","createFrom","_canConsumeName","_test","_consume","_revert","schema_Schema","_sourceDefinitions","decorate","SchemaContext","getDefinition","itemName","definition","_clearCache","_compiledDefinitions","_compile","getDefinitions","def","isLimit","context","_checkContextMatch","attributeName","allowAttributes","positionOrBaseElement","elementToMerge","checkMerge","checkChild","childDef","retValue","rangeCommonAncestor","checkAttribute","validRanges","backwardWalker","forwardWalker","forward","step","combineWalkers","removeDisallowedAttributes","compiledDefinitions","sourceRules","itemNames","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","contextItem","getItem","allowIn","parentRule","mapContextItem","query","getNames","endsWith","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","inheritTypesFrom","sourceItemRule","typeNames","copyTypes","copyProperty","inheritFrom","inheritAllFrom","makeInheritAllWork","allowContentOfItemName","getAllowedChildren","allowedItem","allowWhereItemName","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","existingItems","itemToCheck","ctxItem","upcastdispatcher_UpcastDispatcher","_removeIfEmpty","_modelCursor","convertItem","_convertItem","convertChildren","_convertChildren","splitToAllowedParent","_splitToAllowedParent","viewItem","contextDefinition","append","createContextTree","store","documentFragment","_removeEmptyElements","modelItem","markerElements","markerElement","currentPosition","extractMarkersFromModelFragment","modelCursor","nextModelCursor","allowedParent","findAllowedParent","splitResult","getPositions","cursorParent","upcastElementToElement","converter","childrenResult","_prepareToElementConverter","elementName","_getViewElementNameFromConfig","upcastElementToAttribute","_normalizeModelAttributeConfig","_prepareToAttributeConverter","upcastAttributeToAttribute","viewKey","normalized","_normalizeViewAttributeKeyValueConfig","viewAttributeKeyToCopy","defaultModelValue","consumeName","modelAttribute","_setAttributeOn","datacontroller_DataController","dataProcessor","processor","upcastDispatcher","modelElementOrFragment","viewDocumentFragment","toView","toData","elementRange","intersection","_getMarkersRelativeToElement","clearBindings","modelRoot","removeSelectionAttribute","parse","toModel","viewElementOrFragment","conversion_Conversion","_dispatchersGroups","groupName","dispatchers","_getDispatchers","conversionHelper","_addToDispatchers","for","_getAllUpcastDefinitions","_getUpcastDefinition","upcastAlso","upcastAlsoItem","operation_Operation","baseVersion","__className","model_documentfragment_DocumentFragment","model_documentfragment_normalize","_normalizeNodes","_splitNodeAtPosition","_mergeNodesAtIndex","_remove","_haveSameAttributes","mergedNode","offsetDiff","firstPart","secondPart","iteratorA","iteratorB","lodash_isEqual","attributeoperation_AttributeOperation","moveoperation_MoveOperation","op","newTargetPosition","sourceElement","targetElement","sourceOffset","targetOffset","_move","reinsertoperation_ReinsertOperation","removeoperation_RemoveOperation","_validate","insertoperation_InsertOperation","gyPosition","originalNodes","markeroperation_MarkerOperation","_markers","NoOperation","renameoperation_RenameOperation","oldName","rootattributeoperation_RootAttributeOperation","operationfactory_operations","OperationFactory","deserializers","deltafactory_DeltaFactory","addOperation","Delta","delta_Delta","_reverseDeltaClass","getReversed","register","attributedelta_AttributeDelta","_range","splitdelta_SplitDelta","_moveOperation","_cloneOperation","mergedelta_MergeDelta","_removeOperation","MoveDelta","RemoveDelta","RenameDelta","wrapdelta_WrapDelta","moveOp","_insertOperation","unwrapdelta_UnwrapDelta","insertdelta_InsertDelta","WeakInsertDelta","isStrong","group","algorithm","ot","InsertOperation","AttributeOperation","RootAttributeOperation","RenameOperation","MarkerOperation","MoveOperation","doNotUpdate","updateBaseVersions","forceNotSticky","joinRanges","oldRanges","includeB","moveTargetIntoMovedRange","bTargetsToA","makeMoveOperationsFromRanges","aCompB","forceWeakRemove","shouldSpread","makeMoveOperation","OperationClass","_baseSlice","nativeCeil","ceil","chunk_nativeMax","lodash_chunk","resIndex","lodash_compact","_isFlattenable","_baseFlatten","baseFlatten","depth","isStrict","lodash_concat","_indexOfNaN","fromIndex","fromRight","_baseIndexOf","_arrayIncludes","_arrayIncludesWith","comparator","_arrayMap","_baseUnary","_cacheHas","_baseDifference_LARGE_ARRAY_SIZE","_baseDifference","isCommon","valuesLength","outer","computed","valuesIndex","lodash_difference","_baseIsMatch_UNORDERED_COMPARE_FLAG","_baseIsMatch_PARTIAL_COMPARE_FLAG","_baseIsMatch","matchData","noCustomizer","srcValue","_isStrictComparable","_baseToPairs","_setToPairs","_createToPairs_mapTag","_createToPairs_setTag","lodash_toPairs","_createToPairs","_getMatchData","_matchesStrictComparable","_baseMatches","memoize_FUNC_ERROR_TEXT","resolver","memoized","Cache","lodash_memoize","_baseToString_INFINITY","_baseToString_symbolProto","symbolToString","_baseToString","lodash_toString","rePropName","reEscapeChar","_stringToPath","number","quote","_castPath","reIsDeepProp","reIsPlainProp","_isKey","_toKey_INFINITY","_toKey","_baseGet","lodash_get","defaultValue","_baseHasIn","_hasPath","hasFunc","lodash_hasIn","_baseMatchesProperty_UNORDERED_COMPARE_FLAG","_baseMatchesProperty_PARTIAL_COMPARE_FLAG","_baseMatchesProperty","lodash_identity","_basePropertyDeep","lodash_property","_baseIteratee","lodash_differenceBy","lodash_differenceWith","lodash_drop","lodash_dropRight","_baseWhile","isDrop","lodash_dropRightWhile","lodash_dropWhile","_baseClamp","lower","upper","MAX_ARRAY_LENGTH","lodash_toLength","_baseFill","lodash_fill","_baseFindIndex","lodash_findIndex","lodash_findLastIndex","lodash_head","lodash_flatten","flattenDeep_INFINITY","lodash_flattenDeep","lodash_flattenDepth","lodash_fromPairs","pairs","indexOf_nativeMax","lodash_indexOf","lodash_initial","_baseIntersection_nativeMin","_baseIntersection","arrays","caches","maxLength","Infinity","_castArrayLikeObject","lodash_intersection","mapped","lodash_intersectionBy","lodash_intersectionWith","nativeJoin","lodash_join","separator","lastIndexOf_nativeMax","lastIndexOf_nativeMin","lodash_lastIndexOf","_baseNth","lodash_nth","_baseIndexOfWith","_basePullAll_splice","_basePullAll","lodash_pullAll","lodash_pull","lodash_pullAllBy","lodash_pullAllWith","_baseAt","paths","isNil","_parent","_basePullAt_splice","_basePullAt","previous","_compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","lodash_pullAt","lodash_remove","nativeReverse","lodash_reverse","lodash_slice","MAX_ARRAY_INDEX","_baseSortedIndexBy_MAX_ARRAY_LENGTH","nativeFloor","_baseSortedIndexBy_nativeMin","_baseSortedIndexBy","retHighest","valIsNaN","valIsUndefined","mid","setLow","HALF_MAX_ARRAY_LENGTH","_baseSortedIndex_MAX_ARRAY_LENGTH","_baseSortedIndex","lodash_sortedIndex","lodash_sortedIndexBy","lodash_sortedIndexOf","lodash_sortedLastIndex","lodash_sortedLastIndexBy","lodash_sortedLastIndexOf","_baseSortedUniq","lodash_sortedUniq","lodash_sortedUniqBy","lodash_tail","lodash_take","lodash_takeRight","lodash_takeRightWhile","lodash_takeWhile","lodash_noop","_createSet","_baseUniq_LARGE_ARRAY_SIZE","_baseUniq","seenIndex","lodash_union","lodash_unionBy","lodash_unionWith","lodash_uniq","lodash_uniqBy","lodash_uniqWith","_arrayFilter","unzip_nativeMax","lodash_unzip","lodash_unzipWith","lodash_without","_baseXor","lodash_xor","lodash_xorBy","lodash_xorWith","lodash_zip","_baseZipObject","assignFunc","valsLength","lodash_zipObject","_baseSet","nested","lodash_zipObjectDeep","zipWith","array_default","chunk","compact","differenceBy","differenceWith","drop","dropRight","dropRightWhile","dropWhile","fill","findIndex","findLastIndex","flatten","flattenDeep","flattenDepth","fromPairs","initial","intersectionBy","intersectionWith","nth","pull","pullAll","pullAllBy","pullAllWith","pullAt","sortedIndex","sortedIndexBy","sortedIndexOf","sortedLastIndex","sortedLastIndexBy","sortedLastIndexOf","sortedUniq","sortedUniqBy","tail","take","takeRight","takeRightWhile","takeWhile","union","unionBy","unionWith","uniq","uniqBy","uniqWith","unzip","unzipWith","without","xor","xorBy","xorWith","zip","zipObject","zipObjectDeep","specialCases","delta_transform_transform","getTransformationCase","defaultTransform","updateBaseVersion","byOps","newByOps","opA","ops","opB","operation_transform","reverseContext","updatedOpB","getNormalizedDeltas","DeltaClass","attributeOperationIndex","A","B","casesA","cases","caseClass","deltasA","deltasB","transformedDeltasA","transformedDeltasB","useAdditionalContext","contextAB","wasAffected","originalDelta","undoMode","deltaA","deltaB","_setContext","resultAB","resultBA","_updateContext","deltaBA","opsDiffA","getOpsCount","opsDiffB","padWithNoOps","delta_transform","lastDelta","noDelta","_isOperationAffected","_setWasAffected","history","isUndoingDelta","undoneDelta","getUndoneDelta","aWasAffectedBy","affected","_setInsertBeforeContext","originalB","isUndoneDelta","_setForceWeakRemove","_setForceNotSticky","cmpResult","oldDelta","newDeltas","MarkerDelta","addTransformationCase","transformMarkerDelta","transformedDelta","transformedOp","_getComplementaryAttrDelta","weakInsertDelta","attributeDelta","complementaryAttrDelta","val","lastOffset","offsetSum","nodeAttrVal","attrOperation","basic_transformations_noDelta","splitPosition","additionalAttributeDelta","operateInSameParent","mergeInsideMoveRange","pathA","pathB","aRange","bRange","diff","newHowMany","newContext","sameRoot","splitInsideWrapRange","splitNodePos","insertPos","sourcePos","targetPos","additionalRenameDelta","Batch","RootAttributeDelta","detachoperation_DetachOperation","RootElement","_doc","model_writer_Writer","_assertWriterUsedCorrectly","isSameTree","version","addDelta","applyOperation","rangeRootPosition","setMarker","usingOperation","itemOrRange","setAttributeOnRange","setAttributeOnItem","removeAttributesFromItem","addRemoveDelta","applyRemoveOperation","getMinimalFlatRanges","flat","positionAfter","positionBefore","moveVersion","renameOperation","limitElement","firstSplitElement","firstCopyElement","splitElement","insertVersion","elementOrString","markerOrNameOrRange","rangeOrOptions","currentMarker","managedUsingOperations","applyMarkerOperation","_set","currentRange","markerOrName","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","_removeSelectionAttribute","_overrideGravity","_restoreGravity","storeKey","_getStoreAttributeKey","_currentWriter","valueBefore","valueAfter","lastSplitPosition","previousValue","isRootChanged","graveyardPosition","rootA","rootB","differ_Differ","_changesInElement","_elementSnapshots","_changedMarkers","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","_isInInsertedElement","_markInsert","_markAttribute","sourceParentInserted","targetParentInserted","_markRemove","buffered","includeChangesInGraveyard","diffSet","changes","snapshotChildren","elementChildren","_getChildrenSnapshot","_generateActionsFromChanges","_getInsertDiff","_getRemoveDiff","elementAttributes","snapshotAttributes","_getAttributesDiff","changeCount","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","_changesInGraveyardFilter","changeItem","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","inc","nodesToHandle","old","incEnd","oldEnd","intersectionLength","howManyAfter","attributePart","diffs","snapshot","oldChildrenLength","oldChildrenHandled","repeat","posInGy","rangeInGy","history_History","_deltas","_historyPoints","_undoPairs","_undoneDeltas","_getIndex","undoingDelta","nextBaseVersion","isInsideSurrogatePair","character","isLowSurrogateHalf","isInsideCombinedSymbol","graveyardName","model_document_Document","createRoot","bufferOperation","hasSelectionChanged","reset","defaultRoot","_getDefaultRoot","validateTextNodePosition","rangeBoundary","markercollection_MarkerCollection","markercollection_Marker","oldMarker","hasChanged","_attachLiveRange","_managedUsingOperations","_destroyMarker","prefix","_detachLiveRange","_liveRange","stopDelegating","liveposition_LivePosition","stickiness","originalRange","gotMoved","oldPosition","insertcontent_Insertion","canMergeWith","_filterAttributesOf","parentContext","_handleNode","isFirst","isLast","nodeToSelect","_handleObject","_checkAndSplitToAllowedPosition","_mergeSiblingsOf","_handleDisallowedNode","_tryAutoparagraphing","handleNodes","livePos","mergeLeft","_canMergeLeft","mergeRight","_canMergeRight","mergePosLeft","mergePosRight","merge","paragraph","_getAllowedIn","tempPos","deleteContent","doNotResetEntireContent","getLimitElement","shouldEntireContentBeReplacedWithParagraph","insertParagraph","replaceEntireContentWithParagraph","selRange","startPos","endPos","leaveUnmerged","mergeBranches","startParent","endParent","leftPos","rightPos","rangeToCheck","checkCanBeMerged","parentToRemove","isTextAllowed","isParagraphAllowed","shouldAutoparagraph","wordBoundaryCharacters","modifySelection","isForward","unit","searchEnd","getSearchRange","tryExtendingTo","setSelectionFocus","isAtWordBoundary","isAtNodeBoundary","boundaryChar","getCorrectWordBreakPosition","getCorrectPosition","offsetToCheck","removeRangeContent","parentsToCheck","itemRange","parentToCheck","removeRange","model_Model","_pendingChanges","_runPendingChanges","batchOrType","ret","currentBatch","callbackReturnValue","_execute","useContext","transformDeltaSets","insertion","nodesToInsert","getSelectionRange","insertContent","frag","commonPath","commonParent","getNodeByPath","flatSubtreeRange","appendText","leftExcessRange","getSelectedContent","rangeOrElement","keystrokehandler_KeystrokeHandler","_listener","keyEvtData","EditingKeystrokeHandler","evtData","editor_Editor","build","locale","editing","conversion","keystrokes","load","loadPlugins","loadedPlugins","initPlugins","method","promise","dataapimixin","elementapimixin","HTMLTextAreaElement","innerHTML","BasicHtmlWriter","fragment","implementation","createHTMLDocument","htmldataprocessor_HtmlDataProcessor","_domParser","DOMParser","_domConverter","_htmlWriter","getHtml","_toDom","parseFromString","componentfactory_ComponentFactory","_components","getNormalized","focustracker_FocusTracker","focusedElement","_elements","_nextEventLoopTimeout","_focus","_blur","classiceditorui_ClassicEditorUI","componentFactory","focusTracker","_toolbarConfig","stickyPanel","limiterElement","viewportTopOffset","editingRoot","toolbar","fillFromConfig","origin","originKeystrokeHandler","originFocusTracker","beforeFocus","afterBlur","enableToolbarKeyboardFocus","viewcollection_ViewCollection","isRendered","_parentElement","elementOrDocFragment","dest","evtName","lodash_cloneDeepWith","xhtmlNs","template_Template","template_normalize","template_clone","_isRendered","_revertData","_renderNode","intoFragment","isApplying","revertData","_revertTemplateFromNode","search","isView","isTemplate","eventNameOrFunctionOrAttribute","TemplateToBinding","eventNameOrFunction","if","valueIfTrue","TemplateIfBinding","template","extendTemplate","extendObjectValueArray","eventListeners","childIndex","isInvalid","_renderText","_renderElement","createElementNS","ns","_renderAttributes","_renderElementChildren","_setUpListeners","textContent","hasTemplateBinding","_bindToObservable","updater","getTextUpdater","attrName","attrValue","domAttrValue","attrNs","valueToBind","shouldExtend","getAttributeUpdater","_renderStyleAttribute","isFalsy","arrayValueReducer","setAttributeNS","styleName","styleValue","getStyleUpdater","isViewCollection","setParent","childRevertData","revertBindings","schemaItem","domEvtName","domSelector","activateDomEventListener","syncValueSchemaValue","templateBinding","activateAttributeListener","revertBinding","TemplateBinding","matches","getValue","getValueSchemaValue","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","listeners","arrayify","normalizeListeners","normalizeAttributes","cur","ext","src_view_View","_viewCollections","_unboundChildren","createCollection","collection","bindTemplate","_bindTemplate","registerChildren","getViews","editoruiview_EditorUIView","_renderBodyCollection","_bodyCollectionContainer","bodyElement","LabelView","setTemplate","boxededitoruiview_BoxedEditorUIView","ariaLabelUid","main","_voiceLabelView","_createVoiceLabel","role","aria-labelledby","voiceLabel","EditableUIView","contenteditable","externalElement","InlineEditableUIView","aria-label","toUnit","toPx","stickypanelview_StickyPanelView","_contentPanelPlaceholder","display","_panelRect","_contentPanel","_hasViewportTopOffset","_isStickyToTheLimiter","limiterBottomOffset","marginLeft","_checkIfShouldBeSticky","panelRect","limiterRect","_limiterRect","isActive","_marginLeft","FocusCycler","keystrokeHandler","focusables","isFocusable","_getFocusableItem","viewIndex","focused","collectionLength","ToolbarSeparatorView","toolbarview_ToolbarView","_focusCycler","focusPrevious","focusNext","mousedown","focusFirst","focusLast","classiceditoruiview_ClassicEditorUIView","ElementReplacer","_replacedElements","classiceditor_ClassicEditor","_elementReplacer","ui","updateElement","form","originalSubmit","onSubmit","submit","attachToForm","restore","init","attachDomRoot","loadDataFromElement","Plugin","DataTransfer","nativeDataTransfer","files","kind","getAsFile","getFiles","_native","getData","setData","clipboardobserver_ClipboardObserver","viewDocument","handleInput","targetRanges","dropRange","dataTransfer","clipboardData","domDoc","clientX","clientY","caretRangeFromPoint","rangeParent","rangeOffset","getDropViewRange","smallPaddingElements","clipboard_Clipboard","modelDocument","onCopyCut","_htmlDataProcessor","fullMatch","spaces","scrollToTheSelection","dataController","modelFragment","viewToPlainText","childText","Command","forceDisable","refresh","EnterCommand","isSelectionEmpty","splitBlock","isContainedWithinOneElement","enterBlock","splitPos","oldElement","enterobserver_EnterObserver","once","enter_Enter","changebuffer_ChangeBuffer","limit","isLocked","_changeCallback","_batch","_reset","_selectionChangeCallback","ignoreLock","inputcommand_InputCommand","undoStepSize","_buffer","textInsertions","resultRange","isCollapsedRange","lock","insertText","unlock","input_Input","editingView","inputCommand","_handleKeydown","mutations","_handleMutations","keyData","safeKeycodes","isSafeKeystroke","input_MutationHandler","handle","getSingleTextNodeChange","containerChildrenMutated","_handleContainerChildrenMutations","_handleTextMutation","_handleTextNodeInsertion","mutationsCommonAncestor","getMutationsContainer","domMutationCommonAncestor","freshDomConverter","modelFromCurrentDom","currentModel","modelFromDomChildren","currentModelChildren","hasOnlyTextNodes","diffResult","firstChangeAt","insertions","deletions","calculateChanges","modelSelectionRange","viewPos","modelPos","insertedText","compareChildNodes","oldChild","newChild","output","lastOperation","pushLast","isContinuationOf","expected","diffToChanges","lastChangeAt","deletecommand_DeleteCommand","_shouldEntireContentBeReplacedWithParagraph","sequence","_replaceEntireContentWithParagraph","limitElementFirstChild","deleteobserver_DeleteObserver","deleteData","hasWordModifier","delete_Delete","typing_Typing","basecommand_BaseCommand","_stack","_createdBatches","docSelection","selectionRanges","transformedRange","transformSelectionRange","batchToUndo","undoingBatch","deltasToUndo","deltaToUndo","historyDeltas","getDeltas","reversedDeltas","transformDeltas","setDeltaAsUndone","transformRangesByDeltas","UndoCommand","batchIndex","_undo","_restoreSelection","RedoCommand","undoediting_UndoEditing","_batchRegistry","_undoCommand","_redoCommand","addBatch","clearStack","undoneBatch","IconView","viewBox","_updateXMLContent","_colorFillPaths","svg","fillColor","querySelectorAll","TooltipView","buttonview_ButtonView","tooltipView","_createTooltipView","labelView","_createLabelView","iconView","_getTooltipString","tabindex","click","icon","tooltip","getEnvKeystrokeText","undoui_UndoUI","_addButton","undo_default","redo_default","Icon","undo_Undo","FileReader","reader","_reader","onprogress","file","total","onload","onerror","onabort","readAsDataURL","abort","filerepository_FileRepository","loaders","uploaded","loader","createUploadAdapter","filerepository_FileLoader","_adapter","aggregatedUploaded","aggregatedTotal","uploadTotal","fileOrLoader","getLoader","_destroy","adapter","status","read","upload","uploadResponse","TOKEN_COOKIE_NAME","TOKEN_LENGTH","tokenCharset","getCsrfToken","token","cookie","decodeURIComponent","getCookie","randValues","crypto","getRandomValues","toUpperCase","generateToken","uploadadapter_UploadAdapter","url","_initRequest","_initListeners","_sendRequest","xhr","XMLHttpRequest","open","responseType","genericError","response","default","lengthComputable","FormData","send","blockautoformatediting_BlockAutoformatEditing","callbackOrCommand","inlineautoformatediting_InlineAutoformatEditing","testRegexpOrCallback","attributeOrCallback","regExp","testCallback","formatCallback","format","1","leftDel","2","3","rightDel","delStart","delEnd","rangesToFormat","rangesToRemove","getValidRanges","AttributeCommand","checkAttributeInSelection","forceValue","setSelectionAttribute","BOLD","boldediting_BoldEditing","attributeToElement","font-weight","boldui_BOLD","boldui_BoldUI","bold_default","ITALIC","italicediting_ItalicEditing","font-style","italicui_ITALIC","italicui_ItalicUI","italic_default","first_first","iterable","iteratorItem","blockquotecommand_BlockQuoteCommand","_getValue","_checkEnabled","blocks","_removeQuote","findQuote","blocksToQuote","checkCanBeQuoted","_applyQuote","firstBlock","getRangesOfBlockGroups","groupRange","quotesToMerge","currentQuote","nextQuote","elementOrPosition","nextBlock","isBQAllowed","isBlockAllowedInBQ","blockquoteediting_BlockQuoteEditing","addChildCheck","elementToElement","blockquoteui_BlockQuoteUI","buttonView","quote_default","BASE64_HEADER_REG_EXP","FileUploader","fileOrData","apiAddress","_isBase64","base64","sliceSize","contentType","base64Data","byteArrays","byteNumbers","charCodeAt","_base64ToBlob","_token","_apiAddress","_prepareRequest","_attachXHRListeners","setRequestHeader","onError","statusCode","xhrResponse","formData","fileuploader","DEFAULT_OPTIONS","refreshInterval","autoRefresh","Token","tokenUrl","initValue","_tokenUrl","_options","_startRefreshing","_refreshToken","_refreshInterval","token_token","CloudServices","optionName","uploadUrl","cloudservicesuploadadapter_CloudServicesUploadAdapter","cloudServices","_uploadGateway","_UploadGateway","Adapter","uploadGateway","fileUploader","modelToViewAttributeConverter","img","HighlightStack","descriptor","oldTop","_insertDescriptor","newTop","compareDescriptors","oldDescriptor","newDescriptor","_removeDescriptor","shouldABeBeforeB","classesToString","widgetSymbol","labelSymbol","WIDGET_CLASS_NAME","WIDGET_SELECTED_CLASS_NAME","isWidget","toWidget","setCustomProperty","utils_getFillerOffset","labelOrCreator","setLabel","setHighlightHandling","normalizeToArray","getLabel","labelCreator","imageSymbol","isImageWidgetSelected","isImageWidget","isImage","imageediting_ImageEditing","createImageViewElement","altText","srcset","srcsetAttributeConverter","src","viewImage","modelWriter","conversionResult","modelImage","viewFigureToModel","emptyElement","createEmptyElement","figure","MouseObserver","selectAllKeystrokeCode","widget_Widget","_previouslySelected","_clearPreviouslySelectedWidgets","selectedElement","_onMousedown","_onKeydown","_handleDelete","domEventData","isInsideNestedEditable","_setSelectionOverElement","wasHandled","isArrowKeyCode","isSelectAllKeyCode","_selectAllNestedEditableContent","_selectAllContent","_handleArrowKeys","objectElement","_getObjectElementNextToSelection","previousNode","nodeToRemove","objectElement2","documentSelection","widgetParent","probe","widget","imagetextalternativecommand_ImageTextAlternativeCommand","imageElement","imagetextalternativeediting_ImageTextAlternativeEditing","clickOutsideHandler","activator","contextElements","contextElement","labeledinputview_LabeledInputView","InputView","inputView","_createInputView","select","InputTextView","placeholder","readonly","setValue","submitHandler","textalternativeformview_TextAlternativeFormView","labeledInput","_createLabeledInputView","saveButtonView","_createButton","check_default","cancelButtonView","cancel_default","_focusables","v","button","getOptimalPosition","positions","limiter","fitInViewport","positionedElementAncestor","getPositionedAncestor","elementRect","bestPosition","getVisible","bestPositionRect","bestPositionName","maxLimiterIntersectArea","maxViewportIntersectArea","elementRectArea","positionName","positionRect","getPosition","limiterIntersectArea","viewportIntersectArea","limiterViewportIntersectRect","getIntersectionArea","setBestPosition","getBestPosition","getAbsoluteRectCoordinates","ancestorPosition","ancestorBorderWidths","moveTo","balloonpanelview_toPx","defaultLimiterElement","balloonpanelview_BalloonPanelView","isVisible","show","defaultPositions","positionOptions","southArrowNorth","southArrowNorthWest","southArrowNorthEast","northArrowSouth","northArrowSouthWest","northArrowSouthEast","unpin","_pinWhenIsVisibleCallback","_startPinning","_stopPinning","hide","attachTo","getDomElement","scrollTarget","isWithinScrollTarget","isLimiterWithinScrollTarget","getNorthTop","balloonRect","arrowVerticalOffset","getSouthTop","arrowHorizontalOffset","northWestArrowSouth","northWestArrowSouthWest","northWestArrowSouthEast","northEastArrowSouth","northEastArrowSouthEast","northEastArrowSouthWest","southWestArrowNorth","southWestArrowNorthWest","southWestArrowNorthEast","southEastArrowNorth","southEastArrowNorthEast","southEastArrowNorthWest","contextualballoon_ContextualBalloon","positionLimiter","visibleView","hasView","_show","pin","_getBalloonPosition","balloonClassName","repositionContextualBalloon","balloon","getBalloonPositionData","updatePosition","imagetextalternativeui_ImageTextAlternativeUI","_createForm","low_vision_default","_showForm","_balloon","_form","_hideForm","_isVisible","focusEditable","imagetextalternative_ImageTextAlternative","image_Image","filedialogbuttonview_FileDialogButtonView","_fileInputView","FileInputView","accept","multiple","isImageType","findOptimalInsertionPosition","imageuploadui_ImageUploadUI","acceptedType","allowMultipleFiles","icons_image_default","imageuploadprogress_ImageUploadProgress","image_placeholder_default","uploadStatusChange","uploadId","fileRepository","viewFigure","viewImg","progressBar","progressBarSymbol","createProgressBar","imageFigure","getProgressBar","imageuploadcommand_ImageUploadCommand","createLoader","insertAtSelection","Notification","alert","_showNotification","namespace","title","imageuploadediting_ImageUploadEditing","targetModelSelection","isInGraveyard","_load","notification","clean","destroyLoader","setAttributes","uploadStatus","maxWidth","srcsetAttribute","isNaN","msg","showWarning","imageupload_ImageUpload","paragraphcommand_ParagraphCommand","checkCanBecomeParagraph","rename","paragraph_Paragraph","paragraphLikeElements","isParagraphable","wrapInParagraph","registerPostFixer","_autoparagraphEmptyRoots","getRootNames","insertElement","headingcommand_HeadingCommand","checkCanBecomeHeading","heading","defaultModelElement","headingediting_HeadingEditing","option","enterCommand","src_model_Model","DropdownPanelView","selectstart","dropdownview_DropdownView","panelView","isOpen","closeDropdown","dropdownbuttonview_DropdownButtonView","arrowView","_createArrowView","dropdown_arrow_default","listview_ListView","listitemview_ListItemView","onKeystrokePress","createDropdown","ButtonClass","dropdownView","closeDropdownOnBlur","closeDropdownOnExecute","focusDropdownContentsOnArrows","addDefaultBehavior","headingui_HeadingUI","_getLocalizedOptions","defaultTitle","dropdownTooltip","dropdownItems","itemModel","listView","addListToDropdown","isOn","withText","areEnabled","areActive","localizedTitles","Paragraph","Heading 1","Heading 2","Heading 3","documentPlaceholders","attachPlaceholder","placeholderText","checkFunction","placeholders","info","updateSinglePlaceholder","updateAllPlaceholders","isEmptyish","captionSymbol","getCaptionFromImage","imageModelElement","matchImageCaption","imagecaptionediting_ImageCaptionEditing","_insertMissingModelCaptionElement","captionModelToView","createCaptionForEditing","theEditable","createEditableElement","captionElementCreator","_fixCaptionVisibility","_updateCaptionVisibility","lastCaption","_lastSelectedCaption","viewCaption","modelCaption","getParentCaption","showCaption","hideCaptionIfEmpty","viewModified","nodeFinder","appendElement","captionElement","insertViewCaptionAndBind","caption","imagestylecommand_ImageStyleCommand","isDefault","getStyleByName","defaultStyles","imageStyleFull","object_full_width_default","imageStyleSide","object_right_default","imageStyleAlignLeft","object_left_default","imageStyleAlignCenter","object_center_default","imageStyleAlignRight","defaultIcons","full","center","normalizeImageStyles","configuredStyles","_normalizeStyle","defaultStyle","extendedStyle","imagestyleediting_ImageStyleEditing","modelToViewConverter","newStyle","oldStyle","modelToViewStyleAttribute","filteredStyles","viewFigureElement","modelImageElement","viewToModelStyleAttribute","imagestyleui_ImageStyleUI","localizedDefaultStylesTitles","Full size image","Side image","Left aligned image","Centered image","Right aligned image","translatedStyles","titles","translateStyles","findLinkRange","_findBound","lookBack","lastNode","linkcommand_LinkCommand","linkRange","unlinkcommand_UnlinkCommand","rangesToUnlink","linkElementSymbol","linkElement","isAtAttributeBoundary","isAttrInNext","isAttrInPrev","linkediting_LinkEditing","arrowRightPressed","arrowLeftPressed","overrideSelectionGravity","restoreSelectionGravity","counter","bindTwoStepCaretToAttribute","ClickObserver","linkformview_LinkFormView","urlInputView","_createUrlInput","linkactionsview_LinkActionsView","previewButtonView","_createPreviewButton","unlinkButtonView","unlink_default","editButtonView","pencil_default","linkKeystroke","linkui_LinkUI","actionsView","_createActionsView","formView","_createFormView","_createToolbarLinkButton","_enableUserBalloonInteractions","linkCommand","unlinkCommand","_addFormView","_hideUI","_removeFormView","_showUI","link_default","_getSelectedLinkElement","_areActionsVisible","_isUIVisible","_getBalloonPositionData","_isFormInPanel","_isUIInPanel","_addActionsView","_startUpdatingUIOnViewRender","prevSelectedLink","prevSelectionParent","getSelectionParent","selectedLink","_areActionsInPanel","targetLink","findLinkElementAncestor","startLink","endLink","listcommand_ListCommand","checkCanBecomeListItem","turnOff","currentIndent","indent","newIndent","lowestIndent","_fixType","listItem","startingItem","indentcommand_IndentCommand","indentDirection","_indentBy","itemsToChange","lastItem","src_utils_getFillerOffset","hasOnlyLists","modelViewInsertion","injectViewList","listType","createViewListItemElement","generateLiInUl","modelViewRemove","breakContainer","viewList","viewListPrev","mergeViewLists","hoistNestedLists","modelViewChangeType","listName","modelViewChangeIndent","modelViewSplitOnInsert","removeStart","removeEnd","previousList","mergePos","modelViewMergeAfter","viewItemPrev","viewItemNext","viewModelConverter","conversionStore","cleanList","cleanListItem","foundList","firstNode","modelToViewPosition","topmostViewList","viewToModelPosition","modelNode","modelLength","modelIndentPasteFixer","refItem","indentChange","getSiblingListItem","modelItemOrPosition","sameIndent","smallerIndent","itemIndent","firstList","secondList","mergeContainers","injectedItem","injectedList","prevItem","positionAfterUiElements","prevView","breakPosition","nextViewList","lastSubChild","modelChild","nextIndent","modelRemoveStartPosition","viewRemoveStartPosition","viewRemovedItem","prevModelItem","prevIndent","prevViewList","listediting_ListEditing","itemToListHead","applied","_addListToFix","listHead","_fixListIndents","_fixListTypes","maxIndent","fixBy","typesStack","modelChangePostFixer","registerViewToModelLength","getViewListItemLength","firstPosition","getCommandExecuter","listui_ListUI","numberedlist_default","bulletedlist_default","ckeditor_ClassicEditor","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","names","level","balloonToolbar","toolbarConfig","_toolbar","_checkIsVisible","_showToolbar","_hideToolbar","image","location","baseUrl","protocol","host","currentDir","pathname","origUrl","newUrl","unquotedOrigUrl","$1","g","eval","Buffer","_root__WEBPACK_IMPORTED_MODULE_1__","_constant__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"ckeditor.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ClassicEditor\"] = factory();\n\telse\n\t\troot[\"ClassicEditor\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n","import checkGlobal from './_checkGlobal';\n\n/** Used to determine if values are of the language type `Object`. */\nvar objectTypes = {\n  'function': true,\n  'object': true\n};\n\n/** Detect free variable `exports`. */\nvar freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n  ? exports\n  : undefined;\n\n/** Detect free variable `module`. */\nvar freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n  ? module\n  : undefined;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n\n/** Detect free variable `self`. */\nvar freeSelf = checkGlobal(objectTypes[typeof self] && self);\n\n/** Detect free variable `window`. */\nvar freeWindow = checkGlobal(objectTypes[typeof window] && window);\n\n/** Detect `this` as the global object. */\nvar thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n\n/**\n * Used as a reference to the global object.\n *\n * The `this` value is used if it's the global object to avoid Greasemonkey's\n * restricted `window` object, otherwise the `window` object is used.\n */\nvar root = freeGlobal ||\n  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n    freeSelf || thisGlobal || Function('return this')();\n\nexport default root;\n","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.06 10l4.597 4.596a.75.75 0 1 1-1.06 1.06L10 11.062l-4.596 4.596a.75.75 0 1 1-1.06-1.06L8.938 10 4.343 5.404a.75.75 0 1 1 1.06-1.06L10 8.938l4.596-4.596a.75.75 0 0 1 1.06 1.06L11.062 10z\\\" fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.688 14.44l-4.196-4.195a.758.758 0 0 0-1.066-.006.742.742 0 0 0-.006 1.054l5.268 5.269L18.074 5.176a.742.742 0 0 0-.006-1.055.758.758 0 0 0-1.067.006L6.688 14.44z\\\" fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"><path d=\\\"M2 4.5V3h16v1.5zM2 7.5V6h5.674v1.5zM2 10.5V9h5.674v1.5zM2 13.5V12h5.674v1.5zM10.5 7.5V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z\\\"/></g></svg>\\n\"","/**\n * Checks if `value` is a global object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n */\nfunction checkGlobal(value) {\n  return (value && value.Object === Object) ? value : null;\n}\n\nexport default checkGlobal;\n","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"><path d=\\\"M2 4.5V3h16v1.5zM6.5 7.5V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z\\\"/></g></svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" stroke-linejoin=\\\"round\\\" stroke-miterlimit=\\\"1.414\\\"><path d=\\\"M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z\\\" fill-rule=\\\"nonzero\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"><path d=\\\"M2 4.5V3h16v1.5zM4.5 7.5V12h11V7.5h-11zM4.061 6H15.94c.586 0 1.061.407 1.061.91v5.68c0 .503-.475.91-1.061.91H4.06C3.475 13.5 3 13.093 3 12.59V6.91C3 6.406 3.475 6 4.061 6zM2 16.5V15h16v1.5z\\\"/></g></svg>\\n\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./heading.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./heading.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./heading.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = function(originalModule) {\r\n\tif (!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z\\\" fill=\\\"#454545\\\" fill-rule=\\\"evenodd\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\\\" fill=\\\"#454545\\\" fill-rule=\\\"evenodd\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955c.02-.095.06-.189.12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z\\\" fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z\\\" fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"/></svg>\\n\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955c.02-.095.06-.189.12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zM16.927 17.695l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z\\\"/></g></svg>\"","module.exports = \"<svg width=\\\"10\\\" height=\\\"10\\\" viewBox=\\\"0 0 10 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\\\" fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\"/></svg>\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 700 250\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><rect width=\\\"700\\\" height=\\\"250\\\" fill=\\\"#F7F7F7\\\" rx=\\\"4\\\"/><text fill=\\\"#5F6F77\\\" font-family=\\\"Arial,sans-serif\\\" font-size=\\\"24\\\"><tspan x=\\\"247.9\\\" y=\\\"135\\\">Uploading image…</tspan></text></g></svg>\\n\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z\\\" fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"/></svg>\\n\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012.9.093 1.676.675 2.017 1.513.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z\\\" fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\"><path d=\\\"M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.011-.563zM11 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.011-.563z\\\"/></g></svg>\\n\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\" fill=\\\"#333\\\" fill-rule=\\\"evenodd\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\" fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\"/></svg>\\n\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\" fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"/></svg>\"","module.exports = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\" fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\"/></svg>\"","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetPrototype = Object.getPrototypeOf;\n\n/**\n * Gets the `[[Prototype]]` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {null|Object} Returns the `[[Prototype]]`.\n */\nfunction getPrototype(value) {\n  return nativeGetPrototype(Object(value));\n}\n\nexport default getPrototype;\n","/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\nexport default isHostObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import getPrototype from './_getPrototype';\nimport isHostObject from './_isHostObject';\nimport isObjectLike from './isObjectLike';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object,\n *  else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) ||\n      objectToString.call(value) != objectTag || isHostObject(value)) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nexport default isPlainObject;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/config\n */\n\nimport isPlainObject from './lib/lodash/isPlainObject';\n\n/**\n * Handles a configuration dictionary.\n */\nexport default class Config {\n\t/**\n\t * Creates an instance of the {@link ~Config} class.\n\t *\n\t * @param {Object} [configurations] The initial configurations to be set. Usually, provided by the user.\n\t * @param {Object} [defaultConfigurations] The default configurations. Usually, provided by the system.\n\t */\n\tconstructor( configurations, defaultConfigurations ) {\n\t\t/**\n\t\t * Store for the whole configuration.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {};\n\n\t\t// Set default configuration.\n\t\tif ( defaultConfigurations ) {\n\t\t\tthis.define( defaultConfigurations );\n\t\t}\n\n\t\t// Set initial configuration.\n\t\tif ( configurations ) {\n\t\t\tthis._setObjectToTarget( this._config, configurations );\n\t\t}\n\t}\n\n\t/**\n\t * Set configuration values.\n\t *\n\t * It accepts both a name/value pair or an object, which properties and values will be used to set\n\t * configurations.\n\t *\n\t * It also accepts setting a \"deep configuration\" by using dots in the name. For example, `'resize.width'` sets\n\t * the value for the `width` configuration in the `resize` subset.\n\t *\n\t *\t\tconfig.set( 'width', 500 );\n\t *\t\tconfig.set( 'toolbar.collapsed', true );\n\t *\n\t *\t\t// Equivalent to:\n\t *\t\tconfig.set( {\n\t *\t\t\twidth: 500\n\t *\t\t\ttoolbar: {\n\t *\t\t\t\tcollapsed: true\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Passing an object as the value will amend the configuration, not replace it.\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcollapsed: true,\n\t *\t\t} );\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcolor: 'red',\n\t *\t\t} );\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' ); // true\n\t *\t\tconfig.get( 'toolbar.color' ); // 'red'\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tset( name, value ) {\n\t\tthis._setToTarget( this._config, name, value );\n\t}\n\n\t/**\n\t * Does exactly the same as {@link #set} with one exception – passed configuration extends\n\t * existing one, but does not overwrite already defined values.\n\t *\n\t * This method is supposed to be called by plugin developers to setup plugin's configurations. It would be\n\t * rarely used for other needs.\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tdefine( name, value ) {\n\t\tconst isDefine = true;\n\n\t\tthis._setToTarget( this._config, name, value, isDefine );\n\t}\n\n\t/**\n\t * Gets the value for a configuration entry.\n\t *\n\t *\t\tconfig.get( 'name' );\n\t *\n\t * Deep configurations can be retrieved by separating each part with a dot.\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' );\n\t *\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\tget( name ) {\n\t\treturn this._getFromSource( this._config, name );\n\t}\n\n\t/**\n\t * Saves passed configuration to the specified target (nested object).\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t * @param {Boolean} [isDefine=false] Define if passed configuration should overwrite existing one.\n\t */\n\t_setToTarget( target, name, value, isDefine = false ) {\n\t\t// In case of an object, iterate through it and call `_setToTarget` again for each property.\n\t\tif ( isPlainObject( name ) ) {\n\t\t\tthis._setObjectToTarget( target, name, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\t// If there is no object for specified part then create one.\n\t\t\tif ( !isPlainObject( target[ part ] ) ) {\n\t\t\t\ttarget[ part ] = {};\n\t\t\t}\n\n\t\t\t// Nested object becomes a target.\n\t\t\ttarget = target[ part ];\n\t\t}\n\n\t\t// In case of value is an object.\n\t\tif ( isPlainObject( value ) ) {\n\t\t\t// We take care of proper config structure.\n\t\t\tif ( !isPlainObject( target[ name ] ) ) {\n\t\t\t\ttarget[ name ] = {};\n\t\t\t}\n\n\t\t\ttarget = target[ name ];\n\n\t\t\t// And iterate through this object calling `_setToTarget` again for each property.\n\t\t\tthis._setObjectToTarget( target, value, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Do nothing if we are defining configuration for non empty name.\n\t\tif ( isDefine && typeof target[ name ] != 'undefined' ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttarget[ name ] = value;\n\t}\n\n\t/**\n\t * Get specified configuration from specified source (nested object).\n\t *\n\t * @private\n\t * @param {Object} source level of nested object.\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\t_getFromSource( source, name ) {\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\tif ( !isPlainObject( source[ part ] ) ) {\n\t\t\t\tsource = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Nested object becomes a source.\n\t\t\tsource = source[ part ];\n\t\t}\n\n\t\t// Always returns undefined for non existing configuration\n\t\treturn source ? source[ name ] : undefined;\n\t}\n\n\t/**\n\t * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {Object} configuration Configuration data set\n\t * @param {Boolean} [isDefine] Defines if passed configuration is default configuration or not.\n\t */\n\t_setObjectToTarget( target, configuration, isDefine ) {\n\t\tObject.keys( configuration ).forEach( key => {\n\t\t\tthis._setToTarget( target, key, configuration[ key ], isDefine );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL =\n\t'https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/framework/guides/support/error-codes.html';\n\n/**\n * The CKEditor error class.\n *\n * All errors will be shortened during the minification process in order to reduce the code size.\n * Therefore, all error messages should be documented in the same way as those in {@link module:utils/log}.\n *\n * Read more in the {@link module:utils/log} module.\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n\t/**\n\t * Creates an instance of the CKEditorError class.\n\t *\n\t * Read more about error logging in the {@link module:utils/log} module.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be added to the `message`.\n\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\n\t * will be appended to the error message, so the data are quickly visible in the console. The original\n\t * data object will also be later available under the {@link #data} property.\n\t */\n\tconstructor( message, data ) {\n\t\tmessage = attachLinkToDocumentation( message );\n\n\t\tif ( data ) {\n\t\t\tmessage += ' ' + JSON.stringify( data );\n\t\t}\n\n\t\tsuper( message );\n\n\t\t/**\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = 'CKEditorError';\n\n\t\t/**\n\t\t * The additional error data passed to the constructor.\n\t\t *\n\t\t * @member {Object}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Checks if error is an instance of CKEditorError class.\n\t *\n\t * @param {Object} error Object to check.\n\t * @returns {Boolean}\n\t */\n\tstatic isCKEditorError( error ) {\n\t\treturn error instanceof CKEditorError;\n\t}\n}\n\n/**\n * Attaches link to the documentation at the end of the error message.\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\nexport function attachLinkToDocumentation( message ) {\n\tconst matchedErrorName = message.match( /^([^:]+):/ );\n\n\tif ( !matchedErrorName ) {\n\t\treturn message;\n\t}\n\n\treturn message + ` Read more: ${ DOCUMENTATION_URL }#${ matchedErrorName[ 1 ] }\\n`;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/spy\n */\n\n/**\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\n *\n * The following are the present features:\n *\n * * spy.called: property set to `true` if the function has been called at least once.\n *\n * @returns {Function} The spy function.\n */\nfunction spy() {\n\treturn function spy() {\n\t\tspy.called = true;\n\t};\n}\n\nexport default spy;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/eventinfo\n */\n\nimport spy from './spy';\n\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class EventInfo {\n\t/**\n\t * @param {Object} source The emitter.\n\t * @param {String} name The event name.\n\t */\n\tconstructor( source, name ) {\n\t\t/**\n\t\t * The object that fired the event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The event name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis.path = [];\n\n\t\t// The following methods are defined in the constructor because they must be re-created per instance.\n\n\t\t/**\n\t\t * Stops the event emitter to call further callbacks for this event interaction.\n\t\t *\n\t\t * @method #stop\n\t\t */\n\t\tthis.stop = spy();\n\n\t\t/**\n\t\t * Removes the current callback from future interactions of this event.\n\t\t *\n\t\t * @method #off\n\t\t */\n\t\tthis.off = spy();\n\n\t\t/**\n\t\t * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n\t\t *\n\t\t * It's `undefined` by default and can be changed by an event listener:\n\t\t *\n\t\t *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n\t\t *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n\t\t *\t\t\t// always return an empty DocumentFragment.\n\t\t *\t\t\tevt.return = new DocumentFragment();\n\t\t *\n\t\t *\t\t\t// Make sure no other listeners are executed.\n\t\t *\t\t\tevt.stop();\n\t\t *\t\t} );\n\t\t *\n\t\t * @member #return\n\t\t */\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/uid\n */\n\n/**\n * Returns a unique id. This id consist of an 'e' character and a randomly generated string of 32 aphanumeric characters.\n * Each character in uid string represents a hexadecimal digit (base 16).\n *\n * @returns {String} A hexadecimal number representing the id.\n */\nexport default function uid() {\n\tlet uuid = 'e'; // Make sure that id does not start with number.\n\n\tfor ( let i = 0; i < 8; i++ ) {\n\t\tuuid += Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\n\t}\n\n\treturn uuid;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/priorities\n */\n\n/**\n * String representing a priority value.\n *\n * @typedef {'highest'|'high'|'normal'|'low'|'lowest'} module:utils/priorities~PriorityString\n */\n\n/**\n * Provides group of constants to use instead of hardcoding numeric priority values.\n *\n * @namespace\n */\nconst priorities = {\n\t/**\n\t * Converts a string with priority name to it's numeric value. If `Number` is given, it just returns it.\n\t *\n\t * @static\n\t * @param {module:utils/priorities~PriorityString|Number} priority Priority to convert.\n\t * @returns {Number} Converted priority.\n\t */\n\tget( priority ) {\n\t\tif ( typeof priority != 'number' ) {\n\t\t\treturn this[ priority ] || this.normal;\n\t\t} else {\n\t\t\treturn priority;\n\t\t}\n\t},\n\n\thighest: 100000,\n\thigh: 1000,\n\tnormal: 0,\n\tlow: -1000,\n\tlowest: -100000\n};\n\nexport default priorities;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/emittermixin\n */\n\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities';\n\nconst _listeningTo = Symbol( 'listeningTo' );\nconst _emitterId = Symbol( 'emitterId' );\n\n/**\n * Mixin that injects the {@link ~Emitter events API} into its host.\n *\n * @mixin EmitterMixin\n * @implements module:utils/emittermixin~Emitter\n */\nconst EmitterMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\ton( event, callback, options = {} ) {\n\t\tthis.listenTo( this, event, callback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tonce( event, callback, options ) {\n\t\tconst onceCallback = function( event, ...args ) {\n\t\t\t// Go off() at the first call.\n\t\t\tevent.off();\n\n\t\t\t// Go with the original callback.\n\t\t\tcallback.call( this, event, ...args );\n\t\t};\n\n\t\t// Make a similar on() call, simply replacing the callback.\n\t\tthis.listenTo( this, event, onceCallback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\toff( event, callback ) {\n\t\tthis.stopListening( this, event, callback );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tlistenTo( emitter, event, callback, options = {} ) {\n\t\tlet emitterInfo, eventCallbacks;\n\n\t\t// _listeningTo contains a list of emitters that this object is listening to.\n\t\t// This list has the following format:\n\t\t//\n\t\t// _listeningTo: {\n\t\t//     emitterId: {\n\t\t//         emitter: emitter,\n\t\t//         callbacks: {\n\t\t//             event1: [ callback1, callback2, ... ]\n\t\t//             ....\n\t\t//         }\n\t\t//     },\n\t\t//     ...\n\t\t// }\n\n\t\tif ( !this[ _listeningTo ] ) {\n\t\t\tthis[ _listeningTo ] = {};\n\t\t}\n\n\t\tconst emitters = this[ _listeningTo ];\n\n\t\tif ( !_getEmitterId( emitter ) ) {\n\t\t\t_setEmitterId( emitter );\n\t\t}\n\n\t\tconst emitterId = _getEmitterId( emitter );\n\n\t\tif ( !( emitterInfo = emitters[ emitterId ] ) ) {\n\t\t\temitterInfo = emitters[ emitterId ] = {\n\t\t\t\temitter,\n\t\t\t\tcallbacks: {}\n\t\t\t};\n\t\t}\n\n\t\tif ( !( eventCallbacks = emitterInfo.callbacks[ event ] ) ) {\n\t\t\teventCallbacks = emitterInfo.callbacks[ event ] = [];\n\t\t}\n\n\t\teventCallbacks.push( callback );\n\n\t\t// Finally register the callback to the event.\n\t\tcreateEventNamespace( emitter, event );\n\t\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\t\tconst priority = priorities.get( options.priority );\n\n\t\tconst callbackDefinition = {\n\t\t\tcallback,\n\t\t\tpriority\n\t\t};\n\n\t\t// Add the callback to all callbacks list.\n\t\tfor ( const callbacks of lists ) {\n\t\t\t// Add the callback to the list in the right priority position.\n\t\t\tlet added = false;\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tif ( callbacks[ i ].priority < priority ) {\n\t\t\t\t\tcallbacks.splice( i, 0, callbackDefinition );\n\t\t\t\t\tadded = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add at the end, if right place was not found.\n\t\t\tif ( !added ) {\n\t\t\t\tcallbacks.push( callbackDefinition );\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\tconst emitters = this[ _listeningTo ];\n\t\tlet emitterId = emitter && _getEmitterId( emitter );\n\t\tconst emitterInfo = emitters && emitterId && emitters[ emitterId ];\n\t\tconst eventCallbacks = emitterInfo && event && emitterInfo.callbacks[ event ];\n\n\t\t// Stop if nothing has been listened.\n\t\tif ( !emitters || ( emitter && !emitterInfo ) || ( event && !eventCallbacks ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// All params provided. off() that single callback.\n\t\tif ( callback ) {\n\t\t\tremoveCallback( emitter, event, callback );\n\t\t}\n\t\t// Only `emitter` and `event` provided. off() all callbacks for that event.\n\t\telse if ( eventCallbacks ) {\n\t\t\twhile ( ( callback = eventCallbacks.pop() ) ) {\n\t\t\t\tremoveCallback( emitter, event, callback );\n\t\t\t}\n\n\t\t\tdelete emitterInfo.callbacks[ event ];\n\t\t}\n\t\t// Only `emitter` provided. off() all events for that emitter.\n\t\telse if ( emitterInfo ) {\n\t\t\tfor ( event in emitterInfo.callbacks ) {\n\t\t\t\tthis.stopListening( emitter, event );\n\t\t\t}\n\t\t\tdelete emitters[ emitterId ];\n\t\t}\n\t\t// No params provided. off() all emitters.\n\t\telse {\n\t\t\tfor ( emitterId in emitters ) {\n\t\t\t\tthis.stopListening( emitters[ emitterId ].emitter );\n\t\t\t}\n\t\t\tdelete this[ _listeningTo ];\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfire( eventOrInfo, ...args ) {\n\t\tconst eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo( this, eventOrInfo );\n\t\tconst event = eventInfo.name;\n\t\tlet callbacks = getCallbacksForEvent( this, event );\n\n\t\t// Record that the event passed this emitter on its path.\n\t\teventInfo.path.push( this );\n\n\t\t// Handle event listener callbacks first.\n\t\tif ( callbacks ) {\n\t\t\t// Arguments passed to each callback.\n\t\t\tconst callbackArgs = [ eventInfo, ...args ];\n\n\t\t\t// Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n\t\t\t// are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n\t\t\t// failed if callbacks were added to the queue before currently processed callback.\n\t\t\t// If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n\t\t\t// event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n\t\t\tcallbacks = Array.from( callbacks );\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tcallbacks[ i ].callback.apply( this, callbackArgs );\n\n\t\t\t\t// Remove the callback from future requests if off() has been called.\n\t\t\t\tif ( eventInfo.off.called ) {\n\t\t\t\t\t// Remove the called mark for the next calls.\n\t\t\t\t\tdelete eventInfo.off.called;\n\n\t\t\t\t\tremoveCallback( this, event, callbacks[ i ].callback );\n\t\t\t\t}\n\n\t\t\t\t// Do not execute next callbacks if stop() was called.\n\t\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delegate event to other emitters if needed.\n\t\tif ( this._delegations ) {\n\t\t\tconst destinations = this._delegations.get( event );\n\t\t\tconst passAllDestinations = this._delegations.get( '*' );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tfireDelegatedEvents( destinations, eventInfo, args );\n\t\t\t}\n\n\t\t\tif ( passAllDestinations ) {\n\t\t\t\tfireDelegatedEvents( passAllDestinations, eventInfo, args );\n\t\t\t}\n\t\t}\n\n\t\treturn eventInfo.return;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdelegate( ...events ) {\n\t\treturn {\n\t\t\tto: ( emitter, nameOrFunction ) => {\n\t\t\t\tif ( !this._delegations ) {\n\t\t\t\t\tthis._delegations = new Map();\n\t\t\t\t}\n\n\t\t\t\tfor ( const eventName of events ) {\n\t\t\t\t\tconst destinations = this._delegations.get( eventName );\n\n\t\t\t\t\tif ( !destinations ) {\n\t\t\t\t\t\tthis._delegations.set( eventName, new Map( [ [ emitter, nameOrFunction ] ] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestinations.set( emitter, nameOrFunction );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopDelegating( event, emitter ) {\n\t\tif ( !this._delegations ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !event ) {\n\t\t\tthis._delegations.clear();\n\t\t} else if ( !emitter ) {\n\t\t\tthis._delegations.delete( event );\n\t\t} else {\n\t\t\tconst destinations = this._delegations.get( event );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tdestinations.delete( emitter );\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default EmitterMixin;\n\n/**\n * Emitter/listener interface.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\n *\n * @interface Emitter\n */\n\n/**\n * Registers a callback function to be executed when an event is fired.\n *\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\n * listen on itself).\n *\n * @method #on\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\n * calling {@link #on} followed by {@link #off} in the callback.\n *\n * @method #once\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops executing the callback on the given event.\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\n *\n * @method #off\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\n *\n * Events can be grouped in namespaces using `:`.\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\n *\n *\t\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\n *\t\tmyEmitter.on( 'myGroup', genericCallback );\n *\t\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\n *\n *\t\t// genericCallback is fired.\n *\t\tmyEmitter.fire( 'myGroup' );\n *\t\t// both genericCallback and specificCallback are fired.\n *\t\tmyEmitter.fire( 'myGroup:myEvent' );\n *\t\t// genericCallback is fired even though there are no callbacks for \"foo\".\n *\t\tmyEmitter.fire( 'myGroup:foo' );\n *\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\n *\n * @method #listenTo\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops listening for events. It can be used at different levels:\n *\n * * To stop listening to a specific callback.\n * * To stop listening to a specific event.\n * * To stop listening to all events fired by a specific object.\n * * To stop listening to all events fired by all objects.\n *\n * @method #stopListening\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n * for all events from `emitter`.\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n * `event`.\n */\n\n/**\n * Fires an event, executing all callbacks registered for it.\n *\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\n * followed by the optional `args` provided in the `fire()` method call.\n *\n * @method #fire\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\n * is the first param of every callback).\n */\n\n/**\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\n *\n *\t\temitterA.delegate( 'eventX' ).to( emitterB );\n *\t\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\n *\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventX', data );\n *\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventY', data );\n *\n * @method #delegate\n * @param {...String} events Event names that will be delegated to another emitter.\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\n */\n\n/**\n * Stops delegating events. It can be used at different levels:\n *\n * * To stop delegating all events.\n * * To stop delegating a specific event to all emitters.\n * * To stop delegating a specific event to a specific emitter.\n *\n * @method #stopDelegating\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\n * If omitted, stops delegation of `event` to all emitters.\n */\n\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @protected\n * @param {module:utils/emittermixin~EmitterMixin} listeningEmitter Emitter that listens.\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\n * @returns {module:utils/emittermixin~EmitterMixin|null}\n */\nexport function _getEmitterListenedTo( listeningEmitter, listenedToEmitterId ) {\n\tif ( listeningEmitter[ _listeningTo ] && listeningEmitter[ _listeningTo ][ listenedToEmitterId ] ) {\n\t\treturn listeningEmitter[ _listeningTo ][ listenedToEmitterId ].emitter;\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @protected\n * @param {module:utils/emittermixin~EmitterMixin} emitter Emitter for which id will be set.\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\n */\nexport function _setEmitterId( emitter, id ) {\n\tif ( !emitter[ _emitterId ] ) {\n\t\temitter[ _emitterId ] = id || uid();\n\t}\n}\n\n/**\n * Returns emitter's unique id.\n *\n * @protected\n * @param {module:utils/emittermixin~EmitterMixin} emitter Emitter which id will be returned.\n */\nexport function _getEmitterId( emitter ) {\n\treturn emitter[ _emitterId ];\n}\n\n// Gets the internal `_events` property of the given object.\n// `_events` property store all lists with callbacks for registered event names.\n// If there were no events registered on the object, empty `_events` object is created.\nfunction getEvents( source ) {\n\tif ( !source._events ) {\n\t\tObject.defineProperty( source, '_events', {\n\t\t\tvalue: {}\n\t\t} );\n\t}\n\n\treturn source._events;\n}\n\n// Creates event node for generic-specific events relation architecture.\nfunction makeEventNode() {\n\treturn {\n\t\tcallbacks: [],\n\t\tchildEvents: []\n\t};\n}\n\n// Creates an architecture for generic-specific events relation.\n// If needed, creates all events for given eventName, i.e. if the first registered event\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n// It also copies callbacks from more generic events to more specific events when\n// specific events are created.\nfunction createEventNamespace( source, eventName ) {\n\tconst events = getEvents( source );\n\n\t// First, check if the event we want to add to the structure already exists.\n\tif ( events[ eventName ] ) {\n\t\t// If it exists, we don't have to do anything.\n\t\treturn;\n\t}\n\n\t// In other case, we have to create the structure for the event.\n\t// Note, that we might need to create intermediate events too.\n\t// I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n\t// we need to also register foo:bar.\n\n\t// Currently processed event name.\n\tlet name = eventName;\n\t// Name of the event that is a child event for currently processed event.\n\tlet childEventName = null;\n\n\t// Array containing all newly created specific events.\n\tconst newEventNodes = [];\n\n\t// While loop can't check for ':' index because we have to handle generic events too.\n\t// In each loop, we truncate event name, going from the most specific name to the generic one.\n\t// I.e. foo:bar:abc -> foo:bar -> foo.\n\twhile ( name !== '' ) {\n\t\tif ( events[ name ] ) {\n\t\t\t// If the currently processed event name is already registered, we can be sure\n\t\t\t// that it already has all the structure created, so we can break the loop here\n\t\t\t// as no more events need to be registered.\n\t\t\tbreak;\n\t\t}\n\n\t\t// If this event is not yet registered, create a new object for it.\n\t\tevents[ name ] = makeEventNode();\n\t\t// Add it to the array with newly created events.\n\t\tnewEventNodes.push( events[ name ] );\n\n\t\t// Add previously processed event name as a child of this event.\n\t\tif ( childEventName ) {\n\t\t\tevents[ name ].childEvents.push( childEventName );\n\t\t}\n\n\t\tchildEventName = name;\n\t\t// If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n\t\tname = name.substr( 0, name.lastIndexOf( ':' ) );\n\t}\n\n\tif ( name !== '' ) {\n\t\t// If name is not empty, we found an already registered event that was a parent of the\n\t\t// event we wanted to register.\n\n\t\t// Copy that event's callbacks to newly registered events.\n\t\tfor ( const node of newEventNodes ) {\n\t\t\tnode.callbacks = events[ name ].callbacks.slice();\n\t\t}\n\n\t\t// Add last newly created event to the already registered event.\n\t\tevents[ name ].childEvents.push( childEventName );\n\t}\n}\n\n// Gets an array containing callbacks list for a given event and it's more specific events.\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n// return callback list of foo:bar and foo:bar:abc (but not foo).\nfunction getCallbacksListsForNamespace( source, eventName ) {\n\tconst eventNode = getEvents( source )[ eventName ];\n\n\tif ( !eventNode ) {\n\t\treturn [];\n\t}\n\n\tlet callbacksLists = [ eventNode.callbacks ];\n\n\tfor ( let i = 0; i < eventNode.childEvents.length; i++ ) {\n\t\tconst childCallbacksLists = getCallbacksListsForNamespace( source, eventNode.childEvents[ i ] );\n\n\t\tcallbacksLists = callbacksLists.concat( childCallbacksLists );\n\t}\n\n\treturn callbacksLists;\n}\n\n// Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\n// for callbacks for it's more generic version.\nfunction getCallbacksForEvent( source, eventName ) {\n\tlet event;\n\n\tif ( !source._events || !( event = source._events[ eventName ] ) || !event.callbacks.length ) {\n\t\t// There are no callbacks registered for specified eventName.\n\t\t// But this could be a specific-type event that is in a namespace.\n\t\tif ( eventName.indexOf( ':' ) > -1 ) {\n\t\t\t// If the eventName is specific, try to find callback lists for more generic event.\n\t\t\treturn getCallbacksForEvent( source, eventName.substr( 0, eventName.lastIndexOf( ':' ) ) );\n\t\t} else {\n\t\t\t// If this is a top-level generic event, return null;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn event.callbacks;\n}\n\n// Fires delegated events for given map of destinations.\n//\n// @private\n// * @param {Map.<utils.Emitter>} destinations A map containing `[ {@link utils.Emitter}, \"event name\" ]` pair destinations.\n// * @param {utils.EventInfo} eventInfo The original event info object.\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\nfunction fireDelegatedEvents( destinations, eventInfo, fireArgs ) {\n\tfor ( let [ emitter, name ] of destinations ) {\n\t\tif ( !name ) {\n\t\t\tname = eventInfo.name;\n\t\t} else if ( typeof name == 'function' ) {\n\t\t\tname = name( eventInfo.name );\n\t\t}\n\n\t\tconst delegatedInfo = new EventInfo( eventInfo.source, name );\n\n\t\tdelegatedInfo.path = [ ...eventInfo.path ];\n\n\t\temitter.fire( delegatedInfo, ...fireArgs );\n\t}\n}\n\n// Removes callback from emitter for given event.\n//\n// @param {module:utils/emittermixin~Emitter} emitter\n// @param {String} event\n// @param {Function} callback\nfunction removeCallback( emitter, event, callback ) {\n\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\n\tfor ( const callbacks of lists ) {\n\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\tif ( callbacks[ i ].callback == callback ) {\n\t\t\t\t// Remove the callback from the list (fixing the next index).\n\t\t\t\tcallbacks.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * The return value of {@link ~EmitterMixin#delegate}.\n *\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\n */\n\n/**\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n *\n * @method #to\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\n * @param {String|Function} nameOrFunction A custom event name or function which converts the original name string.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/mix\n */\n\n/**\n * Copies enumerable properties and symbols from the objects given as 2nd+ parameters to the\n * prototype of first object (a constructor).\n *\n *\t\tclass Editor {\n *\t\t\t...\n *\t\t}\n *\n *\t\tconst SomeMixin = {\n *\t\t\ta() {\n *\t\t\t\treturn 'a';\n *\t\t\t}\n *\t\t};\n *\n *\t\tmix( Editor, SomeMixin, ... );\n *\n *\t\tnew Editor().a(); // -> 'a'\n *\n * Note: Properties which already exist in the base class will not be overriden.\n *\n * @param {Function} [baseClass] Class which prototype will be extended.\n * @param {Object} [...mixins] Objects from which to get properties.\n */\nexport default function mix( baseClass, ...mixins ) {\n\tmixins.forEach( mixin => {\n\t\tObject.getOwnPropertyNames( mixin ).concat( Object.getOwnPropertySymbols( mixin ) )\n\t\t\t.forEach( key => {\n\t\t\t\tif ( key in baseClass.prototype ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceDescriptor = Object.getOwnPropertyDescriptor( mixin, key );\n\t\t\t\tsourceDescriptor.enumerable = false;\n\n\t\t\t\tObject.defineProperty( baseClass.prototype, key, sourceDescriptor );\n\t\t\t} );\n\t} );\n}\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\nexport default listCacheClear;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'user': 'fred' };\n * var other = { 'user': 'fred' };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import eq from './eq';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\nexport default listCacheDelete;\n","import assocIndexOf from './_assocIndexOf';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import listCacheClear from './_listCacheClear';\nimport listCacheDelete from './_listCacheDelete';\nimport listCacheGet from './_listCacheGet';\nimport listCacheHas from './_listCacheHas';\nimport listCacheSet from './_listCacheSet';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import ListCache from './_ListCache';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import isObject from './isObject';\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8 which returns 'object' for typed array and weak map constructors,\n  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\nexport default isFunction;\n","/** Used to resolve the decompiled source of functions. */\nvar funcToString = Function.prototype.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction';\nimport isHostObject from './_isHostObject';\nimport isObject from './isObject';\nimport toSource from './_toSource';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default isNative;\n","import isNative from './isNative';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object[key];\n  return isNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","import getNative from './_getNative';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import nativeCreate from './_nativeCreate';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import hashClear from './_hashClear';\nimport hashDelete from './_hashDelete';\nimport hashGet from './_hashGet';\nimport hashHas from './_hashHas';\nimport hashSet from './_hashSet';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import getNative from './_getNative';\nimport root from './_root';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import Hash from './_Hash';\nimport ListCache from './_ListCache';\nimport Map from './_Map';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import isKeyable from './_isKeyable';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","import getMapData from './_getMapData';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\nexport default mapCacheSet;\n","import mapCacheClear from './_mapCacheClear';\nimport mapCacheDelete from './_mapCacheDelete';\nimport mapCacheGet from './_mapCacheGet';\nimport mapCacheHas from './_mapCacheHas';\nimport mapCacheSet from './_mapCacheSet';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import ListCache from './_ListCache';\nimport MapCache from './_MapCache';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {\n    cache = this.__data__ = new MapCache(cache.__data__);\n  }\n  cache.set(key, value);\n  return this;\n}\n\nexport default stackSet;\n","import ListCache from './_ListCache';\nimport stackClear from './_stackClear';\nimport stackDelete from './_stackDelete';\nimport stackGet from './_stackGet';\nimport stackHas from './_stackHas';\nimport stackSet from './_stackSet';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import eq from './eq';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : source[key];\n\n    assignValue(object, key, newValue);\n  }\n  return object;\n}\n\nexport default copyObject;\n","import getPrototype from './_getPrototype';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n  // that are composed entirely of index properties, return `false` for\n  // `hasOwnProperty` checks of them.\n  return hasOwnProperty.call(object, key) ||\n    (typeof object == 'object' && key in object && getPrototype(object) === null);\n}\n\nexport default baseHas;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = Object.keys;\n\n/**\n * The base implementation of `_.keys` which doesn't skip the constructor\n * property of prototypes or treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  return nativeKeys(Object(object));\n}\n\nexport default baseKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nexport default baseProperty;\n","import baseProperty from './_baseProperty';\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a\n * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects\n * Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\nexport default getLength;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length,\n *  else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import getLength from './_getLength';\nimport isFunction from './isFunction';\nimport isLength from './isLength';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value)) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import isArrayLike from './isArrayLike';\nimport isObjectLike from './isObjectLike';\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nexport default isArrayLikeObject;\n","import isArrayLikeObject from './isArrayLikeObject';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @type {Function}\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import isArray from './isArray';\nimport isObjectLike from './isObjectLike';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\nexport default isString;\n","import baseTimes from './_baseTimes';\nimport isArguments from './isArguments';\nimport isArray from './isArray';\nimport isLength from './isLength';\nimport isString from './isString';\n\n/**\n * Creates an array of index keys for `object` values of arrays,\n * `arguments` objects, and strings, otherwise `null` is returned.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array|null} Returns index keys, else `null`.\n */\nfunction indexKeys(object) {\n  var length = object ? object.length : undefined;\n  if (isLength(length) &&\n      (isArray(object) || isString(object) || isArguments(object))) {\n    return baseTimes(length, String);\n  }\n  return null;\n}\n\nexport default indexKeys;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import baseHas from './_baseHas';\nimport baseKeys from './_baseKeys';\nimport indexKeys from './_indexKeys';\nimport isArrayLike from './isArrayLike';\nimport isIndex from './_isIndex';\nimport isPrototype from './_isPrototype';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  var isProto = isPrototype(object);\n  if (!(isProto || isArrayLike(object))) {\n    return baseKeys(object);\n  }\n  var indexes = indexKeys(object),\n      skipIndexes = !!indexes,\n      result = indexes || [],\n      length = result.length;\n\n  for (var key in object) {\n    if (baseHas(object, key) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n        !(isProto && key == 'constructor')) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default keys;\n","import copyObject from './_copyObject';\nimport keys from './keys';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","/** Built-in value references. */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nfunction getSymbols(object) {\n  // Coerce `object` to an object to avoid non-object errors in V8.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.\n  return getOwnPropertySymbols(Object(object));\n}\n\n// Fallback for IE < 11.\nif (!getOwnPropertySymbols) {\n  getSymbols = function() {\n    return [];\n  };\n}\n\nexport default getSymbols;\n","import copyObject from './_copyObject';\nimport getSymbols from './_getSymbols';\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import arrayPush from './_arrayPush';\nimport isArray from './isArray';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys';\nimport getSymbols from './_getSymbols';\nimport keys from './keys';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import getNative from './_getNative';\nimport root from './_root';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative';\nimport root from './_root';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative';\nimport root from './_root';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative';\nimport root from './_root';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView';\nimport Map from './_Map';\nimport Promise from './_Promise';\nimport Set from './_Set';\nimport WeakMap from './_WeakMap';\nimport toSource from './_toSource';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction getTag(value) {\n  return objectToString.call(value);\n}\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import root from './_root';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","import Uint8Array from './_Uint8Array';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `Map#set` because it doesn't return the map instance in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\nexport default addMapEntry;\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nexport default arrayReduce;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","import addMapEntry from './_addMapEntry';\nimport arrayReduce from './_arrayReduce';\nimport mapToArray from './_mapToArray';\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\nexport default cloneMap;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  set.add(value);\n  return set;\n}\n\nexport default addSetEntry;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import addSetEntry from './_addSetEntry';\nimport arrayReduce from './_arrayReduce';\nimport setToArray from './_setToArray';\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\nexport default cloneSet;\n","import root from './_root';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer';\nimport cloneDataView from './_cloneDataView';\nimport cloneMap from './_cloneMap';\nimport cloneRegExp from './_cloneRegExp';\nimport cloneSet from './_cloneSet';\nimport cloneSymbol from './_cloneSymbol';\nimport cloneTypedArray from './_cloneTypedArray';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import isObject from './isObject';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate';\nimport getPrototype from './_getPrototype';\nimport isPrototype from './_isPrototype';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import Stack from './_Stack';\nimport arrayEach from './_arrayEach';\nimport assignValue from './_assignValue';\nimport baseAssign from './_baseAssign';\nimport cloneBuffer from './_cloneBuffer';\nimport copyArray from './_copyArray';\nimport copySymbols from './_copySymbols';\nimport getAllKeys from './_getAllKeys';\nimport getTag from './_getTag';\nimport initCloneArray from './_initCloneArray';\nimport initCloneByTag from './_initCloneByTag';\nimport initCloneObject from './_initCloneObject';\nimport isArray from './isArray';\nimport isBuffer from './isBuffer';\nimport isHostObject from './_isHostObject';\nimport isObject from './isObject';\nimport keys from './keys';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  // Recursively populate clone (susceptible to call stack limits).\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","import baseClone from './_baseClone';\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, false, true);\n}\n\nexport default clone;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/node\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\n\n/**\n * Abstract tree view node class.\n *\n * @abstract\n */\nexport default class Node {\n\t/**\n\t * Creates a tree view node.\n\t *\n\t * This is an abstract class, so this constructor should not be used directly.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#insertChildren}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Index of the node in the parent element or null if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that view tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// No parent or child doesn't exist in parent's children.\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\n\t\t\t/**\n\t\t\t * The node's parent does not contain this node. It means that the document tree is corrupted.\n\t\t\t *\n\t\t\t * @error view-node-not-found-in-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-node-not-found-in-parent: The node\\'s parent does not contain this node.' );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Node's next sibling, or `null` if it is the last child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling, or `null` if it is the first child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\t// Parent might be Node, null or DocumentFragment.\n\t\tif ( this.parent instanceof Node ) {\n\t\t\treturn this.parent.document;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/view/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Removes node from parent.\n\t */\n\tremove() {\n\t\tthis.parent.removeChildren( this.index );\n\t}\n\n\t/**\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._fireChange( type, node );\n\t\t}\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} Clone of this object with the parent property removed.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tdelete json.parent;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @method #clone\n\t * @returns {module:engine/view/node~Node} Clone of this node.\n\t */\n\n\t/**\n\t * Checks if provided node is similar to this node.\n\t *\n\t * @method #isSimilar\n\t * @returns {Boolean} True if nodes are similar.\n\t */\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * This method is useful when processing view tree objects that are of unknown type. For example, a function\n\t * may return {@link module:engine/view/documentfragment~DocumentFragment} or {@link module:engine/view/node~Node}\n\t * that can be either text node or element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tobj.is( 'node' ); // true for any node, false for document fragment\n\t *\t\tobj.is( 'documentFragment' ); // true for document fragment, false for any node\n\t *\t\tobj.is( 'element' ); // true for any element, false for text node or document fragment\n\t *\t\tobj.is( 'element', 'p' ); // true only for element which name is 'p'\n\t *\t\tobj.is( 'p' ); // shortcut for obj.is( 'element', 'p' )\n\t *\t\tobj.is( 'text' ); // true for text node, false for element and document fragment\n\t *\n\t * @method #is\n\t * @param {'element'|'containerElement'|'attributeElement'|'emptyElement'|'uiElement'|\n\t * 'rootElement'|'documentFragment'|'text'|'textProxy'} type\n\t * @returns {Boolean}\n\t */\n}\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix( Node, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @param {String} data Text.\n\t */\n\tconstructor( data ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @private\n\t\t * @member {String} module:engine/view/text~Text#_data\n\t\t */\n\t\tthis._data = data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\tclone() {\n\t\treturn new Text( this.data );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type ) {\n\t\treturn type == 'text';\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\tset data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._data = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n\t * from which the text proxy starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given offsetInText value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.' );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given length value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-length: Given length value is incorrect.' );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/view/textproxy~TextProxy#data\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in the `textNode` where this `TextProxy` instance starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.data.length !== this.textNode.data.length;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/view/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy';\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\n\t * root element, otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this.textNode : this.parent;\n\n\t\twhile ( parent !== null ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/objecttomap\n */\n\n/**\n * Transforms object to map.\n *\n *\t\tconst map = objectToMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap.get( 'foo' ); // 1\n *\n * @param {Object} obj Object to transform.\n * @returns {Map} Map created from object.\n */\nexport default function objectToMap( obj ) {\n\tconst map = new Map();\n\n\tfor ( const key in obj ) {\n\t\tmap.set( key, obj[ key ] );\n\t}\n\n\treturn map;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/isiterable\n */\n\n/**\n * Checks if value implements iterator interface.\n *\n * @param {*} value The value to check.\n * @returns {Boolean} True if value implements iterator interface.\n */\nexport default function isIterable( value ) {\n\treturn !!( value && value[ Symbol.iterator ] );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/matcher\n */\n\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n\t/**\n\t * Creates new instance of Matcher.\n\t *\n\t * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\n\t * more information.\n\t */\n\tconstructor( ...pattern ) {\n\t\tthis._patterns = [];\n\n\t\tthis.add( ...pattern );\n\t}\n\n\t/**\n\t * Adds pattern or patterns to matcher instance.\n\t *\n\t *\t\t// String.\n\t *\t\tmatcher.add( 'div' );\n\t *\n\t *\t\t// Regular expression.\n\t *\t\tmatcher.add( /^\\w/ );\n\t *\n\t *\t\t// Single class.\n\t *\t\tmatcher.add( {\n\t *\t\t\tclass: 'foobar'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n\t *\n\t * Multiple patterns can be added in one call:\n\t *\n\t * \t\tmatcher.add( 'div', { class: 'foobar' } );\n\t *\n\t * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\n\t * is provided it will be used to match element's name. Pattern can be also provided in a form\n\t * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n\t * Function's return value will be stored under `match` key of the object returned from\n\t * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n\t * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\n\t * @param {Object} [pattern.attribute] Object with key-value pairs representing attributes to match. Each object key\n\t * represents attribute name. Value under that key can be either:\n\t * * `true` - then attribute is just required (can be empty),\n\t * * a string - then attribute has to be equal, or\n\t * * a regular expression - then attribute has to match the expression.\n\t * @param {String|RegExp|Array} [pattern.class] Class name or array of class names to match. Each name can be\n\t * provided in a form of string or regular expression.\n\t * @param {Object} [pattern.style] Object with key-value pairs representing styles to match. Each object key\n\t * represents style name. Value under that key can be either a string or a regular expression and it will be used\n\t * to match style value.\n\t */\n\tadd( ...pattern ) {\n\t\tfor ( let item of pattern ) {\n\t\t\t// String or RegExp pattern is used as element's name.\n\t\t\tif ( typeof item == 'string' || item instanceof RegExp ) {\n\t\t\t\titem = { name: item };\n\t\t\t}\n\n\t\t\t// Single class name/RegExp can be provided.\n\t\t\tif ( item.class && ( typeof item.class == 'string' || item.class instanceof RegExp ) ) {\n\t\t\t\titem.class = [ item.class ];\n\t\t\t}\n\n\t\t\tthis._patterns.push( item );\n\t\t}\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns match information about first found\n\t * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n\t *\n\t * Example of returned object:\n\t *\n\t *\t\t{\n\t *\t\t\telement: <instance of found element>,\n\t *\t\t\tpattern: <pattern used to match found element>,\n\t *\t\t\tmatch: {\n\t *\t\t\t\tname: true,\n\t *\t\t\t\tattribute: [ 'title', 'href' ],\n\t *\t\t\t\tclass: [ 'foo' ],\n\t *\t\t\t\tstyle: [ 'color', 'position' ]\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#matchAll\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Object|null} result\n\t * @returns {module:engine/view/element~Element} result.element Matched view element.\n\t * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\n\t * @returns {Object} result.match Object representing matched element parts.\n\t * @returns {Boolean} [result.match.name] True if name of the element was matched.\n\t * @returns {Array} [result.match.attribute] Array with matched attribute names.\n\t * @returns {Array} [result.match.class] Array with matched class names.\n\t * @returns {Array} [result.match.style] Array with matched style names.\n\t */\n\tmatch( ...element ) {\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns array of match information with all found\n\t * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#match\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\n\t * see {@link module:engine/view/matcher~Matcher#match match method} description.\n\t */\n\tmatchAll( ...element ) {\n\t\tconst results = [];\n\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\tresults.push( {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results.length > 0 ? results : null;\n\t}\n\n\t/**\n\t * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n\t * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n\t *\n\t * @returns {String|null} Element name trying to match.\n\t */\n\tgetElementName() {\n\t\tif ( this._patterns.length !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst pattern = this._patterns[ 0 ];\n\t\tconst name = pattern.name;\n\n\t\treturn ( typeof pattern != 'function' && name && !( name instanceof RegExp ) ) ? name : null;\n\t}\n}\n\n// Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n// If element cannot be matched to provided pattern - returns `null`.\n//\n// @param {module:engine/view/element~Element} element\n// @param {Object|String|RegExp|Function} pattern\n// @returns {Object|null} Returns object with match information or null if element is not matching.\nfunction isElementMatching( element, pattern ) {\n\t// If pattern is provided as function - return result of that function;\n\tif ( typeof pattern == 'function' ) {\n\t\treturn pattern( element );\n\t}\n\n\tconst match = {};\n\t// Check element's name.\n\tif ( pattern.name ) {\n\t\tmatch.name = matchName( pattern.name, element.name );\n\n\t\tif ( !match.name ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's attributes.\n\tif ( pattern.attribute ) {\n\t\tmatch.attribute = matchAttributes( pattern.attribute, element );\n\n\t\tif ( !match.attribute ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's classes.\n\tif ( pattern.class ) {\n\t\tmatch.class = matchClasses( pattern.class, element );\n\n\t\tif ( !match.class ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Check element's styles.\n\tif ( pattern.style ) {\n\t\tmatch.style = matchStyles( pattern.style, element );\n\n\t\tif ( !match.style ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if name can be matched by provided pattern.\n//\n// @param {String|RegExp} pattern\n// @param {String} name\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\nfunction matchName( pattern, name ) {\n\t// If pattern is provided as RegExp - test against this regexp.\n\tif ( pattern instanceof RegExp ) {\n\t\treturn pattern.test( name );\n\t}\n\n\treturn pattern === name;\n}\n\n// Checks if attributes of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\nfunction matchAttributes( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasAttribute( name ) ) {\n\t\t\tconst attribute = element.getAttribute( name );\n\n\t\t\tif ( pattern === true ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else if ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( attribute ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( attribute === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if classes of provided element can be matched against provided patterns.\n//\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\nfunction matchClasses( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const pattern of patterns ) {\n\t\tif ( pattern instanceof RegExp ) {\n\t\t\tconst classes = element.getClassNames();\n\n\t\t\tfor ( const name of classes ) {\n\t\t\t\tif ( pattern.test( name ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( match.length === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if ( element.hasClass( pattern ) ) {\n\t\t\tmatch.push( pattern );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if styles of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\n// used as style name. Value of each key can be a string or regular expression to match against style value.\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\nfunction matchStyles( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasStyle( name ) ) {\n\t\t\tconst style = element.getStyle( name );\n\n\t\t\tif ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( style ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( style === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n/**\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\n * if a view element fits in a group of view elements described by the pattern.\n *\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\n *\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\n *\n *\t\t// Match any element with name equal to 'div'.\n *\t\tconst pattern = 'div';\n *\n *\t\t// Match any element which name starts on 'p'.\n *\t\tconst pattern = /^p/;\n *\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\n *\n *\t\t// Match view element's name.\n *\t\tconst pattern = { name: /^p/ };\n *\n *\t\t// Match view element which has matching attributes.\n *\t\tconst pattern = {\n *\t\t\tattribute: {\n *\t\t\t\ttitle: 'foobar',\t// Attribute title should equal 'foobar'.\n *\t\t\t\tfoo: /^\\w+/,\t\t// Attribute foo should match /^\\w+/ regexp.\n *\t\t\t\tbar: true\t\t\t// Attribute bar should be set (can be empty).\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Match view element which has given class.\n *\t\tconst pattern = {\n *\t\t\tclass: 'foobar'\n *\t\t};\n *\n *\t\t// Match view element class using regular expression.\n *\t\tconst pattern = {\n *\t\t\tclass: /foo.../\n *\t\t};\n *\n *\t\t// Multiple classes to match.\n *\t\tconst pattern = {\n *\t\t\tclass: [ 'baz', 'bar', /foo.../ ]\n *\t\t}:\n *\n *\t\t// Match view element which has given styles.\n *\t\tconst pattern = {\n *\t\t\tstyle: {\n *\t\t\t\tposition: 'absolute',\n *\t\t\t\tcolor: /^\\w*blue$/\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Pattern with multiple properties.\n *\t\tconst pattern = {\n *\t\t\tname: 'span',\n *\t\t\tstyle: {\n *\t\t\t\t'font-weight': 'bold'\n *\t\t\t},\n *\t\t\tclass: 'highlighted'\n *\t\t};\n *\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\n * returned by {@link ~Matcher#match} call.\n *\n *\t\t// Match an empty <div> element.\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'div' && element.childCount > 0 ) {\n *\t\t\t\t// Return which part of the element was matched.\n *\t\t\t\treturn { name: true };\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n *\t\t// Match a <p> element with big font (\"heading-like\" element).\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'p' ) {\n *\t\t\t\tconst fontSize = element.getStyle( 'font-size' );\n *\t\t\t\tconst size = fontSize.match( /(\\d+)/px );\n *\n *\t\t\t\tif ( size && Number( size[ 1 ] ) > 26 ) {\n *\t\t\t\t\treturn { name: true, attribute: [ 'font-size' ] };\n *\t\t\t\t}\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\n *\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\n *\n * @property {String|RegExp} [name] View element name to match.\n * @property {String|RegExp|Array.<String|RegExp>} [class] View element's class name(s) to match.\n * @property {Object} [style] Object with key-value pairs representing styles to match.\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\n * @property {Object} [attribute] Object with key-value pairs representing attributes to match.\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport isPlainObject from '@ckeditor/ckeditor5-utils/src/lib/lodash/isPlainObject';\nimport Matcher from './matcher';\n\n/**\n * View element.\n *\n * Editing engine does not define fixed HTML DTD. This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. Creating an element you should use {@link module:engine/view/containerelement~ContainerElement}\n * class, {@link module:engine/view/attributeelement~AttributeElement} class or {@link module:engine/view/emptyelement~EmptyElement} class.\n *\n * Note that for view elements which are not created from model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element, so\n * these will be instances of the {@link module:engine/view/element~Element}.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( 'div', { 'class': 'editor', 'contentEditable': 'true' } ); // object\n\t *\t\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( 'div', mapOfAttributes ); // map\n\t *\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * List of nodes to be inserted into created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis.insertChildren( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Map of styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new Map();\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tparseInlineStyles( this._styles, this._attrs.get( 'style' ) );\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @memeber {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/view/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'element' || type == this.name;\n\t\t} else {\n\t\t\treturn type == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\tclone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child.clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles = new Map( this._styles );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#insertChildren Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @fires module:engine/view/node~Node#change\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of appended nodes.\n\t */\n\tappendChildren( items ) {\n\t\treturn this.insertChildren( this.childCount, items );\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\t// This is not an optimal solution because of https://github.com/ckeditor/ckeditor5-engine/issues/454.\n\t\t// It can be simplified to `yield* this._attrs.keys();`.\n\t\tfor ( const key of this._attrs.keys() ) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tlet styleString = '';\n\n\t\t\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\t\t\tstyleString += `${ property }:${ value };`;\n\t\t\t\t}\n\n\t\t\t\treturn styleString;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn this._styles.size > 0;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\tinsertChildren( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\tremoveChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\tif ( !otherElement._styles.has( property ) || otherElement._styles.get( property ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for given property.\n\t * Undefined is returned if style does not exist.\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.get( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.keys();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * NOTE: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = Array.from( this._styles ).map( i => `${ i[ 0 ] }:${ i[ 1 ] }` ).sort().join( ';' );\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( styles == '' ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tparseInlineStyles( this._styles, value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.add( name ) );\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.delete( name ) );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( isPlainObject( property ) ) {\n\t\t\tconst keys = Object.keys( property );\n\n\t\t\tfor ( const key of keys ) {\n\t\t\t\tthis._styles.set( key, property[ key ] );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styles.set( property, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tproperty = Array.isArray( property ) ? property : [ property ];\n\t\tproperty.forEach( name => this._styles.delete( name ) );\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Map} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tif ( isPlainObject( attrs ) ) {\n\t\tattrs = objectToMap( attrs );\n\t} else {\n\t\tattrs = new Map( attrs );\n\t}\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n// Styles map is cleared before insertion.\n//\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\n// @param {String} stylesString Styles to parse.\nfunction parseInlineStyles( stylesMap, stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tstylesMap.clear();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t// eslint-disable-next-line no-case-declarations\n\t\t\t\tcase ';':\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @return {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/containerelement\n */\n\nimport Element from './element';\n\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly use for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define fixed HTML DTD. This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer.\n *\n * Creating an element you should use `ContainerElement` class or {@link module:engine/view/attributeelement~AttributeElement}. This is\n * important to define the type of the element because of two reasons:\n *\n * Firstly, {@link module:engine/view/domconverter~DomConverter} needs the information what is an editable block to convert elements to\n * DOM properly. {@link module:engine/view/domconverter~DomConverter} will ensure that `ContainerElement` is editable and it is possible\n * to put caret inside it, even if the container is empty.\n *\n * Secondly, {@link module:engine/view/writer~Writer view writer} uses this information.\n * Nodes {@link module:engine/view/writer~Writer#breakAttributes breaking} and {@link module:engine/view/writer~Writer#mergeAttributes\n * merging}\n * is performed only in a bounds of a container nodes.\n *\n * For instance if `<p>` is an container and `<b>` is attribute:\n *\n *\t\t<p><b>fo^o</b></p>\n *\n * {@link module:engine/view/writer~Writer#breakAttributes breakAttributes} will create:\n *\n *\t\t<p><b>fo</b><b>o</b></p>\n *\n * There might be a need to mark `<span>` element as a container node, for example in situation when it will be a\n * container of an inline widget:\n *\n *\t\t<span color=\"red\">foobar</span>\t\t// attribute\n *\t\t<span data-widget>foobar</span>\t\t// container\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n\t/**\n\t * Creates a container element.\n\t *\n\t * @see module:engine/view/element~Element\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'containerElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'containerElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n}\n\n// Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\tfor ( const child of this.getChildren() ) {\n\t\t// If there's any non-UI element – don't render the bogus.\n\t\tif ( !child.is( 'uiElement' ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If there are only UI elements – render the bogus at the end of the element.\n\treturn this.childCount;\n}\n","import eq from './eq';\nimport isArrayLike from './isArrayLike';\nimport isIndex from './_isIndex';\nimport isObject from './isObject';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  var length = args.length;\n  switch (length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import isObjectLike from './isObjectLike';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import isFunction from './isFunction';\nimport isObject from './isObject';\nimport isSymbol from './isSymbol';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = isFunction(value.valueOf) ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import apply from './_apply';\nimport toInteger from './toInteger';\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * created function and arguments from `start` and beyond provided as\n * an array.\n *\n * **Note:** This method is based on the\n * [rest parameter](https://mdn.io/rest_parameters).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Function\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.rest(function(what, names) {\n *   return what + ' ' + _.initial(names).join(', ') +\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n * });\n *\n * say('hello', 'fred', 'barney', 'pebbles');\n * // => 'hello fred, barney, & pebbles'\n */\nfunction rest(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    switch (start) {\n      case 0: return func.call(this, array);\n      case 1: return func.call(this, args[0], array);\n      case 2: return func.call(this, args[0], args[1], array);\n    }\n    var otherArgs = Array(start + 1);\n    index = -1;\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default rest;\n","import isIterateeCall from './_isIterateeCall';\nimport rest from './rest';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return rest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import root from './_root';\n\n/** Built-in value references. */\nvar Reflect = root.Reflect;\n\nexport default Reflect;\n","/**\n * Converts `iterator` to an array.\n *\n * @private\n * @param {Object} iterator The iterator to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction iteratorToArray(iterator) {\n  var data,\n      result = [];\n\n  while (!(data = iterator.next()).done) {\n    result.push(data.value);\n  }\n  return result;\n}\n\nexport default iteratorToArray;\n","import Reflect from './_Reflect';\nimport iteratorToArray from './_iteratorToArray';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar enumerate = Reflect ? Reflect.enumerate : undefined,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * The base implementation of `_.keysIn` which doesn't skip the constructor\n * property of prototypes or treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  object = object == null ? object : Object(object);\n\n  var result = [];\n  for (var key in object) {\n    result.push(key);\n  }\n  return result;\n}\n\n// Fallback for IE < 9 with es6-shim.\nif (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\n  baseKeysIn = function(object) {\n    return iteratorToArray(enumerate(object));\n  };\n}\n\nexport default baseKeysIn;\n","import baseKeysIn from './_baseKeysIn';\nimport indexKeys from './_indexKeys';\nimport isIndex from './_isIndex';\nimport isPrototype from './_isPrototype';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  var index = -1,\n      isProto = isPrototype(object),\n      props = baseKeysIn(object),\n      propsLength = props.length,\n      indexes = indexKeys(object),\n      skipIndexes = !!indexes,\n      result = indexes || [],\n      length = result.length;\n\n  while (++index < propsLength) {\n    var key = props[index];\n    if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default keysIn;\n","import assignValue from './_assignValue';\nimport copyObject from './_copyObject';\nimport createAssigner from './_createAssigner';\nimport isArrayLike from './isArrayLike';\nimport isPrototype from './_isPrototype';\nimport keysIn from './keysIn';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * function Bar() {\n *   this.d = 4;\n * }\n *\n * Foo.prototype.c = 3;\n * Bar.prototype.e = 5;\n *\n * _.assignIn({ 'a': 1 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keysIn(source), object);\n    return;\n  }\n  for (var key in source) {\n    assignValue(object, key, source[key]);\n  }\n});\n\nexport default assignIn;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/observablemixin\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport extend from './lib/lodash/extend';\nimport isObject from './lib/lodash/isObject';\n\nconst observablePropertiesSymbol = Symbol( 'observableProperties' );\nconst boundObservablesSymbol = Symbol( 'boundObservables' );\nconst boundPropertiesSymbol = Symbol( 'boundProperties' );\n\n/**\n * Mixin that injects the \"observable properties\" and data binding functionality described in the\n * {@link ~Observable} interface.\n *\n * @mixin ObservableMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/observablemixin~Observable\n */\nconst ObservableMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tset( name, value ) {\n\t\t// If the first parameter is an Object, iterate over its properties.\n\t\tif ( isObject( name ) ) {\n\t\t\tObject.keys( name ).forEach( property => {\n\t\t\t\tthis.set( property, name[ property ] );\n\t\t\t}, this );\n\n\t\t\treturn;\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst properties = this[ observablePropertiesSymbol ];\n\n\t\tif ( ( name in this ) && !properties.has( name ) ) {\n\t\t\t/**\n\t\t\t * Cannot override an existing property.\n\t\t\t *\n\t\t\t * This error is thrown when trying to {@link ~Observable#set set} an property with\n\t\t\t * a name of an already existing property. For example:\n\t\t\t *\n\t\t\t *\t\tlet observable = new Model();\n\t\t\t *\t\tobservable.property = 1;\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// throws\n\t\t\t *\n\t\t\t *\t\tobservable.set( 'property', 1 );\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n\t\t\t *\n\t\t\t * @error observable-set-cannot-override\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-set-cannot-override: Cannot override an existing property.' );\n\t\t}\n\n\t\tObject.defineProperty( this, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget() {\n\t\t\t\treturn properties.get( name );\n\t\t\t},\n\n\t\t\tset( value ) {\n\t\t\t\tconst oldValue = properties.get( name );\n\n\t\t\t\t// Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n\t\t\t\t// Note: When properties map has no such own property, then its value is undefined.\n\t\t\t\tif ( oldValue !== value || !properties.has( name ) ) {\n\t\t\t\t\tproperties.set( name, value );\n\t\t\t\t\tthis.fire( 'change:' + name, name, value, oldValue );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis[ name ] = value;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbind( ...bindProperties ) {\n\t\tif ( !bindProperties.length || !isStringArray( bindProperties ) ) {\n\t\t\t/**\n\t\t\t * All properties must be strings.\n\t\t\t *\n\t\t\t * @error observable-bind-wrong-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-wrong-properties: All properties must be strings.' );\n\t\t}\n\n\t\tif ( ( new Set( bindProperties ) ).size !== bindProperties.length ) {\n\t\t\t/**\n\t\t\t * Properties must be unique.\n\t\t\t *\n\t\t\t * @error observable-bind-duplicate-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-duplicate-properties: Properties must be unique.' );\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\n\t\tbindProperties.forEach( propertyName => {\n\t\t\tif ( boundProperties.has( propertyName ) ) {\n\t\t\t\t/**\n\t\t\t\t * Cannot bind the same property more that once.\n\t\t\t\t *\n\t\t\t\t * @error observable-bind-rebind\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-bind-rebind: Cannot bind the same property more that once.' );\n\t\t\t}\n\t\t} );\n\n\t\tconst bindings = new Map();\n\n\t\t// @typedef {Object} Binding\n\t\t// @property {Array} property Property which is bound.\n\t\t// @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\n\t\t// @property {Array} callback A function which processes `to` components.\n\t\tbindProperties.forEach( a => {\n\t\t\tconst binding = { property: a, to: [] };\n\n\t\t\tboundProperties.set( a, binding );\n\t\t\tbindings.set( a, binding );\n\t\t} );\n\n\t\t// @typedef {Object} BindChain\n\t\t// @property {Function} to See {@link ~ObservableMixin#_bindTo}.\n\t\t// @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\n\t\t// @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\n\t\t// @property {Array} _bindProperties Array of `_observable` properties to be bound.\n\t\t// @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\n\t\t// @property {Map} _bindings Stores bindings to be kept in\n\t\t// {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\n\t\t// initiated in this binding chain.\n\t\treturn {\n\t\t\tto: bindTo,\n\t\t\ttoMany: bindToMany,\n\n\t\t\t_observable: this,\n\t\t\t_bindProperties: bindProperties,\n\t\t\t_to: [],\n\t\t\t_bindings: bindings\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tunbind( ...unbindProperties ) {\n\t\t// Nothing to do here if not inited yet.\n\t\tif ( !( observablePropertiesSymbol in this ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\t\tconst boundObservables = this[ boundObservablesSymbol ];\n\n\t\tif ( unbindProperties.length ) {\n\t\t\tif ( !isStringArray( unbindProperties ) ) {\n\t\t\t\t/**\n\t\t\t\t * Properties must be strings.\n\t\t\t\t *\n\t\t\t\t * @error observable-unbind-wrong-properties\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-unbind-wrong-properties: Properties must be strings.' );\n\t\t\t}\n\n\t\t\tunbindProperties.forEach( propertyName => {\n\t\t\t\tconst binding = boundProperties.get( propertyName );\n\n\t\t\t\t// Nothing to do if the binding is not defined\n\t\t\t\tif ( !binding ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet toObservable, toProperty, toProperties, toPropertyBindings;\n\n\t\t\t\tbinding.to.forEach( to => {\n\t\t\t\t\t// TODO: ES6 destructuring.\n\t\t\t\t\ttoObservable = to[ 0 ];\n\t\t\t\t\ttoProperty = to[ 1 ];\n\t\t\t\t\ttoProperties = boundObservables.get( toObservable );\n\t\t\t\t\ttoPropertyBindings = toProperties[ toProperty ];\n\n\t\t\t\t\ttoPropertyBindings.delete( binding );\n\n\t\t\t\t\tif ( !toPropertyBindings.size ) {\n\t\t\t\t\t\tdelete toProperties[ toProperty ];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !Object.keys( toProperties ).length ) {\n\t\t\t\t\t\tboundObservables.delete( toObservable );\n\t\t\t\t\t\tthis.stopListening( toObservable, 'change' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tboundProperties.delete( propertyName );\n\t\t\t} );\n\t\t} else {\n\t\t\tboundObservables.forEach( ( bindings, boundObservable ) => {\n\t\t\t\tthis.stopListening( boundObservable, 'change' );\n\t\t\t} );\n\n\t\t\tboundObservables.clear();\n\t\t\tboundProperties.clear();\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdecorate( methodName ) {\n\t\tconst originalMethod = this[ methodName ];\n\n\t\tif ( !originalMethod ) {\n\t\t\t/**\n\t\t\t * Cannot decorate an undefined method.\n\t\t\t *\n\t\t\t * @error observablemixin-cannot-decorate-undefined\n\t\t\t * @param {Object} object The object which method should be decorated.\n\t\t\t * @param {String} methodName Name of the method which does not exist.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.',\n\t\t\t\t{ object: this, methodName }\n\t\t\t);\n\t\t}\n\n\t\tthis.on( methodName, ( evt, args ) => {\n\t\t\tevt.return = originalMethod.apply( this, args );\n\t\t} );\n\n\t\tthis[ methodName ] = function( ...args ) {\n\t\t\treturn this.fire( methodName, args );\n\t\t};\n\t}\n};\n\nextend( ObservableMixin, EmitterMixin );\n\nexport default ObservableMixin;\n\n// Init symbol properties needed to for the observable mechanism to work.\n//\n// @private\n// @param {module:utils/observablemixin~ObservableMixin} observable\nfunction initObservable( observable ) {\n\t// Do nothing if already inited.\n\tif ( observablePropertiesSymbol in observable ) {\n\t\treturn;\n\t}\n\n\t// The internal hash containing the observable's state.\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, observablePropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Map containing bindings to external observables. It shares the binding objects\n\t// (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\n\t// it is used to observe external observables to update own properties accordingly.\n\t// See {@link module:utils/observablemixin~ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\tz: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t},\n\t//\t\t\t\tC: {\n\t//\t\t\t\t\tw: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundObservablesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Object that stores which properties of this observable are bound and how. It shares\n\t// the binding objects (`{ observable: A, property: 'a', to: ... }`) with {@link utils.ObservableMixin#_boundObservables}.\n\t// This data structure is a reverse of {@link utils.ObservableMixin#_boundObservables} and it is helpful for\n\t// {@link utils.ObservableMixin#unbind}.\n\t//\n\t// See {@link utils.ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundPropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n}\n\n// A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\n//\n// @private\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\nfunction bindTo( ...args ) {\n\tconst parsedArgs = parseBindToArgs( ...args );\n\tconst bindingsKeys = Array.from( this._bindings.keys() );\n\tconst numberOfBindings = bindingsKeys.length;\n\n\t// Eliminate A.bind( 'x' ).to( B, C )\n\tif ( !parsedArgs.callback && parsedArgs.to.length > 1 ) {\n\t\t/**\n\t\t * Binding multiple observables only possible with callback.\n\t\t *\n\t\t * @error observable-bind-no-callback\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-no-callback: Binding multiple observables only possible with callback.' );\n\t}\n\n\t// Eliminate A.bind( 'x', 'y' ).to( B, callback )\n\tif ( numberOfBindings > 1 && parsedArgs.callback ) {\n\t\t/**\n\t\t * Cannot bind multiple properties and use a callback in one binding.\n\t\t *\n\t\t * @error observable-bind-to-extra-callback\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.' );\n\t}\n\n\tparsedArgs.to.forEach( to => {\n\t\t// Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n\t\tif ( to.properties.length && to.properties.length !== numberOfBindings ) {\n\t\t\t/**\n\t\t\t * The number of properties must match.\n\t\t\t *\n\t\t\t * @error observable-bind-to-properties-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-to-properties-length: The number of properties must match.' );\n\t\t}\n\n\t\t// When no to.properties specified, observing source properties instead i.e.\n\t\t// A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n\t\tif ( !to.properties.length ) {\n\t\t\tto.properties = this._bindProperties;\n\t\t}\n\t} );\n\n\tthis._to = parsedArgs.to;\n\n\t// Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n\tif ( parsedArgs.callback ) {\n\t\tthis._bindings.get( bindingsKeys[ 0 ] ).callback = parsedArgs.callback;\n\t}\n\n\tattachBindToListeners( this._observable, this._to );\n\n\t// Update observable._boundProperties and observable._boundObservables.\n\tupdateBindToBound( this );\n\n\t// Set initial values of bound properties.\n\tthis._bindProperties.forEach( propertyName => {\n\t\tupdateBoundObservableProperty( this._observable, propertyName );\n\t} );\n}\n\n// Binds to an attribute in a set of iterable observables.\n//\n// @private\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @param {Function} callback\nfunction bindToMany( observables, attribute, callback ) {\n\tif ( this._bindings.size > 1 ) {\n\t\t/**\n\t\t * Binding one attribute to many observables only possible with one attribute.\n\t\t *\n\t\t * @error observable-bind-to-many-not-one-binding\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().' );\n\t}\n\n\tthis.to(\n\t\t// Bind to #attribute of each observable...\n\t\t...getBindingTargets( observables, attribute ),\n\t\t// ...using given callback to parse attribute values.\n\t\tcallback\n\t);\n}\n\n// Returns an array of binding components for\n// {@link Observable#bind} from a set of iterable observables.\n//\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @returns {Array.<String|Observable>}\nfunction getBindingTargets( observables, attribute ) {\n\tconst observableAndAttributePairs = observables.map( observable => [ observable, attribute ] );\n\n\t// Merge pairs to one-dimension array of observables and attributes.\n\treturn Array.prototype.concat.apply( [], observableAndAttributePairs );\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n\n// Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n// an object with a parsed structure. For example\n//\n//\t\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\n//\n// becomes\n//\n//\t\t{\n//\t\t\tto: [\n//\t\t\t\t{ observable: B, properties: [ 'a' ] },\n//\t\t\t\t{ observable: C, properties: [ 'b' ] },\n//\t\t\t],\n//\t\t\tcallback: call\n// \t\t}\n//\n// @private\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\n// @returns {Object}\nfunction parseBindToArgs( ...args ) {\n\t// Eliminate A.bind( 'x' ).to()\n\tif ( !args.length ) {\n\t\t/**\n\t\t * Invalid argument syntax in `to()`.\n\t\t *\n\t\t * @error observable-bind-to-parse-error\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.' );\n\t}\n\n\tconst parsed = { to: [] };\n\tlet lastObservable;\n\n\tif ( typeof args[ args.length - 1 ] == 'function' ) {\n\t\tparsed.callback = args.pop();\n\t}\n\n\targs.forEach( a => {\n\t\tif ( typeof a == 'string' ) {\n\t\t\tlastObservable.properties.push( a );\n\t\t} else if ( typeof a == 'object' ) {\n\t\t\tlastObservable = { observable: a, properties: [] };\n\t\t\tparsed.to.push( lastObservable );\n\t\t} else {\n\t\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.' );\n\t\t}\n\t} );\n\n\treturn parsed;\n}\n\n// Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\n//\n// @private\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\nfunction updateBoundObservables( observable, binding, toObservable, toPropertyName ) {\n\tconst boundObservables = observable[ boundObservablesSymbol ];\n\tconst bindingsToObservable = boundObservables.get( toObservable );\n\tconst bindings = bindingsToObservable || {};\n\n\tif ( !bindings[ toPropertyName ] ) {\n\t\tbindings[ toPropertyName ] = new Set();\n\t}\n\n\t// Pass the binding to a corresponding Set in `observable._boundObservables`.\n\tbindings[ toPropertyName ].add( binding );\n\n\tif ( !bindingsToObservable ) {\n\t\tboundObservables.set( toObservable, bindings );\n\t}\n}\n\n// Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n// with {@link BindChain}.\n//\n// Assuming the following binding being created\n//\n// \t\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\n//\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [] },\n// \t\t\tb: { observable: A, property: 'b', to: [] },\n// \t\t}\n//\n// Iterate over all bindings in this chain and fill their `to` properties with\n// corresponding to( ... ) arguments (components of the binding), so\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n// \t\t\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n// \t\t}\n//\n// Then update the structure of {@link Observable#_boundObservables} with updated\n// binding, so it becomes:\n//\n// \t\tMap( {\n// \t\t\tB: {\n// \t\t\t\tx: Set( [\n// \t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n// \t\t\t\t] ),\n// \t\t\t\ty: Set( [\n// \t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n// \t\t\t\t] )\n//\t\t\t}\n// \t\t} )\n//\n// @private\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\nfunction updateBindToBound( chain ) {\n\tlet toProperty;\n\n\tchain._bindings.forEach( ( binding, propertyName ) => {\n\t\t// Note: For a binding without a callback, this will run only once\n\t\t// like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n\t\t// TODO: ES6 destructuring.\n\t\tchain._to.forEach( to => {\n\t\t\ttoProperty = to.properties[ binding.callback ? 0 : chain._bindProperties.indexOf( propertyName ) ];\n\n\t\t\tbinding.to.push( [ to.observable, toProperty ] );\n\t\t\tupdateBoundObservables( chain._observable, binding, to.observable, toProperty );\n\t\t} );\n\t} );\n}\n\n// Updates an property of a {@link Observable} with a value\n// determined by an entry in {@link Observable#_boundProperties}.\n//\n// @private\n// @param {Observable} observable A observable which property is to be updated.\n// @param {String} propertyName An property to be updated.\nfunction updateBoundObservableProperty( observable, propertyName ) {\n\tconst boundProperties = observable[ boundPropertiesSymbol ];\n\tconst binding = boundProperties.get( propertyName );\n\tlet propertyValue;\n\n\t// When a binding with callback is created like\n\t//\n\t// \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n\t//\n\t// collect B.b and C.c, then pass them to callback to set A.a.\n\tif ( binding.callback ) {\n\t\tpropertyValue = binding.callback.apply( observable, binding.to.map( to => to[ 0 ][ to[ 1 ] ] ) );\n\t} else {\n\t\tpropertyValue = binding.to[ 0 ];\n\t\tpropertyValue = propertyValue[ 0 ][ propertyValue[ 1 ] ];\n\t}\n\n\tif ( observable.hasOwnProperty( propertyName ) ) {\n\t\tobservable[ propertyName ] = propertyValue;\n\t} else {\n\t\tobservable.set( propertyName, propertyValue );\n\t}\n}\n\n// Starts listening to changes in {@link BindChain._to} observables to update\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n// initial state of {@link BindChain._observable}.\n//\n// @private\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\nfunction attachBindToListeners( observable, toBindings ) {\n\ttoBindings.forEach( to => {\n\t\tconst boundObservables = observable[ boundObservablesSymbol ];\n\t\tlet bindings;\n\n\t\t// If there's already a chain between the observables (`observable` listens to\n\t\t// `to.observable`), there's no need to create another `change` event listener.\n\t\tif ( !boundObservables.get( to.observable ) ) {\n\t\t\tobservable.listenTo( to.observable, 'change', ( evt, propertyName ) => {\n\t\t\t\tbindings = boundObservables.get( to.observable )[ propertyName ];\n\n\t\t\t\t// Note: to.observable will fire for any property change, react\n\t\t\t\t// to changes of properties which are bound only.\n\t\t\t\tif ( bindings ) {\n\t\t\t\t\tbindings.forEach( binding => {\n\t\t\t\t\t\tupdateBoundObservableProperty( observable, binding.property );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n}\n\n/**\n * Interface which adds \"observable properties\" and data binding functionality.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\n *\n * @interface Observable\n * @extends module:utils/emittermixin~Emitter\n */\n\n/**\n * Fired when a property changed value.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} )\n *\n *\t\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\n *\n * @event #change:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Creates and sets the value of an observable property of this object. Such an property becomes a part\n * of the state and is be observable.\n *\n * It accepts also a single object literal containing key/value pairs with properties to be set.\n *\n * This method throws the `observable-set-cannot-override` error if the observable instance already\n * have a property with the given property name. This prevents from mistakenly overriding existing\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\n *\n * @method #set\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\n */\n\n/**\n * Binds observable properties to another objects implementing {@link module:utils/observablemixin~Observable}\n * interface (like {@link module:ui/model~Model}).\n *\n * Once bound, the observable will immediately share the current state of properties\n * of the observable it is bound to and react to the changes to these properties\n * in the future.\n *\n * **Note**: To release the binding use {@link module:utils/observablemixin~Observable#unbind}.\n *\n * Using `bind().to()` chain:\n *\n *\t\tA.bind( 'a' ).to( B );\n *\t\tA.bind( 'a' ).to( B, 'b' );\n *\t\tA.bind( 'a', 'b' ).to( B, 'c', 'd' );\n *\t\tA.bind( 'a' ).to( B, 'b', C, 'd', ( b, d ) => b + d );\n *\n * It is also possible to bind to the same property in a observables collection using `bind().toMany()` chain:\n *\n *\t\tA.bind( 'a' ).toMany( [ B, C, D ], 'x', ( a, b, c ) => a + b + c );\n *\t\tA.bind( 'a' ).toMany( [ B, C, D ], 'x', ( ...x ) => x.every( x => x ) );\n *\n * @method #bind\n * @param {...String} bindProperties Observable properties that will be bound to another observable(s).\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\n */\n\n/**\n * Removes the binding created with {@link #bind}.\n *\n *\t\tA.unbind( 'a' );\n *\t\tA.unbind();\n *\n * @method #unbind\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\n * be released if no properties provided.\n */\n\n/**\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\n * (named after the method) and the original action will be plugged as a listener to that event.\n *\n * This is a very simplified method decoration. Itself it doesn't change the behavior of a method (expect adding the event),\n * but it allows to modify it later on by listening to the method's event.\n *\n * For example, in order to cancel the method execution one can stop the event:\n *\n *\t\tclass Foo {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.decorate( 'method' );\n *\t\t\t}\n *\n *\t\t\tmethod() {\n *\t\t\t\tconsole.log( 'called!' );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst foo = new Foo();\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.stop();\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method(); // Nothing is logged.\n *\n *\n * Note: we used a high priority listener here to execute this callback before the one which\n * calls the original method (which used the default priority).\n *\n * It's also possible to change the return value:\n *\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.return = 'Foo!';\n *\t\t} );\n *\n *\t\tfoo.method(); // -> 'Foo'\n *\n * Finally, it's possible to access and modify the parameters:\n *\n *\t\tmethod( a, b ) {\n *\t\t\tconsole.log( `${ a }, ${ b }`  );\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tfoo.on( 'method', ( evt, args ) => {\n *\t\t\targs[ 0 ] = 3;\n *\n *\t\t\tconsole.log( args[ 1 ] ); // -> 2\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method( 1, 2 ); // -> '3, 2'\n *\n * @method #decorate\n * @param {String} methodName Name of the method to decorate.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/editableelement\n */\n\nimport ContainerElement from './containerelement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\nconst documentSymbol = Symbol( 'document' );\n\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {module:engine/view/document~Document Document} is read-only.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditableElement extends ContainerElement {\n\t/**\n\t * Creates an editable element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Whether the editable is in read-write or read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Whether the editable is focused.\n\t\t *\n\t\t * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n\t\t * selection is changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The {@link module:engine/view/document~Document} which is an owner of this root.\n\t\t * Can only by set once.\n\t\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-editableelement-document-already-set`\n\t\t * when document is already set.\n\t\t *\n\t\t * @member {module:engine/view/document~Document} #document\n\t\t */\n\t}\n\n\t/**\n\t * Returns document associated with the editable.\n\t *\n\t * @readonly\n\t * @return {module:engine/view/document~Document}\n\t */\n\tget document() {\n\t\treturn this.getCustomProperty( documentSymbol );\n\t}\n\n\t/**\n\t * Sets document of this editable element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document\n\t */\n\tset _document( document ) {\n\t\tif ( this.getCustomProperty( documentSymbol ) ) {\n\t\t\t/**\n\t\t\t * View document is already set. It can only be set once.\n\t\t\t *\n\t\t\t * @error view-editableelement-document-already-set\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-editableelement-document-already-set: View document is already set.' );\n\t\t}\n\n\t\tthis._setCustomProperty( documentSymbol, document );\n\n\t\tthis.bind( 'isReadOnly' ).to( document );\n\n\t\tthis.bind( 'isFocused' ).to(\n\t\t\tdocument,\n\t\t\t'isFocused',\n\t\t\tisFocused => isFocused && document.selection.editableElement == this\n\t\t);\n\n\t\t// Update focus state based on selection changes.\n\t\tthis.listenTo( document.selection, 'change', () => {\n\t\t\tthis.isFocused = document.isFocused && document.selection.editableElement == this;\n\t\t} );\n\t}\n}\n\nmix( EditableElement, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/rooteditableelement\n */\n\nimport EditableElement from './editableelement';\n\nconst rootNameSymbol = Symbol( 'rootName' );\n\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n *\n * @extends module:engine/view/editableelement~EditableElement\n */\nexport default class RootEditableElement extends EditableElement {\n\t/**\n\t * Creates root editable element.\n\t *\n\t * @param {String} name Node name.\n\t */\n\tconstructor( name ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n\t\t * other name is set, `main` name is used.\n\t\t *\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = 'main';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tget rootName() {\n\t\treturn this.getCustomProperty( rootNameSymbol );\n\t}\n\n\tset rootName( rootName ) {\n\t\tthis._setCustomProperty( rootNameSymbol, rootName );\n\t}\n\n\t/**\n\t * Overrides old element name and sets new one.\n\t * This is needed because view roots are created before they are attached to the DOM.\n\t * The name of the root element is temporary at this stage. It has to be changed when the\n\t * view root element is attached to the DOM element.\n\t *\n\t * @protected\n\t * @param {String} name The new name of element.\n\t */\n\tset _name( name ) {\n\t\tthis.name = name;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/treewalker\n */\n\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} options Object with configuration.\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/view/position~Position} [options.startPosition] Starting position.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all characters from\n\t * {@link module:engine/view/text~Text} should be returned as one {@link module:engine/view/text~Text} (`false`) ore one by one as\n\t * {@link module:engine/view/textproxy~TextProxy} (`true`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/view/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position have been defined.\n\t\t\t *\n\t\t\t * @error view-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.' );\n\t\t}\n\n\t\tif ( options.direction && options.direction != 'forward' && options.direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\t{ direction: options.direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/range~Range} module:engine/view/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n\t\t * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position} module:engine/view/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = Position.createFromPosition( options.startPosition );\n\t\t} else {\n\t\t\tthis.position = Position.createFromPosition( options.boundaries[ options.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/view/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = options.direction || 'forward';\n\n\t\t/**\n\t\t * Flag indicating whether all characters from {@link module:engine/view/text~Text} should be returned as one\n\t\t * {@link module:engine/view/text~Text} or one by one as {@link module:engine/view/textproxy~TextProxy}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If set to `true`, walker will not\n\t\t * return a parent node of the start position. Each {@link module:engine/view/element~Element} will be returned once.\n\t\t * When set to `false` each element might be returned twice: for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\twalker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n\t * \t\twalker.skip( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} Object implementing iterator interface, returning\n\t * information about taken step.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done `true` if iterator is done, `false` otherwise.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tlet position = Position.createFromPosition( this.position );\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.childCount ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just after current position.\n\t\tlet node;\n\n\t\t// Text is a specific parent because it contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtEnd ) {\n\t\t\t\t// Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position.createAfter( parent );\n\n\t\t\t\treturn this._next();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap by TextProxy.\n\t\t\t\tif ( node == this._boundaryEndParent ) {\n\t\t\t\t\tcharactersCount = this.boundaries.end.offset;\n\t\t\t\t\titem = new TextProxy( node, 0, charactersCount );\n\t\t\t\t\tposition = Position.createAfter( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving forward.\n\t\t\t\t\tposition.offset++;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\ttextLength = 1;\n\t\t\t} else {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n\n\t\t\t\ttextLength = endOffset - position.offset;\n\t\t\t}\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tposition.offset += textLength;\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition = Position.createAfter( parent );\n\t\t\tthis.position = position;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn this._formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tlet position = Position.createFromPosition( this.position );\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position.\n\t\tlet node;\n\n\t\t// Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\t// Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position.createBefore( parent );\n\n\t\t\t\treturn this._previous();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset - 1 ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset - 1 );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, node.childCount );\n\t\t\t\tthis.position = position;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn this._formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition.offset--;\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, node.data.length );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._previous();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap by TextProxy.\n\t\t\t\tif ( node == this._boundaryStartParent ) {\n\t\t\t\t\tconst offset = this.boundaries.start.offset;\n\n\t\t\t\t\titem = new TextProxy( node, offset, node.data.length - offset );\n\t\t\t\t\tcharactersCount = item.data.length;\n\t\t\t\t\tposition = Position.createBefore( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving backward.\n\t\t\t\t\tposition.offset--;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( !this.singleCharacters ) {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n\n\t\t\t\ttextLength = position.offset - startOffset;\n\t\t\t} else {\n\t\t\t\ttextLength = 1;\n\t\t\t}\n\n\t\t\tposition.offset -= textLength;\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition = Position.createBefore( parent );\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n\n\t/**\n\t * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n\t *\n\t * @private\n\t * @param {module:engine/view/treewalker~TreeWalkerValueType} type Type of step.\n\t * @param {module:engine/view/item~Item} item Item between old and new position.\n\t * @param {module:engine/view/position~Position} previousPosition Previous position of iterator.\n\t * @param {module:engine/view/position~Position} nextPosition Next position of iterator.\n\t * @param {Number} [length] Length of the item.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue}\n\t */\n\t_formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\t\t// Text is a specific parent, because contains string instead of children.\n\t\t// Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n\t\t// or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n\t\t// we move it just before or just after Text.\n\t\tif ( item instanceof TextProxy ) {\n\t\t\t// Position is at the end of Text.\n\t\t\tif ( item.offsetInText + item.data.length == item.textNode.data.length ) {\n\t\t\t\tif ( this.direction == 'forward' && !( this.boundaries && this.boundaries.end.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position.createAfter( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position.createAfter( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position is at the begining ot the text.\n\t\t\tif ( item.offsetInText === 0 ) {\n\t\t\t\tif ( this.direction == 'backward' && !( this.boundaries && this.boundaries.start.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position.createBefore( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position.createBefore( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\ttype,\n\t\t\t\titem,\n\t\t\t\tpreviousPosition,\n\t\t\t\tnextPosition,\n\t\t\t\tlength\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Type of the step made by {@link module:engine/view/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end\n * of node, or `'text'` if walker traversed over single and multiple characters.\n * For {@link module:engine/view/text~Text} `elementStart` and `elementEnd` is not returned.\n *\n * @typedef {String} module:engine/view/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/view/treewalker~TreeWalker} when traversing tree view.\n *\n * @typedef {Object} module:engine/view/treewalker~TreeWalkerValue\n * @property {module:engine/view/treewalker~TreeWalkerValueType} type\n * @property {module:engine/view/item~Item} item Item between old and new positions of {@link module:engine/view/treewalker~TreeWalker}.\n * @property {module:engine/view/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item. Note that it is more efficient to use this position then calculate the position before\n * the node using {@link module:engine/view/position~Position.createBefore}.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the Text to its parent just before or just after Text.\n * @property {module:engine/view/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the Text to its parent just before or just after Text.\n * @property {Number} [length] Length of the item. For `'elementStart'` it is 1. For `'text'` it is\n * the length of the text. For `'elementEnd'` it is undefined.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/comparearrays\n */\n\n/**\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\n * it means that arrays differ.\n *\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2 ] );\t\t// 'same'\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\t\t// 'prefix'\n *\t\tcompareArrays( [ 0, 2 ], [ 0 ] );\t\t\t// 'extension'\n *\t\tcompareArrays( [ 0, 2 ], [ 1, 2 ] );\t\t// 0\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 1 ] );\t\t// 1\n *\n * @param {Array} a Array that is compared.\n * @param {Array} b Array to compare with.\n * @returns {module:utils/comparearrays~ArrayRelation} How array `a` is related to `b`.\n */\nexport default function compareArrays( a, b ) {\n\tconst minLen = Math.min( a.length, b.length );\n\n\tfor ( let i = 0; i < minLen; i++ ) {\n\t\tif ( a[ i ] != b[ i ] ) {\n\t\t\t// The arrays are different.\n\t\t\treturn i;\n\t\t}\n\t}\n\n\t// Both arrays were same at all points.\n\tif ( a.length == b.length ) {\n\t\t// If their length is also same, they are the same.\n\t\treturn 'same';\n\t} else if ( a.length < b.length ) {\n\t\t// Compared array is shorter so it is a prefix of the other array.\n\t\treturn 'prefix';\n\t} else {\n\t\t// Compared array is longer so it is an extension of the other array.\n\t\treturn 'extension';\n\t}\n}\n\n/**\n * @typedef {'extension'|'same'|'prefix'} module:utils/comparearrays~ArrayRelation\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/position\n */\n\nimport TreeWalker from './treewalker';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement';\n\n/**\n * Position in the tree. Position is always located before or after a node.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n\t * @param {Number} offset Position offset.\n\t */\n\tconstructor( parent, offset ) {\n\t\t/**\n\t\t * Position parent.\n\t\t *\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t * module:engine/view/position~Position#parent\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * Position offset.\n\t\t *\n\t\t * @member {Number} module:engine/view/position~Position#offset\n\t\t */\n\t\tthis.offset = offset;\n\t}\n\n\t/**\n\t * Node directly after the position. Equals `null` when there is no node after position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset ) || null;\n\t}\n\n\t/**\n\t * Node directly before the position. Equals `null` when there is no node before position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset - 1 ) || null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\tconst endOffset = this.parent.is( 'text' ) ? this.parent.data.length : this.parent.childCount;\n\n\t\treturn this.offset === endOffset;\n\t}\n\n\t/**\n\t * Position's root, that is the root of the position's parent element.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.parent.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n\t * position is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tlet editable = this.parent;\n\n\t\twhile ( !( editable instanceof EditableElement ) ) {\n\t\t\tif ( editable.parent ) {\n\t\t\t\teditable = editable.parent;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn editable;\n\t}\n\n\t/**\n\t * Returns a new instance of Position with offset incremented by `shift` value.\n\t *\n\t * @param {Number} shift How position offset should get changed. Accepts negative values.\n\t * @returns {module:engine/view/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position.createFromPosition( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n\t * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n\t *\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions.\n\t *\n\t * @param {module:engine/view/position~Position} position\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Checks whether this position equals given position.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\n\t}\n\n\t/**\n\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\n\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isAfter\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\n\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isBefore\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\n\t * different when they are located in separate roots.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/view/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.isEqual( otherPosition ) ) {\n\t\t\treturn 'same';\n\t\t}\n\n\t\t// If positions have same parent.\n\t\tif ( this.parent === otherPosition.parent ) {\n\t\t\treturn this.offset - otherPosition.offset < 0 ? 'before' : 'after';\n\t\t}\n\n\t\t// Get path from root to position's parent element.\n\t\tconst path = this.getAncestors();\n\t\tconst otherPath = otherPosition.getAncestors();\n\n\t\t// Compare both path arrays to find common ancestor.\n\t\tconst result = compareArrays( path, otherPath );\n\n\t\tlet commonAncestorIndex;\n\n\t\tswitch ( result ) {\n\t\t\tcase 0:\n\t\t\t\t// No common ancestors found.\n\t\t\t\treturn 'different';\n\n\t\t\tcase 'prefix':\n\t\t\t\tcommonAncestorIndex = path.length - 1;\n\t\t\t\tbreak;\n\n\t\t\tcase 'extension':\n\t\t\t\tcommonAncestorIndex = otherPath.length - 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tcommonAncestorIndex = result - 1;\n\t\t}\n\n\t\t// Common ancestor of two positions.\n\t\tconst commonAncestor = path[ commonAncestorIndex ];\n\t\tconst nextAncestor1 = path[ commonAncestorIndex + 1 ];\n\t\tconst nextAncestor2 = otherPath[ commonAncestorIndex + 1 ];\n\n\t\t// Check if common ancestor is not one of the parents.\n\t\tif ( commonAncestor === this.parent ) {\n\t\t\tconst index = this.offset - nextAncestor2.index;\n\n\t\t\treturn index <= 0 ? 'before' : 'after';\n\t\t} else if ( commonAncestor === otherPosition.parent ) {\n\t\t\tconst index = nextAncestor1.index - otherPosition.offset;\n\n\t\t\treturn index < 0 ? 'before' : 'after';\n\t\t}\n\n\t\tconst index = nextAncestor1.index - nextAncestor2.index;\n\n\t\t// Compare indexes of next ancestors inside common one.\n\t\treturn index < 0 ? 'before' : 'after';\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/view/position~Position.createBefore},\n\t * * {@link module:engine/view/position~Position.createAfter},\n\t * * {@link module:engine/view/position~Position.createFromPosition}.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn this.createFromPosition( itemOrPosition );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.is( 'text' ) ? node.data.length : node.childCount;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this.createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this.createAfter( node );\n\t\t\t} else if ( !offset ) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\treturn new Position( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic createAfter( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText + item.data.length );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root.\n\t\t\t *\n\t\t\t * @error view-position-after-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-after-root: You can not make position after root.', { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index + 1 );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic createBefore( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You cannot make a position before a root.\n\t\t\t *\n\t\t\t * @error view-position-before-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-before-root: You can not make position before root.', { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index );\n\t}\n\n\t/**\n\t * Creates and returns a new instance of `Position`, which is equal to the passed position.\n\t *\n\t * @param {module:engine/view/position~Position} position Position to be cloned.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic createFromPosition( position ) {\n\t\treturn new this( position.parent, position.offset );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\n\n/**\n * Tree view range.\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.start = Position.createFromPosition( start );\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.end = end ? Position.createFromPosition( end ) : Position.createFromPosition( start );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/view/position~Position positions},\n\t * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n\t * `ignoreElementEnd` option\n\t * set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is it start and end positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n\t * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\treturn this.start.parent === this.end.parent;\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t * \t\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n\t * \t\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n\t *\n\t * Note that in the sample above:\n\t *  - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t *  - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t *  - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Enlarged range.\n\t */\n\tgetEnlarged() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\t// Fix positions, in case if they are in Text node.\n\t\tif ( start.parent.is( 'text' ) && start.isAtStart ) {\n\t\t\tstart = Position.createBefore( start.parent );\n\t\t}\n\n\t\tif ( end.parent.is( 'text' ) && end.isAtEnd ) {\n\t\t\tend = Position.createAfter( end.parent );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t * \t\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n\t * \t\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n\t *\n\t * Note that in the sample above:\n\t *  - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t *  - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t *  - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Shrink range.\n\t */\n\tgetTrimmed() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\tif ( start.isAfter( this.end ) || start.isEqual( this.end ) ) {\n\t\t\treturn new Range( start, start );\n\t\t}\n\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tconst nodeAfterStart = start.nodeAfter;\n\t\tconst nodeBeforeEnd = end.nodeBefore;\n\n\t\t// Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'text' ) ) {\n\t\t\tstart = new Position( nodeAfterStart, 0 );\n\t\t}\n\n\t\tif ( nodeBeforeEnd && nodeBeforeEnd.is( 'text' ) ) {\n\t\t\tend = new Position( nodeBeforeEnd, nodeBeforeEnd.data.length );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Two ranges are equal if their start and end positions are equal.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this == otherRange || ( this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end ) );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n\t *\n\t * @param {module:engine/view/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\n\t * `false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n\t * otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n\t * {@link module:engine/view/range~Range range}.\n\t * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = new Text( 'foo' );\n\t *\t\tlet img = new ContainerElement( 'img' );\n\t *\t\tlet bar = new Text( 'bar' );\n\t *\t\tlet p = new ContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = new Range( new Position( foo, 2 ), new Position( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = new Range( new Position( foo, 1 ), new Position( bar, 2 ); \"oo\", img, \"ba\" are in range.\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = new Range( new Position( foo, 1 ), new Position( p, 2 ); // \"oo\", img are in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n\t *\n\t *\t\totherRange = new Range( new Position( p, 1 ), new Position( p, 2 ) ); // img is in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( Range.createFromRange( this ) );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = new Text( 'foo' );\n\t *\t\tlet img = new ContainerElement( 'img' );\n\t *\t\tlet bar = new Text( 'bar' );\n\t *\t\tlet p = new ContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = new Range( new Position( foo, 2 ), new Position( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = new Range( new Position( foo, 1 ), new Position( p, 2 ); // \"oo\", img are in range.\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n\t *\n\t *\t\totherRange = new Range( new Position( bar, 1 ), new Position( bar, 3 ); \"ar\" is in range.\n\t *\t\ttransformed = range.getIntersection( otherRange ); // null - no common part.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @param {module:engine/view/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n\t * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with given range.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} True if ranges intersect.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Creates a range from given parents and offsets.\n\t *\n\t * @param {module:engine/view/element~Element} startElement Start position parent element.\n\t * @param {Number} startOffset Start position offset.\n\t * @param {module:engine/view/element~Element} endElement End position parent element.\n\t * @param {Number} endOffset End position offset.\n\t * @returns {module:engine/view/range~Range} Created range.\n\t */\n\tstatic createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\n\t\treturn new this(\n\t\t\tnew Position( startElement, startOffset ),\n\t\t\tnew Position( endElement, endOffset )\n\t\t);\n\t}\n\n\t/**\n\t * Creates and returns a new instance of Range which is equal to passed range.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clone.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic createFromRange( range ) {\n\t\treturn new this( range.start, range.end );\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @param {module:engine/view/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic createIn( element ) {\n\t\treturn this.createFromParentsAndOffsets( element, 0, element, element.childCount );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic createOn( item ) {\n\t\tconst size = item.is( 'textProxy' ) ? item.offsetSize : 1;\n\n\t\treturn this.createFromPositionAndShift( Position.createBefore( item ), size );\n\t}\n\n\t/**\n\t * Creates a collapsed range at given {@link module:engine/view/position~Position position}\n\t * or on the given {@link module:engine/view/item~Item item}.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic createCollapsedAt( itemOrPosition, offset ) {\n\t\tconst start = Position.createAt( itemOrPosition, offset );\n\t\tconst end = Position.createFromPosition( start );\n\n\t\treturn new Range( start, end );\n\t}\n}\n\n// Function used by getEnlarged and getTrimmed methods.\nfunction enlargeTrimSkip( value ) {\n\tif ( value.item.is( 'attributeElement' ) || value.item.is( 'uiElement' ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/count\n */\n\n/**\n * Returns the number of items return by the iterator.\n *\n *\t\tcount( [ 1, 2, 3, 4, 5 ] ); // 5;\n *\n * @param {Iterable.<*>} iterator Any iterator.\n * @returns {Number} Number of items returned by that iterator.\n */\nexport default function count( iterator ) {\n\tlet count = 0;\n\n\tfor ( const _ of iterator ) { // eslint-disable-line no-unused-vars\n\t\tcount++;\n\t}\n\n\treturn count;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/selection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Range from './range';\nimport Position from './position';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Element from './element';\nimport Text from './text';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Class representing selection in tree view.\n *\n * Selection can consist of {@link module:engine/view/range~Range ranges} that can be set using\n * {@link module:engine/view/selection~Selection#_setTo} method.\n * That method create copies of provided ranges and store those copies internally. Further modifications to passed\n * ranges will not change selection's state.\n * Selection's ranges can be obtained via {@link module:engine/view/selection~Selection#getRanges getRanges},\n * {@link module:engine/view/selection~Selection#getFirstRange getFirstRange}\n * and {@link module:engine/view/selection~Selection#getLastRange getLastRange}\n * methods, which return copies of ranges stored inside selection. Modifications made on these copies will not change\n * selection's state. Similar situation occurs when getting {@link module:engine/view/selection~Selection#anchor anchor},\n * {@link module:engine/view/selection~Selection#focus focus}, {@link module:engine/view/selection~Selection#getFirstPosition first} and\n * {@link module:engine/view/selection~Selection#getLastPosition last} positions - all will return copies of requested positions.\n */\nexport default class Selection {\n\t/**\n\t * Creates new selection instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = new Selection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = new Range( start, end );\n\t *\t\tconst selection = new Selection( range, isBackwardSelection );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\n\t *\t\tconst selection = new Selection( ranges, isBackwardSelection );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = new Selection();\n\t *\t\tconst selection = new Selection( otherSelection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = new Position( root, path );\n\t *\t\tconst selection = new Selection( position );\n\t *\n\t * \t\t// Creates selection at the start position of given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = new Selection( paragraph, offset );\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\n\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item} [selectable]\n\t * @param {Boolean|Number|'before'|'end'|'after'} [backwardSelectionOrOffset]\n\t */\n\tconstructor( selectable, backwardSelectionOrOffset ) {\n\t\t/**\n\t\t * Stores all ranges that are selected.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Specifies whether selection instance is fake.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isFake = false;\n\n\t\t/**\n\t\t * Fake selection's label.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._fakeSelectionLabel = '';\n\n\t\tif ( selectable ) {\n\t\t\tthis._setTo( selectable, backwardSelectionOrOffset );\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #_setFake\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #_setFake\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst anchor = this._lastRangeBackward ? range.end : range.start;\n\n\t\treturn Position.createFromPosition( anchor );\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst focus = this._lastRangeBackward ? range.start : range.end;\n\n\t\treturn Position.createFromPosition( focus );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.rangeCount === 1 && this._ranges[ 0 ].isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n     */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tif ( this.anchor ) {\n\t\t\treturn this.anchor.editableElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield Range.createFromRange( range );\n\t\t}\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? Range.createFromRange( first ) : null;\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? Range.createFromRange( last ) : null;\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst firstRange = this.getFirstRange();\n\n\t\treturn firstRange ? Position.createFromPosition( firstRange.start ) : null;\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? Position.createFromPosition( lastRange.end ) : null;\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection} otherSelection Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.isFake != otherSelection.isFake ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection} otherSelection Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\tif ( this.isBackward != otherSelection.isBackward ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst numOfRangesA = count( this.getRanges() );\n\t\tconst numOfRangesB = count( otherSelection.getRanges() );\n\n\t\t// If selections have different number of ranges, they cannot be similar.\n\t\tif ( numOfRangesA != numOfRangesB ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If both selections have no ranges, they are similar.\n\t\tif ( numOfRangesA == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if each range in one selection has a similar range in other selection.\n\t\tfor ( let rangeA of this.getRanges() ) {\n\t\t\trangeA = rangeA.getTrimmed();\n\n\t\t\tlet found = false;\n\n\t\t\tfor ( let rangeB of otherSelection.getRanges() ) {\n\t\t\t\trangeB = rangeB.getTrimmed();\n\n\t\t\t\tif ( rangeA.start.isEqual( rangeB.start ) && rangeA.end.isEqual( rangeB.end ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// There were no ranges that weren't matched. Selections are similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Removes all ranges that were added to the selection.\n\t *\n\t * @fires change\n\t */\n\t_removeAllRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._ranges = [];\n\t\t\tthis.fire( 'change' );\n\t\t}\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selection selection}, {@link module:engine/view/position~Position position},\n\t * {@link module:engine/view/item~Item item}, {@link module:engine/view/range~Range range},\n\t * an iterable of {@link module:engine/view/range~Range ranges} or null.\n\t *\n\t *\t\t// Sets ranges from the given range.\n\t *\t\tconst range = new Range( start, end );\n\t *\t\tselection.setTo( range, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the iterable of ranges.\n\t * \t\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\n\t *\t\tselection.setTo( range, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the other selection.\n\t *\t\tconst otherSelection = new Selection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t * \t\t// Sets collapsed range at the given position.\n\t *\t\tconst position = new Position( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t * \t\t// Sets collapsed range on the given item.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t * @protected\n\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\n\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item|null} selectable\n\t * @param {Boolean|Number|'before'|'end'|'after'} [backwardSelectionOrOffset]\n\t */\n\t_setTo( selectable, backwardSelectionOrOffset ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._removeAllRanges();\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._isFake = selectable.isFake;\n\t\t\tthis._fakeSelectionLabel = selectable.fakeSelectionLabel;\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], backwardSelectionOrOffset );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Text ) {\n\t\t\tthis._setRanges( [ Range.createCollapsedAt( selectable, backwardSelectionOrOffset ) ] );\n\t\t} else if ( selectable instanceof Element ) {\n\t\t\tthis._setRanges( [ Range.createCollapsedAt( selectable, backwardSelectionOrOffset ) ] );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, backwardSelectionOrOffset );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error view-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-selection-setTo-not-selectable: Cannot set selection to given place.' );\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n\t * Accepts a flag describing in which way the selection is made.\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\n\t * @param {Boolean} [isLastBackward] Flag describing if last added range was selected forward - from start to end\n\t * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n\t */\n\t_setRanges( newRanges, isLastBackward ) {\n\t\tthis._ranges = [];\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._addRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/position~Position.createAt} parameters.\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error view-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.'\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position.createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tthis._ranges.pop();\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._addRange( new Range( newFocus, anchor ), true );\n\t\t} else {\n\t\t\tthis._addRange( new Range( anchor, newFocus ) );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n\t * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n\t * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n\t * properly handled by screen readers).\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {Boolean} [value=true] If set to true selection will be marked as `fake`.\n\t * @param {Object} [options] Additional options.\n\t * @param {String} [options.label=''] Fake selection label.\n\t */\n\t_setFake( value = true, options = {} ) {\n\t\tthis._isFake = value;\n\t\tthis._fakeSelectionLabel = value ? options.label || '' : '';\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n\t * selection instance and you can safely operate on it.\n\t *\n\t * Accepts a flag describing in which way the selection is made - passed range might be selected from\n\t * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n\t * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n\t * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in Selection instance.\n\t *\n\t * @private\n\t * @fires change\n\t * @param {module:engine/view/range~Range} range\n\t * @param {Boolean} [isBackward]\n\t */\n\t_addRange( range, isBackward = false ) {\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\tthrow new CKEditorError( 'view-selection-invalid-range: Invalid Range.' );\n\t\t}\n\n\t\tthis._pushRange( range );\n\t\tthis._lastRangeBackward = !!isBackward;\n\t}\n\n\t/**\n\t * Adds range to selection - creates copy of given range so it can be safely used and modified.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in selection instance.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t */\n\t_pushRange( range ) {\n\t\tfor ( const storedRange of this._ranges ) {\n\t\t\tif ( range.isIntersecting( storedRange ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range from selection.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-range-intersects\n\t\t\t\t * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\n\t\t\t\t\t{ addedRange: range, intersectingRange: storedRange }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._ranges.push( Range.createFromRange( range ) );\n\t}\n}\n\nmix( Selection, EmitterMixin );\n\n/**\n * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\n *\n * @event change\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/collection\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport mix from './mix';\n\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Collection {\n\t/**\n\t * Creates a new Collection instance.\n\t *\n\t * @param {Object} [options={}] The options object.\n\t * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The internal list of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * The internal map of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._itemMap = new Map();\n\n\t\t/**\n\t\t * The name of the property which is considered to identify an item.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._idProperty = options.idProperty || 'id';\n\n\t\t/**\n\t\t * A helper mapping external items of a bound collection ({@link #bindTo})\n\t\t * and actual items of this collection. It provides information\n\t\t * necessary to properly remove items bound to another collection.\n\t\t *\n\t\t * See {@link #_bindToInternalToExternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToExternalToInternalMap = new WeakMap();\n\n\t\t/**\n\t\t * A helper mapping items of this collection to external items of a bound collection\n\t\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n\t\t * to avoid loops in two–way bindings.\n\t\t *\n\t\t * See {@link #_bindToExternalToInternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToInternalToExternalMap = new WeakMap();\n\n\t\t/**\n\t\t * Stores indexes of skipped items from bound external collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Array}\n\t\t */\n\t\tthis._skippedIndexesFromExternal = [];\n\n\t\t/**\n\t\t * A collection instance this collection is bound to as a result\n\t\t * of calling {@link #bindTo} method.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/collection~Collection} #_bindToCollection\n\t\t */\n\t}\n\n\t/**\n\t * The number of items available in the collection.\n\t *\n\t * @member {Number} #length\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the first item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The first item or `null` if collection is empty.\n\t */\n\tget first() {\n\t\treturn this._items[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the last item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The last item or `null` if collection is empty.\n\t */\n\tget last() {\n\t\treturn this._items[ this.length - 1 ] || null;\n\t}\n\n\t/**\n\t * Adds an item into the collection.\n\t *\n\t * If the item does not have an id, then it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {Object} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` not specified.\n\t * @fires add\n\t */\n\tadd( item, index ) {\n\t\tlet itemId;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( ( idProperty in item ) ) {\n\t\t\titemId = item[ idProperty ];\n\n\t\t\tif ( typeof itemId != 'string' ) {\n\t\t\t\t/**\n\t\t\t\t * This item's id should be a string.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-invalid-id\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-invalid-id' );\n\t\t\t}\n\n\t\t\tif ( this.get( itemId ) ) {\n\t\t\t\t/**\n\t\t\t\t * This item already exists in the collection.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-item-already-exists\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-item-already-exists' );\n\t\t\t}\n\t\t} else {\n\t\t\titem[ idProperty ] = itemId = uid();\n\t\t}\n\n\t\t// TODO: Use ES6 default function argument.\n\t\tif ( index === undefined ) {\n\t\t\tindex = this._items.length;\n\t\t} else if ( index > this._items.length || index < 0 ) {\n\t\t\t/**\n\t\t\t * The index number has invalid value.\n\t\t\t *\n\t\t\t * @error collection-add-item-bad-index\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-add-item-invalid-index' );\n\t\t}\n\n\t\tthis._items.splice( index, 0, item );\n\n\t\tthis._itemMap.set( itemId, item );\n\n\t\tthis.fire( 'add', item, index );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets item by its id or index.\n\t *\n\t * @param {String|Number} idOrIndex The item id or index in the collection.\n\t * @returns {Object|null} The requested item or `null` if such item does not exist.\n\t */\n\tget( idOrIndex ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrIndex == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrIndex );\n\t\t} else if ( typeof idOrIndex == 'number' ) {\n\t\t\titem = this._items[ idOrIndex ];\n\t\t} else {\n\t\t\t/**\n\t\t\t * Index or id must be given.\n\t\t\t *\n\t\t\t * @error collection-get-invalid-arg\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-get-invalid-arg: Index or id must be given.' );\n\t\t}\n\n\t\treturn item || null;\n\t}\n\n\t/**\n\t * Gets index of item in the collection.\n\t * When item is not defined in the collection then index will be equal -1.\n\t *\n\t * @param {String|Object} idOrItem The item or its id in the collection.\n\t * @returns {Number} Index of given item.\n\t */\n\tgetIndex( idOrItem ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrItem == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrItem );\n\t\t} else {\n\t\t\titem = idOrItem;\n\t\t}\n\n\t\treturn this._items.indexOf( item );\n\t}\n\n\t/**\n\t * Removes an item from the collection.\n\t *\n\t * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\n\t * @returns {Object} The removed item.\n\t * @fires remove\n\t */\n\tremove( subject ) {\n\t\tlet index, id, item;\n\t\tlet itemDoesNotExist = false;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( typeof subject == 'string' ) {\n\t\t\tid = subject;\n\t\t\titem = this._itemMap.get( id );\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tindex = this._items.indexOf( item );\n\t\t\t}\n\t\t} else if ( typeof subject == 'number' ) {\n\t\t\tindex = subject;\n\t\t\titem = this._items[ index ];\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tid = item[ idProperty ];\n\t\t\t}\n\t\t} else {\n\t\t\titem = subject;\n\t\t\tid = item[ idProperty ];\n\t\t\tindex = this._items.indexOf( item );\n\t\t\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\n\t\t}\n\n\t\tif ( itemDoesNotExist ) {\n\t\t\t/**\n\t\t\t * Item not found.\n\t\t\t *\n\t\t\t * @error collection-remove-404\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-remove-404: Item not found.' );\n\t\t}\n\n\t\tthis._items.splice( index, 1 );\n\t\tthis._itemMap.delete( id );\n\n\t\tconst externalItem = this._bindToInternalToExternalMap.get( item );\n\t\tthis._bindToInternalToExternalMap.delete( item );\n\t\tthis._bindToExternalToInternalMap.delete( externalItem );\n\n\t\tthis.fire( 'remove', item, index );\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @params {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Array} The result of mapping.\n\t */\n\tmap( callback, ctx ) {\n\t\treturn this._items.map( callback, ctx );\n\t}\n\n\t/**\n\t * Finds the first item in the collection for which the `callback` returns a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @returns {Object} The item for which `callback` returned a true value.\n\t * @params {Object} ctx Context in which the `callback` will be called.\n\t */\n\tfind( callback, ctx ) {\n\t\treturn this._items.find( callback, ctx );\n\t}\n\n\t/**\n\t * Returns an array with items for which the `callback` returned a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @params {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object[]} The array with matching items.\n\t */\n\tfilter( callback, ctx ) {\n\t\treturn this._items.filter( callback, ctx );\n\t}\n\n\t/**\n\t * Removes all items from the collection and destroys the binding created using\n\t * {@link #bindTo}.\n\t */\n\tclear() {\n\t\tif ( this._bindToCollection ) {\n\t\t\tthis.stopListening( this._bindToCollection );\n\t\t\tthis._bindToCollection = null;\n\t\t}\n\n\t\twhile ( this.length ) {\n\t\t\tthis.remove( 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Binds and synchronizes the collection with another one.\n\t *\n\t * The binding can be a simple factory:\n\t *\n\t *\t\tclass FactoryClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).as( FactoryClass );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n\t *\n\t *\t\tsource.remove( 0 );\n\t *\t\tconsole.log( target.length ); // 1\n\t *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n\t *\n\t * or the factory driven by a custom callback:\n\t *\n\t *\t\tclass FooClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tclass BarClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( ( item ) => {\n\t *\t\t\tif ( item.label == 'foo' ) {\n\t *\t\t\t\treturn new FooClass( item );\n\t *\t\t\t} else {\n\t *\t\t\t\treturn new BarClass( item );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n\t *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n\t *\n\t * or the factory out of property name:\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( 'label' );\n\t *\n\t *\t\tsource.add( { label: { value: 'foo' } } );\n\t *\t\tsource.add( { label: { value: 'bar' } } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n\t *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n\t *\n\t * It's possible to skip specified items by returning falsy value:\n\t *\n\t *\t\tconst source = new Collection();\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( item => {\n\t *\t\t\tif ( item.hidden ) {\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn item;\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { hidden: true } );\n\t *\t\tsource.add( { hidden: false } );\n\t *\n\t *\t\tconsole.log( source.length ); // 2\n\t *\t\tconsole.log( target.length ); // 1\n\t *\n\t * **Note**: {@link #clear} can be used to break the binding.\n\t *\n\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n\t * @returns {Object}\n\t * @returns {module:utils/collection~Collection#bindTo#as} return.as\n\t * @returns {module:utils/collection~Collection#bindTo#using} return.using\n\t */\n\tbindTo( externalCollection ) {\n\t\tif ( this._bindToCollection ) {\n\t\t\t/**\n\t\t\t * The collection cannot be bound more than once.\n\t\t\t *\n\t\t\t * @error collection-bind-to-rebind\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-bind-to-rebind: The collection cannot be bound more than once.' );\n\t\t}\n\n\t\tthis._bindToCollection = externalCollection;\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Creates the class factory binding.\n\t\t\t *\n\t\t\t * @static\n\t\t\t * @param {Function} Class Specifies which class factory is to be initialized.\n\t\t\t */\n\t\t\tas: Class => {\n\t\t\t\tthis._setUpBindToBinding( item => new Class( item ) );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates callback or property binding.\n\t\t\t *\n\t\t\t * @static\n\t\t\t * @param {Function|String} callbackOrProperty When the function is passed, it is used to\n\t\t\t * produce the items. When the string is provided, the property value is used to create\n\t\t\t * the bound collection items.\n\t\t\t */\n\t\t\tusing: callbackOrProperty => {\n\t\t\t\tif ( typeof callbackOrProperty == 'function' ) {\n\t\t\t\t\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Finalizes and activates a binding initiated by {#bindTo}.\n\t *\n\t * @protected\n\t * @param {Function} factory A function which produces collection items.\n\t */\n\t_setUpBindToBinding( factory ) {\n\t\tconst externalCollection = this._bindToCollection;\n\n\t\t// Adds the item to the collection once a change has been done to the external collection.\n\t\t//\n\t\t// @private\n\t\tconst addItem = ( evt, externalItem, index ) => {\n\t\t\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\n\t\t\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\n\n\t\t\t// If an external collection is bound to this collection, which makes it a 2–way binding,\n\t\t\t// and the particular external collection item is already bound, don't add it here.\n\t\t\t// The external item has been created **out of this collection's item** and (re)adding it will\n\t\t\t// cause a loop.\n\t\t\tif ( isExternalBoundToThis && externalItemBound ) {\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\n\t\t\t\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\n\t\t\t} else {\n\t\t\t\tconst item = factory( externalItem );\n\n\t\t\t\t// When there is no item we need to remember skipped index first and then we can skip this item.\n\t\t\t\tif ( !item ) {\n\t\t\t\t\tthis._skippedIndexesFromExternal.push( index );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lets try to put item at the same index as index in external collection\n\t\t\t\t// but when there are a skipped items in one or both collections we need to recalculate this index.\n\t\t\t\tlet finalIndex = index;\n\n\t\t\t\t// When we try to insert item after some skipped items from external collection we need\n\t\t\t\t// to include this skipped items and decrease index.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n\t\t\t\t// internal -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We can't just add 'D' to internal at the same index as index in external because\n\t\t\t\t// this will produce empty indexes what is invalid:\n\t\t\t\t// internal -> [ 'A', empty, empty, 'D' ]\n\t\t\t\t//\n\t\t\t\t// So we need to include skipped items and decrease index\n\t\t\t\t// internal -> [ 'A', 'D' ]\n\t\t\t\tfor ( const skipped of this._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\t\tfinalIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration that external collection could skip some items from\n\t\t\t\t// internal collection.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n\t\t\t\t// external -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We need to include skipped items and place new item after them:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\t\t\t\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( finalIndex >= skipped ) {\n\t\t\t\t\t\tfinalIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, item );\n\t\t\t\tthis._bindToInternalToExternalMap.set( item, externalItem );\n\t\t\t\tthis.add( item, finalIndex );\n\n\t\t\t\t// After adding new element to internal collection we need update indexes\n\t\t\t\t// of skipped items in external collection.\n\t\t\t\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\n\t\t\t\t\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\n\t\t\t\t\t\texternalCollection._skippedIndexesFromExternal[ i ]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Load the initial content of the collection.\n\t\tfor ( const externalItem of externalCollection ) {\n\t\t\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\n\t\t}\n\n\t\t// Synchronize the with collection as new items are added.\n\t\tthis.listenTo( externalCollection, 'add', addItem );\n\n\t\t// Synchronize the with collection as new items are removed.\n\t\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\n\t\t\tconst item = this._bindToExternalToInternalMap.get( externalItem );\n\n\t\t\tif ( item ) {\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\n\t\t\t// After removing element from external collection we need update/remove indexes\n\t\t\t// of skipped items in internal collection.\n\t\t\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\n\t\t\t\tif ( index < skipped ) {\n\t\t\t\t\tresult.push( skipped - 1 );\n\t\t\t\t}\n\n\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\tresult.push( skipped );\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [] );\n\t\t} );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an item is added to the collection.\n\t *\n\t * @event add\n\t * @param {Object} item The added item.\n\t */\n\n\t/**\n\t * Fired when an item is removed from the collection.\n\t *\n\t * @event remove\n\t * @param {Object} item The removed item.\n\t * @param {Number} index Index from which item was removed.\n\t */\n}\n\nmix( Collection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/document\n */\n\nimport Selection from './selection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/selection~Selection view selection} associated with this document.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Document {\n\t/**\n\t * Creates a Document instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Selection done on this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/selection~Selection} module:engine/view/document~Document#selection\n\t\t */\n\t\tthis.selection = new Selection();\n\n\t\t/**\n\t\t * Roots of the view tree. Collection of the {module:engine/view/element~Element view elements}.\n\t\t *\n\t\t * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\n\t\t * {@link module:engine/model/document~Document#roots} and this is handled by\n\t\t * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\n\t\t * model root using {@link module:engine/model/document~Document#createRoot}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Collection} module:engine/view/document~Document#roots\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * Defines whether document is in read-only mode.\n\t\t *\n\t\t * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * True if document is focused.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\n\t\t * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * True if composition is in progress inside the document.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n\t\t * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isComposing\n\t\t */\n\t\tthis.set( 'isComposing', false );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the view document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\t}\n\n\t/**\n\t * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n\t * specific \"main\" root is returned.\n\t *\n\t * @param {String} [name='main'] Name of the root.\n\t * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\n\t * or null when there is no root of given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Used to register a post-fixer callback. A post-fixers mechanism allows to update view tree just before rendering\n\t * to the DOM.\n\t *\n\t * Post-fixers are fired just after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * View post-fixers are useful when you wants to update view structure whenever it changes, for instance add some classes\n\t * to elements based on the view structure or selection. However, is you need DOM elements to be already updated, use\n\t * {@link module:engine/view/view~View#event:render render event}.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/view/writer~Writer writer} instance connected with the\n\t * executed changes block.\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @protected\n\t * @param {module:engine/view/writer~Writer} writer\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n}\n\nmix( Document, ObservableMixin );\n\n/**\n * Enum representing type of the change.\n *\n * Possible values:\n *\n * * `children` - for child list changes,\n * * `attributes` - for element attributes changes,\n * * `text` - for text nodes changes.\n *\n * @typedef {String} module:engine/view/document~ChangeType\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/attributeelement\n */\n\nimport Element from './element';\n\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n\n/**\n * Attributes are elements which define document presentation. They are mostly elements like `<b>` or `<span>`.\n * Attributes can be broken and merged by the {@link module:engine/view/writer~Writer view writer}.\n *\n * Editing engine does not define fixed HTML DTD. This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. Creating an element you should use {@link module:engine/view/containerelement~ContainerElement}\n * class or `AttributeElement`.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n\t/**\n\t * Creates a attribute element.\n\t *\n\t * @see module:engine/view/element~Element\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Element priority. Attributes have to have the same priority to be\n\t\t * {@link module:engine/view/element~Element#isSimilar similar}. Setting different priorities on similar\n \t\t * nodes may prevent merging, e.g. two `<abbr>` nodes next each other shouldn't be merged.\n\t\t *\n\t\t * @protected\n\t\t * @member {Number}\n\t\t */\n\t\tthis._priority = DEFAULT_PRIORITY;\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Priority of this element.\n\t *\n\t * @readonly\n\t * @return {Number}\n\t */\n\tget priority() {\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'attributeElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'attributeElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Clones provided element with priority.\n\t *\n\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n\t */\n\tclone( deep ) {\n\t\tconst cloned = super.clone( deep );\n\n\t\t// Clone priority too.\n\t\tcloned._priority = this._priority;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name, attributes and priority to be considered as similar.\n\t * Two similar elements can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\n\t}\n}\n\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\t// <b>foo</b> does not need filler.\n\tif ( nonUiChildrenCount( this ) ) {\n\t\treturn null;\n\t}\n\n\tlet element = this.parent;\n\n\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\n\twhile ( element && element.is( 'attributeElement' ) ) {\n\t\tif ( nonUiChildrenCount( element ) > 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\n\t\treturn null;\n\t}\n\n\t// Render block filler at the end of element (after all ui elements).\n\treturn this.childCount;\n}\n\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @return {Number}\nfunction nonUiChildrenCount( element ) {\n\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/emptyelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * EmptyElement class. It is used to represent elements that cannot contain any child nodes.\n */\nexport default class EmptyElement extends Element {\n\t/**\n\t * Creates new instance of EmptyElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n\t *\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for EmptyElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'emptyElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'emptyElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#insertChildren} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n\t * adding any child nodes to EmptyElement.\n\t */\n\tinsertChildren( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n\t\t\t *\n\t\t\t * @error view-emptyelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.' );\n\t\t}\n\t}\n}\n\n// Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals navigator:false */\n\n/**\n * @module utils/env\n */\n\nconst userAgent = navigator.userAgent.toLowerCase();\n\n/**\n * A namespace containing environment and browser information.\n *\n * @namespace\n */\nconst env = {\n\t/**\n\t * Indicates that application is running on Macintosh.\n\t *\n\t * @static\n\t * @member {Boolean} module:utils/env~env#isMac\n\t */\n\tisMac: isMac( userAgent )\n};\n\nexport default env;\n\n/**\n * Checks if User Agent represented by the string is running on Macintosh.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is running on Macintosh or not.\n */\nexport function isMac( userAgent ) {\n\treturn userAgent.indexOf( 'macintosh' ) > -1;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'keyboard-unknown-key: Unknown key name.', { key } );\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/uielement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * UIElement class. It is used to represent UI not a content of the document.\n * This element can't be split and selection can't be placed inside this element.\n */\nexport default class UIElement extends Element {\n\t/**\n\t * Creates new instance of UIElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n\t * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n\t *\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for UIElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'uiElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'uiElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#insertChildren} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n\t * to UIElement.\n\t */\n\tinsertChildren( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n\t\t\t *\n\t\t\t * @error view-uielement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-uielement-cannot-add: Cannot add child nodes to UIElement instance.' );\n\t\t}\n\t}\n\n\t/**\n\t * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n\t * {@link module:engine/view/domconverter~DomConverter}.\n\t * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n\t *\n\t *\t\tconst myUIElement = new UIElement( 'span' );\n\t *\t\tmyUIElement.render = function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t};\n\t *\n\t * @param {Document} domDocument\n\t * @return {HTMLElement}\n\t */\n\trender( domDocument ) {\n\t\treturn this.toDomElement( domDocument );\n\t}\n\n\t/**\n\t * Creates DOM element based on this view UIElement.\n\t * Note that each time this method is called new DOM element is created.\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\ttoDomElement( domDocument ) {\n\t\tconst domElement = domDocument.createElement( this.name );\n\n\t\tfor ( const key of this.getAttributeKeys() ) {\n\t\t\tdomElement.setAttribute( key, this.getAttribute( key ) );\n\t\t}\n\n\t\treturn domElement;\n\t}\n}\n\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param {module:engine/view/view~View} view View controller to which the quirks handling will be injected.\n */\nexport function injectUiElementHandling( view ) {\n\tview.document.on( 'keydown', ( evt, data ) => jumpOverUiElement( evt, data, view.domConverter ) );\n}\n\n// Returns `null` because block filler is not needed for UIElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n// causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n// ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\nfunction jumpOverUiElement( evt, data, domConverter ) {\n\tif ( data.keyCode == keyCodes.arrowright ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\t\tconst domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed;\n\n\t\t// Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n\t\tif ( domSelectionCollapsed || data.shiftKey ) {\n\t\t\tconst domParent = domSelection.focusNode;\n\t\t\tconst domOffset = domSelection.focusOffset;\n\n\t\t\tconst viewPosition = domConverter.domPositionToView( domParent, domOffset );\n\n\t\t\t// In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n\t\t\tif ( viewPosition === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip all following ui elements.\n\t\t\tlet jumpedOverAnyUiElement = false;\n\n\t\t\tconst nextViewPosition = viewPosition.getLastMatchingPosition( value => {\n\t\t\t\tif ( value.item.is( 'uiElement' ) ) {\n\t\t\t\t\t// Remember that there was at least one ui element.\n\t\t\t\t\tjumpedOverAnyUiElement = true;\n\t\t\t\t}\n\n\t\t\t\t// Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n\t\t\t\tif ( value.item.is( 'uiElement' ) || value.item.is( 'attributeElement' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Don't jump over text or don't get out of container element.\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\t// If anything has been skipped, fix position.\n\t\t\t// This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n\t\t\tif ( jumpedOverAnyUiElement ) {\n\t\t\t\tconst newDomPosition = domConverter.viewPositionToDom( nextViewPosition );\n\n\t\t\t\tif ( domSelectionCollapsed ) {\n\t\t\t\t\t// Selection was collapsed, so collapse it at further position.\n\t\t\t\t\tdomSelection.collapse( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t} else {\n\t\t\t\t\t// Selection was not collapse, so extend it instead of collapsing.\n\t\t\t\t\tdomSelection.extend( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/documentfragment\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * DocumentFragment class.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates new DocumentFragment instance.\n\t *\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children] List of nodes to be inserted into\n\t * created document fragment.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/element~Element>} module:engine/view/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis.insertChildren( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over nodes added to this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of child nodes in this document fragment.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/view/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment';\n\t}\n\n\t/**\n\t * {@link module:engine/view/documentfragment~DocumentFragment#insertChildren Insert} a child node or a list of child nodes at the end\n\t * and sets the parent of these nodes to this fragment.\n\t *\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of appended nodes.\n\t */\n\tappendChildren( items ) {\n\t\treturn this.insertChildren( this.childCount, items );\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this fragment.\n\t *\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\tinsertChildren( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\tremoveChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Fires `change` event with given type of the change.\n\t *\n\t * @private\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\t}\n}\n\nmix( DocumentFragment, EmitterMixin );\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @return {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module module:engine/view/writer\n */\n\nimport Position from './position';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport Range from './range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport isPlainObject from '@ckeditor/ckeditor5-utils/src/lib/lodash/isPlainObject';\nimport Text from './text';\nimport EditableElement from './editableelement';\n\n/**\n * View writer class. Provides set of methods used to properly manipulate nodes attached to\n * {@link module:engine/view/document~Document view document}. It is not recommended to use it directly. To get an instance\n * of view writer associated with the document use {@link module:engine/view/view~View#change view.change()) method.\n */\nexport default class Writer {\n\tconstructor( document ) {\n\t\tthis.document = document;\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/selection~Selection selection's} ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selection selection}, {@link module:engine/view/position~Position position},\n\t * {@link module:engine/view/item~Item item}, {@link module:engine/view/range~Range range},\n\t * an iterable of {@link module:engine/view/range~Range ranges} or null.\n\t *\n\t *\t\t// Sets ranges from the given range.\n\t *\t\tconst range = new Range( start, end );\n\t *\t\twriter.setSelection( range, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the iterable of ranges.\n\t * \t\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\n\t *\t\twriter.setSelection( range, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the other selection.\n\t *\t\tconst otherSelection = new Selection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets collapsed range at the given position.\n\t *\t\tconst position = new Position( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed range on the given item.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\n\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item|null} selectable\n\t * @param {Boolean|Number|'before'|'end'|'after'} [backwardSelectionOrOffset]\n\t */\n\tsetSelection( selectable, backwardSelectionOrOffset ) {\n\t\tthis.document.selection._setTo( selectable, backwardSelectionOrOffset );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/view/selection~Selection#focus selection's focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/position~Position.createAt} parameters.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/selection~Selection selection's} to be marked as `fake`. A fake selection does\n\t * not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n\t * properly handled by screen readers).\n\t *\n\t * @param {Boolean} [value=true] If set to true selection will be marked as `fake`.\n\t * @param {Object} [options] Additional options.\n\t * @param {String} [options.label=''] Fake selection label.\n\t */\n\tsetFakeSelection( value, options ) {\n\t\tthis.document.selection._setFake( value, options );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\n\t * @param {String} data Text data.\n\t * @returns {module:engine/view/text~Text} Created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\n\t *\n\t *\t\twriter.createAttributeElement( 'strong' );\n\t *\t\twriter.createAttributeElement( 'strong', { 'alignment': 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n\t */\n\tcreateAttributeElement( name, attributes, priority ) {\n\t\tconst attributeElement = new AttributeElement( name, attributes );\n\n\t\tif ( priority ) {\n\t\t\tattributeElement._priority = priority;\n\t\t}\n\n\t\treturn attributeElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/containerelement~ContainerElement}.\n\t *\n\t *\t\twriter.createContainerElement( 'paragraph' );\n\t *\t\twriter.createContainerElement( 'paragraph', { 'alignment': 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n\t */\n\tcreateContainerElement( name, attributes ) {\n\t\treturn new ContainerElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t *\t\twriter.createEditableElement( document, 'div' );\n\t *\t\twriter.createEditableElement( document, 'div', { 'alignment': 'center' } );\n\t *\n\t * @param {module:engine/view/document~Document} document View document.\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\n\t */\n\tcreateEditableElement( name, attributes ) {\n\t\tconst editableElement = new EditableElement( name, attributes );\n\t\teditableElement._document = this.document;\n\n\t\treturn editableElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\n\t *\n\t *\t\twriter.createEmptyElement( 'img' );\n\t *\t\twriter.createEmptyElement( 'img', { 'alignment': 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n\t */\n\tcreateEmptyElement( name, attributes ) {\n\t\treturn new EmptyElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/uielement~UIElement}.\n\t *\n\t *\t\twriter.createUIElement( 'span' );\n\t *\t\twriter.createUIElement( 'span', { 'alignment': 'center' } );\n\t *\n\t * Custom render function can be provided as third parameter:\n\t *\n\t *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t} );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Function} [renderFunction] Custom render function.\n\t * @returns {module:engine/view/uielement~UIElement} Created element.\n\t */\n\tcreateUIElement( name, attributes, renderFunction ) {\n\t\tconst uiElement = new UIElement( name, attributes );\n\n\t\tif ( renderFunction ) {\n\t\t\tuiElement.render = renderFunction;\n\t\t}\n\n\t\treturn uiElement;\n\t}\n\n\t/**\n\t * Adds or overwrite element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( 'href', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( 'foo', linkElement );\n\t *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( 'foo', linkElement );\n\t *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( 'color', 'red', element );\n\t *\t\twriter.setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t}, element );\n\t *\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element to set styles on.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @param {Array.<String>|String} property\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\n\t * up to a container element.\n\t *\n\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\n\t *\n\t *        <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n\t *        <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n\t *        <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t *        <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n\t *\n\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n\t *\n\t * **Note:** Difference between {@link module:engine/view/writer~Writer#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/writer~Writer#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start start}\n\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/writer~Writer#breakContainer\n\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\n\t * to break attribute elements.\n\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\n\t * elements.\n\t */\n\tbreakAttributes( positionOrRange ) {\n\t\tif ( positionOrRange instanceof Position ) {\n\t\t\treturn _breakAttributes( positionOrRange );\n\t\t} else {\n\t\t\treturn _breakAttributesRange( positionOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\n\t * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\n\t * or at the end of it's parent element.\n\t *\n\t *        <p>foo^bar</p> -> <p>foo</p><p>bar</p>\n\t *        <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n\t *        <p>^foobar</p> -> ^<p>foobar</p>\n\t *        <p>foobar^</p> -> <p>foobar</p>^\n\t *\n\t * **Note:** Difference between {@link module:engine/view/writer~Writer#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/writer~Writer#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/writer~Writer#breakAttributes\n\t * @param {module:engine/view/position~Position} position Position where to break element.\n\t * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\n\t * the returned position is placed either before it or after it.\n\t */\n\tbreakContainer( position ) {\n\t\tconst element = position.parent;\n\n\t\tif ( !( element.is( 'containerElement' ) ) ) {\n\t\t\t/**\n\t\t\t * Trying to break an element which is not a container element.\n\t\t\t *\n\t\t\t * @error view-writer-break-non-container-element\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-break-non-container-element: Trying to break an element which is not a container element.'\n\t\t\t);\n\t\t}\n\n\t\tif ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Trying to break root element.\n\t\t\t *\n\t\t\t * @error view-writer-break-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-root: Trying to break root element.' );\n\t\t}\n\n\t\tif ( position.isAtStart ) {\n\t\t\treturn Position.createBefore( element );\n\t\t} else if ( !position.isAtEnd ) {\n\t\t\tconst newElement = element.clone( false );\n\n\t\t\tthis.insert( Position.createAfter( element ), newElement );\n\n\t\t\tconst sourceRange = new Range( position, Position.createAt( element, 'end' ) );\n\t\t\tconst targetPosition = new Position( newElement, 0 );\n\n\t\t\tthis.move( sourceRange, targetPosition );\n\t\t}\n\n\t\treturn Position.createAfter( element );\n\t}\n\n\t/**\n\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n\t *\n\t * In following examples `<p>` is a container and `<b>` is an attribute element:\n\t *\n\t *        <p>foo[]bar</p> -> <p>foo{}bar</p>\n\t *        <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *        <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n\t *\n\t * It will also take care about empty attributes when merging:\n\t *\n\t *        <p><b>[]</b></p> -> <p>[]</p>\n\t *        <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/writer~Writer#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/writer~Writer#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/writer~Writer#mergeContainers\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeAttributes( position ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// When inside text node - nothing to merge.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When inside empty attribute - remove it.\n\t\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\n\t\t\tconst parent = positionParent.parent;\n\t\t\tconst offset = positionParent.index;\n\t\t\tpositionParent.remove();\n\n\t\t\treturn this.mergeAttributes( new Position( parent, offset ) );\n\t\t}\n\n\t\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\n\t\tconst nodeAfter = positionParent.getChild( positionOffset );\n\n\t\t// Position should be placed between two nodes.\n\t\tif ( !nodeBefore || !nodeAfter ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When position is between two text nodes.\n\t\tif ( nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\t\t// When selection is between two same attribute elements.\n\t\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\n\t\t\t// Move all children nodes from node placed after selection and remove that node.\n\t\t\tconst count = nodeBefore.childCount;\n\t\t\tnodeBefore.appendChildren( nodeAfter.getChildren() );\n\t\t\tnodeAfter.remove();\n\n\t\t\t// New position is located inside the first node, before new nodes.\n\t\t\t// Call this method recursively to merge again if needed.\n\t\t\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n\t *\n\t *        <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n\t *        <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/writer~Writer#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/writer~Writer#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/writer~Writer#mergeAttributes\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeContainers( position ) {\n\t\tconst prev = position.nodeBefore;\n\t\tconst next = position.nodeAfter;\n\n\t\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\n\t\t\t/**\n\t\t\t * Element before and after given position cannot be merged.\n\t\t\t *\n\t\t\t * @error view-writer-merge-containers-invalid-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position: ' +\n\t\t\t\t'Element before and after given position cannot be merged.' );\n\t\t}\n\n\t\tconst lastChild = prev.getChild( prev.childCount - 1 );\n\t\tconst newPosition = lastChild instanceof Text ? Position.createAt( lastChild, 'end' ) : Position.createAt( prev, 'end' );\n\n\t\tthis.move( Range.createIn( next ), Position.createAt( prev, 'end' ) );\n\t\tthis.remove( Range.createOn( next ) );\n\n\t\treturn newPosition;\n\t}\n\n\t/**\n\t * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\n\t * and merging them afterwards.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n\t * contains instances that are not {@link module:engine/view/text~Text Texts},\n\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\n\t * {@link module:engine/view/uielement~UIElement UIElements}.\n\t *\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\tinsert( position, nodes ) {\n\t\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\n\n\t\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\t\tvalidateNodesToInsert( nodes );\n\n\t\tconst container = getParentContainer( position );\n\n\t\tif ( !container ) {\n\t\t\t/**\n\t\t\t * Position's parent container cannot be found.\n\t\t\t *\n\t\t\t * @error view-writer-invalid-position-container\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-invalid-position-container' );\n\t\t}\n\n\t\tconst insertionPosition = _breakAttributes( position, true );\n\n\t\tconst length = container.insertChildren( insertionPosition.offset, nodes );\n\t\tconst endPosition = insertionPosition.getShiftedBy( length );\n\t\tconst start = this.mergeAttributes( insertionPosition );\n\n\t\t// When no nodes were inserted - return collapsed range.\n\t\tif ( length === 0 ) {\n\t\t\treturn new Range( start, start );\n\t\t} else {\n\t\t\t// If start position was merged - move end position.\n\t\t\tif ( !start.isEqual( insertionPosition ) ) {\n\t\t\t\tendPosition.offset--;\n\t\t\t}\n\n\t\t\tconst end = this.mergeAttributes( endPosition );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\t}\n\n\t/**\n\t * Removes provided range from the container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to remove from container. After removing, it will be updated\n\t * to a collapsed range showing the new position.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n\t */\n\tremove( range ) {\n\t\tvalidateRangeContainer( range );\n\n\t\t// If range is collapsed - nothing to remove.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn new DocumentFragment();\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = _breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\tconst count = breakEnd.offset - breakStart.offset;\n\n\t\t// Remove nodes in range.\n\t\tconst removed = parentContainer.removeChildren( breakStart.offset, count );\n\n\t\t// Merge after removing.\n\t\tconst mergePosition = this.mergeAttributes( breakStart );\n\t\trange.start = mergePosition;\n\t\trange.end = Position.createFromPosition( mergePosition );\n\n\t\t// Return removed nodes.\n\t\treturn new DocumentFragment( removed );\n\t}\n\n\t/**\n\t * Removes matching elements from given range.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clear.\n\t * @param {module:engine/view/element~Element} element Element to remove.\n\t */\n\tclear( range, element ) {\n\t\tvalidateRangeContainer( range );\n\n\t\t// Create walker on given range.\n\t\t// We walk backward because when we remove element during walk it modifies range end position.\n\t\tconst walker = range.getWalker( {\n\t\t\tdirection: 'backward',\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\t// Let's walk.\n\t\tfor ( const current of walker ) {\n\t\t\tconst item = current.item;\n\t\t\tlet rangeToRemove;\n\n\t\t\t// When current item matches to the given element.\n\t\t\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\n\t\t\t\t// Create range on this element.\n\t\t\t\trangeToRemove = Range.createOn( item );\n\t\t\t\t// When range starts inside Text or TextProxy element.\n\t\t\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( 'textProxy' ) ) {\n\t\t\t\t// We need to check if parent of this text matches to given element.\n\t\t\t\tconst parentElement = item.getAncestors().find( ancestor => {\n\t\t\t\t\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\n\t\t\t\t} );\n\n\t\t\t\t// If it is then create range inside this element.\n\t\t\t\tif ( parentElement ) {\n\t\t\t\t\trangeToRemove = Range.createIn( parentElement );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we have found element to remove.\n\t\t\tif ( rangeToRemove ) {\n\t\t\t\t// We need to check if element range stick out of the given range and truncate if it is.\n\t\t\t\tif ( rangeToRemove.end.isAfter( range.end ) ) {\n\t\t\t\t\trangeToRemove.end = range.end;\n\t\t\t\t}\n\n\t\t\t\tif ( rangeToRemove.start.isBefore( range.start ) ) {\n\t\t\t\t\trangeToRemove.start = range.start;\n\t\t\t\t}\n\n\t\t\t\t// At the end we remove range with found element.\n\t\t\t\tthis.remove( rangeToRemove );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves nodes from provided range to target position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\n\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n\t */\n\tmove( sourceRange, targetPosition ) {\n\t\tlet nodes;\n\n\t\tif ( targetPosition.isAfter( sourceRange.end ) ) {\n\t\t\ttargetPosition = _breakAttributes( targetPosition, true );\n\n\t\t\tconst parent = targetPosition.parent;\n\t\t\tconst countBefore = parent.childCount;\n\n\t\t\tsourceRange = _breakAttributesRange( sourceRange, true );\n\n\t\t\tnodes = this.remove( sourceRange );\n\n\t\t\ttargetPosition.offset += ( parent.childCount - countBefore );\n\t\t} else {\n\t\t\tnodes = this.remove( sourceRange );\n\t\t}\n\n\t\treturn this.insert( targetPosition, nodes );\n\t}\n\n\t/**\n     * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n     *\n     * If a collapsed range was passed and is same as selection, the selection\n     * will be moved to the inside of the wrapped attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n     * when {@link module:engine/view/range~Range#start}\n     * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n     * is collapsed and different than view selection.\n     *\n     * @param {module:engine/view/range~Range} range Range to wrap.\n     * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n     * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n    */\n\twrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\tthrow new CKEditorError( 'view-writer-wrap-invalid-attribute' );\n\t\t}\n\n\t\tvalidateRangeContainer( range );\n\n\t\tif ( !range.isCollapsed ) {\n\t\t\t// Non-collapsed range. Wrap it with the attribute element.\n\t\t\treturn this._wrapRange( range, attribute );\n\t\t} else {\n\t\t\t// Collapsed range. Wrap position.\n\t\t\tlet position = range.start;\n\n\t\t\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\n\t\t\t\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n\t\t\t}\n\n\t\t\tposition = this._wrapPosition( position, attribute );\n\t\t\tconst viewSelection = this.document.selection;\n\n\t\t\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\t\t\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\n\t\t\t\tthis.setSelection( position );\n\t\t\t}\n\n\t\t\treturn new Range( position );\n\t\t}\n\t}\n\n\t/**\n\t * Unwraps nodes within provided range from attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t */\n\tunwrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\t/**\n\t\t\t * Attribute element need to be instance of attribute element.\n\t\t\t *\n\t\t\t * @error view-writer-unwrap-invalid-attribute\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-unwrap-invalid-attribute' );\n\t\t}\n\n\t\tvalidateRangeContainer( range );\n\n\t\t// If range is collapsed - nothing to unwrap.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn range;\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = _breakAttributesRange( range, true );\n\n\t\t// Range around one element - check if AttributeElement can be unwrapped partially when it's not similar.\n\t\t// For example:\n\t\t// <b class=\"foo bar\" title=\"baz\"></b> unwrap with:\t<b class=\"foo\"></p> result: <b class\"bar\" title=\"baz\"></b>\n\t\tif ( breakEnd.isEqual( breakStart.getShiftedBy( 1 ) ) ) {\n\t\t\tconst node = breakStart.nodeAfter;\n\n\t\t\t// Unwrap single attribute element.\n\t\t\tif ( !attribute.isSimilar( node ) && node instanceof AttributeElement && this._unwrapAttributeElement( attribute, node ) ) {\n\t\t\t\tconst start = this.mergeAttributes( breakStart );\n\n\t\t\t\tif ( !start.isEqual( breakStart ) ) {\n\t\t\t\t\tbreakEnd.offset--;\n\t\t\t\t}\n\n\t\t\t\tconst end = this.mergeAttributes( breakEnd );\n\n\t\t\t\treturn new Range( start, end );\n\t\t\t}\n\t\t}\n\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n\t *\n\t * New element has to be created because `Element#tagName` property in DOM is readonly.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n\t * @param {String} newName New name for element.\n\t */\n\trename( viewElement, newName ) {\n\t\tconst newElement = new ContainerElement( newName, viewElement.getAttributes() );\n\n\t\tthis.insert( Position.createAfter( viewElement ), newElement );\n\t\tthis.move( Range.createIn( viewElement ), Position.createAt( newElement ) );\n\t\tthis.remove( Range.createOn( viewElement ) );\n\n\t\treturn newElement;\n\t}\n\n\t/**\n\t * Wraps children with provided `attribute`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be wrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} attribute\n\t */\n\t_wrapChildren( parent, startOffset, endOffset, attribute ) {\n\t\tlet i = startOffset;\n\t\tconst wrapPositions = [];\n\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\t\t\tconst isText = child.is( 'text' );\n\t\t\tconst isAttribute = child.is( 'attributeElement' );\n\t\t\tconst isEmpty = child.is( 'emptyElement' );\n\t\t\tconst isUI = child.is( 'uiElement' );\n\n\t\t\t// Wrap text, empty elements, ui elements or attributes with higher or equal priority.\n\t\t\tif ( isText || isEmpty || isUI || ( isAttribute && shouldABeOutsideB( attribute, child ) ) ) {\n\t\t\t\t// Clone attribute.\n\t\t\t\tconst newAttribute = attribute.clone();\n\n\t\t\t\t// Wrap current node with new attribute;\n\t\t\t\tchild.remove();\n\t\t\t\tnewAttribute.appendChildren( child );\n\t\t\t\tparent.insertChildren( i, newAttribute );\n\n\t\t\t\twrapPositions.push(\tnew Position( parent, i ) );\n\t\t\t}\n\t\t\t// If other nested attribute is found start wrapping there.\n\t\t\telse if ( isAttribute ) {\n\t\t\t\tthis._wrapChildren( child, 0, child.childCount, attribute );\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each wrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of wrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range.createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Unwraps children from provided `attribute`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} attribute\n\t */\n\t_unwrapChildren( parent, startOffset, endOffset, attribute ) {\n\t\tlet i = startOffset;\n\t\tconst unwrapPositions = [];\n\n\t\t// Iterate over each element between provided offsets inside parent.\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\n\t\t\t// If attributes are the similar, then unwrap.\n\t\t\tif ( child.isSimilar( attribute ) ) {\n\t\t\t\tconst unwrapped = child.getChildren();\n\t\t\t\tconst count = child.childCount;\n\n\t\t\t\t// Replace wrapper element with its children\n\t\t\t\tchild.remove();\n\t\t\t\tparent.insertChildren( i, unwrapped );\n\n\t\t\t\t// Save start and end position of moved items.\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + count )\n\t\t\t\t);\n\n\t\t\t\t// Skip elements that were unwrapped. Assuming that there won't be another element to unwrap in child\n\t\t\t\t// elements.\n\t\t\t\ti += count;\n\t\t\t\tendOffset += count - 1;\n\t\t\t} else {\n\t\t\t\t// If other nested attribute is found start unwrapping there.\n\t\t\t\tif ( child.is( 'attributeElement' ) ) {\n\t\t\t\t\tthis._unwrapChildren( child, 0, child.childCount, attribute );\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Merge at each unwrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of unwrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset || position.offset == endOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range.createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n\t */\n\t_wrapRange( range, attribute ) {\n\t\t// Range is inside single attribute and spans on all children.\n\t\tif ( rangeSpansOnAllChildren( range ) && this._wrapAttributeElement( attribute, range.start.parent ) ) {\n\t\t\tconst parent = range.start.parent;\n\n\t\t\tconst end = this.mergeAttributes( Position.createAfter( parent ) );\n\t\t\tconst start = this.mergeAttributes( Position.createBefore( parent ) );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = _breakAttributesRange( range, true );\n\n\t\t// Range around one element.\n\t\tif ( breakEnd.isEqual( breakStart.getShiftedBy( 1 ) ) ) {\n\t\t\tconst node = breakStart.nodeAfter;\n\n\t\t\tif ( node instanceof AttributeElement && this._wrapAttributeElement( attribute, node ) ) {\n\t\t\t\tconst start = this.mergeAttributes( breakStart );\n\n\t\t\t\tif ( !start.isEqual( breakStart ) ) {\n\t\t\t\t\tbreakEnd.offset--;\n\t\t\t\t}\n\n\t\t\t\tconst end = this.mergeAttributes( breakEnd );\n\n\t\t\t\treturn new Range( start, end );\n\t\t\t}\n\t\t}\n\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst unwrappedRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Wrap all children with attribute.\n\t\tconst newRange = this._wrapChildren( parentContainer, unwrappedRange.start.offset, unwrappedRange.end.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/position~Position} New position after wrapping.\n\t */\n\t_wrapPosition( position, attribute ) {\n\t\t// Return same position when trying to wrap with attribute similar to position parent.\n\t\tif ( attribute.isSimilar( position.parent ) ) {\n\t\t\treturn movePositionToTextNode( Position.createFromPosition( position ) );\n\t\t}\n\n\t\t// When position is inside text node - break it and place new position between two text nodes.\n\t\tif ( position.parent.is( 'text' ) ) {\n\t\t\tposition = breakTextNode( position );\n\t\t}\n\n\t\t// Create fake element that will represent position, and will not be merged with other attributes.\n\t\tconst fakePosition = this.createAttributeElement();\n\t\tfakePosition._priority = Number.POSITIVE_INFINITY;\n\t\tfakePosition.isSimilar = () => false;\n\n\t\t// Insert fake element in position location.\n\t\tposition.parent.insertChildren( position.offset, fakePosition );\n\n\t\t// Range around inserted fake attribute element.\n\t\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\n\n\t\t// Wrap fake element with attribute (it will also merge if possible).\n\t\tthis.wrap( wrapRange, attribute );\n\n\t\t// Remove fake element and place new position there.\n\t\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\n\t\tfakePosition.remove();\n\n\t\t// If position is placed between text nodes - merge them and return position inside.\n\t\tconst nodeBefore = newPosition.nodeBefore;\n\t\tconst nodeAfter = newPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\n\t\t// If position is next to text node - move position inside.\n\t\treturn movePositionToTextNode( newPosition );\n\t}\n\n\t/**\n\t * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n\t * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n\t * \telement to element being wrapped.\n\t *\n\t * \t@private\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n\t * \t@returns {Boolean} Returns `true` if elements are merged.\n\t */\n\t_wrapAttributeElement( wrapper, toWrap ) {\n\t\t// Can't merge if name or priority differs.\n\t\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes can be merged.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are different we cannot wrap.\n\t\t\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles can be merged.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move only these attributes that are not present - other are similar.\n\t\t\tif ( !toWrap.hasAttribute( key ) ) {\n\t\t\t\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( !toWrap.hasStyle( key ) ) {\n\t\t\t\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getClassNames() ) {\n\t\t\tif ( !toWrap.hasClass( key ) ) {\n\t\t\t\tthis.addClass( key, toWrap );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n\t * inside element being unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n\t * @returns {Boolean} Returns `true` if elements are unwrapped.\n\t **/\n\t_unwrapAttributeElement( wrapper, toUnwrap ) {\n\t\t// Can't unwrap if name or priority differs.\n\t\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper attributes.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper classes.\n\t\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper styles.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\t// If some styles are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Remove all wrapper's attributes from unwrapped element.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeAttribute( key, toUnwrap );\n\t\t}\n\n\t\t// Remove all wrapper's classes from unwrapped element.\n\t\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\n\n\t\t// Remove all wrapper's styles from unwrapped element.\n\t\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\n\n\t\treturn true;\n\t}\n}\n\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren( parent ) {\n\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\n}\n\n/**\n * Attribute element need to be instance of attribute element.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\nfunction getParentContainer( position ) {\n\tlet parent = position.parent;\n\n\twhile ( !isContainerOrFragment( parent ) ) {\n\t\tif ( !parent ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n\n// Function used by both public breakAttributes (without splitting text nodes) and by other methods (with\n// splitting text nodes).\n//\n// @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n// @param {Boolean} [forceSplitText = false] If set to `true`, will break text nodes even if they are directly in\n// container element. This behavior will result in incorrect view state, but is needed by other view writing methods\n// which then fixes view state. Defaults to `false`.\n// @returns {module:engine/view/range~Range} New range with located at break positions.\nfunction _breakAttributesRange( range, forceSplitText = false ) {\n\tconst rangeStart = range.start;\n\tconst rangeEnd = range.end;\n\n\tvalidateRangeContainer( range );\n\n\t// Break at the collapsed position. Return new collapsed range.\n\tif ( range.isCollapsed ) {\n\t\tconst position = _breakAttributes( range.start, forceSplitText );\n\n\t\treturn new Range( position, position );\n\t}\n\n\tconst breakEnd = _breakAttributes( rangeEnd, forceSplitText );\n\tconst count = breakEnd.parent.childCount;\n\tconst breakStart = _breakAttributes( rangeStart, forceSplitText );\n\n\t// Calculate new break end offset.\n\tbreakEnd.offset += breakEnd.parent.childCount - count;\n\n\treturn new Range( breakStart, breakEnd );\n}\n\n// Function used by public breakAttributes (without splitting text nodes) and by other methods (with\n// splitting text nodes).\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n// is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n// is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// @param {module:engine/view/position~Position} position Position where to break attributes.\n// @param {Boolean} [forceSplitText = false] If set to `true`, will break text nodes even if they are directly in\n// container element. This behavior will result in incorrect view state, but is needed by other view writing methods\n// which then fixes view state. Defaults to `false`.\n// @returns {module:engine/view/position~Position} New position after breaking the attributes.\nfunction _breakAttributes( position, forceSplitText = false ) {\n\tconst positionOffset = position.offset;\n\tconst positionParent = position.parent;\n\n\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\tif ( position.parent.is( 'emptyElement' ) ) {\n\t\t/**\n\t\t * Cannot break inside EmptyElement instance.\n\t\t *\n\t\t * @error view-writer-cannot-break-empty-element\n\t\t */\n\t\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element' );\n\t}\n\n\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\n\tif ( position.parent.is( 'uiElement' ) ) {\n\t\t/**\n\t\t * Cannot break inside UIElement instance.\n\t\t *\n\t\t * @error view-writer-cannot-break-ui-element\n\t\t */\n\t\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element' );\n\t}\n\n\t// There are no attributes to break and text nodes breaking is not forced.\n\tif ( !forceSplitText && positionParent.is( 'text' ) && isContainerOrFragment( positionParent.parent ) ) {\n\t\treturn Position.createFromPosition( position );\n\t}\n\n\t// Position's parent is container, so no attributes to break.\n\tif ( isContainerOrFragment( positionParent ) ) {\n\t\treturn Position.createFromPosition( position );\n\t}\n\n\t// Break text and start again in new position.\n\tif ( positionParent.is( 'text' ) ) {\n\t\treturn _breakAttributes( breakTextNode( position ), forceSplitText );\n\t}\n\n\tconst length = positionParent.childCount;\n\n\t// <p>foo<b><u>bar{}</u></b></p>\n\t// <p>foo<b><u>bar</u>[]</b></p>\n\t// <p>foo<b><u>bar</u></b>[]</p>\n\tif ( positionOffset == length ) {\n\t\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\n\n\t\treturn _breakAttributes( newPosition, forceSplitText );\n\t} else\n\t// <p>foo<b><u>{}bar</u></b></p>\n\t// <p>foo<b>[]<u>bar</u></b></p>\n\t// <p>foo{}<b><u>bar</u></b></p>\n\tif ( positionOffset === 0 ) {\n\t\tconst newPosition = new Position( positionParent.parent, positionParent.index );\n\n\t\treturn _breakAttributes( newPosition, forceSplitText );\n\t}\n\t// <p>foo<b><u>b{}ar</u></b></p>\n\t// <p>foo<b><u>b[]ar</u></b></p>\n\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\telse {\n\t\tconst offsetAfter = positionParent.index + 1;\n\n\t\t// Break element.\n\t\tconst clonedNode = positionParent.clone();\n\n\t\t// Insert cloned node to position's parent node.\n\t\tpositionParent.parent.insertChildren( offsetAfter, clonedNode );\n\n\t\t// Get nodes to move.\n\t\tconst count = positionParent.childCount - positionOffset;\n\t\tconst nodesToMove = positionParent.removeChildren( positionOffset, count );\n\n\t\t// Move nodes to cloned node.\n\t\tclonedNode.appendChildren( nodesToMove );\n\n\t\t// Create new position to work on.\n\t\tconst newPosition = new Position( positionParent.parent, offsetAfter );\n\n\t\treturn _breakAttributes( newPosition, forceSplitText );\n\t}\n}\n\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped otuside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\nfunction shouldABeOutsideB( a, b ) {\n\tif ( a.priority < b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority > b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use identities.\n\treturn a.getIdentity() < b.getIdentity();\n}\n\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\nfunction movePositionToTextNode( position ) {\n\tconst nodeBefore = position.nodeBefore;\n\n\tif ( nodeBefore && nodeBefore.is( 'text' ) ) {\n\t\treturn new Position( nodeBefore, nodeBefore.data.length );\n\t}\n\n\tconst nodeAfter = position.nodeAfter;\n\n\tif ( nodeAfter && nodeAfter.is( 'text' ) ) {\n\t\treturn new Position( nodeAfter, 0 );\n\t}\n\n\treturn position;\n}\n\n// Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\nfunction breakTextNode( position ) {\n\tif ( position.offset == position.parent.data.length ) {\n\t\treturn new Position( position.parent.parent, position.parent.index + 1 );\n\t}\n\n\tif ( position.offset === 0 ) {\n\t\treturn new Position( position.parent.parent, position.parent.index );\n\t}\n\n\t// Get part of the text that need to be moved.\n\tconst textToMove = position.parent.data.slice( position.offset );\n\n\t// Leave rest of the text in position's parent.\n\tposition.parent.data = position.parent.data.slice( 0, position.offset );\n\n\t// Insert new text node after position's parent text node.\n\tposition.parent.parent.insertChildren( position.parent.index + 1, new Text( textToMove ) );\n\n\t// Return new position between two newly created text nodes.\n\treturn new Position( position.parent.parent, position.parent.index + 1 );\n}\n\n// Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\nfunction mergeTextNodes( t1, t2 ) {\n\t// Merge text data into first text node and remove second one.\n\tconst nodeBeforeLength = t1.data.length;\n\tt1.data += t2.data;\n\tt2.remove();\n\n\treturn new Position( t1, nodeBeforeLength );\n}\n\n// Returns `true` if range is located in same {@link module:engine/view/attributeelement~AttributeElement AttributeElement}\n// (`start` and `end` positions are located inside same {@link module:engine/view/attributeelement~AttributeElement AttributeElement}),\n// starts on 0 offset and ends after last child node.\n//\n// @param {module:engine/view/range~Range} Range\n// @returns {Boolean}\nfunction rangeSpansOnAllChildren( range ) {\n\treturn range.start.parent == range.end.parent && range.start.parent.is( 'attributeElement' ) &&\n\t\trange.start.offset === 0 && range.end.offset === range.start.parent.childCount;\n}\n\n// Checks if provided nodes are valid to insert. Checks if each node is an instance of\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\n// {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not {@link module:engine/view/text~Text Texts},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n// {@link module:engine/view/uielement~UIElement UIElements},\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\n// |module:engine/view/containerelement~ContainerElement> nodes\nfunction validateNodesToInsert( nodes ) {\n\tfor ( const node of nodes ) {\n\t\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\n\t\t\t/**\n\t\t\t * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n\t\t\t * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n\t\t\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n\t\t\t * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\n\t\t\t *\n\t\t\t * @error view-writer-insert-invalid-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-insert-invalid-node' );\n\t\t}\n\n\t\tif ( !node.is( 'text' ) ) {\n\t\t\tvalidateNodesToInsert( node.getChildren() );\n\t\t}\n\t}\n}\n\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, UIElement ];\n\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\nfunction isContainerOrFragment( node ) {\n\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\n}\n\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\nfunction validateRangeContainer( range ) {\n\tconst startContainer = getParentContainer( range.start );\n\tconst endContainer = getParentContainer( range.end );\n\n\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\n\t\t/**\n\t\t * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\n\t\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\n\t\t * parent container for these positions cannot be found.\n\t\t *\n\t\t * @error view-writer-invalid-range-container\n\t\t */\n\t\tthrow new CKEditorError( 'view-writer-invalid-range-container' );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window, Text */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Set of utils related to block and inline fillers handling.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n\n/**\n * `<br> filler creator. This is a function which creates `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @function\n */\nexport const BR_FILLER = domDocument => {\n\tconst fillerBr = domDocument.createElement( 'br' );\n\tfillerBr.dataset.ckeFiller = true;\n\n\treturn fillerBr;\n};\n\n/**\n * Non-breaking space filler creator. This is a function which creates `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~BR_FILLER\n * @function\n */\nexport const NBSP_FILLER = domDocument => domDocument.createTextNode( '\\u00A0' );\n\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\nexport const INLINE_FILLER_LENGTH = 7;\n\n/**\n * Inline filler which is sequence of the zero width spaces.\n */\nexport let INLINE_FILLER = '';\n\nfor ( let i = 0; i < INLINE_FILLER_LENGTH; i++ ) {\n\tINLINE_FILLER += '\\u200b';\n}\n\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( 'foo' ) ); // false\n *\t\tstartsWithFiller( document.createElement( 'p' ) ); // false\n *\n * @param {Node} domNode DOM node.\n * @returns {Boolean} True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function startsWithFiller( domNode ) {\n\treturn ( domNode instanceof Text ) && ( domNode.data.substr( 0, INLINE_FILLER_LENGTH ) === INLINE_FILLER );\n}\n\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n *\n * @param {Text} domText DOM text node.\n * @returns {Boolean} True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isInlineFiller( domText ) {\n\treturn domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller( domText );\n}\n\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n *\t\tgetDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n *\t\tgetDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n *\n * @param {Text} domText DOM text node, possible with inline filler.\n * @returns {String} Data without filler.\n */\nexport function getDataWithoutFiller( domText ) {\n\tif ( startsWithFiller( domText ) ) {\n\t\treturn domText.data.slice( INLINE_FILLER_LENGTH );\n\t} else {\n\t\treturn domText.data;\n\t}\n}\n\n// Cache block fillers templates to improve performance.\nconst templateBlockFillers = new WeakMap();\n\n/**\n * Checks if the node is an instance of the block filler of the given type.\n *\n *\t\tconst brFillerInstance = BR_FILLER( document );\n *\t\tisBlockFiller( brFillerInstance, BR_FILLER ); // true\n *\n * @param {Node} domNode DOM node to check.\n * @param {Function} blockFiller Block filler creator.\n * @returns {Boolean} True if text node contains only {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isBlockFiller( domNode, blockFiller ) {\n\tlet templateBlockFiller = templateBlockFillers.get( blockFiller );\n\n\tif ( !templateBlockFiller ) {\n\t\ttemplateBlockFiller = blockFiller( window.document );\n\t\ttemplateBlockFillers.set( blockFiller, templateBlockFiller );\n\t}\n\n\treturn domNode.isEqualNode( templateBlockFiller );\n}\n\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param {module:engine/view/view~View} view View controller instance we should inject quirks handling on.\n */\nexport function injectQuirksHandling( view ) {\n\tview.document.on( 'keydown', jumpOverInlineFiller );\n}\n\n// Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\nfunction jumpOverInlineFiller( evt, data ) {\n\tif ( data.keyCode == keyCodes.arrowleft ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\tif ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n\t\t\tconst domParent = domSelection.getRangeAt( 0 ).startContainer;\n\t\t\tconst domOffset = domSelection.getRangeAt( 0 ).startOffset;\n\n\t\t\tif ( startsWithFiller( domParent ) && domOffset <= INLINE_FILLER_LENGTH ) {\n\t\t\t\tdomSelection.collapse( domParent, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/diff\n */\n\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\nexport default function diff( a, b, cmp ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\t// Temporary action type statics.\n\tlet _insert, _delete;\n\n\t// Swapped the arrays to use the shorter one as the first one.\n\tif ( b.length < a.length ) {\n\t\tconst tmp = a;\n\n\t\ta = b;\n\t\tb = tmp;\n\n\t\t// We swap the action types as well.\n\t\t_insert = 'delete';\n\t\t_delete = 'insert';\n\t} else {\n\t\t_insert = 'insert';\n\t\t_delete = 'delete';\n\t}\n\n\tconst m = a.length;\n\tconst n = b.length;\n\tconst delta = n - m;\n\n\t// Edit scripts, for each diagonal.\n\tconst es = {};\n\t// Furthest points, the furthest y we can get on each diagonal.\n\tconst fp = {};\n\n\tfunction snake( k ) {\n\t\t// We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n\t\t// Furthest points (y) on the diagonal below k.\n\t\tconst y1 = ( fp[ k - 1 ] !== undefined ? fp[ k - 1 ] : -1 ) + 1;\n\t\t// Furthest points (y) on the diagonal above k.\n\t\tconst y2 = fp[ k + 1 ] !== undefined ? fp[ k + 1 ] : -1;\n\t\t// The way we should go to get further.\n\t\tconst dir = y1 > y2 ? -1 : 1;\n\n\t\t// Clone previous changes array (if any).\n\t\tif ( es[ k + dir ] ) {\n\t\t\tes[ k ] = es[ k + dir ].slice( 0 );\n\t\t}\n\n\t\t// Create changes array.\n\t\tif ( !es[ k ] ) {\n\t\t\tes[ k ] = [];\n\t\t}\n\n\t\t// Push the action.\n\t\tes[ k ].push( y1 > y2 ? _insert : _delete );\n\n\t\t// Set the beginning coordinates.\n\t\tlet y = Math.max( y1, y2 );\n\t\tlet x = y - k;\n\n\t\t// Traverse the diagonal as long as the values match.\n\t\twhile ( x < m && y < n && cmp( a[ x ], b[ y ] ) ) {\n\t\t\tx++;\n\t\t\ty++;\n\t\t\t// Push no change action.\n\t\t\tes[ k ].push( 'equal' );\n\t\t}\n\n\t\treturn y;\n\t}\n\n\tlet p = 0;\n\tlet k;\n\n\t// Traverse the graph until we reach the end of the longer string.\n\tdo {\n\t\t// Updates furthest points and edit scripts for diagonals below delta.\n\t\tfor ( k = -p; k < delta; k++ ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest points and edit scripts for diagonals above delta.\n\t\tfor ( k = delta + p; k > delta; k-- ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest point and edit script for the delta diagonal.\n\t\t// note that the delta diagonal is the one which goes through the sink (m, n).\n\t\tfp[ delta ] = snake( delta );\n\n\t\tp++;\n\t} while ( fp[ delta ] !== n );\n\n\t// Return the final list of edit changes.\n\t// We remove the first item that represents the action for the injected nulls.\n\treturn es[ delta ].slice( 1 );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/insertat\n */\n\n/**\n * Inserts node to the parent at given index.\n *\n * @param {Element} parentElement Parent element.\n * @param {Number} index Insertions index.\n * @param {Node} nodeToInsert Node to insert.\n */\nexport default function insertAt( parentElement, index, nodeToInsert ) {\n\tparentElement.insertBefore( nodeToInsert, parentElement.childNodes[ index ] || null );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/remove\n */\n\n/**\n * Removes given node from parent.\n *\n * @param {Node} node Node to remove.\n */\nexport default function remove( node ) {\n\tconst parent = node.parentNode;\n\n\tif ( parent ) {\n\t\tparent.removeChild( node );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/istext\n */\n\n/**\n * Checks if the object is a native DOM Text node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isText( obj ) {\n\treturn Object.prototype.toString.call( obj ) == '[object Text]';\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/renderer\n */\n\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller, isBlockFiller } from './filler';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\n\n/**\n * Renderer updates DOM structure and selection, to make them a reflection of the view structure and selection.\n *\n * View nodes which may need to be rendered needs to be {@link module:engine/view/renderer~Renderer#markToSync marked}.\n * Then, on {@link module:engine/view/renderer~Renderer#render render}, renderer compares view nodes with DOM nodes\n * in order to check which ones really need to be refreshed. Finally, it creates DOM nodes from these view nodes,\n * {@link module:engine/view/domconverter~DomConverter#bindElements binds} them and inserts into the DOM tree.\n *\n * Every time {@link module:engine/view/renderer~Renderer#render render} is called, renderer additionally checks if\n * {@link module:engine/view/renderer~Renderer#selection selection} needs update and updates it if so.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform and bind nodes.\n */\nexport default class Renderer {\n\t/**\n\t * Creates a renderer instance.\n\t *\n\t * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\n\t * @param {module:engine/view/selection~Selection} selection View selection.\n\t */\n\tconstructor( domConverter, selection ) {\n\t\t/**\n\t\t * Set of DOM Documents instances.\n\t\t *\n\t\t * @member {Set.<Document>}\n\t\t */\n\t\tthis.domDocuments = new Set();\n\n\t\t/**\n\t\t * Converter instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = domConverter;\n\n\t\t/**\n\t\t * Set of nodes which attributes changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedAttributes = new Set();\n\n\t\t/**\n\t\t * Set of elements which child lists changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedChildren = new Set();\n\n\t\t/**\n\t\t * Set of text nodes which text data changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedTexts = new Set();\n\n\t\t/**\n\t\t * View selection. Renderer updates DOM selection based on the view selection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/selection~Selection}\n\t\t */\n\t\tthis.selection = selection;\n\n\t\t/**\n\t\t * The text node in which the inline filler was rendered.\n\t\t *\n\t\t * @private\n\t\t * @member {Text}\n\t\t */\n\t\tthis._inlineFiller = null;\n\n\t\t/**\n\t\t * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\n\t\t * this is set to `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isFocused = false;\n\n\t\t/**\n\t\t * DOM element containing fake selection.\n\t\t *\n\t\t * @private\n\t\t * @type {null|HTMLElement}\n\t\t */\n\t\tthis._fakeSelectionContainer = null;\n\t}\n\n\t/**\n\t * Mark node to be synchronized.\n\t *\n\t * Note that only view nodes which parents have corresponding DOM elements need to be marked to be synchronized.\n\t *\n\t * @see #markedAttributes\n\t * @see #markedChildren\n\t * @see #markedTexts\n\t *\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Node to be marked.\n\t */\n\tmarkToSync( type, node ) {\n\t\tif ( type === 'text' ) {\n\t\t\tif ( this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis.markedTexts.add( node );\n\t\t\t}\n\t\t} else {\n\t\t\t// If the node has no DOM element it is not rendered yet,\n\t\t\t// its children/attributes do not need to be marked to be sync.\n\t\t\tif ( !this.domConverter.mapViewToDom( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( type === 'attributes' ) {\n\t\t\t\tthis.markedAttributes.add( node );\n\t\t\t} else if ( type === 'children' ) {\n\t\t\t\tthis.markedChildren.add( node );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Unknown type passed to Renderer.markToSync.\n\t\t\t\t *\n\t\t\t\t * @error renderer-unknown-type\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Render method checks {@link #markedAttributes},\n\t * {@link #markedChildren} and {@link #markedTexts} and updates all\n\t * nodes which need to be updated. Then it clears all three sets. Also, every time render is called it compares and\n\t * if needed updates the selection.\n\t *\n\t * Renderer tries not to break text composition (e.g. IME) and x-index of the selection,\n\t * so it does as little as it is needed to update the DOM.\n\t *\n\t * For attributes it adds new attributes to DOM elements, updates values and removes\n\t * attributes which do not exist in the view element.\n\t *\n\t * For text nodes it updates the text string if it is different. Note that if parent element is marked as an element\n\t * which changed child list, text node update will not be done, because it may not be possible to\n\t * {@link module:engine/view/domconverter~DomConverter#findCorrespondingDomText find a corresponding DOM text}.\n\t * The change will be handled in the parent element.\n\t *\n\t * For elements, which child lists have changed, it calculates a {@link module:utils/diff~diff} and adds or removes children which have\n\t * changed.\n\t *\n\t * Rendering also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n\t * at selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n\t * removed as long selection is in the text node which needed it at first.\n\t */\n\trender() {\n\t\tlet inlineFillerPosition;\n\n\t\t// There was inline filler rendered in the DOM but it's not\n\t\t// at the selection position any more, so we can remove it\n\t\t// (cause even if it's needed, it must be placed in another location).\n\t\tif ( this._inlineFiller && !this._isSelectionInInlineFiller() ) {\n\t\t\tthis._removeInlineFiller();\n\t\t}\n\n\t\t// If we've got the filler, let's try to guess its position in the view.\n\t\tif ( this._inlineFiller ) {\n\t\t\tinlineFillerPosition = this._getInlineFillerPosition();\n\t\t}\n\t\t// Otherwise, if it's needed, create it at the selection position.\n\t\telse if ( this._needsInlineFillerAtSelection() ) {\n\t\t\tinlineFillerPosition = this.selection.getFirstPosition();\n\n\t\t\t// Do not use `markToSync` so it will be added even if the parent is already added.\n\t\t\tthis.markedChildren.add( inlineFillerPosition.parent );\n\t\t}\n\n\t\tfor ( const node of this.markedTexts ) {\n\t\t\tif ( !this.markedChildren.has( node.parent ) && this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis._updateText( node, { inlineFillerPosition } );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const element of this.markedAttributes ) {\n\t\t\tthis._updateAttrs( element );\n\t\t}\n\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildren( element, { inlineFillerPosition } );\n\t\t}\n\n\t\t// Check whether the inline filler is required and where it really is in the DOM.\n\t\t// At this point in most cases it will be in the DOM, but there are exceptions.\n\t\t// For example, if the inline filler was deep in the created DOM structure, it will not be created.\n\t\t// Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n\t\t// it will not be present.\n\t\t// Fix those and similar scenarios.\n\t\tif ( inlineFillerPosition ) {\n\t\t\tconst fillerDomPosition = this.domConverter.viewPositionToDom( inlineFillerPosition );\n\t\t\tconst domDocument = fillerDomPosition.parent.ownerDocument;\n\n\t\t\tif ( !startsWithFiller( fillerDomPosition.parent ) ) {\n\t\t\t\t// Filler has not been created at filler position. Create it now.\n\t\t\t\tthis._inlineFiller = this._addInlineFiller( domDocument, fillerDomPosition.parent, fillerDomPosition.offset );\n\t\t\t} else {\n\t\t\t\t// Filler has been found, save it.\n\t\t\t\tthis._inlineFiller = fillerDomPosition.parent;\n\t\t\t}\n\t\t} else {\n\t\t\t// There is no filler needed.\n\t\t\tthis._inlineFiller = null;\n\t\t}\n\n\t\tthis._updateSelection();\n\t\tthis._updateFocus();\n\n\t\tthis.markedTexts.clear();\n\t\tthis.markedAttributes.clear();\n\t\tthis.markedChildren.clear();\n\t}\n\n\t/**\n\t * Adds inline filler at given position.\n\t *\n\t * The position can be given as an array of DOM nodes and an offset in that array,\n\t * or a DOM parent element and offset in that element.\n\t *\n\t * @private\n\t * @param {Document} domDocument\n\t * @param {Element|Array.<Node>} domParentOrArray\n\t * @param {Number} offset\n\t * @returns {Text} The DOM text node that contains inline filler.\n\t */\n\t_addInlineFiller( domDocument, domParentOrArray, offset ) {\n\t\tconst childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n\t\tconst nodeAfterFiller = childNodes[ offset ];\n\n\t\tif ( isText( nodeAfterFiller ) ) {\n\t\t\tnodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n\n\t\t\treturn nodeAfterFiller;\n\t\t} else {\n\t\t\tconst fillerNode = domDocument.createTextNode( INLINE_FILLER );\n\n\t\t\tif ( Array.isArray( domParentOrArray ) ) {\n\t\t\t\tchildNodes.splice( offset, 0, fillerNode );\n\t\t\t} else {\n\t\t\t\tinsertAt( domParentOrArray, offset, fillerNode );\n\t\t\t}\n\n\t\t\treturn fillerNode;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the position of the inline filler based on the current selection.\n\t * Here, we assume that we know that the filler is needed and\n\t * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it's needed,\n\t * it's somewhere at the selection postion.\n\t *\n\t * Note: we cannot restore the filler position based on the filler's DOM text node, because\n\t * when this method is called (before rendering) the bindings will often be broken. View to DOM\n\t * bindings are only dependable after rendering.\n\t *\n\t * @private\n\t * @returns {module:engine/view/position~Position}\n\t */\n\t_getInlineFillerPosition() {\n\t\tconst firstPos = this.selection.getFirstPosition();\n\n\t\tif ( firstPos.parent.is( 'text' ) ) {\n\t\t\treturn ViewPosition.createBefore( this.selection.getFirstPosition().parent );\n\t\t} else {\n\t\t\treturn firstPos;\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` if the selection hasn't left the inline filler's text node.\n\t * If it is `true` it means that the filler had been added for a reason and the selection does not\n\t * left the filler's text node. E.g. the user can be in the middle of a composition so it should not be touched.\n\t *\n\t * @private\n\t * @returns {Boolean} True if the inline filler and selection are in the same place.\n\t */\n\t_isSelectionInInlineFiller() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note, we can't check if selection's position equals position of the\n\t\t// this._inlineFiller node, because of #663. We may not be able to calculate\n\t\t// the filler's position in the view at this stage.\n\t\t// Instead, we check it the other way – whether selection is anchored in\n\t\t// that text node or next to it.\n\n\t\t// Possible options are:\n\t\t// \"FILLER{}\"\n\t\t// \"FILLERadded-text{}\"\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst position = this.domConverter.viewPositionToDom( selectionPosition );\n\n\t\tif ( position && isText( position.parent ) && startsWithFiller( position.parent ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes the inline filler.\n\t *\n\t * @private\n\t */\n\t_removeInlineFiller() {\n\t\tconst domFillerNode = this._inlineFiller;\n\n\t\t// Something weird happened and the stored node doesn't contain the filler's text.\n\t\tif ( !startsWithFiller( domFillerNode ) ) {\n\t\t\t/**\n\t\t\t * The inline filler node was lost. Most likely, something overwrote the filler text node\n\t\t\t * in the DOM.\n\t\t\t *\n\t\t\t * @error view-renderer-filler-was-lost\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-renderer-filler-was-lost: The inline filler node was lost.' );\n\t\t}\n\n\t\tif ( isInlineFiller( domFillerNode ) ) {\n\t\t\tdomFillerNode.parentNode.removeChild( domFillerNode );\n\t\t} else {\n\t\t\tdomFillerNode.data = domFillerNode.data.substr( INLINE_FILLER_LENGTH );\n\t\t}\n\n\t\tthis._inlineFiller = null;\n\t}\n\n\t/**\n\t * Checks if the inline {@link module:engine/view/filler filler} should be added.\n\t *\n\t * @private\n\t * @returns {Boolean} True if the inline fillers should be added.\n\t */\n\t_needsInlineFillerAtSelection() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst selectionParent = selectionPosition.parent;\n\t\tconst selectionOffset = selectionPosition.offset;\n\n\t\t// If there is no DOM root we do not care about fillers.\n\t\tif ( !this.domConverter.mapViewToDom( selectionParent.root ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !( selectionParent.is( 'element' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Prevent adding inline filler inside elements with contenteditable=false.\n\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1170\n\t\tif ( !_isEditable( selectionParent ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have block filler, we do not need inline one.\n\t\tif ( selectionOffset === selectionParent.getFillerOffset() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst nodeBefore = selectionPosition.nodeBefore;\n\t\tconst nodeAfter = selectionPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText || nodeAfter instanceof ViewText ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if text needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} viewText View text to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position on which the inline\n\t * filler should be rendered.\n\t */\n\t_updateText( viewText, options ) {\n\t\tconst domText = this.domConverter.findCorrespondingDomText( viewText );\n\t\tconst newDomText = this.domConverter.viewToDom( viewText, domText.ownerDocument );\n\n\t\tconst actualText = domText.data;\n\t\tlet expectedText = newDomText.data;\n\n\t\tconst filler = options.inlineFillerPosition;\n\n\t\tif ( filler && filler.parent == viewText.parent && filler.offset == viewText.index ) {\n\t\t\texpectedText = INLINE_FILLER + expectedText;\n\t\t}\n\n\t\tif ( actualText != expectedText ) {\n\t\t\tdomText.data = expectedText;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if attributes list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement View element to update.\n\t */\n\t_updateAttrs( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\t\tconst domAttrKeys = Array.from( domElement.attributes ).map( attr => attr.name );\n\t\tconst viewAttrKeys = viewElement.getAttributeKeys();\n\n\t\t// Add or overwrite attributes.\n\t\tfor ( const key of viewAttrKeys ) {\n\t\t\tdomElement.setAttribute( key, viewElement.getAttribute( key ) );\n\t\t}\n\n\t\t// Remove from DOM attributes which do not exists in the view.\n\t\tfor ( const key of domAttrKeys ) {\n\t\t\tif ( !viewElement.hasAttribute( key ) ) {\n\t\t\t\tdomElement.removeAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if elements child list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement View element to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position on which the inline\n\t * filler should be rendered.\n\t */\n\t_updateChildren( viewElement, options ) {\n\t\tconst domConverter = this.domConverter;\n\t\tconst domElement = domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM.\n\t\t\t// There is no need to update it. It will be updated when re-inserted.\n\t\t\treturn;\n\t\t}\n\n\t\tconst domDocument = domElement.ownerDocument;\n\t\tconst filler = options.inlineFillerPosition;\n\t\tconst actualDomChildren = domElement.childNodes;\n\t\tconst expectedDomChildren = Array.from( domConverter.viewChildrenToDom( viewElement, domDocument, { bind: true } ) );\n\n\t\t// Inline filler element has to be created during children update because we need it to diff actual dom\n\t\t// elements with expected dom elements. We need inline filler in expected dom elements so we won't re-render\n\t\t// text node if it is not necessary.\n\t\tif ( filler && filler.parent == viewElement ) {\n\t\t\tthis._addInlineFiller( domDocument, expectedDomChildren, filler.offset );\n\t\t}\n\n\t\tconst actions = diff( actualDomChildren, expectedDomChildren, sameNodes );\n\n\t\tlet i = 0;\n\t\tconst nodesToUnbind = new Set();\n\n\t\tfor ( const action of actions ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\tinsertAt( domElement, i, expectedDomChildren[ i ] );\n\t\t\t\ti++;\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tnodesToUnbind.add( actualDomChildren[ i ] );\n\t\t\t\tremove( actualDomChildren[ i ] );\n\t\t\t} else { // 'equal'\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n\t\t// comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n\t\t// it was moved to DOM tree out of the removed node.\n\t\tfor ( const node of nodesToUnbind ) {\n\t\t\tif ( !node.parentNode ) {\n\t\t\t\tthis.domConverter.unbindDomElement( node );\n\t\t\t}\n\t\t}\n\n\t\tfunction sameNodes( actualDomChild, expectedDomChild ) {\n\t\t\t// Elements.\n\t\t\tif ( actualDomChild === expectedDomChild ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Texts.\n\t\t\telse if ( isText( actualDomChild ) && isText( expectedDomChild ) ) {\n\t\t\t\treturn actualDomChild.data === expectedDomChild.data;\n\t\t\t}\n\t\t\t// Block fillers.\n\t\t\telse if ( isBlockFiller( actualDomChild, domConverter.blockFiller ) &&\n\t\t\t\tisBlockFiller( expectedDomChild, domConverter.blockFiller ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Not matching types.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if selection needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateSelection() {\n\t\t// If there is no selection - remove DOM and fake selections.\n\t\tif ( this.selection.rangeCount === 0 ) {\n\t\t\tthis._removeDomSelection();\n\t\t\tthis._removeFakeSelection();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst domRoot = this.domConverter.mapViewToDom( this.selection.editableElement );\n\n\t\t// Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n\t\tif ( !this.isFocused || !domRoot ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Render selection.\n\t\tif ( this.selection.isFake ) {\n\t\t\tthis._updateFakeSelection( domRoot );\n\t\t} else {\n\t\t\tthis._removeFakeSelection();\n\t\t\tthis._updateDomSelection( domRoot );\n\t\t}\n\t}\n\n\t/**\n\t * Updates fake selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot Valid DOM root where fake selection container should be added.\n\t */\n\t_updateFakeSelection( domRoot ) {\n\t\tconst domDocument = domRoot.ownerDocument;\n\t\tlet container = this._fakeSelectionContainer;\n\n\t\t// Create fake selection container if one does not exist.\n\t\tif ( !container ) {\n\t\t\tthis._fakeSelectionContainer = container = domDocument.createElement( 'div' );\n\n\t\t\tObject.assign( container.style, {\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: 0,\n\t\t\t\tleft: '-9999px',\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/752.\n\t\t\t\twidth: '42px'\n\t\t\t} );\n\n\t\t\t// Fill it with a text node so we can update it later.\n\t\t\tcontainer.appendChild( domDocument.createTextNode( '\\u00A0' ) );\n\t\t}\n\n\t\t// Add fake container if not already added.\n\t\tif ( !container.parentElement ) {\n\t\t\tdomRoot.appendChild( container );\n\t\t}\n\n\t\t// Update contents.\n\t\tcontainer.firstChild.data = this.selection.fakeSelectionLabel || '\\u00A0';\n\n\t\t// Update selection.\n\t\tconst domSelection = domDocument.getSelection();\n\t\tconst domRange = domDocument.createRange();\n\n\t\tdomSelection.removeAllRanges();\n\t\tdomRange.selectNodeContents( container );\n\t\tdomSelection.addRange( domRange );\n\n\t\t// Bind fake selection container with current selection.\n\t\tthis.domConverter.bindFakeSelection( container, this.selection );\n\t}\n\n\t/**\n\t * Updates DOM selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot Valid DOM root where DOM selection should be rendered.\n\t */\n\t_updateDomSelection( domRoot ) {\n\t\tconst domSelection = domRoot.ownerDocument.defaultView.getSelection();\n\n\t\t// Let's check whether DOM selection needs updating at all.\n\t\tif ( !this._domSelectionNeedsUpdate( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n\t\t// set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n\t\t// and focus of view selection.\n\t\t// Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n\t\t// selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n\t\tconst anchor = this.domConverter.viewPositionToDom( this.selection.anchor );\n\t\tconst focus = this.domConverter.viewPositionToDom( this.selection.focus );\n\n\t\t// Focus the new editing host.\n\t\t// Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n\t\tdomRoot.focus();\n\n\t\tdomSelection.collapse( anchor.parent, anchor.offset );\n\t\tdomSelection.extend( focus.parent, focus.offset );\n\t}\n\n\t/**\n\t * Checks whether given DOM selection needs to be updated.\n\t *\n\t * @private\n\t * @param {Selection} domSelection DOM selection to check.\n\t * @returns {Boolean}\n\t */\n\t_domSelectionNeedsUpdate( domSelection ) {\n\t\tif ( !this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\t// Current DOM selection is in incorrect position. We need to update it.\n\t\t\treturn true;\n\t\t}\n\n\t\tconst oldViewSelection = domSelection && this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( oldViewSelection && this.selection.isEqual( oldViewSelection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If selection is not collapsed, it does not need to be updated if it is similar.\n\t\tif ( !this.selection.isCollapsed && this.selection.isSimilar( oldViewSelection ) ) {\n\t\t\t// Selection did not changed and is correct, do not update.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Selections are not similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes DOM selection.\n\t *\n\t * @private\n\t */\n\t_removeDomSelection() {\n\t\tfor ( const doc of this.domDocuments ) {\n\t\t\tconst domSelection = doc.getSelection();\n\n\t\t\tif ( domSelection.rangeCount ) {\n\t\t\t\tconst activeDomElement = doc.activeElement;\n\t\t\t\tconst viewElement = this.domConverter.mapDomToView( activeDomElement );\n\n\t\t\t\tif ( activeDomElement && viewElement ) {\n\t\t\t\t\tdoc.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes fake selection.\n\t *\n\t * @private\n\t */\n\t_removeFakeSelection() {\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\tif ( container ) {\n\t\t\tcontainer.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if focus needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateFocus() {\n\t\tif ( this.isFocused ) {\n\t\t\tconst editable = this.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t}\n\t\t}\n\t}\n}\n\nmix( Renderer, ObservableMixin );\n\n// Checks if provided element is editable.\n//\n// @private\n// @param {module:engine/view/element~Element} element\n// @returns {Boolean}\nfunction _isEditable( element ) {\n\tif ( element.getAttribute( 'contenteditable' ) == 'false' ) {\n\t\treturn false;\n\t}\n\n\tconst parent = element.findAncestor( element => element.hasAttribute( 'contenteditable' ) );\n\n\treturn !parent || parent.getAttribute( 'contenteditable' ) == 'true';\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window, document */\n\n/**\n * @module utils/dom/global\n */\n\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nexport default { window, document };\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/indexof\n */\n\n/**\n * Returns index of the node in the parent element.\n *\n * @param {Node} node Node which index is tested.\n * @returns {Number} Index of the node in the parent element. Returns 0 if node has no parent.\n */\nexport default function indexOf( node ) {\n\tlet index = 0;\n\n\twhile ( node.previousSibling ) {\n\t\tnode = node.previousSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals Node */\n\n/**\n * @module utils/dom/getancestors\n */\n\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors( node ) {\n\tconst nodes = [];\n\n\t// We are interested in `Node`s `DocumentFragment`s only.\n\twhile ( node && node.nodeType != Node.DOCUMENT_NODE ) {\n\t\tnodes.unshift( node );\n\t\tnode = node.parentNode;\n\t}\n\n\treturn nodes;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter */\n\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, INLINE_FILLER_LENGTH, isBlockFiller, isInlineFiller, startsWithFiller, getDataWithoutFiller } from './filler';\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\n\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n\t/**\n\t * Creates DOM converter.\n\t *\n\t * @param {Object} options Object with configuration options.\n\t * @param {Function} [options.blockFiller=module:engine/view/filler~BR_FILLER] Block filler creator.\n\t */\n\tconstructor( options = {} ) {\n\t\t// Using WeakMap prevent memory leaks: when the converter will be destroyed all referenced between View and DOM\n\t\t// will be removed. Also because it is a *Weak*Map when both view and DOM elements will be removed referenced\n\t\t// will be also removed, isn't it brilliant?\n\t\t//\n\t\t// Yes, PJ. It is.\n\t\t//\n\t\t// You guys so smart.\n\t\t//\n\t\t// I've been here. Seen stuff. Afraid of code now.\n\n\t\t/**\n\t\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n\t\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Function} module:engine/view/domconverter~DomConverter#blockFiller\n\t\t */\n\t\tthis.blockFiller = options.blockFiller || BR_FILLER;\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered pre-formatted elements.\n\t\t *\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n\t\t */\n\t\tthis.preElements = [ 'pre' ];\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered block elements.\n\t\t *\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n\t\t */\n\t\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ];\n\n\t\t/**\n\t\t * DOM to View mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n\t\t */\n\t\tthis._domToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View to DOM mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n\t\t */\n\t\tthis._viewToDomMapping = new WeakMap();\n\n\t\t/**\n\t\t * Holds mapping between fake selection containers and corresponding view selections.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n\t\t */\n\t\tthis._fakeSelectionMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Binds given DOM element that represents fake selection to {@link module:engine/view/selection~Selection view selection}.\n\t * View selection copy is stored and can be retrieved by {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView}\n\t * method.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @param {module:engine/view/selection~Selection} viewSelection\n\t */\n\tbindFakeSelection( domElement, viewSelection ) {\n\t\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewSelection ) );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to given DOM element that represents\n\t * fake selection. Returns `undefined` if binding to given DOM element does not exists.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @returns {module:engine/view/selection~Selection|undefined}\n\t */\n\tfakeSelectionToView( domElement ) {\n\t\treturn this._fakeSelectionMapping.get( domElement );\n\t}\n\n\t/**\n\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {HTMLElement} domElement DOM element to bind.\n\t * @param {module:engine/view/element~Element} viewElement View element to bind.\n\t */\n\tbindElements( domElement, viewElement ) {\n\t\tthis._domToViewMapping.set( domElement, viewElement );\n\t\tthis._viewToDomMapping.set( viewElement, domElement );\n\t}\n\n\t/**\n\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n\t * `domElement` will be unbound too.\n\t *\n\t * @param {HTMLElement} domElement DOM element to unbind.\n\t */\n\tunbindDomElement( domElement ) {\n\t\tconst viewElement = this._domToViewMapping.get( domElement );\n\n\t\tif ( viewElement ) {\n\t\t\tthis._domToViewMapping.delete( domElement );\n\t\t\tthis._viewToDomMapping.delete( viewElement );\n\n\t\t\t// Use Array.from because of MS Edge (#923).\n\t\t\tfor ( const child of Array.from( domElement.childNodes ) ) {\n\t\t\t\tthis.unbindDomElement( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n\t */\n\tbindDocumentFragments( domFragment, viewFragment ) {\n\t\tthis._domToViewMapping.set( domFragment, viewFragment );\n\t\tthis._viewToDomMapping.set( viewFragment, domFragment );\n\t}\n\n\t/**\n\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View node or document fragment to transform.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n\t */\n\tviewToDom( viewNode, domDocument, options = {} ) {\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tconst textData = this._processDataFromViewText( viewNode );\n\n\t\t\treturn domDocument.createTextNode( textData );\n\t\t} else {\n\t\t\tif ( this.mapViewToDom( viewNode ) ) {\n\t\t\t\treturn this.mapViewToDom( viewNode );\n\t\t\t}\n\n\t\t\tlet domElement;\n\n\t\t\tif ( viewNode.is( 'documentFragment' ) ) {\n\t\t\t\t// Create DOM document fragment.\n\t\t\t\tdomElement = domDocument.createDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domElement, viewNode );\n\t\t\t\t}\n\t\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\t\t// UIElement has its own render() method (see #799).\n\t\t\t\tdomElement = viewNode.render( domDocument );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\treturn domElement;\n\t\t\t} else {\n\t\t\t\t// Create DOM element.\n\t\t\t\tdomElement = domDocument.createElement( viewNode.name );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tfor ( const key of viewNode.getAttributeKeys() ) {\n\t\t\t\t\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\n\t\t\t\t\tdomElement.appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn domElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the view element to DOM using the\n\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n\t * @returns {Iterable.<Node>} DOM nodes.\n\t */\n\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\n\t\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n\t\tlet offset = 0;\n\n\t\tfor ( const childView of viewElement.getChildren() ) {\n\t\t\tif ( fillerPositionOffset === offset ) {\n\t\t\t\tyield this.blockFiller( domDocument );\n\t\t\t}\n\n\t\t\tyield this.viewToDom( childView, domDocument, options );\n\n\t\t\toffset++;\n\t\t}\n\n\t\tif ( fillerPositionOffset === offset ) {\n\t\t\tyield this.blockFiller( domDocument );\n\t\t}\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/range~Range} to DOM range.\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {Range} DOM range.\n\t */\n\tviewRangeToDom( viewRange ) {\n\t\tconst domStart = this.viewPositionToDom( viewRange.start );\n\t\tconst domEnd = this.viewPositionToDom( viewRange.end );\n\n\t\tconst domRange = document.createRange();\n\t\tdomRange.setStart( domStart.parent, domStart.offset );\n\t\tdomRange.setEnd( domEnd.parent, domEnd.offset );\n\n\t\treturn domRange;\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n\t *\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t * If the converted position is directly before inline filler it is moved inside the filler.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n\t * @returns {Node} position.parent DOM position parent.\n\t * @returns {Number} position.offset DOM position offset.\n\t */\n\tviewPositionToDom( viewPosition ) {\n\t\tconst viewParent = viewPosition.parent;\n\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\tconst domParent = this.findCorrespondingDomText( viewParent );\n\n\t\t\tif ( !domParent ) {\n\t\t\t\t// Position is in a view text node that has not been rendered to DOM yet.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet offset = viewPosition.offset;\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset += INLINE_FILLER_LENGTH;\n\t\t\t}\n\n\t\t\treturn { parent: domParent, offset };\n\t\t} else {\n\t\t\t// viewParent is instance of ViewElement.\n\t\t\tlet domParent, domBefore, domAfter;\n\n\t\t\tif ( viewPosition.offset === 0 ) {\n\t\t\t\tdomParent = this.mapViewToDom( viewParent );\n\n\t\t\t\tif ( !domParent ) {\n\t\t\t\t\t// Position is in a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomAfter = domParent.childNodes[ 0 ];\n\t\t\t} else {\n\t\t\t\tconst nodeBefore = viewPosition.nodeBefore;\n\n\t\t\t\tdomBefore = nodeBefore.is( 'text' ) ?\n\t\t\t\t\tthis.findCorrespondingDomText( nodeBefore ) :\n\t\t\t\t\tthis.mapViewToDom( viewPosition.nodeBefore );\n\n\t\t\t\tif ( !domBefore ) {\n\t\t\t\t\t// Position is after a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomParent = domBefore.parentNode;\n\t\t\t\tdomAfter = domBefore.nextSibling;\n\t\t\t}\n\n\t\t\t// If there is an inline filler at position return position inside the filler. We should never return\n\t\t\t// the position before the inline filler.\n\t\t\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\n\t\t\t\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n\t\t\t}\n\n\t\t\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\n\n\t\t\treturn { parent: domParent, offset };\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items. For\n\t * {@link module:engine/view/filler fillers} `null` will be returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n\t */\n\tdomToView( domNode, options = {} ) {\n\t\tif ( isBlockFiller( domNode, this.blockFiller ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When node is inside UIElement return that UIElement as it's view representation.\n\t\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tif ( isText( domNode ) ) {\n\t\t\tif ( isInlineFiller( domNode ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst textData = this._processDataFromDomText( domNode );\n\n\t\t\t\treturn textData === '' ? null : new ViewText( textData );\n\t\t\t}\n\t\t} else if ( this.isComment( domNode ) ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ( this.mapDomToView( domNode ) ) {\n\t\t\t\treturn this.mapDomToView( domNode );\n\t\t\t}\n\n\t\t\tlet viewElement;\n\n\t\t\tif ( this.isDocumentFragment( domNode ) ) {\n\t\t\t\t// Create view document fragment.\n\t\t\t\tviewElement = new ViewDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domNode, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create view element.\n\t\t\t\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n\t\t\t\tviewElement = new ViewElement( viewName );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domNode, viewElement );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tconst attrs = domNode.attributes;\n\n\t\t\t\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\n\t\t\t\t\tviewElement.appendChildren( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn viewElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the DOM element to view nodes using\n\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n\t *\n\t * @param {HTMLElement} domElement Parent DOM element.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n\t */\n\t* domChildrenToView( domElement, options = {} ) {\n\t\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\n\t\t\tconst domChild = domElement.childNodes[ i ];\n\t\t\tconst viewChild = this.domToView( domChild, options );\n\n\t\t\tif ( viewChild !== null ) {\n\t\t\t\tyield viewChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n\t * Ranges which cannot be converted will be omitted.\n\t *\n\t * @param {Selection} domSelection DOM selection.\n\t * @returns {module:engine/view/selection~Selection} View selection.\n\t */\n\tdomSelectionToView( domSelection ) {\n\t\t// DOM selection might be placed in fake selection container.\n\t\t// If container contains fake selection - return corresponding view selection.\n\t\tif ( domSelection.rangeCount === 1 ) {\n\t\t\tlet container = domSelection.getRangeAt( 0 ).startContainer;\n\n\t\t\t// The DOM selection might be moved to the text node inside the fake selection container.\n\t\t\tif ( isText( container ) ) {\n\t\t\t\tcontainer = container.parentNode;\n\t\t\t}\n\n\t\t\tconst viewSelection = this.fakeSelectionToView( container );\n\n\t\t\tif ( viewSelection ) {\n\t\t\t\treturn viewSelection;\n\t\t\t}\n\t\t}\n\n\t\tconst isBackward = this.isDomSelectionBackward( domSelection );\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\n\t\t\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n\t\t\tconst domRange = domSelection.getRangeAt( i );\n\t\t\tconst viewRange = this.domRangeToView( domRange );\n\n\t\t\tif ( viewRange ) {\n\t\t\t\tviewRanges.push( viewRange );\n\t\t\t}\n\t\t}\n\n\t\treturn new ViewSelection( viewRanges, isBackward );\n\t}\n\n\t/**\n\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\n\t * If the start or end position can not be converted `null` is returned.\n\t *\n\t * @param {Range} domRange DOM range.\n\t * @returns {module:engine/view/range~Range|null} View range.\n\t */\n\tdomRangeToView( domRange ) {\n\t\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\n\t\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\n\n\t\tif ( viewStart && viewEnd ) {\n\t\t\treturn new ViewRange( viewStart, viewEnd );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n\t *\n\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n\t * position of the filler will be converted and returned.\n\t *\n\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n\t * that position will be converted to view position before that UIElement.\n\t *\n\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n\t *\n\t * @param {Node} domParent DOM position parent.\n\t * @param {Number} domOffset DOM position offset.\n\t * @returns {module:engine/view/position~Position} viewPosition View position.\n\t */\n\tdomPositionToView( domParent, domOffset ) {\n\t\tif ( isBlockFiller( domParent, this.blockFiller ) ) {\n\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t}\n\n\t\t// If position is somewhere inside UIElement - return position before that element.\n\t\tconst viewElement = this.mapDomToView( domParent );\n\n\t\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\n\t\t\treturn ViewPosition.createBefore( viewElement );\n\t\t}\n\n\t\tif ( isText( domParent ) ) {\n\t\t\tif ( isInlineFiller( domParent ) ) {\n\t\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t\t}\n\n\t\t\tconst viewParent = this.findCorrespondingViewText( domParent );\n\t\t\tlet offset = domOffset;\n\n\t\t\tif ( !viewParent ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset -= INLINE_FILLER_LENGTH;\n\t\t\t\toffset = offset < 0 ? 0 : offset;\n\t\t\t}\n\n\t\t\treturn new ViewPosition( viewParent, offset );\n\t\t}\n\t\t// domParent instanceof HTMLElement.\n\t\telse {\n\t\t\tif ( domOffset === 0 ) {\n\t\t\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t\t\tif ( viewParent ) {\n\t\t\t\t\treturn new ViewPosition( viewParent, 0 );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\n\t\t\t\tconst viewBefore = isText( domBefore ) ?\n\t\t\t\t\tthis.findCorrespondingViewText( domBefore ) :\n\t\t\t\t\tthis.mapDomToView( domBefore );\n\n\t\t\t\t// TODO #663\n\t\t\t\tif ( viewBefore && viewBefore.parent ) {\n\t\t\t\t\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * to the given DOM - `undefined` is returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n\t * Corresponding view element, document fragment or `undefined` if no element was bound.\n\t */\n\tmapDomToView( domElementOrDocumentFragment ) {\n\t\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n\t *\n\t * @param {Text} domText DOM text node.\n\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n\t * corresponding node.\n\t */\n\tfindCorrespondingViewText( domText ) {\n\t\tif ( isInlineFiller( domText ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If DOM text was rendered by UIElement - return that element.\n\t\tconst uiElement = this.getParentUIElement( domText );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tconst previousSibling = domText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling ) {\n\t\t\tif ( !( this.isElement( previousSibling ) ) ) {\n\t\t\t\t// The previous is text or comment.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewElement = this.mapDomToView( previousSibling );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst nextSibling = viewElement.nextSibling;\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( nextSibling instanceof ViewText ) {\n\t\t\t\t\treturn viewElement.nextSibling;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Try to use parent to find the corresponding text node.\n\t\telse {\n\t\t\tconst viewElement = this.mapDomToView( domText.parentNode );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst firstChild = viewElement.getChild( 0 );\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( firstChild instanceof ViewText ) {\n\t\t\t\t\treturn firstChild;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n\t * use {@link #findCorrespondingDomText}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View element or document fragment.\n\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n\t */\n\tmapViewToDom( documentFragmentOrElement ) {\n\t\treturn this._viewToDomMapping.get( documentFragmentOrElement );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} viewText View text node.\n\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n\t */\n\tfindCorrespondingDomText( viewText ) {\n\t\tconst previousSibling = viewText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\n\t\t\treturn this.mapViewToDom( previousSibling ).nextSibling;\n\t\t}\n\n\t\t// If this is a first node, try to use parent to find the corresponding text node.\n\t\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\n\t\t\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\n\t */\n\tfocus( viewEditable ) {\n\t\tconst domEditable = this.mapViewToDom( viewEditable );\n\n\t\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\n\t\t\t// Save the scrollX and scrollY positions before the focus.\n\t\t\tconst { scrollX, scrollY } = global.window;\n\t\t\tconst scrollPositions = [];\n\n\t\t\t// Save all scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst { scrollLeft, scrollTop } = node;\n\n\t\t\t\tscrollPositions.push( [ scrollLeft, scrollTop ] );\n\t\t\t} );\n\n\t\t\tdomEditable.focus();\n\n\t\t\t// Restore scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\n\n\t\t\t\tnode.scrollLeft = scrollLeft;\n\t\t\t\tnode.scrollTop = scrollTop;\n\t\t\t} );\n\n\t\t\t// Restore the scrollX and scrollY positions after the focus.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\tglobal.window.scrollTo( scrollX, scrollY );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisElement( node ) {\n\t\treturn node && node.nodeType == Node.ELEMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisDocumentFragment( node ) {\n\t\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisComment( node ) {\n\t\treturn node && node.nodeType == Node.COMMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n\t *\n\t * @param {Selection} DOM Selection instance to check.\n\t * @returns {Boolean}\n\t */\n\tisDomSelectionBackward( selection ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n\t\t// we will use the fact that range will collapse if it's end is before it's start.\n\t\tconst range = document.createRange();\n\n\t\trange.setStart( selection.anchorNode, selection.anchorOffset );\n\t\trange.setEnd( selection.focusNode, selection.focusOffset );\n\n\t\tconst backward = range.collapsed;\n\n\t\trange.detach();\n\n\t\treturn backward;\n\t}\n\n\t/**\n\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n\t * parent UIElement.\n\t *\n\t * @param {Node} domNode\n\t * @return {module:engine/view/uielement~UIElement|null}\n\t */\n\tgetParentUIElement( domNode ) {\n\t\tconst ancestors = getAncestors( domNode );\n\n\t\t// Remove domNode from the list.\n\t\tancestors.pop();\n\n\t\twhile ( ancestors.length ) {\n\t\t\tconst domNode = ancestors.pop();\n\t\t\tconst viewNode = this._domToViewMapping.get( domNode );\n\n\t\t\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\n\t\t\t\treturn viewNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if given selection's boundaries are at correct places.\n\t *\n\t * The following places are considered as incorrect for selection boundaries:\n\t * * before or in the middle of the inline filler sequence,\n\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n\t *\n\t * @param {Selection} domSelection DOM Selection object to be checked.\n\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n\t */\n\tisDomSelectionCorrect( domSelection ) {\n\t\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\n\t\t\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\n\t}\n\n\t/**\n\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n\t *\n\t * @private\n\t * @param {Element} domParent Position parent.\n\t * @param {Number} offset Position offset.\n\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n\t */\n\t_isDomSelectionPositionCorrect( domParent, offset ) {\n\t\t// If selection is before or in the middle of inline filler string, it is incorrect.\n\t\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\n\t\t\t// Selection in a text node, at wrong position (before or in the middle of filler).\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\n\t\t\t// Selection in an element node, before filler text node.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n\t\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\t\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n\t * it is correctly displayed in the DOM.\n\t *\n\t * Following changes are done:\n\t *\n\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n\t * element or if a previous text node ends with a space character,\n\t * * space at the end of the text node is changed to `&nbsp;` if this is the last text node in its container,\n\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n\t *\n\t * Content of {@link #preElements} is not processed.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node View text node to process.\n\t * @returns {String} Processed text data.\n\t */\n\t_processDataFromViewText( node ) {\n\t\tlet data = node.data;\n\n\t\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\n\t\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n\t\t// (container element boundary).\n\t\tif ( data.charAt( 0 ) == ' ' ) {\n\t\t\tconst prevNode = this._getTouchingViewTextNode( node, false );\n\t\t\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\n\n\t\t\tif ( prevEndsWithSpace || !prevNode ) {\n\t\t\t\tdata = '\\u00A0' + data.substr( 1 );\n\t\t\t}\n\t\t}\n\n\t\t// 2. Replace the last space with a nbsp if this is the last text node (container element boundary).\n\t\tif ( data.charAt( data.length - 1 ) == ' ' ) {\n\t\t\tconst nextNode = this._getTouchingViewTextNode( node, true );\n\n\t\t\tif ( !nextNode ) {\n\t\t\t\tdata = data.substr( 0, data.length - 1 ) + '\\u00A0';\n\t\t\t}\n\t\t}\n\n\t\treturn data.replace( / {2}/g, ' \\u00A0' );\n\t}\n\n\t/**\n\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node Node to check.\n\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n\t */\n\t_nodeEndsWithSpace( node ) {\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = this._processDataFromViewText( node );\n\n\t\treturn data.charAt( data.length - 1 ) == ' ';\n\t}\n\n\t/**\n\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n\t *\n\t * Following changes are done:\n\t * * multiple whitespaces are replaced to a single space,\n\t * * space at the beginning of the text node is removed, if it is a first text node in it's container\n\t * element or if previous text node ends by space character,\n\t * * space at the end of the text node is removed, if it is a last text node in it's container.\n\t *\n\t * @param {Node} node DOM text node to process.\n\t * @returns {String} Processed data.\n\t * @private\n\t */\n\t_processDataFromDomText( node ) {\n\t\tlet data = getDataWithoutFiller( node );\n\n\t\tif ( _hasDomParentOfType( node, this.preElements ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n\t\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n\t\t// We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\t\tdata = data.replace( /[ \\n\\t\\r]{1,}/g, ' ' );\n\n\t\tconst prevNode = this._getTouchingDomTextNode( node, false );\n\t\tconst nextNode = this._getTouchingDomTextNode( node, true );\n\n\t\t// If previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n\t\t// of this text node. Such space character is treated as a whitespace.\n\t\tif ( !prevNode || /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) ) ) {\n\t\t\tdata = data.replace( /^ /, '' );\n\t\t}\n\n\t\t// If next text node does not exist remove space character from the end of this text node.\n\t\tif ( !nextNode ) {\n\t\t\tdata = data.replace( / $/, '' );\n\t\t}\n\t\t// At this point we should have removed all whitespaces from DOM text data.\n\n\t\t// Now we have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n\t\t// First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view as\n\t\t// ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them\n\t\t// to `  ` which is what we expect to have in model/view.\n\t\tdata = data.replace( / \\u00A0/g, '  ' );\n\n\t\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\n\t\t// As above, that &nbsp; was created for rendering reasons but it's real meaning is just a space character.\n\t\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\t\tif ( !prevNode || /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) ) ) {\n\t\t\tdata = data.replace( /^\\u00A0/, ' ' );\n\t\t}\n\n\t\t// Since input text data could be: `x_ _`, we would not replace the first &nbsp; after `x` character.\n\t\t// We have to fix it. Since we already change all ` &nbsp;`, we will have something like this at the end of text data:\n\t\t// `x_ _ _` -> `x_    `. Find &nbsp; at the end of string (can be followed only by spaces).\n\t\t// We do that replacement only if this is the last node or the next node starts by &nbsp;.\n\t\tif ( !nextNode || nextNode.data.charAt( 0 ) == '\\u00A0' ) {\n\t\t\tdata = data.replace( /\\u00A0( *)$/, ' $1' );\n\t\t}\n\n\t\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n\t\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\t\treturn data;\n\t}\n\n\t/**\n\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} node Reference node.\n\t * @param {Boolean} getNext\n\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n\t */\n\t_getTouchingViewTextNode( node, getNext ) {\n\t\tconst treeWalker = new ViewTreeWalker( {\n\t\t\tstartPosition: getNext ? ViewPosition.createAfter( node ) : ViewPosition.createBefore( node ),\n\t\t\tdirection: getNext ? 'forward' : 'backward'\n\t\t} );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tif ( value.item.is( 'containerElement' ) ) {\n\t\t\t\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n\t\t\t\t// text node in its container element.\n\t\t\t\treturn null;\n\t\t\t} else if ( value.item.is( 'textProxy' ) ) {\n\t\t\t\t// Found a text node in the same container element.\n\t\t\t\treturn value.item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Helper function. For given `Text` node, it finds previous or next sibling that is contained in the same block element.\n\t * If there is no such sibling, `null` is returned.\n\t *\n\t * @private\n\t * @param {Text} node\n\t * @param {Boolean} getNext\n\t * @returns {Text|null}\n\t */\n\t_getTouchingDomTextNode( node, getNext ) {\n\t\tif ( !node.parentNode ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst direction = getNext ? 'nextNode' : 'previousNode';\n\t\tconst document = node.ownerDocument;\n\t\tconst topmostParent = getAncestors( node )[ 0 ];\n\n\t\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT );\n\n\t\ttreeWalker.currentNode = node;\n\n\t\tconst touchingNode = treeWalker[ direction ]();\n\n\t\tif ( touchingNode !== null ) {\n\t\t\tconst lca = getCommonAncestor( node, touchingNode );\n\n\t\t\t// If there is common ancestor between the text node and next/prev text node,\n\t\t\t// and there are no block elements on a way from the text node to that ancestor,\n\t\t\t// and there are no block elements on a way from next/prev text node to that ancestor...\n\t\t\tif (\n\t\t\t\tlca &&\n\t\t\t\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\n\t\t\t\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\n\t\t\t) {\n\t\t\t\t// Then they are in the same container element.\n\t\t\t\treturn touchingNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n// Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\n\tlet parents = getAncestors( node );\n\n\tif ( boundaryParent ) {\n\t\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\n\t}\n\n\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\n}\n\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\nfunction forEachDomNodeAncestor( node, callback ) {\n\twhile ( node && node != global.document ) {\n\t\tcallback( node );\n\t\tnode = node.parentNode;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/getcommonancestor\n */\n\nimport getAncestors from './getancestors';\n\n/**\n * Searches and returns the lowest common ancestor of two given nodes.\n *\n * @param {Node} nodeA First node.\n * @param {Node} nodeB Second node.\n * @returns {Node|DocumentFragment|Document|null} Lowest common ancestor of both nodes or `null` if nodes do not have a common ancestor.\n */\nexport default function getCommonAncestor( nodeA, nodeB ) {\n\tconst ancestorsA = getAncestors( nodeA );\n\tconst ancestorsB = getAncestors( nodeB );\n\n\tlet i = 0;\n\n\t// It does not matter which array is shorter.\n\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\ti++;\n\t}\n\n\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/isnode\n */\n\n/**\n * Checks if the object is a native DOM Node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isNode( obj ) {\n\tif ( obj ) {\n\t\tif ( obj.defaultView ) {\n\t\t\treturn obj instanceof obj.defaultView.Document;\n\t\t} else if ( obj.ownerDocument && obj.ownerDocument.defaultView ) {\n\t\t\treturn obj instanceof obj.ownerDocument.defaultView.Node;\n\t\t}\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/iswindow\n */\n\n/**\n * Checks if the object is a native DOM Window.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isWindow( obj ) {\n\treturn Object.prototype.toString.apply( obj ) == '[object Window]';\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/emittermixin\n */\n\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport extend from '../lib/lodash/extend';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\n\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\n\t/**\n\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tlistenTo( emitter, ...rest ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with\n\t\t// corresponding ProxyEmitter (or create one if not existing).\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter ) || new ProxyEmitter( emitter );\n\n\t\t\tproxy.attach( ...rest );\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.listenTo.call( this, emitter, ...rest );\n\t},\n\n\t/**\n\t * Stops listening for events. It can be used at different levels:\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * * To stop listening to a specific callback.\n\t * * To stop listening to a specific event.\n\t * * To stop listening to all events fired by a specific object.\n\t * * To stop listening to all events fired by all object.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n\t * for all events from `emitter`.\n\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n\t * `event`.\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter );\n\n\t\t\t// Element has no listeners.\n\t\t\tif ( !proxy ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.stopListening.call( this, emitter, event, callback );\n\n\t\tif ( emitter instanceof ProxyEmitter ) {\n\t\t\temitter.detach( event );\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\n\t *\n\t * @pivate\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\n\t */\n\t_getProxyEmitter( node ) {\n\t\treturn _getEmitterListenedTo( this, getNodeUID( node ) );\n\t}\n} );\n\nexport default DomEmitterMixin;\n\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter {\n\t/**\n\t * @param {Node} node DOM Node that fires events.\n\t * @returns {Object} ProxyEmitter instance bound to the DOM Node.\n\t */\n\tconstructor( node ) {\n\t\t// Set emitter ID to match DOM Node \"expando\" property.\n\t\t_setEmitterId( this, getNodeUID( node ) );\n\n\t\t// Remember the DOM Node this ProxyEmitter is bound to.\n\t\tthis._domNode = node;\n\t}\n}\n\nextend( ProxyEmitter.prototype, EmitterMixin, {\n\t/**\n\t * Collection of native DOM listeners.\n\t *\n\t * @private\n\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n\t */\n\n\t/**\n\t * Registers a callback function to be executed when an event is fired.\n\t *\n\t * It attaches a native DOM listener to the DOM Node. When fired,\n\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tattach( event, callback, options = {} ) {\n\t\t// If the DOM Listener for given event already exist it is pointless\n\t\t// to attach another one.\n\t\tif ( this._domListeners && this._domListeners[ event ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domListener = this._createDomListener( event, !!options.useCapture );\n\n\t\t// Attach the native DOM listener to DOM Node.\n\t\tthis._domNode.addEventListener( event, domListener, !!options.useCapture );\n\n\t\tif ( !this._domListeners ) {\n\t\t\tthis._domListeners = {};\n\t\t}\n\n\t\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\n\t\t// when stopping listening to the event.\n\t\tthis._domListeners[ event ] = domListener;\n\t},\n\n\t/**\n\t * Stops executing the callback on the given event.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n\t * @param {String} event The name of the event.\n\t */\n\tdetach( event ) {\n\t\tlet events;\n\n\t\t// Remove native DOM listeners which are orphans. If no callbacks\n\t\t// are awaiting given event, detach native DOM listener from DOM Node.\n\t\t// See: {@link attach}.\n\n\t\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\n\t\t\tthis._domListeners[ event ].removeListener();\n\t\t}\n\t},\n\n\t/**\n\t * Creates a native DOM listener callback. When the native DOM event\n\t * is fired it will fire corresponding event on this ProxyEmitter.\n\t * Note: A native DOM Event is passed as an argument.\n\t *\n\t * @private\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n\t * @param {String} event The name of the event.\n\t * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\n\t * @returns {Function} The DOM listener callback.\n\t */\n\t_createDomListener( event, useCapture ) {\n\t\tconst domListener = domEvt => {\n\t\t\tthis.fire( event, domEvt );\n\t\t};\n\n\t\t// Supply the DOM listener callback with a function that will help\n\t\t// detach it from the DOM Node, when it is no longer necessary.\n\t\t// See: {@link detach}.\n\t\tdomListener.removeListener = () => {\n\t\t\tthis._domNode.removeEventListener( event, domListener, useCapture );\n\t\t\tdelete this._domListeners[ event ];\n\t\t};\n\n\t\treturn domListener;\n\t}\n} );\n\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @return {String} UID for given DOM Node.\nfunction getNodeUID( node ) {\n\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\n}\n\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/observer\n */\n\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Abstract base observer class. Observers are classes which observe changes on DOM elements, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects. Observers can also add features to the view,\n * for instance by updating its status or marking elements which need refresh on DOM events.\n *\n * @abstract\n */\nexport default class Observer {\n\t/**\n\t * Creates an instance of the observer.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/document~Document} object.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * State of the observer. If it is disabled events will not be fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Enables the observer. This method is called when the observer is registered to the\n\t * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#render rendering}\n\t * (all observers are {@link #disable disabled} before rendering).\n\t *\n\t * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n\t * However, a child class may not need to be disabled, so it can implement an empty method.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#disable\n\t */\n\tenable() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the observer. This method is called before\n\t * {@link module:engine/view/view~View#render rendering} to prevent firing events during rendering.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#enable\n\t */\n\tdisable() {\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Disables and destroys the observer, among others removes event listeners created by the observer.\n\t */\n\tdestroy() {\n\t\tthis.disable();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Starts observing the given root element.\n\t *\n\t * @method #observe\n\t * @param {HTMLElement} domElement\n\t * @param {String} name The name of the root element.\n\t */\n}\n\nmix( Observer, DomEmitterMixin );\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import MapCache from './_MapCache';\nimport setCacheAdd from './_setCacheAdd';\nimport setCacheHas from './_setCacheHas';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","import SetCache from './_SetCache';\nimport arraySome from './_arraySome';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  return result;\n}\n\nexport default equalArrays;\n","import Symbol from './_Symbol';\nimport Uint8Array from './_Uint8Array';\nimport equalArrays from './_equalArrays';\nimport mapToArray from './_mapToArray';\nimport setToArray from './_setToArray';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n      // Coerce dates and booleans to numbers, dates to milliseconds and\n      // booleans to `1` or `0` treating invalid dates coerced to `NaN` as\n      // not equal.\n      return +object == +other;\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case numberTag:\n      // Treat `NaN` vs. `NaN` as equal.\n      return (object != +object) ? other != +other : object == +other;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n      stack.set(object, other);\n\n      // Recursively compare objects (susceptible to call stack limits).\n      return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import baseHas from './_baseHas';\nimport keys from './keys';\n\n/** Used to compose bitmasks for comparison styles. */\nvar PARTIAL_COMPARE_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : baseHas(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  return result;\n}\n\nexport default equalObjects;\n","import isLength from './isLength';\nimport isObjectLike from './isObjectLike';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nfunction isTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\nexport default isTypedArray;\n","import Stack from './_Stack';\nimport equalArrays from './_equalArrays';\nimport equalByTag from './_equalByTag';\nimport equalObjects from './_equalObjects';\nimport getTag from './_getTag';\nimport isArray from './isArray';\nimport isHostObject from './_isHostObject';\nimport isTypedArray from './isTypedArray';\n\n/** Used to compose bitmasks for comparison styles. */\nvar PARTIAL_COMPARE_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep';\nimport isObject from './isObject';\nimport isObjectLike from './isObjectLike';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\nexport default baseIsEqual;\n","import baseIsEqual from './_baseIsEqual';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent,\n *  else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/mutationobserver\n */\n\n/* globals window */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\nimport isEqualWith from '@ckeditor/ckeditor5-utils/src/lib/lodash/isEqualWith';\n\n/**\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\n * Because all mutated nodes are marked as \"to be rendered\" and the\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\n * will block all changes which are not handled.\n *\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\n * mutations on elements which do not have corresponding view elements. Also\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class MutationObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Native mutation observer config.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {\n\t\t\tchildList: true,\n\t\t\tcharacterData: true,\n\t\t\tcharacterDataOldValue: true,\n\t\t\tsubtree: true\n\t\t};\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#renderer}.\n\t\t *\n\t\t * @member {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis.renderer = view._renderer;\n\n\t\t/**\n\t\t * Observed DOM elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<HTMLElement>}\n\t\t */\n\t\tthis._domElements = [];\n\n\t\t/**\n\t\t * Native mutation observer.\n\t\t *\n\t\t * @private\n\t\t * @member {MutationObserver}\n\t\t */\n\t\tthis._mutationObserver = new window.MutationObserver( this._onMutations.bind( this ) );\n\t}\n\n\t/**\n\t * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\n\t * At the same time empties the queue so mutations will not be fired twice.\n\t */\n\tflush() {\n\t\tthis._onMutations( this._mutationObserver.takeRecords() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tthis._domElements.push( domElement );\n\n\t\tif ( this.isEnabled ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tenable() {\n\t\tsuper.enable();\n\n\t\tfor ( const domElement of this._domElements ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisable() {\n\t\tsuper.disable();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\n\t *\n\t * @private\n\t * @param {Array.<Object>} domMutations Array of native mutations.\n\t */\n\t_onMutations( domMutations ) {\n\t\t// As a result of this.flush() we can have an empty collection.\n\t\tif ( domMutations.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.domConverter;\n\n\t\t// Use map and set for deduplication.\n\t\tconst mutatedTexts = new Map();\n\t\tconst mutatedElements = new Set();\n\n\t\t// Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n\t\t// element with changed structure anyway.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tif ( mutation.type === 'childList' ) {\n\t\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t\t// Do not collect mutations from UIElements.\n\t\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( element && !this._isBogusBrMutation( mutation ) ) {\n\t\t\t\t\tmutatedElements.add( element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t// Do not collect mutations from UIElements.\n\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( mutation.type === 'characterData' ) {\n\t\t\t\tconst text = domConverter.findCorrespondingViewText( mutation.target );\n\n\t\t\t\tif ( text && !mutatedElements.has( text.parent ) ) {\n\t\t\t\t\t// Use text as a key, for deduplication. If there will be another mutation on the same text element\n\t\t\t\t\t// we will have only one in the map.\n\t\t\t\t\tmutatedTexts.set( text, {\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\toldText: text.data,\n\t\t\t\t\t\tnewText: getDataWithoutFiller( mutation.target ),\n\t\t\t\t\t\tnode: text\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n\t\t\t\t// on text, but for the view, where filler text node did not existed, new text node was created, so we\n\t\t\t\t// need to fire 'children' mutation instead of 'text'.\n\t\t\t\telse if ( !text && startsWithFiller( mutation.target ) ) {\n\t\t\t\t\tmutatedElements.add( domConverter.mapDomToView( mutation.target.parentNode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\n\t\t// same node multiple times in case of duplication.\n\n\t\t// List of mutations we will fire.\n\t\tconst viewMutations = [];\n\n\t\tfor ( const mutatedText of mutatedTexts.values() ) {\n\t\t\tthis.renderer.markToSync( 'text', mutatedText.node );\n\t\t\tviewMutations.push( mutatedText );\n\t\t}\n\n\t\tfor ( const viewElement of mutatedElements ) {\n\t\t\tconst domElement = domConverter.mapViewToDom( viewElement );\n\t\t\tconst viewChildren = Array.from( viewElement.getChildren() );\n\t\t\tconst newViewChildren = Array.from( domConverter.domChildrenToView( domElement ) );\n\n\t\t\t// It may happen that as a result of many changes (sth was inserted and then removed),\n\t\t\t// both elements haven't really changed. #1031\n\t\t\tif ( !isEqualWith( viewChildren, newViewChildren, sameNodes ) ) {\n\t\t\t\tthis.renderer.markToSync( 'children', viewElement );\n\n\t\t\t\tviewMutations.push( {\n\t\t\t\t\ttype: 'children',\n\t\t\t\t\toldChildren: viewChildren,\n\t\t\t\t\tnewChildren: newViewChildren,\n\t\t\t\t\tnode: viewElement\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\n\t\t// There should not be simultaneous mutation in multiple documents, so it's fine.\n\t\tconst domSelection = domMutations[ 0 ].target.ownerDocument.getSelection();\n\n\t\tlet viewSelection = null;\n\n\t\tif ( domSelection && domSelection.anchorNode ) {\n\t\t\t// If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\n\t\t\t// corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\n\t\t\t// be used by features handling mutations.\n\t\t\t// Only one range is supported.\n\n\t\t\tconst viewSelectionAnchor = domConverter.domPositionToView( domSelection.anchorNode, domSelection.anchorOffset );\n\t\t\tconst viewSelectionFocus = domConverter.domPositionToView( domSelection.focusNode, domSelection.focusOffset );\n\n\t\t\t// Anchor and focus has to be properly mapped to view.\n\t\t\tif ( viewSelectionAnchor && viewSelectionFocus ) {\n\t\t\t\tviewSelection = new ViewSelection();\n\t\t\t\tviewSelection._setTo( viewSelectionAnchor );\n\t\t\t\tviewSelection._setFocus( viewSelectionFocus );\n\t\t\t}\n\t\t}\n\n\t\tthis.document.fire( 'mutations', viewMutations, viewSelection );\n\n\t\t// If nothing changes on `mutations` event, at this point we have \"dirty DOM\" (changed) and de-synched\n\t\t// view (which has not been changed). In order to \"reset DOM\" we render the view again.\n\t\tthis.view.render();\n\n\t\tfunction sameNodes( child1, child2 ) {\n\t\t\t// First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n\t\t\tif ( Array.isArray( child1 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Elements.\n\t\t\tif ( child1 === child2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Texts.\n\t\t\telse if ( child1.is( 'text' ) && child2.is( 'text' ) ) {\n\t\t\t\treturn child1.data === child2.data;\n\t\t\t}\n\n\t\t\t// Not matching types.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n\t * Such mutations are generated while pressing space or performing native spellchecker correction\n\t * on the end of the block element in Firefox browser.\n\t *\n\t * @private\n\t * @param {Object} mutation Native mutation object.\n\t * @returns {Boolean}\n\t */\n\t_isBogusBrMutation( mutation ) {\n\t\tlet addedNode = null;\n\n\t\t// Check if mutation added only one node on the end of its parent.\n\t\tif ( mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1 ) {\n\t\t\taddedNode = this.domConverter.domToView( mutation.addedNodes[ 0 ], {\n\t\t\t\twithChildren: false\n\t\t\t} );\n\t\t}\n\n\t\treturn addedNode && addedNode.is( 'element', 'br' );\n\t}\n}\n\n/**\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\n * mutation, so all changes which should be applied, should be handled on this event.\n *\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\n *\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @event module:engine/view/document~Document#event:mutations\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\n * viewMutations Array of mutations.\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\n * Keep in\n * mind that the DOM selection is already \"updated\", meaning that it already acknowledges changes done in mutation.\n */\n\n/**\n * Mutation item for text.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\n *\n * @property {String} type For text mutations it is always 'text'.\n * @property {module:engine/view/text~Text} node Mutated text node.\n * @property {String} oldText Old text.\n * @property {String} newText New text.\n */\n\n/**\n * Mutation item for child nodes.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedText\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @property {String} type For child nodes mutations it is always 'children'.\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\n\nimport extend from '@ckeditor/ckeditor5-utils/src/lib/lodash/extend';\n\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n\t/**\n\t * @param {module:engine/view/view~View} view The instance of the view controller.\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] Additional properties that the instance should contain.\n\t */\n\tconstructor( view, domEvent, additionalData ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * The instance of the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * The DOM event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n\t\t */\n\t\tthis.domEvent = domEvent;\n\n\t\t/**\n\t\t * The DOM target.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n\t\t */\n\t\tthis.domTarget = domEvent.target;\n\n\t\textend( this, additionalData );\n\t}\n\n\t/**\n\t * The tree view element representing the target.\n\t *\n\t * @readonly\n\t * @type module:engine/view/element~Element\n\t */\n\tget target() {\n\t\treturn this.view.domConverter.mapDomToView( this.domTarget );\n\t}\n\n\t/**\n\t * Prevents the native's event default action.\n\t */\n\tpreventDefault() {\n\t\tthis.domEvent.preventDefault();\n\t}\n\n\t/**\n\t * Stops native event propagation.\n\t */\n\tstopPropagation() {\n\t\tthis.domEvent.stopPropagation();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/domeventobserver\n */\n\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DomEventObserver extends Observer {\n\t/**\n\t * Type of the DOM event the observer should listen on. Array of types can be defined\n\t * if the obsever should listen to multiple DOM events.\n\t *\n\t * @readonly\n\t * @member {String|Array.<String>} #domEventType\n\t */\n\n\t/**\n\t * Callback which should be called when the DOM event occurred. Note that the callback will not be called if\n\t * observer {@link #isEnabled is not enabled}.\n\t *\n\t * @see #domEventType\n\t * @abstract\n\t * @method #onDomEvent\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * If set to `true` DOM events will be listened on the capturing phase.\n\t\t * Default value is `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.useCapture = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst types = typeof this.domEventType == 'string' ? [ this.domEventType ] : this.domEventType;\n\n\t\ttypes.forEach( type => {\n\t\t\tthis.listenTo( domElement, type, ( eventInfo, domEvent ) => {\n\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\tthis.onDomEvent( domEvent );\n\t\t\t\t}\n\t\t\t}, { useCapture: this.useCapture } );\n\t\t} );\n\t}\n\n\t/**\n\t * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n\t *\n\t * @see module:utils/emittermixin~EmitterMixin#fire\n\t * @param {String} eventType The event type (name).\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] The additional data which should extend the\n\t * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n\t */\n\tfire( eventType, domEvent, additionalData ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( eventType, new DomEventData( this.view, domEvent, additionalData ) );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/keyobserver\n */\n\nimport DomEventObserver from './domeventobserver';\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * {@link module:engine/view/document~Document#event:keydown Key down} event observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class KeyObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'keydown', 'keyup' ];\n\t}\n\n\tonDomEvent( domEvt ) {\n\t\tthis.fire( domEvt.type, domEvt, {\n\t\t\tkeyCode: domEvt.keyCode,\n\n\t\t\taltKey: domEvt.altKey,\n\t\t\tctrlKey: domEvt.ctrlKey || domEvt.metaKey,\n\t\t\tshiftKey: domEvt.shiftKey,\n\n\t\t\tget keystroke() {\n\t\t\t\treturn getCode( this );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Fired when a key has been pressed.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keydown\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * Fired when a key has been released.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keyup\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * The value of both events - {@link module:engine/view/document~Document#event:keydown} and\n * {@link module:engine/view/document~Document#event:keyup}.\n *\n * @class module:engine/view/observer/keyobserver~KeyEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n * @implements module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * Code of the whole keystroke. See {@link module:utils/keyboard~getCode}.\n *\n * @readonly\n * @member {Number} module:engine/view/observer/keyobserver~KeyEventData#keystroke\n */\n","/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @type {Function}\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred function to be invoked.\n */\nvar now = Date.now;\n\nexport default now;\n","import isObject from './isObject';\nimport now from './now';\nimport toNumber from './toNumber';\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide an options object to indicate whether `func` should be invoked on\n * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent calls\n * to the debounced function return the result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n * on the trailing edge of the timeout only if the debounced function is\n * invoked more than once during the `wait` timeout.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime = 0,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (!lastCallTime || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    clearTimeout(timerId);\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastCallTime = lastInvokeTime = 0;\n    lastArgs = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport debounce from '@ckeditor/ckeditor5-utils/src/lib/lodash/debounce';\n\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer.Observer\n */\nexport default class FakeSelectionObserver extends Observer {\n\t/**\n\t * Creates new FakeSelectionObserver instance.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'keydown', ( eventInfo, data ) => {\n\t\t\tconst selection = document.selection;\n\n\t\t\tif ( selection.isFake && _isArrowKeyCode( data.keyCode ) && this.isEnabled ) {\n\t\t\t\t// Prevents default key down handling - no selection change will occur.\n\t\t\t\tdata.preventDefault();\n\n\t\t\t\tthis._handleSelectionMove( data.keyCode );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n\t * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n\t *\n\t * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n\t * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n\t * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n\t *\n\t * @private\n\t * @param {Number} keyCode\n\t * @fires module:engine/view/document~Document#event:selectionChange\n\t * @fires module:engine/view/document~Document#event:selectionChangeDone\n\t */\n\t_handleSelectionMove( keyCode ) {\n\t\tconst selection = this.document.selection;\n\t\tconst newSelection = new ViewSelection( selection );\n\t\tnewSelection._setFake( false );\n\n\t\t// Left or up arrow pressed - move selection to start.\n\t\tif ( keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup ) {\n\t\t\tnewSelection._setTo( newSelection.getFirstPosition() );\n\t\t}\n\n\t\t// Right or down arrow pressed - move selection to end.\n\t\tif ( keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown ) {\n\t\t\tnewSelection._setTo( newSelection.getLastPosition() );\n\t\t}\n\n\t\tconst data = {\n\t\t\toldSelection: selection,\n\t\t\tnewSelection,\n\t\t\tdomSelection: null\n\t\t};\n\n\t\t// Fire dummy selection change event.\n\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t}\n}\n\n// Checks if one of the arrow keys is pressed.\n//\n// @private\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction _isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* global console */\n\n/**\n * @module utils/log\n */\n\nimport { attachLinkToDocumentation } from './ckeditorerror';\n\n/**\n * The logging module.\n *\n * This object features two functions that should be used across CKEditor code base to log errors and warnings.\n * Despite being an overridable interface for native `console.*` this module serves also the goal to limit the\n * code size of a minified CKEditor package. During minification process the messages will be shortened and\n * links to their documentation will be logged to the console.\n *\n * All errors and warning should be documented in the following way:\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tlog.error( 'plugin-load: It was not possible to load the \"{$pluginName}\" plugin in module \"{$moduleName}', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * ### Warning vs Error vs Throw\n *\n * * Whenever a potentially incorrect situation occurs, which does not directly lead to an incorrect behavior,\n * log a warning.\n * * Whenever an incorrect situation occurs, but the app may continue working (although perhaps incorrectly),\n * log an error.\n * * Whenever it's really bad and it does not make sense to continue working, throw a {@link module:utils/ckeditorerror~CKEditorError}.\n *\n * @namespace\n */\nconst log = {\n\t/**\n\t * Logs an error to the console.\n\t *\n\t * Read more about error logging in the {@link module:utils/log} module.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be logged to the console.\n\t * @param {Object} [data] Additional data describing the error.\n\t */\n\terror( message, data ) {\n\t\tconsole.error( attachLinkToDocumentation( message ), data );\n\t},\n\n\t/**\n\t * Logs a warning to the console.\n\t *\n\t * Read more about error logging in the {@link module:utils/log} module.\n\t *\n\t * @param {String} message The warning message in a `warning-name: Warning message.` format.\n\t * During the minification process the \"Warning message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be logged to the console.\n\t * @param {Object} [data] Additional data describing the warning.\n\t */\n\twarn( message, data ) {\n\t\tconsole.warn( attachLinkToDocumentation( message ), data );\n\t}\n};\n\nexport default log;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/selectionobserver\n */\n\n/* global setInterval, clearInterval */\n\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport debounce from '@ckeditor/ckeditor5-utils/src/lib/lodash/debounce';\n\n/**\n * Selection observer class observes selection changes in the document. If selection changes on the document this\n * observer checks if there are any mutations and if DOM selection is different than the\n * {@link module:engine/view/document~Document#selection view selection}. Selection observer fires\n * {@link module:engine/view/document~Document#event:selectionChange} event only if selection change was the only change in the document\n * and DOM selection is different then the view selection.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class SelectionObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Instance of the mutation observer. Selection observer calls\n\t\t * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\n\t\t * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/observer/mutationobserver~MutationObserver}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\n\t\t */\n\t\tthis.mutationObserver = view.getObserver( MutationObserver );\n\n\t\t/**\n\t\t * Reference to the view {@link module:engine/view/selection~Selection} object used to compare new selection with it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/selection~Selection} module:engine/view/observer/selectionobserver~SelectionObserver#selection\n\t\t */\n\t\tthis.selection = this.document.selection;\n\n\t\t/* eslint-disable max-len */\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\n\t\t */\n\t\t/* eslint-enable max-len */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Set of documents which have added \"selectionchange\" listener to avoid adding listener twice to the same\n\t\t * document.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\n\t\t */\n\t\tthis._documents = new WeakSet();\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\n\t\tthis._clearInfiniteLoopInterval = setInterval( () => this._clearInfiniteLoop(), 1000 );\n\n\t\t/**\n\t\t * Private property to check if the code does not enter infinite loop.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\n\t\t */\n\t\tthis._loopbackCounter = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst domDocument = domElement.ownerDocument;\n\n\t\t// Add listener once per each document.\n\t\tif ( this._documents.has( domDocument ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.listenTo( domDocument, 'selectionchange', () => {\n\t\t\tthis._handleSelectionChange( domDocument );\n\t\t} );\n\n\t\tthis._documents.add( domDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tclearInterval( this._clearInfiniteLoopInterval );\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n\t * selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n\t * and {@link module:engine/view/document~Document#event:selectionChangeDone} when selection stop changing.\n\t *\n\t * @private\n\t * @param {Document} domDocument DOM document.\n\t */\n\t_handleSelectionChange( domDocument ) {\n\t\t// Selection is handled when document is not focused but is read-only. This is because in read-only\n\t\t// mode contenteditable is set as false and editor won't receive focus but we still need to know\n\t\t// selection position.\n\t\tif ( !this.isEnabled || ( !this.document.isFocused && !this.document.isReadOnly ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure the mutation event will be before selection event on all browsers.\n\t\tthis.mutationObserver.flush();\n\n\t\t// If there were mutations then the view will be re-rendered by the mutation observer and selection\n\t\t// will be updated, so selections will equal and event will not be fired, as expected.\n\t\tconst domSelection = domDocument.defaultView.getSelection();\n\t\tconst newViewSelection = this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( this.selection.isEqual( newViewSelection ) && this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure we are not in the infinite loop (#400).\n\t\t// This counter is reset each second. 60 selection changes in 1 second is enough high number\n\t\t// to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n\t\tif ( ++this._loopbackCounter > 60 ) {\n\t\t\t/**\n\t\t\t * Selection change observer detected an infinite rendering loop.\n\t\t\t * Most probably you try to put the selection in the position which is not allowed\n\t\t\t * by the browser and browser fixes it automatically what causes `selectionchange` event on\n\t\t\t * which a loopback through a model tries to re-render the wrong selection and again.\n\t\t\t *\n\t\t\t * @error selectionchange-infinite-loop\n\t\t\t */\n\t\t\tlog.warn( 'selectionchange-infinite-loop: Selection change observer detected an infinite rendering loop.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.selection.isSimilar( newViewSelection ) ) {\n\t\t\t// If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n\t\t\t// Just re-render it, no need to fire any events, etc.\n\t\t\tthis.view.render();\n\t\t} else {\n\t\t\tconst data = {\n\t\t\t\toldSelection: this.selection,\n\t\t\t\tnewSelection: newViewSelection,\n\t\t\t\tdomSelection\n\t\t\t};\n\n\t\t\t// Prepare data for new selection and fire appropriate events.\n\t\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t\t}\n\t}\n\n\t/**\n\t * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n\t *\n\t * @protected\n\t */\n\t_clearInfiniteLoop() {\n\t\tthis._loopbackCounter = 0;\n\t}\n}\n\n/**\n * Fired when selection has changed. This event is fired only when the selection change was the only change that happened\n * in the document, and old selection is different then the new selection.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChange\n * @param {Object} data\n * @param {module:engine/view/selection~Selection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n\n/**\n * Fired when selection stops changing.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChangeDone\n * @param {Object} data\n * @param {module:engine/view/selection~Selection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'focus', 'blur' ];\n\t\tthis.useCapture = true;\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'focus', () => {\n\t\t\tdocument.isFocused = true;\n\n\t\t\t// Unfortunately native `selectionchange` event is fired asynchronously.\n\t\t\t// We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n\t\t\t// overwrite new DOM selection with selection from the view.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n\t\t\t// Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n\t\t\tthis._renderTimeoutId = setTimeout( () => view.render(), 50 );\n\t\t} );\n\n\t\tdocument.on( 'blur', ( evt, data ) => {\n\t\t\tconst selectedEditable = document.selection.editableElement;\n\n\t\t\tif ( selectedEditable === null || selectedEditable === data.target ) {\n\t\t\t\tdocument.isFocused = false;\n\n\t\t\t\t// Re-render the document to update view elements.\n\t\t\t\tview.render();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Identifier of the timeout currently used by focus listener to delay rendering execution.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_renderTimeoutId\n\t\t */\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._renderTimeoutId ) {\n\t\t\tclearTimeout( this._renderTimeoutId );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/compositionobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class CompositionObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'compositionstart', 'compositionupdate', 'compositionend' ];\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'compositionstart', () => {\n\t\t\tdocument.isComposing = true;\n\t\t} );\n\n\t\tdocument.on( 'compositionend', () => {\n\t\t\tdocument.isComposing = false;\n\t\t} );\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when composition starts inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionstart\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition is updated inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionupdate\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition ends inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionend\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/isrange\n */\n\n/**\n * Checks if the object is a native DOM Range.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isRange( obj ) {\n\treturn Object.prototype.toString.apply( obj ) == '[object Range]';\n}\n","import isObjectLike from './isObjectLike';\nimport isPlainObject from './isPlainObject';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element,\n *  else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n}\n\nexport default isElement;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/getborderwidths\n */\n\n/**\n * Returns an object containing CSS border widths of a specified HTML element.\n *\n * @param {HTMLElement} element An element which has CSS borders.\n * @param {Object} An object containing `top`, `left`, `right` and `bottom` properties\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\n */\nexport default function getBorderWidths( element ) {\n\t// Call getComputedStyle on the window the element document belongs to.\n\tconst style = element.ownerDocument.defaultView.getComputedStyle( element );\n\n\treturn {\n\t\ttop: parseInt( style.borderTopWidth, 10 ),\n\t\tright: parseInt( style.borderRightWidth, 10 ),\n\t\tbottom: parseInt( style.borderBottomWidth, 10 ),\n\t\tleft: parseInt( style.borderLeftWidth, 10 )\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/rect\n */\n\nimport isRange from './isrange';\nimport isWindow from './iswindow';\nimport isElement from '../lib/lodash/isElement';\nimport getBorderWidths from './getborderwidths';\nimport log from '../log';\nimport isText from './istext';\n\n/**\n * A helper class representing a `ClientRect` object, e.g. value returned by\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\n * to manipulate the rect and compare it against other rect instances.\n */\nexport default class Rect {\n\t/**\n\t * Creates an instance of rect.\n\t *\n\t *\t\t// Rect of an HTMLElement.\n\t *\t\tconst rectA = new Rect( document.body );\n\t *\n\t *\t\t// Rect of a DOM Range.\n\t *\t\tconst rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\n\t *\n\t *\t\t// Rect of a window (web browser viewport).\n\t *\t\tconst rectC = new Rect( window );\n\t *\n\t *\t\t// Rect out of an object.\n\t *\t\tconst rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\n\t *\n\t *\t\t// Rect out of another Rect instance.\n\t *\t\tconst rectE = new Rect( rectD );\n\t *\n\t *\t\t// Rect out of a ClientRect.\n\t *\t\tconst rectF = new Rect( document.body.getClientRects().item( 0 ) );\n\t *\n\t * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\n\t * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\n\t * to get the inner part of the rect.\n\t *\n\t * @param {HTMLElement|Range|Window|ClientRect|module:utils/dom/rect~Rect|Object} source A source object to create the rect.\n\t */\n\tconstructor( source ) {\n\t\tconst isSourceRange = isRange( source );\n\n\t\t/**\n\t\t * The object this rect is for.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {HTMLElement|Range|ClientRect|module:utils/dom/rect~Rect|Object} #_source\n\t\t */\n\t\tObject.defineProperty( this, '_source', {\n\t\t\t// If the source is a Rect instance, copy it's #_source.\n\t\t\tvalue: source._source || source,\n\t\t\twritable: true,\n\t\t\tenumerable: false\n\t\t} );\n\n\t\tif ( isElement( source ) || isSourceRange ) {\n\t\t\tconst sourceNode = isSourceRange ? source.startContainer : source;\n\n\t\t\tif ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\n\t\t\t\t/**\n\t\t\t\t * The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods.\n\t\t\t\t * If the {@link #constructor source} of a rect in an HTML element or a DOM range but it does\n\t\t\t\t * not belong to any rendered DOM tree, these methods will fail to obtain the geometry and\n\t\t\t\t * the rect instance makes little sense to the features using it.\n\t\t\t\t *\n\t\t\t\t * To get rid of this warning make sure the source passed to the constructor\n\t\t\t\t * is a descendant of `window.document.body`.\n\t\t\t\t *\n\t\t\t\t * @error rect-source-not-in-dom\n\t\t\t\t * @param {String} source The source of the Rect instance.\n\t\t\t\t */\n\t\t\t\tlog.warn(\n\t\t\t\t\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\n\t\t\t\t\t{ source }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( isSourceRange ) {\n\t\t\t\tcopyRectProperties( this, Rect.getDomRangeRects( source )[ 0 ] );\n\t\t\t} else {\n\t\t\t\tcopyRectProperties( this, source.getBoundingClientRect() );\n\t\t\t}\n\t\t} else if ( isWindow( source ) ) {\n\t\t\tconst { innerWidth, innerHeight } = source;\n\n\t\t\tcopyRectProperties( this, {\n\t\t\t\ttop: 0,\n\t\t\t\tright: innerWidth,\n\t\t\t\tbottom: innerHeight,\n\t\t\t\tleft: 0,\n\t\t\t\twidth: innerWidth,\n\t\t\t\theight: innerHeight\n\t\t\t} );\n\t\t} else {\n\t\t\tcopyRectProperties( this, source );\n\t\t}\n\n\t\t/**\n\t\t * The \"top\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #top\n\t\t */\n\n\t\t/**\n\t\t * The \"right\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #right\n\t\t */\n\n\t\t/**\n\t\t * The \"bottom\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #bottom\n\t\t */\n\n\t\t/**\n\t\t * The \"left\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #left\n\t\t */\n\n\t\t/**\n\t\t * The \"width\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #width\n\t\t */\n\n\t\t/**\n\t\t * The \"height\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #height\n\t\t */\n\t}\n\n\t/**\n\t * Returns a clone of the rect.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A cloned rect.\n\t */\n\tclone() {\n\t\treturn new Rect( this );\n\t}\n\n\t/**\n\t * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\n\t *\n\t * @param {Number} x Desired horizontal location.\n\t * @param {Number} y Desired vertical location.\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveTo( x, y ) {\n\t\tthis.top = y;\n\t\tthis.right = x + this.width;\n\t\tthis.bottom = y + this.height;\n\t\tthis.left = x;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the rect in–place by a dedicated offset.\n\t *\n\t * @param {Number} x A horizontal offset.\n\t * @param {Number} y A vertical offset\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveBy( x, y ) {\n\t\tthis.top += y;\n\t\tthis.right += x;\n\t\tthis.left += x;\n\t\tthis.bottom += y;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a new rect a a result of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {module:utils/dom/rect~Rect}\n\t */\n\tgetIntersection( anotherRect ) {\n\t\tconst rect = {\n\t\t\ttop: Math.max( this.top, anotherRect.top ),\n\t\t\tright: Math.min( this.right, anotherRect.right ),\n\t\t\tbottom: Math.min( this.bottom, anotherRect.bottom ),\n\t\t\tleft: Math.max( this.left, anotherRect.left )\n\t\t};\n\n\t\trect.width = rect.right - rect.left;\n\t\trect.height = rect.bottom - rect.top;\n\n\t\tif ( rect.width < 0 || rect.height < 0 ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new Rect( rect );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect [description]\n\t * @returns {Number} Area of intersection.\n\t */\n\tgetIntersectionArea( anotherRect ) {\n\t\tconst rect = this.getIntersection( anotherRect );\n\n\t\tif ( rect ) {\n\t\t\treturn rect.getArea();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of the rect.\n\t *\n\t * @returns {Number}\n\t */\n\tgetArea() {\n\t\treturn this.width * this.height;\n\t}\n\n\t/**\n\t * Returns a new rect, a part of the original rect, which is actually visible to the user,\n\t * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\n\t * other than `\"visible\"`.\n\t *\n\t * If there's no such visible rect, which is when the rect is limited by one or many of\n\t * the ancestors, `null` is returned.\n\t *\n\t * @returns {module:utils/dom/rect~Rect|null} A visible rect instance or `null`, if there's none.\n\t */\n\tgetVisible() {\n\t\tconst source = this._source;\n\t\tlet visibleRect = this.clone();\n\n\t\t// There's no ancestor to crop <body> with the overflow.\n\t\tif ( !isBody( source ) ) {\n\t\t\tlet parent = source.parentNode || source.commonAncestorContainer;\n\n\t\t\t// Check the ancestors all the way up to the <body>.\n\t\t\twhile ( parent && !isBody( parent ) ) {\n\t\t\t\tconst parentRect = new Rect( parent );\n\t\t\t\tconst intersectionRect = visibleRect.getIntersection( parentRect );\n\n\t\t\t\tif ( intersectionRect ) {\n\t\t\t\t\tif ( intersectionRect.getArea() < visibleRect.getArea() ) {\n\t\t\t\t\t\t// Reduce the visible rect to the intersection.\n\t\t\t\t\t\tvisibleRect = intersectionRect;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// There's no intersection, the rect is completely invisible.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parentNode;\n\t\t\t}\n\t\t}\n\n\t\treturn visibleRect;\n\t}\n\n\t/**\n\t * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\n\t * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\n\t * instances.\n\t *\n\t * @param {module:utils/dom/rect~Rect} rect A rect instance to compare with.\n\t * @returns {Boolean} `true` when Rects are equal. `false` otherwise.\n\t */\n\tisEqual( anotherRect ) {\n\t\tfor ( const prop of rectProperties ) {\n\t\t\tif ( this[ prop ] !== anotherRect[ prop ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether a rect fully contains another rect instance.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {Boolean} `true` if contains, `false` otherwise.\n\t */\n\tcontains( anotherRect ) {\n\t\tconst intersectRect = this.getIntersection( anotherRect );\n\n\t\treturn !!( intersectRect && intersectRect.isEqual( anotherRect ) );\n\t}\n\n\t/**\n\t * Excludes scrollbars and CSS borders from the rect.\n\t *\n\t * * Borders are removed when {@link #_source} is an HTML element.\n\t * * Scrollbars are excluded from HTML elements and the `window`.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been updated.\n\t */\n\texcludeScrollbarsAndBorders() {\n\t\tconst source = this._source;\n\t\tlet scrollBarWidth, scrollBarHeight;\n\n\t\tif ( isWindow( source ) ) {\n\t\t\tscrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\n\t\t\tscrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\n\t\t} else {\n\t\t\tconst borderWidths = getBorderWidths( this._source );\n\n\t\t\tscrollBarWidth = source.offsetWidth - source.clientWidth;\n\t\t\tscrollBarHeight = source.offsetHeight - source.clientHeight;\n\n\t\t\tthis.moveBy( borderWidths.left, borderWidths.top );\n\t\t}\n\n\t\t// Assuming LTR scrollbars. TODO: RTL.\n\t\tthis.width -= scrollBarWidth;\n\t\tthis.right -= scrollBarWidth;\n\n\t\tthis.height -= scrollBarHeight;\n\t\tthis.bottom -= scrollBarHeight;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an array of rects of the given native DOM Range.\n\t *\n\t * @param {Range} range A native DOM range.\n\t * @returns {Array.<module:utils/dom/rect~Rect>} DOM Range rects.\n\t */\n\tstatic getDomRangeRects( range ) {\n\t\tconst rects = [];\n\t\t// Safari does not iterate over ClientRectList using for...of loop.\n\t\tconst clientRects = Array.from( range.getClientRects() );\n\n\t\tif ( clientRects.length ) {\n\t\t\tfor ( const rect of clientRects ) {\n\t\t\t\trects.push( new Rect( rect ) );\n\t\t\t}\n\t\t}\n\t\t// If there's no client rects for the Range, use parent container's bounding rect\n\t\t// instead and adjust rect's width to simulate the actual geometry of such range.\n\t\t// https://github.com/ckeditor/ckeditor5-utils/issues/153\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/317\n\t\telse {\n\t\t\tlet startContainer = range.startContainer;\n\n\t\t\tif ( isText( startContainer ) ) {\n\t\t\t\tstartContainer = startContainer.parentNode;\n\t\t\t}\n\n\t\t\tconst rect = new Rect( startContainer.getBoundingClientRect() );\n\t\t\trect.right = rect.left;\n\t\t\trect.width = 0;\n\n\t\t\trects.push( rect );\n\t\t}\n\n\t\treturn rects;\n\t}\n}\n\nconst rectProperties = [ 'top', 'right', 'bottom', 'left', 'width', 'height' ];\n\n// Acquires all the rect properties from the passed source.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} rect\n// @param {ClientRect|module:utils/dom/rect~Rect|Object} source\nfunction copyRectProperties( rect, source ) {\n\tfor ( const p of rectProperties ) {\n\t\trect[ p ] = source[ p ];\n\t}\n}\n\n// Checks if provided object is a <body> HTML element.\n//\n// @private\n// @param {HTMLElement|Range} elementOrRange\n// @returns {Boolean}\nfunction isBody( elementOrRange ) {\n\tif ( !isElement( elementOrRange ) ) {\n\t\treturn false;\n\t}\n\n\treturn elementOrRange === elementOrRange.ownerDocument.body;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/scroll\n */\n\nimport isRange from './isrange';\nimport Rect from './rect';\nimport isText from './istext';\n\nconst utils = {};\n\n/**\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\n * the user. If the `target` is already visible, nothing will happen.\n *\n * @param {HTMLElement|Range} options.target A target, which supposed to become visible to the user.\n * @param {Number} [options.viewportOffset] An offset from the edge of the viewport (in pixels)\n * the `target` will be moved by when the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\n * read or edit by the user.\n */\nexport function scrollViewportToShowTarget( { target, viewportOffset = 0 } ) {\n\tconst targetWindow = getWindow( target );\n\tlet currentWindow = targetWindow;\n\tlet currentFrame = null;\n\n\t// Iterate over all windows, starting from target's parent window up to window#top.\n\twhile ( currentWindow ) {\n\t\tlet firstAncestorToScroll;\n\n\t\t// Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\n\t\t// settled down, the algorithm can eventually scroll the viewport of the current window.\n\t\t//\n\t\t// Note: If the current window is target's **original** window (e.g. the first one),\n\t\t// start scrolling the closest parent of the target. If not, scroll the closest parent\n\t\t// of an iframe that resides in the current window.\n\t\tif ( currentWindow == targetWindow ) {\n\t\t\tfirstAncestorToScroll = getParentElement( target );\n\t\t} else {\n\t\t\tfirstAncestorToScroll = getParentElement( currentFrame );\n\t\t}\n\n\t\t// Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\n\t\tscrollAncestorsToShowRect( firstAncestorToScroll, () => {\n\t\t\t// Note: If the target does not belong to the current window **directly**,\n\t\t\t// i.e. it resides in an iframe belonging to the window, obtain the target's rect\n\t\t\t// in the coordinates of the current window. By default, a Rect returns geometry\n\t\t\t// relative to the current window's viewport. To make it work in a parent window,\n\t\t\t// it must be shifted.\n\t\t\treturn getRectRelativeToWindow( target, currentWindow );\n\t\t} );\n\n\t\t// Obtain the rect of the target after it has been scrolled within its ancestors.\n\t\t// It's time to scroll the viewport.\n\t\tconst targetRect = getRectRelativeToWindow( target, currentWindow );\n\n\t\tscrollWindowToShowRect( currentWindow, targetRect, viewportOffset );\n\n\t\tif ( currentWindow.parent != currentWindow ) {\n\t\t\t// Keep the reference to the <iframe> element the \"previous current window\" was\n\t\t\t// rendered within. It will be useful to re–calculate the rect of the target\n\t\t\t// in the parent window's relative geometry. The target's rect must be shifted\n\t\t\t// by it's iframe's position.\n\t\t\tcurrentFrame = currentWindow.frameElement;\n\t\t\tcurrentWindow = currentWindow.parent;\n\t\t} else {\n\t\t\tcurrentWindow = null;\n\t\t}\n\t}\n}\n\n/**\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\n * e.g. if they have `overflow: scroll` CSS style.\n *\n * @param {HTMLElement|Range} target A target, which supposed to become visible to the user.\n */\nexport function scrollAncestorsToShowTarget( target ) {\n\tconst targetParent = getParentElement( target );\n\n\tscrollAncestorsToShowRect( targetParent, () => {\n\t\treturn new Rect( target );\n\t} );\n}\n\n// TODO: Using a property value shorthand in the top of the file\n// causes JSDoc to throw errors. See https://github.com/cksource/docs-builder/issues/75.\nObject.assign( utils, {\n\tscrollViewportToShowTarget,\n\tscrollAncestorsToShowTarget\n} );\n\n// Makes a given rect visible within its parent window.\n//\n// Note: Avoid the situation where the caret is still in the viewport, but totally\n// at the edge of it. In such situation, if it moved beyond the viewport in the next\n// action e.g. after paste, the scrolling would move it to the viewportOffset level\n// and it all would look like the caret visually moved up/down:\n//\n// 1.\n//\t\t| foo[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// 2. *paste*\n// 3.\n//\t\t|\n//\t\t|\n//\t\t+-foo-----------------------------...\n//\t\t  bar[]                              <--- caret below viewport, scrolling...\n//\n// 4. *scrolling*\n// 5.\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]                              <--- caret precisely at the edge\n//\t\t+---------------------------------...\n//\n// To prevent this, this method checks the rects moved by the viewportOffset to cover\n// the upper/lower edge of the viewport. It makes sure if the action repeats, there's\n// no twitching – it's a purely visual improvement:\n//\n// 5. (after fix)\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// @private\n// @param {Window} window A window which is scrolled to reveal the rect.\n// @param {module:utils/dom/rect~Rect} rect A rect which is to be revealed.\n// @param {Number} viewportOffset See scrollViewportToShowTarget.\nfunction scrollWindowToShowRect( window, rect, viewportOffset ) {\n\tconst targetShiftedDownRect = rect.clone().moveBy( 0, viewportOffset );\n\tconst targetShiftedUpRect = rect.clone().moveBy( 0, -viewportOffset );\n\tconst viewportRect = new Rect( window ).excludeScrollbarsAndBorders();\n\n\tconst rects = [ targetShiftedUpRect, targetShiftedDownRect ];\n\n\tif ( !rects.every( rect => viewportRect.contains( rect ) ) ) {\n\t\tlet { scrollX, scrollY } = window;\n\n\t\tif ( isAbove( targetShiftedUpRect, viewportRect ) ) {\n\t\t\tscrollY -= viewportRect.top - rect.top + viewportOffset;\n\t\t} else if ( isBelow( targetShiftedDownRect, viewportRect ) ) {\n\t\t\tscrollY += rect.bottom - viewportRect.bottom + viewportOffset;\n\t\t}\n\n\t\t// TODO: Web browsers scroll natively to place the target in the middle\n\t\t// of the viewport. It's not a very popular case, though.\n\t\tif ( isLeftOf( rect, viewportRect ) ) {\n\t\t\tscrollX -= viewportRect.left - rect.left + viewportOffset;\n\t\t} else if ( isRightOf( rect, viewportRect ) ) {\n\t\t\tscrollX += rect.right - viewportRect.right + viewportOffset;\n\t\t}\n\n\t\twindow.scrollTo( scrollX, scrollY );\n\t}\n}\n\n// Recursively scrolls element ancestors to visually reveal a rect.\n//\n// @private\n// @param {HTMLElement} A parent The first ancestors to start scrolling.\n// @param {Function} getRect A function which returns the Rect, which is to be revealed.\nfunction scrollAncestorsToShowRect( parent, getRect ) {\n\tconst parentWindow = getWindow( parent );\n\tlet parentRect, targetRect;\n\n\twhile ( parent != parentWindow.document.body ) {\n\t\ttargetRect = getRect();\n\t\tparentRect = new Rect( parent ).excludeScrollbarsAndBorders();\n\n\t\tif ( !parentRect.contains( targetRect ) ) {\n\t\t\tif ( isAbove( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop -= parentRect.top - targetRect.top;\n\t\t\t} else if ( isBelow( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop += targetRect.bottom - parentRect.bottom;\n\t\t\t}\n\n\t\t\tif ( isLeftOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft -= parentRect.left - targetRect.left;\n\t\t\t} else if ( isRightOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft += targetRect.right - parentRect.right;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parentNode;\n\t}\n}\n\n// Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isBelow( firstRect, secondRect ) {\n\treturn firstRect.bottom > secondRect.bottom;\n}\n\n// Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isAbove( firstRect, secondRect ) {\n\treturn firstRect.top < secondRect.top;\n}\n\n// Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isLeftOf( firstRect, secondRect ) {\n\treturn firstRect.left < secondRect.left;\n}\n\n// Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isRightOf( firstRect, secondRect ) {\n\treturn firstRect.right > secondRect.right;\n}\n\n// Returns the closest window of an element or range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {Window}\nfunction getWindow( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\treturn elementOrRange.startContainer.ownerDocument.defaultView;\n\t} else {\n\t\treturn elementOrRange.ownerDocument.defaultView;\n\t}\n}\n\n// Returns the closest parent of an element or DOM range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {HTMLelement}\nfunction getParentElement( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\tlet parent = elementOrRange.commonAncestorContainer;\n\n\t\t// If a Range is attached to the Text, use the closest element ancestor.\n\t\tif ( isText( parent ) ) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn parent;\n\t} else {\n\t\treturn elementOrRange.parentNode;\n\t}\n}\n\n// Returns the rect of an element or range residing in an iframe.\n// The result rect is relative to the geometry of the passed window instance.\n//\n// @private\n// @param {HTMLElement|Range} target Element or range which rect should be returned.\n// @param {Window} relativeWindow A window the rect should be relative to.\n// @returns {module:utils/dom/rect~Rect}\nfunction getRectRelativeToWindow( target, relativeWindow ) {\n\tconst targetWindow = getWindow( target );\n\tconst rect = new Rect( target );\n\n\tif ( targetWindow === relativeWindow ) {\n\t\treturn rect;\n\t} else {\n\t\tlet currentWindow = targetWindow;\n\n\t\twhile ( currentWindow != relativeWindow ) {\n\t\t\tconst frame = currentWindow.frameElement;\n\t\t\tconst frameRect = new Rect( frame ).excludeScrollbarsAndBorders();\n\n\t\t\trect.moveBy( frameRect.left, frameRect.top );\n\n\t\t\tcurrentWindow = currentWindow.parent;\n\t\t}\n\t}\n\n\treturn rect;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport Writer from './writer';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/writer~Writer}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot bind DOM and View elements}.\n *\n * If you do not need full DOM - View management, and want to only transform the tree of view elements to the DOM\n * elements you do not need this controller, you can use the {@link module:engine/view/domconverter~DomConverter DomConverter}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\tconstructor() {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/view~View#document\n\t\t */\n\t\tthis.document = new Document();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} use by\n\t\t * {@link module:engine/view/view~View#renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/view~View#domConverter\n\t\t */\n\t\tthis.domConverter = new DomConverter();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/view/renderer~Renderer} module:engine/view/view~View#renderer\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused' ).to( this.document );\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map} module:engine/view/view~View#domRoots\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<Function, module:engine/view/observer/observer~Observer>} module:engine/view/view~View#_observers\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} module:engine/view/view~View#_ongoingChange\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #render} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} module:engine/view/view~View#_renderingInProgress\n\t\t */\n\t\tthis._renderingInProgress = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #render} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} module:engine/view/view~View#_renderingInProgress\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Writer instance used in {@link #change change method) callbacks.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/writer~Writer} module:engine/view/view~View#_writer\n\t\t */\n\t\tthis._writer = new Writer( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized with the view\n\t * what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.render();\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t * Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t * when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t *\n\t\t\t\t * @error view-focus-no-selection\n\t\t\t\t */\n\t\t\t\tlog.warn( 'view-focus-no-selection: There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Change method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made view is rendered to DOM. It prevents situations when DOM is updated\n\t * when view state is not yet correct. It allows to nest calls one inside another and still perform single rendering\n\t * after all changes are applied.\n\t *\n\t *\t\tview.change( writer => {\n\t *\t\t\twriter.insert( position1, writer.createText( 'foo' ) );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\t\t} );\n\t *\n\t * Change block is executed immediately.\n\t *\n\t * When the outermost change block is done and rendering to DOM is over it fires\n\t * {@link module:engine/view/view~View#event:render} event.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * change block is used after rendering to DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t */\n\tchange( callback ) {\n\t\tif ( this._renderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *   * calling {@link #change} or {@link #render} during rendering process,\n\t\t\t *   * calling {@link #change} or {@link #render} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post fixer function}.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree: ' +\n\t\t\t\t'Attempting to make changes to the view when it is in incorrect state: rendering or post fixers are in progress. ' +\n\t\t\t\t'This may cause some unexpected behaviour and inconsistency between the DOM and the view.'\n\t\t\t);\n\t\t}\n\n\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\tif ( this._ongoingChange ) {\n\t\t\tcallback( this._writer );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t// event for all nested calls.\n\t\tthis._ongoingChange = true;\n\t\tcallback( this._writer );\n\t\tthis._ongoingChange = false;\n\n\t\t// Execute all document post fixers after the change.\n\t\tthis._postFixersInProgress = true;\n\t\tthis.document._callPostFixers( this._writer );\n\t\tthis._postFixersInProgress = false;\n\n\t\tthis.fire( 'render' );\n\t}\n\n\t/**\n\t * Renders {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\trender() {\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis._renderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis._renderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/tomap\n */\n\nimport isPlainObject from './lib/lodash/isPlainObject';\nimport objectToMap from './objecttomap';\n\n/**\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\n *\n *\t\tmap = toMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\n *\t\tmap = toMap( anotherMap );\n *\n * @param {Object|Iterable} data Object or iterable to transform.\n * @returns {Map} Map created from data.\n */\nexport default function toMap( data ) {\n\tif ( isPlainObject( data ) ) {\n\t\treturn objectToMap( data );\n\t} else {\n\t\treturn new Map( data );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/node\n */\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#insertChildren insertChildren} or\n * {@link module:engine/model/node~Node#setAttribute setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node {\n\t/**\n\t * Creates a model node.\n\t *\n\t * This is an abstract class, so this constructor should not be used directly.\n\t *\n\t * @abstract\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( attrs ) {\n\t\t/**\n\t\t * Parent of this node. It could be {@link module:engine/model/element~Element}\n\t\t * or {@link module:engine/model/documentfragment~DocumentFragment}.\n\t\t * Equals to `null` if the node has no parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * Attributes set on this node.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/node~Node#_attrs\n\t\t */\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Index of this node in it's parent or `null` if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.' );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n\t * of all it's previous siblings. Equals to `null` if node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|Null}\n\t */\n\tget startOffset() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildStartOffset( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.' );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n\t * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n\t * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n\t * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n\t * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n\t * Equals to `null` if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget endOffset() {\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.startOffset + this.offsetSize;\n\t}\n\n\t/**\n\t * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n\t * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this node or `null` if the node has no parent or is inside\n\t * a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\t// This is a top element of a sub-tree.\n\t\tif ( this.root == this ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Root may be `DocumentFragment` which does not have document property.\n\t\treturn this.root.document || null;\n\t}\n\n\t/**\n\t * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n\t *\n\t * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n\t */\n\tclone() {\n\t\treturn new Node( this._attrs );\n\t}\n\n\t/**\n\t * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n\t * create {@link module:engine/model/position~Position Position} instance.\n\t *\n\t *\t\tconst abc = new Text( 'abc' );\n\t *\t\tconst foo = new Text( 'foo' );\n\t *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n\t *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.startOffset );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/model/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Removes this node from it's parent.\n\t */\n\tremove() {\n\t\tthis.parent.removeChildren( this.index );\n\t}\n\n\t/**\n\t * Checks if the node has an attribute with given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tthis._attrs.set( key, value );\n\t}\n\n\t/**\n\t * Removes all attributes from the node and sets given attributes.\n\t *\n\t * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tsetAttributesTo( attrs ) {\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the node.\n\t *\n\t * @param {String} key Key of attribute to remove.\n\t * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n\t */\n\tremoveAttribute( key ) {\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Removes all attributes from the node.\n\t */\n\tclearAttributes() {\n\t\tthis._attrs.clear();\n\t}\n\n\t/**\n\t * Converts `Node` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = {};\n\n\t\tif ( this._attrs.size ) {\n\t\t\tjson.attributes = [ ...this._attrs ];\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t * This method is useful when processing model tree objects that are of unknown type. For example, a function\n\t * may return {@link module:engine/model/documentfragment~DocumentFragment} or {@link module:engine/model/node~Node}\n\t * that can be either text node or element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tobj.is( 'node' ); // true for any node, false for document fragment\n\t *\t\tobj.is( 'documentFragment' ); // true for document fragment, false for any node\n\t *\t\tobj.is( 'element' ); // true for any element, false for text node or document fragment\n\t *\t\tobj.is( 'element', 'paragraph' ); // true only for element which name is 'paragraph'\n\t *\t\tobj.is( 'paragraph' ); // shortcut for obj.is( 'element', 'paragraph' )\n\t *\t\tobj.is( 'text' ); // true for text node, false for element and document fragment\n\t *\t\tobj.is( 'textProxy' ); // true for text proxy object\n\t *\n\t * @method #is\n\t * @param {'element'|'rootElement'|'text'|'textProxy'|'documentFragment'} type\n\t * @returns {Boolean}\n\t */\n}\n\n/**\n * The node's parent does not contain this node.\n *\n * This error may be thrown from corrupted trees.\n *\n * @error model-node-not-found-in-parent\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends {module:engine/model/node~Node}\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type ) {\n\t\treturn type == 'text';\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t */\n\tclone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/model/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n\t * starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Text node which part is represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/text~Text}\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `offsetInText` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.' );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `length` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-length: Given length value is incorrect.' );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset at which this text proxy starts in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#startOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget startOffset() {\n\t\treturn this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n\t}\n\n\t/**\n\t * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n\t *\n\t * @see module:engine/model/node~Node#offsetSize\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Offset at which this text proxy ends in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#endOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget endOffset() {\n\t\treturn this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.offsetSize !== this.textNode.offsetSize;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns text node represented by this text proxy or `null` if the text node\n\t * has no parent or is inside a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/model/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy';\n\t}\n\n\t/**\n\t * Gets path to this text proxy.\n\t *\n\t * @see module:engine/model/node~Node#getPath\n\t * @returns {Array.<Number>}\n\t */\n\tgetPath() {\n\t\tconst path = this.textNode.getPath();\n\n\t\tif ( path.length > 0 ) {\n\t\t\tpath[ path.length - 1 ] += this.offsetInText;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this text proxy will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Checks if this text proxy has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on text proxy, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this.textNode.hasAttribute( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this.textNode.getAttribute( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n\t * items. First one is attribute key and second is attribute value.\n\t *\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this.textNode.getAttributes();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this.textNode.getAttributeKeys();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis.insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.' );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-offset-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.' );\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\tinsertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error nodelist-insertNodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.' );\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\tremoveNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/element\n */\n\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n *\n * @extends {module:engine/model/node~Node}\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a model element.\n\t *\n\t * @param {String} name Element's name.\n\t * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * One or more nodes to be inserted as children of created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Element name.\n\t\t *\n\t\t * @member {String} module:engine/model/element~Element#name\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * List of children nodes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis.insertChildren( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Number of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t *\t\tobj.name; // 'listItem'\n\t *\t\tobj instanceof Element; // true\n\t *\n\t *\t\tobj.is( 'element' ); // true\n\t *\t\tobj.is( 'listItem' ); // true\n\t *\t\tobj.is( 'element', 'listItem' ); // true\n\t *\t\tobj.is( 'text' ); // false\n\t *\t\tobj.is( 'element', 'image' ); // false\n\t *\n\t * Read more in {@link module:engine/model/node~Node#is}.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'element' || type == this.name;\n\t\t} else {\n\t\t\treturn type == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this element's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's index in this element.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n\t * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\n\t *\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any child.\n\t */\n\tclone( deep = false ) {\n\t\tconst children = deep ? Array.from( this._children ).map( node => node.clone( true ) ) : null;\n\n\t\treturn new Element( this.name, this.getAttributes(), children );\n\t}\n\n\t/**\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst divElement = new Element( [ textNode, pElement ] );\n\t *\t\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdivElement.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdivElement.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number}\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * {@link module:engine/model/element~Element#insertChildren Inserts} one or more nodes at the end of this element.\n\t *\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\n\t */\n\tappendChildren( nodes ) {\n\t\tthis.insertChildren( this.childCount, nodes );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this element.\n\t *\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\tinsertChildren( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children.insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index and sets\n\t * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\tremoveChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children.removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n\t *\n\t * @returns {Object} `Element` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.name = this.name;\n\n\t\tif ( this._children.length > 0 ) {\n\t\t\tjson.children = [];\n\n\t\t\tfor ( const node of this._children ) {\n\t\t\t\tjson.children.push( node.toJSON() );\n\t\t\t}\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `Element` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `Element`.\n\t * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tlet children = null;\n\n\t\tif ( json.children ) {\n\t\t\tchildren = [];\n\n\t\t\tfor ( const child of json.children ) {\n\t\t\t\tif ( child.name ) {\n\t\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Element( json.name, json.attributes, children );\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\n// @return {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/treewalker\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Element from './element';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} [options={}] Object with configuration.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {module:engine/model/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/model/position~Position} [options.startPosition] Starting position.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all consecutive characters with the same attributes\n\t * should be returned one by one as multiple {@link module:engine/model/textproxy~TextProxy} (`true`) objects or as one\n\t * {@link module:engine/model/textproxy~TextProxy} (`false`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/model/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n\t\t\t *\n\t\t\t * @error model-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.' );\n\t\t}\n\n\t\tconst direction = options.direction || 'forward';\n\n\t\tif ( direction != 'forward' && direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\t{ direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/model/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range} module:engine/model/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. This is always static position, even if the initial position was a\n\t\t * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n\t\t * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n\t\t * is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = Position.createFromPosition( options.startPosition );\n\t\t} else {\n\t\t\tthis.position = Position.createFromPosition( this.boundaries[ this.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t/**\n\t\t * Flag indicating whether all consecutive characters with the same attributes should be\n\t\t * returned as one {@link module:engine/model/textproxy~TextProxy} (`true`) or one by one (`false`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If the option is true walker will not\n\t\t * return a parent node of the start position. If this option is `true` each {@link module:engine/model/element~Element} will\n\t\t * be returned once, while if the option is `false` they might be returned twice:\n\t\t * for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\n\t\t/**\n\t\t * Parent of the most recently visited node. Cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/treewalker~TreeWalker#_visitedParent\n\t\t */\n\t\tthis._visitedParent = this.position.parent;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t * \t\twalker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n\t * \t\twalker.skip( () => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition, prevVisitedParent;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\t\t\tprevVisitedParent = this._visitedParent;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t\tthis._visitedParent = prevVisitedParent;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} Next tree walker's value.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = Position.createFromPosition( this.position );\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.maxOffset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\tconst node = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\t// Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n\t\t\t\tposition.path.push( 0 );\n\t\t\t\tthis._visitedParent = node;\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.endOffset;\n\n\t\t\t\tif ( this._boundaryEndParent == parent && this.boundaries.end.offset < offset ) {\n\t\t\t\t\toffset = this.boundaries.end.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = offset - position.offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode, charactersCount );\n\n\t\t\tposition.offset += charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tposition.offset++;\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = Position.createFromPosition( this.position );\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position\n\t\tconst node = position.textNode ? position.textNode : position.nodeBefore;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tposition.offset--;\n\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition.path.push( node.maxOffset );\n\t\t\t\tthis.position = position;\n\t\t\t\tthis._visitedParent = node;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.startOffset;\n\n\t\t\t\tif ( this._boundaryStartParent == parent && this.boundaries.start.offset > offset ) {\n\t\t\t\t\toffset = this.boundaries.start.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = position.offset - offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode - charactersCount, charactersCount );\n\n\t\t\tposition.offset -= charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\treturn formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n}\n\nfunction formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\treturn {\n\t\tdone: false,\n\t\tvalue: {\n\t\t\ttype,\n\t\t\titem,\n\t\t\tpreviousPosition,\n\t\t\tnextPosition,\n\t\t\tlength\n\t\t}\n\t};\n}\n\n/**\n * Type of the step made by {@link module:engine/model/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end of node,\n * `'character'` if walker traversed over a character, or `'text'` if walker traversed over multiple characters (available in\n * character merging mode, see {@link module:engine/model/treewalker~TreeWalker#constructor}).\n *\n * @typedef {'elementStart'|'elementEnd'|'character'|'text'} module:engine/model/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/model/treewalker~TreeWalker} when traversing tree model.\n *\n * @typedef {Object} module:engine/model/treewalker~TreeWalkerValue\n * @property {module:engine/model/treewalker~TreeWalkerValueType} type\n * @property {module:engine/model/item~Item} item Item between old and new positions of {@link module:engine/model/treewalker~TreeWalker}.\n * @property {module:engine/model/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item. Note that it is more efficient to use this position then calculate the position before\n * the node using {@link module:engine/model/position~Position.createBefore}. It is also more efficient to get the\n * position after node by shifting `previousPosition` by `length`, using {@link module:engine/model/position~Position#getShiftedBy},\n * then calculate the position using {@link module:engine/model/position~Position.createAfter}.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * @property {module:engine/model/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * @property {Number} [length] Length of the item. For `'elementStart'` and `'character'` it is 1. For `'text'` it is\n * the length of the text. For `'elementEnd'` it is undefined.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array ? array.length : 0;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/position\n */\n\nimport TreeWalker from './treewalker';\nimport last from '@ckeditor/ckeditor5-utils/src/lib/lodash/last';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Text from './text';\n\n/**\n * Represents a position in the model tree.\n *\n * **Note:** Position is based on offsets, not indexes. This means that position in element containing two text nodes\n * with data `foo` and `bar`, position between them has offset `3`, not `1`.\n * See {@link module:engine/model/position~Position#path} for more.\n *\n * Since position in a model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing elements.\n * This requirement is important for {@link module:engine/model/operation/transform~transform operational transformation}.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after document got changed.\n *\n * When changes are applied to model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t */\n\tconstructor( root, path ) {\n\t\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position root is invalid.\n\t\t\t *\n\t\t\t * Positions can only be anchored in elements or document fragments.\n\t\t\t *\n\t\t\t * @error model-position-root-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-root-invalid: Position root invalid.' );\n\t\t}\n\n\t\tif ( !( path instanceof Array ) || path.length === 0 ) {\n\t\t\t/**\n\t\t\t * Position path must be an array with at least one item.\n\t\t\t *\n\t\t\t * @error model-position-path-incorrect\n\t\t\t * @param path\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: Position path must be an array with at least one item.', { path } );\n\t\t}\n\n\t\t// Normalize the root and path (if element was passed).\n\t\tpath = root.getPath().concat( path );\n\t\troot = root.root;\n\n\t\t/**\n\t\t * Root of the position path.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/position~Position#root\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Position of the node in the tree. **Path contains offsets, not indexes.**\n\t\t *\n\t\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n\t\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n\t\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n\t\t * down to the position offset in it's parent.\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n\t\t *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n\t\t *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n\t\t *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n\t\t *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n\t\t *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n\t\t *\n\t\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n\t\t * greater than `1` you can place position offset between their start and end:\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P\n\t\t *\t\t  |- UL\n\t\t *\t\t     |- LI\n\t\t *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n\t\t *\t\t     |- LI\n\t\t *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n\t\t *\n\t\t * @member {Array.<Number>} module:engine/model/position~Position#path\n\t\t */\n\t\tthis.path = path;\n\t}\n\n\t/**\n\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n\t * to the last item in position {@link module:engine/model/position~Position#path path}.\n\t *\n\t * @type {Number}\n\t */\n\tget offset() {\n\t\treturn last( this.path );\n\t}\n\n\t/**\n\t * @param {Number} newOffset\n\t */\n\tset offset( newOffset ) {\n\t\tthis.path[ this.path.length - 1 ] = newOffset;\n\t}\n\n\t/**\n\t * Parent element of this position.\n\t *\n\t * Keep in mind that `parent` value is calculated when the property is accessed.\n\t * If {@link module:engine/model/position~Position#path position path}\n\t * leads to a non-existing element, `parent` property will throw error.\n\t *\n\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element}\n\t */\n\tget parent() {\n\t\tlet parent = this.root;\n\n\t\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\n\t\t\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n\t * in text node, position index is equal to the index of that text node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget index() {\n\t\treturn this.parent.offsetToIndex( this.offset );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n\t * position is not in a text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/text~Text|null}\n\t */\n\tget textNode() {\n\t\tconst node = this.parent.getChild( this.index );\n\n\t\treturn ( node instanceof Text && node.startOffset < this.offset ) ? node : null;\n\t}\n\n\t/**\n\t * Node directly after this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index ) : null;\n\t}\n\n\t/**\n\t * Node directly before this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {Node}\n\t */\n\tget nodeBefore() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index - 1 ) : null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\treturn this.offset == this.parent.maxOffset;\n\t}\n\n\t/**\n\t * Checks whether this position is before or after given position.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/model/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root != otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tconst result = compareArrays( this.path, otherPosition.path );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'same':\n\t\t\t\treturn 'same';\n\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\tif ( this.path[ result ] < otherPosition.path[ result ] ) {\n\t\t\t\t\treturn 'before';\n\t\t\t\t} else {\n\t\t\t\t\treturn 'after';\n\t\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n\t * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n\t * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => false );\n\t * \t\t// Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n\t * but without the last item.\n\t *\n\t * This method returns the parent path even if the parent does not exists.\n\t *\n\t * @returns {Array.<Number>} Path to the parent.\n\t */\n\tgetParentPath() {\n\t\treturn this.path.slice( 0, -1 );\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\n\t *\n\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n\t * of these two paths must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {Array.<Number>} The common path.\n\t */\n\tgetCommonPath( position ) {\n\t\tif ( this.root != position.root ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// We find on which tree-level start and end have the lowest common ancestor\n\t\tconst cmp = compareArrays( this.path, position.path );\n\t\t// If comparison returned string it means that arrays are same.\n\t\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\n\n\t\treturn this.path.slice( 0, diffAt );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n\t * is shifted by `shift` value (can be a negative value).\n\t *\n\t * @param {Number} shift Offset shift. Can be a negative value.\n\t * @returns {module:engine/model/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position.createFromPosition( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Checks whether this position is after given position.\n\t *\n\t * @see module:engine/model/position~Position#isBefore\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before given position.\n\t *\n\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n\t * be `true` if positions are in different roots and you might not expect this. You should probably use\n\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n\t *\n\t *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do A.\n\t *\t\t} else {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * or, if you have only one if-branch:\n\t *\n\t *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * rather than:\n\t *\n\t *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t} else {\n\t *\t\t\t// do A.\n\t *\t\t}\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is equal to given position.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'same';\n\t}\n\n\t/**\n\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\n\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n\t * they are very similar or even indistinguishable.\n\t *\n\t * **Note:** this method traverses model document so it can be only used when range is up-to-date with model document.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions touch.\n\t */\n\tisTouching( otherPosition ) {\n\t\tlet left = null;\n\t\tlet right = null;\n\t\tconst compare = this.compareWith( otherPosition );\n\n\t\tswitch ( compare ) {\n\t\t\tcase 'same':\n\t\t\t\treturn true;\n\n\t\t\tcase 'before':\n\t\t\t\tleft = Position.createFromPosition( this );\n\t\t\t\tright = Position.createFromPosition( otherPosition );\n\t\t\t\tbreak;\n\n\t\t\tcase 'after':\n\t\t\t\tleft = Position.createFromPosition( otherPosition );\n\t\t\t\tright = Position.createFromPosition( this );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// Cached for optimization purposes.\n\t\tlet leftParent = left.parent;\n\n\t\twhile ( left.path.length + right.path.length ) {\n\t\t\tif ( left.isEqual( right ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( left.path.length > right.path.length ) {\n\t\t\t\tif ( left.offset !== leftParent.maxOffset ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tleft.path = left.path.slice( 0, -1 );\n\t\t\t\tleftParent = leftParent.parent;\n\t\t\t\tleft.offset++;\n\t\t\t} else {\n\t\t\t\tif ( right.offset !== 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tright.path = right.path.slice( 0, -1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tconst transformed = Position.createFromPosition( this );\n\n\t\t// This position can't be affected if deletion was in a different root.\n\t\tif ( this.root != deletePosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are removed from the node that is pointed by this position...\n\t\t\tif ( deletePosition.offset < this.offset ) {\n\t\t\t\t// And are removed from before an offset of that position...\n\t\t\t\tif ( deletePosition.offset + howMany > this.offset ) {\n\t\t\t\t\t// Position is in removed range, it's no longer in the tree.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Decrement the offset accordingly.\n\t\t\t\t\ttransformed.offset -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are removed from a node that is on a path to this position...\n\t\t\tconst i = deletePosition.path.length - 1;\n\n\t\t\tif ( deletePosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are removed from before next node of that path...\n\t\t\t\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\n\t\t\t\t\t// If the next node of that path is removed return null\n\t\t\t\t\t// because the node containing this position got removed.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, decrement index on that path.\n\t\t\t\t\ttransformed.path[ i ] -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @param {Boolean} insertBefore Flag indicating whether nodes are inserted before or after `insertPosition`.\n\t * This is important only when `insertPosition` and this position are same. If that is the case and the flag is\n\t * set to `true`, this position will get transformed. If the flag is set to `false`, it won't.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany, insertBefore ) {\n\t\tconst transformed = Position.createFromPosition( this );\n\n\t\t// This position can't be affected if insertion was in a different root.\n\t\tif ( this.root != insertPosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are inserted in the node that is pointed by this position...\n\t\t\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && insertBefore ) ) {\n\t\t\t\t// And are inserted before an offset of that position...\n\t\t\t\t// \"Push\" this positions offset.\n\t\t\t\ttransformed.offset += howMany;\n\t\t\t}\n\t\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are inserted in a node that is on a path to this position...\n\t\t\tconst i = insertPosition.path.length - 1;\n\n\t\t\tif ( insertPosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are inserted before next node of that path...\n\t\t\t\t// \"Push\" the index on that path.\n\t\t\t\ttransformed.path[ i ] += howMany;\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n\t * @param {Boolean} insertBefore Flag indicating whether moved nodes are pasted before or after `insertPosition`.\n\t * This is important only when `targetPosition` and this position are same. If that is the case and the flag is\n\t * set to `true`, this position will get transformed by range insertion. If the flag is set to `false`, it won't.\n\t * @param {Boolean} [sticky] Flag indicating whether this position \"sticks\" to range, that is if it should be moved\n\t * with the moved range if it is equal to one of range's boundaries.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany, insertBefore, sticky ) {\n\t\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\t\tlet transformed = this._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\t// Then we update target position, as it could be affected by nodes removal too.\n\t\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( transformed === null || ( sticky && transformed.isEqual( sourcePosition ) ) ) {\n\t\t\t// This position is inside moved range (or sticks to it).\n\t\t\t// In this case, we calculate a combination of this position, move source position and target position.\n\t\t\ttransformed = this._getCombined( sourcePosition, targetPosition );\n\t\t} else {\n\t\t\t// This position is not inside a removed range.\n\t\t\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n\t\t\ttransformed = transformed._getTransformedByInsertion( targetPosition, howMany, insertBefore );\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a new position that is a combination of this position and given positions.\n\t *\n\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\n\t * to the `target` position. It is expected that this position is inside the moved range.\n\t *\n\t * Example:\n\t *\n\t *\t\tlet original = new Position( root, [ 2, 3, 1 ] );\n\t *\t\tlet source = new Position( root, [ 2, 2 ] );\n\t *\t\tlet target = new Position( otherRoot, [ 1, 1, 3 ] );\n\t *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n\t *\n\t * Explanation:\n\t *\n\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\n\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\n\t * @param {module:engine/model/position~Position} target Position where the range is moved.\n\t * @returns {module:engine/model/position~Position} Combined position.\n\t */\n\t_getCombined( source, target ) {\n\t\tconst i = source.path.length - 1;\n\n\t\t// The first part of a path to combined position is a path to the place where nodes were moved.\n\t\tconst combined = Position.createFromPosition( target );\n\n\t\t// Then we have to update the rest of the path.\n\n\t\t// Fix the offset because this position might be after `from` position and we have to reflect that.\n\t\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\n\n\t\t// Then, add the rest of the path.\n\t\t// If this position is at the same level as `from` position nothing will get added.\n\t\tcombined.path = combined.path.concat( this.path.slice( i + 1 ) );\n\n\t\treturn combined;\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/model/position~Position.createBefore},\n\t * * {@link module:engine/model/position~Position.createAfter},\n\t * * {@link module:engine/model/position~Position.createFromParentAndOffset},\n\t * * {@link module:engine/model/position~Position.createFromPosition}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tstatic createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn this.createFromPosition( itemOrPosition );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.maxOffset;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this.createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this.createAfter( node );\n\t\t\t} else if ( !offset ) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\treturn this.createFromParentAndOffset( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic createAfter( item ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root element.\n\t\t\t *\n\t\t\t * @error model-position-after-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-after-root: You cannot make a position after root.', { root: item } );\n\t\t}\n\n\t\treturn this.createFromParentAndOffset( item.parent, item.endOffset );\n\t}\n\n\t/**\n\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic createBefore( item ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position before a root element.\n\t\t\t *\n\t\t\t * @error model-position-before-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-before-root: You cannot make a position before root.', { root: item } );\n\t\t}\n\n\t\treturn this.createFromParentAndOffset( item.parent, item.startOffset );\n\t}\n\n\t/**\n\t * Creates a new position from the parent element and an offset in that element.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent Position's parent.\n\t * @param {Number} offset Position's offset.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic createFromParentAndOffset( parent, offset ) {\n\t\tif ( !parent.is( 'element' ) && !parent.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position parent have to be a model element or model document fragment.\n\t\t\t *\n\t\t\t * @error model-position-parent-incorrect\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-parent-incorrect: Position parent have to be a element or document fragment.' );\n\t\t}\n\n\t\tconst path = parent.getPath();\n\n\t\tpath.push( offset );\n\n\t\treturn new this( parent.root, path );\n\t}\n\n\t/**\n\t * Creates a new position, which is equal to passed position.\n\t *\n\t * @param {module:engine/model/position~Position} position Position to be cloned.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic createFromPosition( position ) {\n\t\treturn new this( position.root, position.path.slice() );\n\t}\n\n\t/**\n\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Position`.\n\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( json.root === '$graveyard' ) {\n\t\t\treturn new Position( doc.graveyard, json.path );\n\t\t}\n\n\t\tif ( !doc.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create position for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error model-position-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.',\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new Position( doc.getRoot( json.root ), json.path );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Range class. Range is iterable.\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** Constructor creates it's own {@link module:engine/model/position~Position Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.start = Position.createFromPosition( start );\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.end = end ? Position.createFromPosition( end ) : Position.createFromPosition( start );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/model/position~Position positions},\n\t * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n\t * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n\t *\n\t * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n\t * and `ignoreElementEnd` option set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is if {@link #start} and\n\t * {@link #end} positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link #start} position and\n\t * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\treturn this.start.parent === this.end.parent;\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\n\t * in this range,`false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link ~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n\t *\n\t * @param {module:engine/model/item~Item} item Model item to check.\n\t */\n\tcontainsItem( item ) {\n\t\tconst pos = Position.createBefore( item );\n\n\t\treturn this.containsPosition( pos ) || this.start.isEqual( pos );\n\t}\n\n\t/**\n\t * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end );\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with given range.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n\t * Returned array contains zero, one or two {@link ~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = new Range( new Position( root, [ 2, 7 ] ), new Position( root, [ 4, 0, 1 ] ) );\n\t *\t\tlet otherRange = new Range( new Position( root, [ 1 ] ), new Position( root, [ 5 ] ) );\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = new Range( new Position( root, [ 1 ] ), new Position( root, [ 3 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t *\t\totherRange = new Range( new Position( root, [ 3 ] ), new Position( root, [ 4 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( Range.createFromRange( this ) );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = new Range( new Position( root, [ 2, 7 ] ), new Position( root, [ 4, 0, 1 ] ) );\n\t *\t\tlet otherRange = new Range( new Position( root, [ 1 ] ), new Position( root, [ 2 ] ) );\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n\t *\n\t *\t\totherRange = new Range( new Position( root, [ 3 ] ), new Position( root, [ 5 ] ) );\n\t *\t\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n\t *\n\t * See an example of a model structure (`[` and `]` are range boundaries):\n\t *\n\t *\t\troot                                                            root\n\t *\t\t |- element DIV                         DIV             P2              P3             DIV\n\t *\t\t |   |- element H                   H        P1        f o o           b a r       H         P4\n\t *\t\t |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n\t *\t\t |   |- element P1\n\t *\t\t |   |   |- \"lorem\"                                              ||\n\t *\t\t |- element P2                                                   ||\n\t *\t\t |   |- \"foo\"                                                    VV\n\t *\t\t |- element P3\n\t *\t\t |   |- \"bar\"                                                   root\n\t *\t\t |- element DIV                         DIV             [P2             P3]             DIV\n\t *\t\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\n\t *\t\t |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n\t *\t\t |   |- element P4\n\t *\t\t |   |   |- \"ipsum\"\n\t *\n\t * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n\t * We are looking for minimal set of flat ranges that contains the same nodes.\n\t *\n\t * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n\t *\n\t *\t\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n\t *\t\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n\t *\t\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n\t *\t\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n\t *\n\t * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n\t * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n\t * were omitted. Only their parts that were wholly in the range were returned.\n\t *\n\t * **Note:** this method is not returning flat ranges that contain no nodes.\n\t *\n\t * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\n\t */\n\tgetMinimalFlatRanges() {\n\t\tconst ranges = [];\n\t\tconst diffAt = this.start.getCommonPath( this.end ).length;\n\n\t\tconst pos = Position.createFromPosition( this.start );\n\t\tlet posParent = pos.parent;\n\n\t\t// Go up.\n\t\twhile ( pos.path.length > diffAt + 1 ) {\n\t\t\tconst howMany = posParent.maxOffset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.path = pos.path.slice( 0, -1 );\n\t\t\tpos.offset++;\n\t\t\tposParent = posParent.parent;\n\t\t}\n\n\t\t// Go down.\n\t\twhile ( pos.path.length <= this.end.path.length ) {\n\t\t\tconst offset = this.end.path[ pos.path.length - 1 ];\n\t\t\tconst howMany = offset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.offset = offset;\n\t\t\tpos.path.push( 0 );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @param {module:engine/model/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n\t * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @method getItems\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by given `delta`.\n\t *\n\t * **Note:** transformation may break one range into multiple ranges (e.g. when a part of the range is\n\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\n\t * may contain one or more `Range` instances.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} delta Delta to transform range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByDelta( delta ) {\n\t\tconst ranges = [ Range.createFromRange( this ) ];\n\n\t\t// Operation types that a range can be transformed by.\n\t\tconst supportedTypes = new Set( [ 'insert', 'move', 'remove', 'reinsert' ] );\n\n\t\tfor ( const operation of delta.operations ) {\n\t\t\tif ( supportedTypes.has( operation.type ) ) {\n\t\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\t\tconst result = ranges[ i ]._getTransformedByDocumentChange(\n\t\t\t\t\t\toperation.type,\n\t\t\t\t\t\tdelta.type,\n\t\t\t\t\t\toperation.targetPosition || operation.position,\n\t\t\t\t\t\toperation.howMany || operation.nodes.maxOffset,\n\t\t\t\t\t\toperation.sourcePosition\n\t\t\t\t\t);\n\n\t\t\t\t\tranges.splice( i, 1, ...result );\n\n\t\t\t\t\ti += result.length - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by multiple `deltas`.\n\t *\n\t * **Note:** transformation may break one range into multiple ranges (e.g. when a part of the range is\n\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\n\t * may contain one or more `Range` instances.\n\t *\n\t * @param {Iterable.<module:engine/model/delta/delta~Delta>} deltas Deltas to transform the range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByDeltas( deltas ) {\n\t\tconst ranges = [ Range.createFromRange( this ) ];\n\n\t\tfor ( const delta of deltas ) {\n\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\tconst result = ranges[ i ].getTransformedByDelta( delta );\n\n\t\t\t\tranges.splice( i, 1, ...result );\n\t\t\t\ti += result.length - 1;\n\t\t\t}\n\t\t}\n\n\t\t// It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n\t\t// \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n\t\t// because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n\t\t// are inside other ranges and we simply remove them.\n\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\tconst range = ranges[ i ];\n\n\t\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t\tconst next = ranges[ j ];\n\n\t\t\t\tif ( range.containsRange( next ) || next.containsRange( range ) || range.isEqual( next ) ) {\n\t\t\t\t\tranges.splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of the range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by a change in the model document.\n\t *\n\t * @protected\n\t * @param {'insert'|'move'|'remove'|'reinsert'} type Change type.\n\t * @param {String} deltaType Type of delta that introduced the change.\n\t * @param {module:engine/model/position~Position} targetPosition Position before the first changed node.\n\t * @param {Number} howMany How many nodes has been changed.\n\t * @param {module:engine/model/position~Position} sourcePosition Source position of changes.\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByDocumentChange( type, deltaType, targetPosition, howMany, sourcePosition ) {\n\t\tif ( type == 'insert' ) {\n\t\t\treturn this._getTransformedByInsertion( targetPosition, howMany, false, false );\n\t\t} else {\n\t\t\tconst sourceRange = Range.createFromPositionAndShift( sourcePosition, howMany );\n\n\t\t\t// Edge case for merge delta.\n\t\t\tif (\n\t\t\t\tdeltaType == 'merge' &&\n\t\t\t\tthis.isCollapsed &&\n\t\t\t\t( this.start.isEqual( sourceRange.start ) || this.start.isEqual( sourceRange.end ) )\n\t\t\t) {\n\t\t\t\t// Collapsed range is in merged element, at the beginning or at the end of it.\n\t\t\t\t// Without fix, the range would end up in the graveyard, together with removed element.\n\t\t\t\t// <p>foo</p><p>[]bar</p> -> <p>foobar</p><p>[]</p> -> <p>foobar</p> -> <p>foo[]bar</p>\n\t\t\t\t// <p>foo</p><p>bar[]</p> -> <p>foobar</p><p>[]</p> -> <p>foobar</p> -> <p>foobar[]</p>\n\t\t\t\t//\n\t\t\t\t// In most cases, `sourceRange.start.offset` for merge delta's move operation would be 0,\n\t\t\t\t// so this formula might look overcomplicated.\n\t\t\t\t// However in some scenarios, after operational transformation, move operation might not\n\t\t\t\t// in fact start from 0 and we need to properly count new offset.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-engine/pull/1133#issuecomment-329080668.\n\t\t\t\tconst offset = this.start.offset - sourceRange.start.offset;\n\n\t\t\t\treturn [ new Range( targetPosition.getShiftedBy( offset ) ) ];\n\t\t\t}\n\t\t\t//\n\t\t\t// Edge case for split delta.\n\t\t\t//\n\t\t\tif ( deltaType == 'split' && this.isCollapsed && this.end.isEqual( sourceRange.end ) ) {\n\t\t\t\t// Collapsed range is at the end of split element.\n\t\t\t\t// Without fix, the range would end up at the end of split (old) element instead of at the end of new element.\n\t\t\t\t// That would happen because this range is not technically inside moved range. Last step below shows the fix.\n\t\t\t\t// <p>foobar[]</p> -> <p>foobar[]</p><p></p> -> <p>foo[]</p><p>bar</p> -> <p>foo</p><p>bar[]</p>\n\t\t\t\treturn [ new Range( targetPosition.getShiftedBy( howMany ) ) ];\n\t\t\t}\n\t\t\t//\n\t\t\t// Other edge cases:\n\t\t\t//\n\t\t\t// In all examples `[]` is `this` and `{}` is `sourceRange`, while `^` is move target position.\n\t\t\t//\n\t\t\t// Example:\n\t\t\t// <p>xx</p>^<w>{<p>a[b</p>}</w><p>c]d</p>   -->   <p>xx</p><p>a[b</p><w></w><p>c]d</p>\n\t\t\t// ^<p>xx</p><w>{<p>a[b</p>}</w><p>c]d</p>   -->   <p>a[b</p><p>xx</p><w></w><p>c]d</p>  // Note <p>xx</p> inclusion.\n\t\t\t// <w>{<p>a[b</p>}</w>^<p>c]d</p>            -->   <w></w><p>a[b</p><p>c]d</p>\n\t\t\tif (\n\t\t\t\t( sourceRange.containsPosition( this.start ) || sourceRange.start.isEqual( this.start ) ) &&\n\t\t\t\tthis.containsPosition( sourceRange.end ) &&\n\t\t\t\tthis.end.isAfter( targetPosition )\n\t\t\t) {\n\t\t\t\tconst start = this.start._getCombined(\n\t\t\t\t\tsourcePosition,\n\t\t\t\t\ttargetPosition._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t\t);\n\t\t\t\tconst end = this.end._getTransformedByMove( sourcePosition, targetPosition, howMany, false, false );\n\n\t\t\t\treturn [ new Range( start, end ) ];\n\t\t\t}\n\n\t\t\t// Example:\n\t\t\t// <p>c[d</p><w>{<p>a]b</p>}</w>^<p>xx</p>   -->   <p>c[d</p><w></w><p>a]b</p><p>xx</p>\n\t\t\t// <p>c[d</p><w>{<p>a]b</p>}</w><p>xx</p>^   -->   <p>c[d</p><w></w><p>xx</p><p>a]b</p>  // Note <p>xx</p> inclusion.\n\t\t\t// <p>c[d</p>^<w>{<p>a]b</p>}</w>            -->   <p>c[d</p><p>a]b</p><w></w>\n\t\t\tif (\n\t\t\t\t( sourceRange.containsPosition( this.end ) || sourceRange.end.isEqual( this.end ) ) &&\n\t\t\t\tthis.containsPosition( sourceRange.start ) &&\n\t\t\t\tthis.start.isBefore( targetPosition )\n\t\t\t) {\n\t\t\t\tconst start = this.start._getTransformedByMove(\n\t\t\t\t\tsourcePosition,\n\t\t\t\t\ttargetPosition,\n\t\t\t\t\thowMany,\n\t\t\t\t\ttrue,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tconst end = this.end._getCombined(\n\t\t\t\t\tsourcePosition,\n\t\t\t\t\ttargetPosition._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t\t);\n\n\t\t\t\treturn [ new Range( start, end ) ];\n\t\t\t}\n\n\t\t\treturn this._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n\t * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = new Range( new Position( root, [ 2, 7 ] ), new Position( root, [ 4, 0, 1 ] ) );\n\t *\t\tlet transformed = range._getTransformedByInsertion( new Position( root, [ 1 ] ), 2 );\n\t *\t\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( new Position( root, [ 4, 0, 0 ] ), 4 );\n\t *\t\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( new Position( root, [ 3, 2 ] ), 4 );\n\t *\t\t// transformed array has one range, which is equal to original range\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( new Position( root, [ 3, 2 ] ), 4, true );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( new Position( root, [ 4, 0, 1 ] ), 4, false, false );\n\t *\t\t// transformed array has one range which is equal to original range because insertion is after the range boundary\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( new Position( root, [ 4, 0, 1 ] ), 4, false, true );\n\t *\t\t// transformed array has one range: from [ 2, 7 ] to [ 4, 0, 5 ] because range was expanded\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\n\t * was inside the range. Defaults to `false`.\n\t * @param {Boolean} [isSticky] Flag indicating whether insertion should expand a range if it is in a place of\n\t * range boundary. Defaults to `false`.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany, spread = false, isSticky = false ) {\n\t\tif ( spread && this.containsPosition( insertPosition ) ) {\n\t\t\t// Range has to be spread. The first part is from original start to the spread point.\n\t\t\t// The other part is from spread point to the original end, but transformed by\n\t\t\t// insertion to reflect insertion changes.\n\n\t\t\treturn [\n\t\t\t\tnew Range( this.start, insertPosition ),\n\t\t\t\tnew Range(\n\t\t\t\t\tinsertPosition._getTransformedByInsertion( insertPosition, howMany, true ),\n\t\t\t\t\tthis.end._getTransformedByInsertion( insertPosition, howMany, this.isCollapsed )\n\t\t\t\t)\n\t\t\t];\n\t\t} else {\n\t\t\tconst range = Range.createFromRange( this );\n\n\t\t\tconst insertBeforeStart = !isSticky;\n\t\t\tconst insertBeforeEnd = range.isCollapsed ? true : isSticky;\n\n\t\t\trange.start = range.start._getTransformedByInsertion( insertPosition, howMany, insertBeforeStart );\n\t\t\trange.end = range.end._getTransformedByInsertion( insertPosition, howMany, insertBeforeEnd );\n\n\t\t\treturn [ range ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\n\t * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\n\t * @param {Number} howMany How many nodes are moved.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\n\t\tif ( this.isCollapsed ) {\n\t\t\tconst newPos = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany, true, false );\n\n\t\t\treturn [ new Range( newPos ) ];\n\t\t}\n\n\t\tlet result;\n\n\t\tconst moveRange = new Range( sourcePosition, sourcePosition.getShiftedBy( howMany ) );\n\n\t\tconst differenceSet = this.getDifference( moveRange );\n\t\tlet difference = null;\n\n\t\tconst common = this.getIntersection( moveRange );\n\n\t\tif ( differenceSet.length == 1 ) {\n\t\t\t// `moveRange` and this range may intersect.\n\t\t\tdifference = new Range(\n\t\t\t\tdifferenceSet[ 0 ].start._getTransformedByDeletion( sourcePosition, howMany ),\n\t\t\t\tdifferenceSet[ 0 ].end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} else if ( differenceSet.length == 2 ) {\n\t\t\t// `moveRange` is inside this range.\n\t\t\tdifference = new Range(\n\t\t\t\tthis.start,\n\t\t\t\tthis.end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} // else, `moveRange` contains this range.\n\n\t\tconst insertPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( difference ) {\n\t\t\tresult = difference._getTransformedByInsertion( insertPosition, howMany, common !== null );\n\t\t} else {\n\t\t\tresult = [];\n\t\t}\n\n\t\tif ( common ) {\n\t\t\tresult.push( new Range(\n\t\t\t\tcommon.start._getCombined( moveRange.start, insertPosition ),\n\t\t\t\tcommon.end._getCombined( moveRange.start, insertPosition )\n\t\t\t) );\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @param {module:engine/model/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range from given parents and offsets.\n\t *\n\t * @param {module:engine/model/element~Element} startElement Start position parent element.\n\t * @param {Number} startOffset Start position offset.\n\t * @param {module:engine/model/element~Element} endElement End position parent element.\n\t * @param {Number} endOffset End position offset.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\n\t\treturn new this(\n\t\t\tPosition.createFromParentAndOffset( startElement, startOffset ),\n\t\t\tPosition.createFromParentAndOffset( endElement, endOffset )\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new instance of `Range` which is equal to passed range.\n\t *\n\t * @param {module:engine/model/range~Range} range Range to clone.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic createFromRange( range ) {\n\t\treturn new this( range.start, range.end );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic createIn( element ) {\n\t\treturn this.createFromParentsAndOffsets( element, 0, element, element.maxOffset );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic createOn( item ) {\n\t\treturn this.createFromPositionAndShift( Position.createBefore( item ), item.offsetSize );\n\t}\n\n\t/**\n\t * Creates a collapsed range at given {@link module:engine/model/position~Position position}\n\t * or on the given {@link module:engine/model/item~Item item}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tstatic createCollapsedAt( itemOrPosition, offset ) {\n\t\tconst start = Position.createAt( itemOrPosition, offset );\n\t\tconst end = Position.createFromPosition( start );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n\t * Passed ranges must not have common parts.\n\t *\n\t * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n\t * the reference range, they get combined into one range.\n\t *\n\t *\t\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n\t *\t\t[    ]                                       // The result of the function if the first range was a reference range.\n\t *\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n\t *\t                                           [  ]  // The result of the function if the last range was a reference range.\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\n\t * @returns {module:engine/model/range~Range} Combined range.\n\t */\n\tstatic createFromRanges( ranges ) {\n\t\tif ( ranges.length === 0 ) {\n\t\t\t/**\n\t\t\t * At least one range has to be passed to\n\t\t\t * {@link module:engine/model/range~Range.createFromRanges `Range.createFromRanges()`}.\n\t\t\t *\n\t\t\t * @error range-create-from-ranges-empty-array\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'range-create-from-ranges-empty-array: At least one range has to be passed.' );\n\t\t} else if ( ranges.length == 1 ) {\n\t\t\treturn this.createFromRange( ranges[ 0 ] );\n\t\t}\n\n\t\t// 1. Set the first range in `ranges` array as a reference range.\n\t\t// If we are going to return just a one range, one of the ranges need to be the reference one.\n\t\t// Other ranges will be stuck to that range, if possible.\n\t\tconst ref = ranges[ 0 ];\n\n\t\t// 2. Sort all the ranges so it's easier to process them.\n\t\tranges.sort( ( a, b ) => {\n\t\t\treturn a.start.isAfter( b.start ) ? 1 : -1;\n\t\t} );\n\n\t\t// 3. Check at which index the reference range is now.\n\t\tconst refIndex = ranges.indexOf( ref );\n\n\t\t// 4. At this moment we don't need the original range.\n\t\t// We are going to modify the result and we need to return a new instance of Range.\n\t\t// We have to create a copy of the reference range.\n\t\tconst result = new this( ref.start, ref.end );\n\n\t\t// 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tfor ( let i = refIndex - 1; i >= 0; i++ ) {\n\t\t\tif ( ranges[ i ].end.isEqual( result.start ) ) {\n\t\t\t\tresult.start = Position.createFromPosition( ranges[ i ].start );\n\t\t\t} else {\n\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tfor ( let i = refIndex + 1; i < ranges.length; i++ ) {\n\t\t\tif ( ranges[ i ].start.isEqual( result.end ) ) {\n\t\t\t\tresult.end = Position.createFromPosition( ranges[ i ].end );\n\t\t\t} else {\n\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Range`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be range owner.\n\t * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\treturn new this( Position.fromJSON( json.start, doc ), Position.fromJSON( json.end, doc ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/mapper\n */\n\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\n\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Maps elements and positions between {@link module:engine/view/document~Document view} and {@link module:engine/model/model model}.\n *\n * Mapper use bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map complex model to/from view relations, you may provide custom callbacks for\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper {\n\t/**\n\t * Creates an instance of the mapper.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Model element to view element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._modelToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View element to model element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._viewToModelMapping = new WeakMap();\n\n\t\t/**\n\t\t * A map containing callbacks between view element names and functions evaluating length of view elements\n\t\t * in model.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._viewToModelLengthCallbacks = new Map();\n\n\t\t// Default mapper algorithm for mapping model position to view position.\n\t\tthis.on( 'modelToViewPosition', ( evt, data ) => {\n\t\t\tif ( data.viewPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewContainer = this._modelToViewMapping.get( data.modelPosition.parent );\n\n\t\t\tdata.viewPosition = this._findPositionIn( viewContainer, data.modelPosition.offset );\n\t\t}, { priority: 'low' } );\n\n\t\t// Default mapper algorithm for mapping view position to model position.\n\t\tthis.on( 'viewToModelPosition', ( evt, data ) => {\n\t\t\tif ( data.modelPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet viewBlock = data.viewPosition.parent;\n\t\t\tlet modelParent = this._viewToModelMapping.get( viewBlock );\n\n\t\t\twhile ( !modelParent ) {\n\t\t\t\tviewBlock = viewBlock.parent;\n\t\t\t\tmodelParent = this._viewToModelMapping.get( viewBlock );\n\t\t\t}\n\n\t\t\tconst modelOffset = this._toModelOffset( data.viewPosition.parent, data.viewPosition.offset, viewBlock );\n\n\t\t\tdata.modelPosition = ModelPosition.createFromParentAndOffset( modelParent, modelOffset );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n\t * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n\t * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n\t * The information that elements are bound is also used to translate positions.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t */\n\tbindElements( modelElement, viewElement ) {\n\t\tthis._modelToViewMapping.set( modelElement, viewElement );\n\t\tthis._viewToModelMapping.set( viewElement, modelElement );\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/view/element~Element view element} from the map.\n\t *\n\t * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n\t * will be removed only if model element is still bound to passed `viewElement`.\n\t *\n\t * This behavior lets for re-binding model element to another view element without fear of losing the new binding\n\t * when the previously bound view element is unbound.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element to unbind.\n\t */\n\tunbindViewElement( viewElement ) {\n\t\tconst modelElement = this.toModelElement( viewElement );\n\n\t\tthis._viewToModelMapping.delete( viewElement );\n\n\t\tif ( this._modelToViewMapping.get( modelElement ) == viewElement ) {\n\t\t\tthis._modelToViewMapping.delete( modelElement );\n\t\t}\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/model/element~Element model element} from the map.\n\t *\n\t * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\n\t * will be removed only if view element is still bound to passed `modelElement`.\n\t *\n\t * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n\t * when the previously bound model element is unbound.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element to unbind.\n\t */\n\tunbindModelElement( modelElement ) {\n\t\tconst viewElement = this.toViewElement( modelElement );\n\n\t\tthis._modelToViewMapping.delete( modelElement );\n\n\t\tif ( this._viewToModelMapping.get( viewElement ) == modelElement ) {\n\t\t\tthis._viewToModelMapping.delete( viewElement );\n\t\t}\n\t}\n\n\t/**\n\t * Removes all model to view and view to model bindings.\n\t */\n\tclearBindings() {\n\t\tthis._modelToViewMapping = new WeakMap();\n\t\tthis._viewToModelMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Gets the corresponding model element.\n\t *\n\t * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\n\t */\n\ttoModelElement( viewElement ) {\n\t\treturn this._viewToModelMapping.get( viewElement );\n\t}\n\n\t/**\n\t * Gets the corresponding view element.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\n\t */\n\ttoViewElement( modelElement ) {\n\t\treturn this._modelToViewMapping.get( modelElement );\n\t}\n\n\t/**\n\t * Gets the corresponding model range.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {module:engine/model/range~Range} Corresponding model range.\n\t */\n\ttoModelRange( viewRange ) {\n\t\treturn new ModelRange( this.toModelPosition( viewRange.start ), this.toModelPosition( viewRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding view range.\n\t *\n\t * @param {module:engine/model/range~Range} modelRange Model range.\n\t * @returns {module:engine/view/range~Range} Corresponding view range.\n\t */\n\ttoViewRange( modelRange ) {\n\t\treturn new ViewRange( this.toViewPosition( modelRange.start ), this.toViewPosition( modelRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding model position.\n\t *\n\t * @fires viewToModelPosition\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {module:engine/model/position~Position} Corresponding model position.\n\t */\n\ttoModelPosition( viewPosition ) {\n\t\tconst data = {\n\t\t\tviewPosition,\n\t\t\tmapper: this\n\t\t};\n\n\t\tthis.fire( 'viewToModelPosition', data );\n\n\t\treturn data.modelPosition;\n\t}\n\n\t/**\n\t * Gets the corresponding view position.\n\t *\n\t * @fires modelToViewPosition\n\t * @param {module:engine/model/position~Position} modelPosition Model position.\n\t * @param {Object} [options] Additional options for position mapping process.\n\t * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\n\t * in model tree which no longer exists. For example, it could be an end of a removed model range.\n\t * @returns {module:engine/view/position~Position} Corresponding view position.\n\t */\n\ttoViewPosition( modelPosition, options = { isPhantom: false } ) {\n\t\tconst data = {\n\t\t\tmodelPosition,\n\t\t\tmapper: this,\n\t\t\tisPhantom: options.isPhantom\n\t\t};\n\n\t\tthis.fire( 'modelToViewPosition', data );\n\n\t\treturn data.viewPosition;\n\t}\n\n\t/**\n\t * Registers a callback that evaluates the length in the model of a view element with given name.\n\t *\n\t * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n\t * a number representing the length of view element in model.\n\t *\n\t *\t\t// List item in view may contain nested list, which have other list items. In model though,\n\t *\t\t// the lists are represented by flat structure. Because of those differences, length of list view element\n\t *\t\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n\t *\n\t *\t\tfunction getViewListItemLength( element ) {\n\t *\t\t\tlet length = 1;\n\t *\n\t *\t\t\tfor ( let child of element.getChildren() ) {\n\t *\t\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t *\t\t\t\t\tfor ( let item of child.getChildren() ) {\n\t *\t\t\t\t\t\tlength += getViewListItemLength( item );\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn length;\n\t *\t\t}\n\t *\n\t *\t\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t *\n\t * @param {String} viewElementName Name of view element for which callback is registered.\n\t * @param {Function} lengthCallback Function return a length of view element instance in model.\n\t */\n\tregisterViewToModelLength( viewElementName, lengthCallback ) {\n\t\tthis._viewToModelLengthCallbacks.set( viewElementName, lengthCallback );\n\t}\n\n\t/**\n\t * Calculates model offset based on the view position and the block element.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n\t *\n\t * Is a sum of:\n\t *\n\t *\t\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Position parent.\n\t * @param {Number} viewOffset Position offset.\n\t * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\n\t * @returns {Number} Offset in the model.\n\t */\n\t_toModelOffset( viewParent, viewOffset, viewBlock ) {\n\t\tif ( viewBlock != viewParent ) {\n\t\t\t// See example.\n\t\t\tconst offsetToParentStart = this._toModelOffset( viewParent.parent, viewParent.index, viewBlock );\n\t\t\tconst offsetInParent = this._toModelOffset( viewParent, viewOffset, viewParent );\n\n\t\t\treturn offsetToParentStart + offsetInParent;\n\t\t}\n\n\t\t// viewBlock == viewParent, so we need to calculate the offset in the parent element.\n\n\t\t// If the position is a text it is simple (\"ba|r\" -> 2).\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn viewOffset;\n\t\t}\n\n\t\t// If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n\t\tlet modelOffset = 0;\n\n\t\tfor ( let i = 0; i < viewOffset; i++ ) {\n\t\t\tmodelOffset += this.getModelLength( viewParent.getChild( i ) );\n\t\t}\n\n\t\treturn modelOffset;\n\t}\n\n\t/**\n\t * Gets the length of the view element in the model.\n\t *\n\t * The length is calculated as follows:\n\t * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\n\t * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\n\t * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\n\t * {@link module:engine/view/text~Text#data data},\n\t * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n\t * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n\t * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\n\t *\n\t * Examples:\n\t *\n\t *\t\tfoo                          -> 3 // Text length is equal to it's data length.\n\t *\t\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n\t *\t\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n\t *\t\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n\t *\n\t * @param {module:engine/view/element~Element} viewNode View node.\n\t * @returns {Number} Length of the node in the tree model.\n\t */\n\tgetModelLength( viewNode ) {\n\t\tif ( this._viewToModelLengthCallbacks.get( viewNode.name ) ) {\n\t\t\tconst callback = this._viewToModelLengthCallbacks.get( viewNode.name );\n\n\t\t\treturn callback( viewNode );\n\t\t} else if ( this._viewToModelMapping.has( viewNode ) ) {\n\t\t\treturn 1;\n\t\t} else if ( viewNode.is( 'text' ) ) {\n\t\t\treturn viewNode.data.length;\n\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tlet len = 0;\n\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tlen += this.getModelLength( child );\n\t\t\t}\n\n\t\t\treturn len;\n\t\t}\n\t}\n\n\t/**\n\t * Finds the position in the view node (or its children) with the expected model offset.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\n\t *\n\t *\t\t_findPositionIn( p, 4 ):\n\t *\t\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n\t *\t\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n\t *\t\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n\t *\n\t *\t\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\n\t *\t\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n\t *\t\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n\t *\n\t *\t\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\n\t *\t\tWe are in the text node so we can simple find the offset.\n\t *\t\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\n\t * @param {Number} expectedOffset Expected offset.\n\t * @returns {module:engine/view/position~Position} Found position.\n\t */\n\t_findPositionIn( viewParent, expectedOffset ) {\n\t\t// Last scanned view node.\n\t\tlet viewNode;\n\t\t// Length of the last scanned view node.\n\t\tlet lastLength = 0;\n\n\t\tlet modelOffset = 0;\n\t\tlet viewOffset = 0;\n\n\t\t// In the text node it is simple: offset in the model equals offset in the text.\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn new ViewPosition( viewParent, expectedOffset );\n\t\t}\n\n\t\t// In other cases we add lengths of child nodes to find the proper offset.\n\n\t\t// If it is smaller we add the length.\n\t\twhile ( modelOffset < expectedOffset ) {\n\t\t\tviewNode = viewParent.getChild( viewOffset );\n\t\t\tlastLength = this.getModelLength( viewNode );\n\t\t\tmodelOffset += lastLength;\n\t\t\tviewOffset++;\n\t\t}\n\n\t\t// If it equals we found the position.\n\t\tif ( modelOffset == expectedOffset ) {\n\t\t\treturn this._moveViewPositionToTextNode( new ViewPosition( viewParent, viewOffset ) );\n\t\t}\n\t\t// If it is higher we need to enter last child.\n\t\telse {\n\t\t\t// ( modelOffset - lastLength ) is the offset to the child we enter,\n\t\t\t// so we subtract it from the expected offset to fine the offset in the child.\n\t\t\treturn this._findPositionIn( viewNode, expectedOffset - ( modelOffset - lastLength ) );\n\t\t}\n\t}\n\n\t/**\n\t * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\n\t * if it was next to it.\n\t *\n\t *\t\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n\t *\t\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n\t *\t\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\n\t * @returns {module:engine/view/position~Position} Position in text node if possible.\n\t */\n\t_moveViewPositionToTextNode( viewPosition ) {\n\t\t// If the position is just after text node, put it at the end of that text node.\n\t\t// If the position is just before text node, put it at the beginning of that text node.\n\t\tconst nodeBefore = viewPosition.nodeBefore;\n\t\tconst nodeAfter = viewPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeBefore, nodeBefore.data.length );\n\t\t} else if ( nodeAfter instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeAfter, 0 );\n\t\t}\n\n\t\t// Otherwise, just return the given position.\n\t\treturn viewPosition;\n\t}\n\n\t/**\n\t * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\n\t * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\n\t * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\n\t * value in `data` object that is passed as one of parameters to the event callback.\n\t *\n\t * \t\t// Assume that \"captionedImage\" model element is converted to <img> and following <span> elements in view,\n\t * \t\t// and the model element is bound to <img> element. Force mapping model positions inside \"captionedImage\" to that\n\t * \t\t// <span> element.\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = modelPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.name == 'captionedImage' ) {\n\t *\t\t\t\tconst viewImg = data.mapper.toViewElement( positionParent );\n\t *\t\t\t\tconst viewCaption = viewImg.nextSibling; // The <span> element.\n\t *\n\t *\t\t\t\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\n\t *\n\t *\t\t\t\t// Stop the event if other callbacks should not modify calculated value.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** keep in mind that sometimes a \"phantom\" model position is being converted. \"Phantom\" model position is\n\t * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\n\t * (it would point to a correct place in view when converted). One example of such situation is when a range is\n\t * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\n\t * handle such situation, check `data.isPhantom` flag:\n\t *\n\t * \t\t// Assume that there is \"customElement\" model element and whenever position is before it, we want to move it\n\t * \t\t// to the inside of the view element bound to \"customElement\".\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tif ( data.isPhantom ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\t// Below line might crash for phantom position that does not exist in model.\n\t *\t\t\tconst sibling = data.modelPosition.nodeBefore;\n\t *\n\t *\t\t\t// Check if this is the element we are interested in.\n\t *\t\t\tif ( !sibling.is( 'customElement' ) ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst viewElement = data.mapper.toViewElement( sibling );\n\t *\n\t *\t\t\tdata.viewPosition = new ViewPosition( sibling, 0 );\n\t *\n\t *\t\t\tevt.stop();\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event modelToViewPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n\n\t/**\n\t * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\n\t *\n\t * \t\t// See example in `modelToViewPosition` event description.\n\t * \t\t// This custom mapping will map positions from <span> element next to <img> to the \"captionedImage\" element.\n\t *\t\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = viewPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.hasClass( 'image-caption' ) ) {\n\t *\t\t\t\tconst viewImg = positionParent.previousSibling;\n\t *\t\t\t\tconst modelImg = data.mapper.toModelElement( viewImg );\n\t *\n\t *\t\t\t\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event viewToModelPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n}\n\nmix( Mapper, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/modelconsumable\n */\n\nimport TextProxy from '../model/textproxy';\n\n/**\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addAttribute:<attributeKey>`,\n * `changeAttribute:<attributeKey>`, `removeAttribute:<attributeKey>`.\n *\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcast-selection-converters default downcast converters} for more information.\n *\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `image` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [image]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `image` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Check if the `image` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n\t/**\n\t * Creates an empty consumables list.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Contains list of consumable values.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n\t\t */\n\t\tthis._consumable = new Map();\n\n\t\t/**\n\t\t * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\n\t\t * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\n\t\t * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\n\t\t * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\n\t\t * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\n\t\t * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n\t\t */\n\t\tthis._textProxyRegistry = new Map();\n\t}\n\n\t/**\n\t * Adds a consumable value to the consumables list and links it with given model item.\n\t *\n\t *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n\t *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n\t *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection that has the consumable.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t */\n\tadd( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( !this._consumable.has( item ) ) {\n\t\t\tthis._consumable.set( item, new Map() );\n\t\t}\n\n\t\tthis._consumable.get( item ).set( type, true );\n\t}\n\n\t/**\n\t * Removes given consumable value from given model item.\n\t *\n\t *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n\t *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n\t *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection from which consumable will be consumed.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n\t */\n\tconsume( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( this.test( item, type ) ) {\n\t\t\tthis._consumable.get( item ).set( type, false );\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Tests whether there is a consumable value of given type connected with given model item.\n\t *\n\t *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n\t *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n\t *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be tested.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n\t * already consumed or `true` if it was added and not consumed yet.\n\t */\n\ttest( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst itemConsumables = this._consumable.get( item );\n\n\t\tif ( itemConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst value = itemConsumables.get( type );\n\n\t\tif ( value === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Reverts consuming of consumable value.\n\t *\n\t *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n\t *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n\t *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be reverted.\n\t * @param {String} type Consumable type.\n\t * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n\t * never been added.\n\t */\n\trevert( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst test = this.test( item, type );\n\n\t\tif ( test === false ) {\n\t\t\tthis._consumable.get( item ).set( type, true );\n\n\t\t\treturn true;\n\t\t} else if ( test === true ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n\t * have same parent, same start index and same end index will get the same symbol.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n\t * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n\t */\n\t_getSymbolForTextProxy( textProxy ) {\n\t\tlet symbol = null;\n\n\t\tconst startMap = this._textProxyRegistry.get( textProxy.startOffset );\n\n\t\tif ( startMap ) {\n\t\t\tconst endMap = startMap.get( textProxy.endOffset );\n\n\t\t\tif ( endMap ) {\n\t\t\t\tsymbol = endMap.get( textProxy.parent );\n\t\t\t}\n\t\t}\n\n\t\tif ( !symbol ) {\n\t\t\tsymbol = this._addSymbolForTextProxy( textProxy.startOffset, textProxy.endOffset, textProxy.parent );\n\t\t}\n\n\t\treturn symbol;\n\t}\n\n\t/**\n\t * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {Number} startIndex Text proxy start index in it's parent.\n\t * @param {Number} endIndex Text proxy end index in it's parent.\n\t * @param {module:engine/model/element~Element} parent Text proxy parent.\n\t * @returns {Symbol} Symbol generated for given properties.\n\t */\n\t_addSymbolForTextProxy( start, end, parent ) {\n\t\tconst symbol = Symbol( 'textProxySymbol' );\n\t\tlet startMap, endMap;\n\n\t\tstartMap = this._textProxyRegistry.get( start );\n\n\t\tif ( !startMap ) {\n\t\t\tstartMap = new Map();\n\t\t\tthis._textProxyRegistry.set( start, startMap );\n\t\t}\n\n\t\tendMap = startMap.get( end );\n\n\t\tif ( !endMap ) {\n\t\t\tendMap = new Map();\n\t\t\tstartMap.set( end, endMap );\n\t\t}\n\n\t\tendMap.set( parent, symbol );\n\n\t\treturn symbol;\n\t}\n}\n\n// Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \"parts\" (more colons),\n// the other parts are dropped, for example: `addAttribute:bold:$text` -> `addAttribute:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType( type ) {\n\tconst parts = type.split( ':' );\n\n\treturn parts.length > 1 ? parts[ 0 ] + ':' + parts[ 1 ] : parts[ 0 ];\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\n\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport extend from '@ckeditor/ckeditor5-utils/src/lib/lodash/extend';\n\n/**\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\n * data for those events. It is important to understand that those events are connected with changes done on model,\n * for example: \"node has been inserted\" or \"attribute has changed\". This is in a contrary to upcasting (view to model conversion),\n * where we convert view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\n *\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\n *\n * `DowncastDispatcher` fires following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * if a range of nodes has been inserted to the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\n * if a range of nodes has been removed from the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\n * if attribute has been added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\n * element's attributes during insertion).\n *\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\n *\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\n * so both those events are fired.\n *\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * which converts selection from model to view,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * which is fired for every selection attribute,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * which is fired for every marker which contains selection.\n *\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\n *\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\n * {@link module:engine/view/writer~Writer view writer} to apply changes to the view document.\n *\n * Example of a custom converter for `DowncastDispatcher`:\n *\n *\t\t// We will convert inserting \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate position in model to position in view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create <p> element that will be inserted in view at `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to model element so positions will map accordingly in future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class DowncastDispatcher {\n\t/**\n\t * Creates a `DowncastDispatcher` instance.\n\t *\n\t * @param {Object} [conversionApi] Interface passed by dispatcher to the events calls.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {Object}\n\t\t */\n\t\tthis.conversionApi = extend( { dispatcher: this }, conversionApi );\n\t}\n\n\t/**\n\t * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n\t *\n\t * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\n\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\n\t */\n\tconvertChanges( differ, writer ) {\n\t\t// Convert changes that happened on model tree.\n\t\tfor ( const entry of differ.getChanges() ) {\n\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\tthis.convertInsert( Range.createFromPositionAndShift( entry.position, entry.length ), writer );\n\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\n\t\t\t} else {\n\t\t\t\t// entry.type == 'attribute'.\n\t\t\t\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\n\t\t\t}\n\t\t}\n\n\t\t// After the view is updated, convert markers which has changed.\n\t\tfor ( const change of differ.getMarkersToAdd() ) {\n\t\t\tthis.convertMarkerAdd( change.name, change.range, writer );\n\t\t}\n\t}\n\n\t/**\n\t * Starts conversion of a range insertion.\n\t *\n\t * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\n\t * {@link #event:attribute attribute event is fired}.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\n\t */\n\tconvertInsert( range, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( range );\n\n\t\t// Fire a separate insert event for each node and text fragment contained in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range.createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange\n\t\t\t};\n\n\t\t\tthis._testAndFire( 'insert', data );\n\n\t\t\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\n\t\t\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\n\t\t\t// If we would not add this part, attributes on inserted nodes would not be converted.\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tdata.attributeKey = key;\n\t\t\t\tdata.attributeOldValue = null;\n\t\t\t\tdata.attributeNewValue = item.getAttribute( key );\n\n\t\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n\t *\n\t * @param {module:engine/model/position~Position} position Position from which node was removed.\n\t * @param {Number} length Offset size of removed node.\n\t * @param {String} name Name of removed node.\n\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\n\t */\n\tconvertRemove( position, length, name, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts conversion of attribute change on given `range`.\n\t *\n\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n\t *\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Changed range.\n\t * @param {String} key Key of the attribute that has changed.\n\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\n\t */\n\tconvertAttribute( range, key, oldValue, newValue, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list with attributes to consume.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\n\n\t\t// Create a separate attribute event for each node in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range.createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\tattributeNewValue: newValue\n\t\t\t};\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts model selection conversion.\n\t *\n\t * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\n\t *\n\t * @fires selection\n\t * @fires addMarker\n\t * @fires attribute\n\t * @param {module:engine/model/selection~Selection} selection Selection to convert.\n\t * @param {Array.<module:engine/model/markercollection~Marker>} markers Array of markers containing model markers.\n\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\n\t */\n\tconvertSelection( selection, markers, writer ) {\n\t\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\n\n\t\tthis.conversionApi.writer = writer;\n\t\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\n\n\t\tthis.fire( 'selection', { selection }, this.conversionApi );\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const marker of markersAtSelection ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\tmarkerName: marker.name,\n\t\t\t\tmarkerRange\n\t\t\t};\n\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\n\t\t\t\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\trange: selection.getFirstRange(),\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: selection.getAttribute( key )\n\t\t\t};\n\n\t\t\t// Do not fire event if the attribute has been consumed.\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\n\t\t\t\tthis.fire( 'attribute:' + data.attributeKey, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\n\t * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\n\t *\n\t * @fires addMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerAdd( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// In markers' case, event name == consumable name.\n\t\tconst eventName = 'addMarker:' + markerName;\n\n\t\t// When range is collapsed - fire single event with collapsed range in consumable.\n\t\tif ( markerRange.isCollapsed ) {\n\t\t\tconst consumable = new Consumable();\n\t\t\tconsumable.add( markerRange, eventName );\n\n\t\t\tthis.conversionApi.consumable = consumable;\n\n\t\t\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Create consumable for each item in range.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\n\n\t\t// Create separate event for each node in the range.\n\t\tfor ( const item of markerRange.getItems() ) {\n\t\t\t// Do not fire event for already consumed items.\n\t\t\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = { item, range: Range.createOn( item ), markerName, markerRange };\n\n\t\t\tthis.fire( eventName, data, this.conversionApi );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\n\t *\n\t * @fires removeMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerRemove( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\n\t * assuming that the range has just been inserted to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createInsertConsumable( range ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\n\t\t\tconsumable.add( item, 'insert' );\n\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tconsumable.add( item, 'attribute:' + key );\n\t\t\t}\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Affected range.\n\t * @param {String} type Consumable type.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createConsumableForRange( range, type ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tconsumable.add( item, type );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\n\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createSelectionConsumable( selection, markers ) {\n\t\tconst consumable = new Consumable();\n\n\t\tconsumable.add( selection, 'selection' );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tconsumable.add( selection, 'addMarker:' + marker.name );\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconsumable.add( selection, 'attribute:' + key );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {String} type Event type.\n\t * @param {Object} data Event data.\n\t */\n\t_testAndFire( type, data ) {\n\t\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\n\t\t\t// Do not fire event if the item was consumed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst name = data.item.name || '$text';\n\n\t\tthis.fire( type + ':' + name, data, this.conversionApi );\n\t}\n\n\t/**\n\t * Clears conversion API object.\n\t *\n\t * @private\n\t */\n\t_clearConversionApi() {\n\t\tdelete this.conversionApi.writer;\n\t\tdelete this.conversionApi.consumable;\n\t}\n\n\t/**\n\t * Fired for inserted nodes.\n\t *\n\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n\t * or {@link module:engine/model/element~Element#name name} of inserted element.\n\t *\n\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n\t *\n\t * @event insert\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item} data.item Inserted item.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for removed nodes.\n\t *\n\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n\t * or the {@link module:engine/model/element~Element#name name} of removed element.\n\t *\n\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n\t *\n\t * @event remove\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/position~Position} data.sourcePosition Position from where the range has been removed.\n\t * @param {module:engine/model/range~Range} data.range Removed range (in {@link module:engine/model/document~Document#graveyard\n\t * graveyard root}).\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when attribute has been added/changed/removed from a node. Also fired when collapsed model selection attribute is converted.\n\t *\n\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n\t *\n\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n\t *\n\t * @event attribute\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n\t * or converted selection.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n\t * @param {String} data.attributeKey Attribute key.\n\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n\t * @param {*} data.attributeNewValue New attribute value.\n\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\n\t *\n\t * @event selection\n\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\n\t *\n\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n\t * `addMarker:foo:bar` events.\n\t *\n\t * If the marker range is not collapsed:\n\t *\n\t * * the event is fired for each item in the marker range one by one,\n\t * * consumables object includes each item of the marker range and the consumable value is same as event name.\n\t *\n\t * If the marker range is collapsed:\n\t *\n\t * * there is only one event,\n\t * * consumables object includes marker range with event name.\n\t *\n\t * If selection inside a marker is converted:\n\t *\n\t * * there is only one event,\n\t * * consumables object includes selection instance with event name.\n\t *\n\t * @event addMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n\t * the selection that is being converted.\n\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n\t * the marker range was not collapsed.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when marker is removed from the model.\n\t *\n\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n\t * `removeMarker:foo:bar` events.\n\t *\n\t * @event removeMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n}\n\nmix( DowncastDispatcher, EmitterMixin );\n\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\n\tconst range = marker.getRange();\n\tconst ancestors = Array.from( modelPosition.getAncestors() );\n\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\tancestors.reverse();\n\n\tconst hasCustomHandling = ancestors.some( element => {\n\t\tif ( range.containsItem( element ) ) {\n\t\t\tconst viewElement = mapper.toViewElement( element );\n\n\t\t\treturn !!viewElement.getCustomProperty( 'addHighlight' );\n\t\t}\n\t} );\n\n\treturn !hasCustomHandling;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Element from './element';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * `Selection` is a group of {@link module:engine/model/range~Range ranges} which has a direction specified by\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}.\n * Additionally, `Selection` may have it's own attributes.\n *\n * @mixes {module:utils/emittermixin~EmitterMixin}\n */\nexport default class Selection {\n\t/**\n\t * Creates new selection instance on the given\n\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/element~Element element}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges}\n\t * or creates an empty selection if no arguments passed.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = new Selection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = new Range( start, end );\n\t *\t\tconst selection = new Selection( range, isBackwardSelection );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\n\t *\t\tconst selection = new Selection( ranges, isBackwardSelection );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = new Selection();\n\t *\t\tconst selection = new Selection( otherSelection );\n\t *\n\t * \t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tconst selection = new Selection( documentSelection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = new Position( root, path );\n\t *\t\tconst selection = new Selection( position );\n\t *\n\t * \t\t// Creates selection at the start position of given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = new Selection( paragraph, offset );\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/element~Element|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range} [selectable]\n\t * @param {Boolean|Number|'before'|'end'|'after'} [backwardSelectionOrOffset]\n\t */\n\tconstructor( selectable, backwardSelectionOrOffset ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, backwardSelectionOrOffset );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/model/selection~Selection} otherSelection Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield Range.createFromRange( range );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? Range.createFromRange( first ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? Range.createFromRange( last ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? Position.createFromPosition( first.start ) : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? Position.createFromPosition( lastRange.end ) : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/element~Element element}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\n\t *\n\t *\t\t// Sets ranges from the given range.\n\t *\t\tconst range = new Range( start, end );\n\t *\t\tselection.setTo( range, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the iterable of ranges.\n\t * \t\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = new Selection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t * \t\t// Sets ranges from the given document selection's ranges.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t * \t\t// Sets range at the given position.\n\t *\t\tconst position = new Position( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t * \t\t// Sets range at the position of given element and optional offset.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/element~Element|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Boolean|Number|'before'|'end'|'after'} [backwardSelectionOrOffset]\n\t */\n\tsetTo( selectable, backwardSelectionOrOffset ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && selectable._selection instanceof Selection ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], backwardSelectionOrOffset );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Element ) {\n\t\t\tthis._setRanges( [ Range.createCollapsedAt( selectable, backwardSelectionOrOffset ) ] );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, backwardSelectionOrOffset );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error model-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-selection-setTo-not-selectable: Cannot set selection to given place.' );\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\tthrow new CKEditorError( 'model-selection-added-not-range: Trying to add an object that is not an instance of Range.' );\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/model/position~Position.createAt} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.'\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position.createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedBlockContainer( value.item, visited ) ) {\n\t\t\t\t\tyield value.item;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position.createAt( endBlock ) ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position.createAt( element );\n\t\tconst limitEndPosition = Position.createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( Range.createFromRange( range ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range from selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * @event change\n\t */\n\n\t/**\n\t * Fired whenever selection ranges are changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange Specifies whether the range change was caused by direct usage of `Selection` API (`true`)\n\t * or by changes done to {@link module:engine/model/document~Document model document}\n\t * using {@link module:engine/model/batch~Batch Batch} API (`false`).\n\t */\n\n\t/**\n\t * Fired whenever selection attributes are changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange Specifies whether the attributes changed by direct usage of the Selection API (`true`)\n\t * or by changes done to the {@link module:engine/model/document~Document model document}\n\t * using the {@link module:engine/model/batch~Batch Batch} API (`false`).\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlockContainer( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\tconst block = ancestors.find( element => isUnvisitedBlockContainer( element, visited ) );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/liverange\n */\n\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends Range {\n\t/**\n\t * Creates a live range.\n\t *\n\t * @see module:engine/model/range~Range\n\t */\n\tconstructor( start, end ) {\n\t\tsuper( start, end );\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * @see module:engine/model/range~Range.createIn\n\t * @static\n\t * @method module:engine/model/liverange~LiveRange.createIn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range.createFromPositionAndShift\n\t * @static\n\t * @method module:engine/model/liverange~LiveRange.createFromPositionAndShift\n\t * @param {module:engine/model/position~Position} position\n\t * @param {Number} shift\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range.createFromParentsAndOffsets\n\t * @static\n\t * @method module:engine/model/liverange~LiveRange.createFromParentsAndOffsets\n\t * @param {module:engine/model/element~Element} startElement\n\t * @param {Number} startOffset\n\t * @param {module:engine/model/element~Element} endElement\n\t * @param {Number} endOffset\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range.createFromRange\n\t * @static\n\t * @method module:engine/model/liverange~LiveRange.createFromRange\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have changed due to changes in the\n\t * {@link module:engine/model/document~Document document}.\n\t *\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange Range with start and end position equal to start and end position of this live\n\t * range before it got changed.\n\t * @param {Object} data Object with additional information about the change. Those parameters are passed from\n\t * {@link module:engine/model/document~Document#event:change document change event}.\n\t * @param {String} data.type Change type.\n\t * @param {module:engine/model/batch~Batch} data.batch Batch which changed the live range.\n\t * @param {module:engine/model/range~Range} data.range Range containing the result of applied change.\n\t * @param {module:engine/model/position~Position} data.sourcePosition Source position for move, remove and reinsert change types.\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have not changed after a change in {@link module:engine/model/document~Document document}\n\t * but the change took place inside the range, effectively changing its content.\n\t *\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} range Range with start and end position equal to start and end position of\n\t * change range.\n\t * @param {Object} data Object with additional information about the change. Those parameters are passed from\n\t * {@link module:engine/model/document~Document#event:change document change event}.\n\t * @param {String} data.type Change type.\n\t * @param {module:engine/model/batch~Batch} data.batch Batch which changed the live range.\n\t * @param {module:engine/model/range~Range} data.range Range containing the result of applied change.\n\t * @param {module:engine/model/position~Position} data.sourcePosition Source position for move, remove and reinsert change types.\n\t */\n}\n\n/**\n * Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n * that owns this range's {@link module:engine/model/range~Range#root root}.\n *\n * @ignore\n * @private\n * @method module:engine/model/liverange~LiveRange#bindWithDocument\n */\nfunction bindWithDocument() {\n\t// Operation types that a range can be transformed by.\n\tconst supportedTypes = new Set( [ 'insert', 'move', 'remove', 'reinsert' ] );\n\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( supportedTypes.has( operation.type ) ) {\n\t\t\t\ttransform.call( this, operation );\n\t\t\t}\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n/**\n * Updates this range accordingly to the updates applied to the model. Bases on change events.\n *\n * @ignore\n * @private\n * @method transform\n * @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n */\nfunction transform( operation ) {\n\tconst changeType = operation.type;\n\tconst batch = operation.delta.batch;\n\n\tlet targetRange;\n\tlet sourcePosition;\n\n\tif ( changeType == 'insert' ) {\n\t\ttargetRange = Range.createFromPositionAndShift( operation.position, operation.nodes.maxOffset );\n\t} else {\n\t\ttargetRange = Range.createFromPositionAndShift( operation.getMovedRangeStart(), operation.howMany );\n\t\tsourcePosition = operation.sourcePosition;\n\t}\n\n\tconst howMany = targetRange.end.offset - targetRange.start.offset;\n\tlet targetPosition = targetRange.start;\n\n\tif ( changeType == 'move' || changeType == 'remove' || changeType == 'reinsert' ) {\n\t\t// Range._getTransformedByDocumentChange is expecting `targetPosition` to be \"before\" move\n\t\t// (before transformation). `targetRange.start` is already after the move happened.\n\t\t// We have to revert `targetPosition` to the state before the move.\n\t\ttargetPosition = targetPosition._getTransformedByInsertion( sourcePosition, howMany );\n\t}\n\n\tconst result = this._getTransformedByDocumentChange( changeType, operation.delta.type, targetPosition, howMany, sourcePosition );\n\n\t// Decide whether moved part should be included in the range.\n\t//\n\t// First, this concerns only `move` change, because insert change includes inserted part always (changeType == 'move').\n\t// Second, this is a case only if moved range was intersecting with this range and was inserted into this range (result.length == 3).\n\tif ( ( changeType == 'move' || changeType == 'remove' || changeType == 'reinsert' ) && result.length == 3 ) {\n\t\t// `result[ 2 ]` is a \"common part\" of this range and moved range. We substitute that common part with the whole\n\t\t// `targetRange` because we want to include whole `targetRange` in this range.\n\t\tresult[ 2 ] = targetRange;\n\t}\n\n\tconst updated = Range.createFromRanges( result );\n\n\tconst boundariesChanged = !updated.isEqual( this );\n\n\tconst rangeExpanded = this.containsPosition( targetPosition );\n\tconst rangeShrunk = sourcePosition && ( this.containsPosition( sourcePosition ) || this.start.isEqual( sourcePosition ) );\n\tconst contentChanged = rangeExpanded || rangeShrunk;\n\n\tif ( boundariesChanged ) {\n\t\t// If range boundaries have changed, fire `change:range` event.\n\t\tconst oldRange = Range.createFromRange( this );\n\n\t\tthis.start = updated.start;\n\t\tthis.end = updated.end;\n\n\t\tthis.fire( 'change:range', oldRange, {\n\t\t\ttype: changeType,\n\t\t\tbatch,\n\t\t\trange: targetRange,\n\t\t\tsourcePosition\n\t\t} );\n\t} else if ( contentChanged ) {\n\t\t// If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n\t\tthis.fire( 'change:content', Range.createFromRange( this ), {\n\t\t\ttype: changeType,\n\t\t\tbatch,\n\t\t\trange: targetRange,\n\t\t\tsourcePosition\n\t\t} );\n\t}\n}\n\nmix( LiveRange, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/documentselection\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nimport Selection from './selection';\nimport Position from './position';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nconst attrOpTypes = new Set(\n\t[ 'addAttribute', 'removeAttribute', 'changeAttribute', 'addRootAttribute', 'removeRootAttribute', 'changeRootAttribute' ]\n);\n\nconst storePrefix = 'selection:';\n\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * All selection modifiers should be used from the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\n\t */\n\tconstructor( doc ) {\n\t\t/**\n\t\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._selection = new LiveSelection( doc );\n\n\t\tthis._selection.delegate( 'change:range' ).to( this );\n\t\tthis._selection.delegate( 'change:attribute' ).to( this );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget hasOwnRange() {\n\t\treturn this._selection.hasOwnRange;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t *\n\t * @readonly\n\t * @return {Boolean}\n\t */\n\tget isGravityOverridden() {\n\t\treturn this._selection.isGravityOverridden;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\tgetRanges() {\n\t\treturn this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterator.<module:engine/model/element~Element>}\n\t */\n\tgetSelectedBlocks() {\n\t\treturn this._selection.getSelectedBlocks();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element ) {\n\t\treturn this._selection.containsEntireContent( element );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by document selection.\n\t */\n\tdestroy() {\n\t\tthis._selection.destroy();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._selection.getAttributeKeys();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._selection.getAttributes();\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._selection.getAttribute( key );\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._selection.hasAttribute( key );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/model/position~Position.createAt} parameters.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionFocus\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/element~Element element}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelection\n\t * @protected\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/element~Element|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Boolean|Number|'before'|'end'|'after'} [backwardSelectionOrOffset]\n\t */\n\t_setTo( selectable, backwardSelectionOrOffset ) {\n\t\tthis._selection.setTo( selectable, backwardSelectionOrOffset );\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._selection.setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change}\n\t * event with removed attribute key.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._selection.removeAttribute( key );\n\t}\n\n\t/**\n\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t *\n\t * @protected\n\t * @returns {Iterable.<*>}\n\t */\n\t_getStoredAttributes() {\n\t\treturn this._selection._getStoredAttributes();\n\t}\n\n\t/**\n\t * Temporarily changes the gravity of the selection from left to right. The gravity defines from which direction\n\t * the selection inherits its attributes. If it's the default left gravity, the selection (after being moved by\n\t * the user) inherits attributes from its left hand side. This method allows to temporarily override this behavior\n\t * by forcing the gravity to the right.\n\t *\n\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\n\t * @protected\n\t * @param {Boolean} [customRestore=false] When `true` then gravity won't be restored until\n\t * {@link ~DocumentSelection#_restoreGravity} will be called directly. When `false` then gravity is restored\n\t * after selection is moved by user.\n\t */\n\t_overrideGravity( customRestore ) {\n\t\tthis._selection.overrideGravity( customRestore );\n\t}\n\n\t/**\n\t * Restores {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n\t *\n\t * Note that gravity remains overridden as long as won't be restored the same number of times as was overridden.\n\t *\n\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\n\t * @protected\n\t */\n\t_restoreGravity() {\n\t\tthis._selection.restoreGravity();\n\t}\n\n\t/**\n\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key to convert.\n\t * @returns {String} Converted attribute key, applicable for selection store.\n\t */\n\tstatic _getStoreAttributeKey( key ) {\n\t\treturn storePrefix + key;\n\t}\n\n\t/**\n\t * Checks whether the given attribute key is an attribute stored on an element.\n\t *\n\t * @protected\n\t * @param {String} key\n\t * @returns {Boolean}\n\t */\n\tstatic _isStoreAttributeKey( key ) {\n\t\treturn key.startsWith( storePrefix );\n\t}\n}\n\nmix( DocumentSelection, EmitterMixin );\n\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nclass LiveSelection extends Selection {\n\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\n\tconstructor( doc ) {\n\t\tsuper();\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/model~Model}\n\t\tthis._model = doc.model;\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/document~Document}\n\t\tthis._document = doc;\n\n\t\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n\t\t// last time. Possible values of priority are: `'low'` and `'normal'`.\n\t\t//\n\t\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n\t\t// attributes API are set with `'normal'` priority.\n\t\t//\n\t\t// @private\n\t\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\t\tthis._attributePriority = new Map();\n\n\t\t// Contains data required to fix ranges which have been moved to the graveyard.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\n\t\tthis._fixGraveyardRangesData = [];\n\n\t\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\t\tthis._hasChangedRange = false;\n\n\t\t// Each overriding gravity increase the counter and each restoring decrease it.\n\t\t// Gravity is overridden when counter is greater than 0. This is to prevent conflicts when\n\t\t// gravity is overridden by more than one feature at the same time.\n\t\t// @private\n\t\t// @type {Number}\n\t\tthis._overriddenGravityCounter = 0;\n\n\t\t// Add events that will ensure selection correctness.\n\t\tthis.on( 'change:range', () => {\n\t\t\tfor ( const range of this.getRanges() ) {\n\t\t\t\tif ( !this._document._validateSelectionRange( range ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n\t\t\t\t\t * starts or ends at incorrect position.\n\t\t\t\t\t *\n\t\t\t\t\t * @error document-selection-wrong-position\n\t\t\t\t\t * @param {module:engine/model/range~Range} range\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'document-selection-wrong-position: Range from document selection starts or ends at incorrect position.',\n\t\t\t\t\t\t{ range }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis.listenTo( this._model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Whenever attribute operation is performed on document, update selection attributes.\n\t\t\t// This is not the most efficient way to update selection attributes, but should be okay for now.\n\t\t\tif ( attrOpTypes.has( operation.type ) ) {\n\t\t\t\tthis._updateAttributes( false );\n\t\t\t}\n\n\t\t\tconst batch = operation.delta.batch;\n\n\t\t\t// Batch may not be passed to the document#change event in some tests.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1001#issuecomment-314202352\n\t\t\tif ( batch ) {\n\t\t\t\t// Whenever element which had selection's attributes stored in it stops being empty,\n\t\t\t\t// the attributes need to be removed.\n\t\t\t\tclearAttributesStoredInElement( operation, this._model, batch );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this._model, 'applyOperation', () => {\n\t\t\twhile ( this._fixGraveyardRangesData.length ) {\n\t\t\t\tconst { liveRange, sourcePosition } = this._fixGraveyardRangesData.shift();\n\n\t\t\t\tthis._fixGraveyardSelection( liveRange, sourcePosition );\n\t\t\t}\n\n\t\t\tif ( this._hasChangedRange ) {\n\t\t\t\tthis._hasChangedRange = false;\n\n\t\t\t\tthis.fire( 'change:range', { directChange: false } );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n\t}\n\n\tget anchor() {\n\t\treturn super.anchor || this._document._getDefaultRange().start;\n\t}\n\n\tget focus() {\n\t\treturn super.focus || this._document._getDefaultRange().end;\n\t}\n\n\tget rangeCount() {\n\t\treturn this._ranges.length ? this._ranges.length : 1;\n\t}\n\n\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t//\n\t// @readonly\n\t// @type {Boolean}\n\tget hasOwnRange() {\n\t\treturn this._ranges.length > 0;\n\t}\n\n\t// When set to `true` then selection attributes on node before the caret won't be taken\n\t// into consideration while updating selection attributes.\n\t//\n\t// @protected\n\t// @type {Boolean}\n\tget isGravityOverridden() {\n\t\treturn this._overriddenGravityCounter > 0;\n\t}\n\n\t// Unbinds all events previously bound by live selection.\n\tdestroy() {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tthis._ranges[ i ].detach();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t* getRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tyield* super.getRanges();\n\t\t} else {\n\t\t\tyield this._document._getDefaultRange();\n\t\t}\n\t}\n\n\tgetFirstRange() {\n\t\treturn super.getFirstRange() || this._document._getDefaultRange();\n\t}\n\n\tgetLastRange() {\n\t\treturn super.getLastRange() || this._document._getDefaultRange();\n\t}\n\n\tsetTo( selectable, backwardSelectionOrOffset ) {\n\t\tsuper.setTo( selectable, backwardSelectionOrOffset );\n\t\tthis._refreshAttributes();\n\t}\n\n\tsetFocus( itemOrPosition, offset ) {\n\t\tsuper.setFocus( itemOrPosition, offset );\n\t\tthis._refreshAttributes();\n\t}\n\n\tsetAttribute( key, value ) {\n\t\tif ( this._setAttribute( key, value ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\tremoveAttribute( key ) {\n\t\tif ( this._removeAttribute( key ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\toverrideGravity( customRestore ) {\n\t\tthis._overriddenGravityCounter++;\n\n\t\tif ( this._overriddenGravityCounter == 1 ) {\n\t\t\tif ( !customRestore ) {\n\t\t\t\tthis.on( 'change:range', ( evt, data ) => {\n\t\t\t\t\tif ( data.directChange ) {\n\t\t\t\t\t\tthis.restoreGravity();\n\t\t\t\t\t\tevt.off();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis._updateAttributes();\n\t\t}\n\t}\n\n\trestoreGravity() {\n\t\tthis._overriddenGravityCounter--;\n\n\t\tif ( !this.isGravityOverridden ) {\n\t\t\tthis._updateAttributes();\n\t\t}\n\t}\n\n\t// Removes all attributes from the selection and sets attributes according to the surrounding nodes.\n\t_refreshAttributes() {\n\t\tthis._updateAttributes( true );\n\t}\n\n\t_popRange() {\n\t\tthis._ranges.pop().detach();\n\t}\n\n\t_pushRange( range ) {\n\t\tconst liveRange = this._prepareRange( range );\n\n\t\t// `undefined` is returned when given `range` is in graveyard root.\n\t\tif ( liveRange ) {\n\t\t\tthis._ranges.push( liveRange );\n\t\t}\n\t}\n\n\t// Prepares given range to be added to selection. Checks if it is correct,\n\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n\t// and sets listeners listening to the range's change event.\n\t//\n\t// @private\n\t// @param {module:engine/model/range~Range} range\n\t_prepareRange( range ) {\n\t\tthis._checkRange( range );\n\n\t\tif ( range.root == this._document.graveyard ) {\n\t\t\t/**\n\t\t\t * Trying to add a Range that is in the graveyard root. Range rejected.\n\t\t\t *\n\t\t\t * @warning model-selection-range-in-graveyard\n\t\t\t */\n\t\t\tlog.warn( 'model-selection-range-in-graveyard: Trying to add a Range that is in the graveyard root. Range rejected.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst liveRange = LiveRange.createFromRange( range );\n\n\t\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\n\t\t\tthis._hasChangedRange = true;\n\n\t\t\t// If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\n\t\t\tif ( liveRange.root == this._document.graveyard ) {\n\t\t\t\tthis._fixGraveyardRangesData.push( {\n\t\t\t\t\tliveRange,\n\t\t\t\t\tsourcePosition: data.sourcePosition\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn liveRange;\n\t}\n\n\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n\t//\n\t// @protected\n\t// @param {Boolean} clearAll\n\t// @fires change:attribute\n\t_updateAttributes( clearAll ) {\n\t\tconst newAttributes = toMap( this._getSurroundingAttributes() );\n\t\tconst oldAttributes = toMap( this.getAttributes() );\n\n\t\tif ( clearAll ) {\n\t\t\t// If `clearAll` remove all attributes and reset priorities.\n\t\t\tthis._attributePriority = new Map();\n\t\t\tthis._attrs = new Map();\n\t\t} else {\n\t\t\t// If not, remove only attributes added with `low` priority.\n\t\t\tfor ( const [ key, priority ] of this._attributePriority ) {\n\t\t\t\tif ( priority == 'low' ) {\n\t\t\t\t\tthis._attrs.delete( key );\n\t\t\t\t\tthis._attributePriority.delete( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setAttributesTo( newAttributes );\n\n\t\t// Let's evaluate which attributes really changed.\n\t\tconst changed = [];\n\n\t\t// First, loop through all attributes that are set on selection right now.\n\t\t// Check which of them are different than old attributes.\n\t\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\n\t\t\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\n\t\t\t\tchanged.push( newKey );\n\t\t\t}\n\t\t}\n\n\t\t// Then, check which of old attributes got removed.\n\t\tfor ( const [ oldKey ] of oldAttributes ) {\n\t\t\tif ( !this.hasAttribute( oldKey ) ) {\n\t\t\t\tchanged.push( oldKey );\n\t\t\t}\n\t\t}\n\n\t\t// Fire event with exact data (fire only if anything changed).\n\t\tif ( changed.length > 0 ) {\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\n\t\t}\n\t}\n\n\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {*} value Attribute value.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether value has changed.\n\t_setAttribute( key, value, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oldValue = super.getAttribute( key );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( oldValue === value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.set( key, value );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n\t// existing attribute had higher priority.\n\t_removeAttribute( key, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( !super.hasAttribute( key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.delete( key );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n\t// `directChange` parameter).\n\t//\n\t// @private\n\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n\t// @returns {Set.<String>} Changed attribute keys.\n\t_setAttributesTo( attrs ) {\n\t\tconst changed = new Set();\n\n\t\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\n\t\t\t// Do not remove attribute if attribute with same key and value is about to be set.\n\t\t\tif ( attrs.get( oldKey ) === oldValue ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// All rest attributes will be removed so changed attributes won't change .\n\t\t\tthis._removeAttribute( oldKey, false );\n\t\t}\n\n\t\tfor ( const [ key, value ] of attrs ) {\n\t\t\t// Attribute may not be set because of attributes or because same key/value is already added.\n\t\t\tconst gotAdded = this._setAttribute( key, value, false );\n\n\t\t\tif ( gotAdded ) {\n\t\t\t\tchanged.add( key );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t//\n\t// @protected\n\t// @returns {Iterable.<*>}\n\t* _getStoredAttributes() {\n\t\tconst selectionParent = this.getFirstPosition().parent;\n\n\t\tif ( this.isCollapsed && selectionParent.isEmpty ) {\n\t\t\tfor ( const key of selectionParent.getAttributeKeys() ) {\n\t\t\t\tif ( key.startsWith( storePrefix ) ) {\n\t\t\t\t\tconst realKey = key.substr( storePrefix.length );\n\n\t\t\t\t\tyield [ realKey, selectionParent.getAttribute( key ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\n\t// found element. If there are no text nodes in selection's first position parent, it returns selection\n\t// attributes stored in that parent.\n\t//\n\t// @private\n\t// @returns {Iterable.<*>} Collection of attributes.\n\t_getSurroundingAttributes() {\n\t\tconst position = this.getFirstPosition();\n\t\tconst schema = this._model.schema;\n\n\t\tlet attrs = null;\n\n\t\tif ( !this.isCollapsed ) {\n\t\t\t// 1. If selection is a range...\n\t\t\tconst range = this.getFirstRange();\n\n\t\t\t// ...look for a first character node in that range and take attributes from it.\n\t\t\tfor ( const value of range ) {\n\t\t\t\t// If the item is an object, we don't want to get attributes from its children.\n\t\t\t\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// This is not an optimal solution because of https://github.com/ckeditor/ckeditor5-engine/issues/454.\n\t\t\t\t// It can be done better by using `break;` instead of checking `attrs === null`.\n\t\t\t\tif ( value.type == 'text' && attrs === null ) {\n\t\t\t\t\tattrs = value.item.getAttributes();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 2. If the selection is a caret or the range does not contain a character node...\n\n\t\t\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n\t\t\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden ) {\n\t\t\t\t// ...look at the node before caret and take attributes from it if it is a character node.\n\t\t\t\tattrs = getAttrsIfCharacter( nodeBefore );\n\t\t\t}\n\n\t\t\t// 3. If not, look at the node after caret...\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = getAttrsIfCharacter( nodeAfter );\n\t\t\t}\n\n\t\t\t// 4. If not, try to find the first character on the left, that is in the same node.\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden && !attrs ) {\n\t\t\t\tlet node = nodeBefore;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.previousSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. If not found, try to find the first character on the right, that is in the same node.\n\t\t\tif ( !attrs ) {\n\t\t\t\tlet node = nodeAfter;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. If not found, selection should retrieve attributes from parent.\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = this._getStoredAttributes();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Fixes a selection range after it ends up in graveyard root.\n\t//\n\t// @private\n\t// @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\n\t// @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\n\t_fixGraveyardSelection( liveRange, removedRangeStart ) {\n\t\t// The start of the removed range is the closest position to the `liveRange` - the original selection range.\n\t\t// This is a good candidate for a fixed selection range.\n\t\tconst positionCandidate = Position.createFromPosition( removedRangeStart );\n\n\t\t// Find a range that is a correct selection range and is closest to the start of removed range.\n\t\tconst selectionRange = this._model.schema.getNearestSelectionRange( positionCandidate );\n\n\t\t// Remove the old selection range before preparing and adding new selection range. This order is important,\n\t\t// because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\n\t\tconst index = this._ranges.indexOf( liveRange );\n\t\tthis._ranges.splice( index, 1 );\n\t\tliveRange.detach();\n\n\t\t// If nearest valid selection range has been found - add it in the place of old range.\n\t\tif ( selectionRange ) {\n\t\t\t// Check the range, convert it to live range, bind events, etc.\n\t\t\tconst newRange = this._prepareRange( selectionRange );\n\n\t\t\t// Add new range in the place of old range.\n\t\t\tthis._ranges.splice( index, 0, newRange );\n\t\t}\n\t\t// If nearest valid selection range cannot be found - just removing the old range is fine.\n\t}\n}\n\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\nfunction getAttrsIfCharacter( node ) {\n\tif ( node instanceof TextProxy || node instanceof Text ) {\n\t\treturn node.getAttributes();\n\t}\n\n\treturn null;\n}\n\n// Removes selection attributes from element which is not empty anymore.\nfunction clearAttributesStoredInElement( operation, model, batch ) {\n\tlet changeParent = null;\n\n\tif ( operation.type == 'insert' ) {\n\t\tchangeParent = operation.position.parent;\n\t} else if ( operation.type == 'move' || operation.type == 'reinsert' || operation.type == 'remove' ) {\n\t\tchangeParent = operation.getMovedRangeStart().parent;\n\t}\n\n\tif ( !changeParent || changeParent.isEmpty ) {\n\t\treturn;\n\t}\n\n\tmodel.enqueueChange( batch, writer => {\n\t\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() ).filter( key => key.startsWith( storePrefix ) );\n\n\t\tfor ( const key of storedAttributes ) {\n\t\t\twriter.removeAttribute( key, changeParent );\n\t\t}\n\t} );\n}\n","import baseClone from './_baseClone';\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\nexport default cloneDeep;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelElement from '../model/element';\n\nimport ViewAttributeElement from '../view/attributeelement';\nimport ViewRange from '../view/range';\nimport DocumentSelection from '../model/documentselection';\n\nimport cloneDeep from '@ckeditor/ckeditor5-utils/src/lib/lodash/cloneDeep';\n\n/**\n * Contains downcast (model to view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcast-converters\n */\n\n/**\n * Model element to view element conversion helper.\n *\n * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n *\n *\t\tdowncastElementToElement( { model: 'paragraph', view: 'p' } );\n *\n *\t\tdowncastElementToElement( { model: 'paragraph', view: 'div', priority: 'high' } );\n *\n *\t\tdowncastElementToElement( {\n *\t\t\tmodel: 'fancyParagraph',\n *\t\t\tview: {\n *\t\t\t\tname: 'p',\n *\t\t\t\tclass: 'fancy'\n *\t\t\t}\n *\t\t} );\n *\n * \t\tdowncastElementToElement( {\n * \t\t\tmodel: 'heading',\n * \t\t\tview: ( modelElement, viewWriter ) => viewWriter.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) )\n * \t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String} config.model Name of the model element to convert.\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view View element definition or a function\n * that takes model element and view writer as a parameters and returns a view container element.\n * @returns {Function} Conversion helper.\n */\nexport function downcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = _normalizeToElementConfig( config.view, 'container' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'insert:' + config.model, insertElement( config.view ), { priority: config.priority || 'normal' } );\n\t};\n}\n\n/**\n * Model attribute to view element conversion helper.\n *\n * This conversion results in wrapping view nodes in a view attribute element. For example, model text node with data\n * `\"Foo\"` and `bold` attribute becomes `<strong>Foo</strong>` in the view.\n *\n *\t\tdowncastAttributeToElement( { model: 'bold', view: 'strong' } );\n *\n *\t\tdowncastAttributeToElement( { model: 'bold', view: 'b', priority: 'high' } );\n *\n *\t\tdowncastAttributeToElement( {\n *\t\t\tmodel: 'invert',\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tclass: [ 'font-light', 'bg-dark' ]\n *\t\t\t}\n *\t\t} );\n *\n *\t\tdowncastAttributeToElement( {\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'fontSize',\n *\t\t\t\tvalues: [ 'big', 'small' ]\n *\t\t\t},\n *\t\t\tview: {\n *\t\t\t\tbig: {\n *\t\t\t\t\tname: 'span',\n *\t\t\t\t\tstyle: {\n *\t\t\t\t\t\t'font-size': '1.2em'\n *\t\t\t\t\t}\n *\t\t\t\t},\n *\t\t\t\tsmall: {\n *\t\t\t\t\tname: 'span',\n *\t\t\t\t\tstyle: {\n *\t\t\t\t\t\t'font-size': '0.8em'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * \t\tdowncastAttributeToElement( {\n * \t\t\tmodel: 'bold',\n * \t\t\tview: ( modelAttributeValue, viewWriter ) => {\n * \t\t\t\treturn viewWriter.createAttributeElement( 'span', { style: 'font-weight:' + modelAttributeValue } );\n * \t\t\t}\n * \t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String|Object} config.model Key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n * of `String`s with possible values if the model attribute is enumerable.\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view View element definition or a function\n * that takes model attribute value and view writer as parameters and returns a view attribute element. If `config.model.values` is\n * given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastAttributeToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = _normalizeToElementConfig( config.view[ modelValue ], 'attribute' );\n\t\t}\n\t} else {\n\t\tconfig.view = _normalizeToElementConfig( config.view, 'attribute' );\n\t}\n\n\tconst elementCreator = _getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'attribute:' + modelKey, wrap( elementCreator ), { priority: config.priority || 'normal' } );\n\t};\n}\n\n/**\n * Model attribute to view attribute conversion helper.\n *\n * This conversion results in adding an attribute on a view node, basing on an attribute from a model node. For example,\n * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\n *\n *\t\tdowncastAttributeToAttribute( { model: 'source', view: 'src' } );\n *\n *\t\tdowncastAttributeToAttribute( { model: 'source', view: 'href', priority: 'high' } );\n *\n *\t\tdowncastAttributeToAttribute( {\n *\t\t\tmodel: {\n *\t\t\t\tname: 'image',\n *\t\t\t\tkey: 'source'\n *\t\t\t},\n *\t\t\tview: 'src'\n *\t\t} );\n *\n *\t\tdowncastAttributeToAttribute( {\n *\t\t\tmodel: {\n *\t\t\t\tname: 'styled',\n *\t\t\t\tvalues: [ 'dark', 'light' ]\n *\t\t\t},\n *\t\t\tview: {\n *\t\t\t\tdark: {\n *\t\t\t\t\tkey: 'class',\n *\t\t\t\t\tvalue: [ 'styled', 'styled-dark' ]\n *\t\t\t\t},\n *\t\t\t\tlight: {\n *\t\t\t\t\tkey: 'class',\n *\t\t\t\t\tvalue: [ 'styled', 'styled-light' ]\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\tdowncastAttributeToAttribute( {\n *\t\t\tmodel: 'styled',\n *\t\t\tview: modelAttributeValue => ( { key: 'class', value: 'styled-' + modelAttributeValue } )\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String|Object} config.model Key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n * the attribute key, possible values and, optionally, an element name to convert from.\n * @param {String|Object|Function} config.view View attribute key, or a `{ key, value }` object or a function that takes\n * model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n * `{ key, value }` objects or a functions.\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = _normalizeToAttributeConfig( config.view[ modelValue ] );\n\t\t}\n\t} else {\n\t\tconfig.view = _normalizeToAttributeConfig( config.view );\n\t}\n\n\tconst elementCreator = _getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, changeAttribute( elementCreator ), { priority: config.priority || 'normal' } );\n\t};\n}\n\n/**\n * Model marker to view element conversion helper.\n *\n * This conversion results in creating a view element on the boundaries of the converted marker. If converted marker\n * is collapsed, only one element is created. For example, model marker set like this `<paragraph>F[oo b]ar</paragraph>`\n * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n *\n *\t\tdowncastMarkerToElement( { model: 'search', view: 'marker-search' } );\n *\n *\t\tdowncastMarkerToElement( { model: 'search', view: 'search-result', priority: 'high' } );\n *\n *\t\tdowncastMarkerToElement( {\n *\t\t\tmodel: 'search',\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tattribute: {\n *\t\t\t\t\t'data-marker': 'search'\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * \t\tdowncastMarkerToElement( {\n * \t\t\tmodel: 'search',\n * \t\t\tview: ( markerData, viewWriter ) => {\n *\t \t\t\treturn viewWriter.createUIElement( 'span', { 'data-marker': 'search', 'data-start': markerData.isOpening } );\n * \t\t\t}\n * \t\t} );\n *\n * If function is passed as `config.view` parameter, it will be used to generate both boundary elements. The function\n * receives `data` object as parameter and should return an instance of {@link module:engine/view/uielement~UIElement view.UIElement}.\n * The `data` and `conversionApi` objects are passed from\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n * `data.isOpening` parameter is passed, which is set to `true` for marker start boundary element, and `false` to\n * marker end boundary element.\n *\n * This kind of conversion is useful for saving data into data base, so it should be used in data conversion pipeline.\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String} config.model Name of the model marker (or model marker group) to convert.\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view View element definition or a function\n * that takes model marker data as a parameter and returns view ui element.\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastMarkerToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = _normalizeToElementConfig( config.view, 'ui' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, insertUIElement( config.view ), { priority: config.priority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeUIElement( config.view ), { priority: config.priority || 'normal' } );\n\t};\n}\n\n/**\n * Model marker to highlight conversion helper.\n *\n * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n * {@link module:engine/conversion/downcast-converters~HighlightDescriptor} should be provided.\n *\n * For text nodes, a `span` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n * in the converted marker range. For example, model marker set like this `<paragraph>F[oo b]ar</paragraph>` becomes\n * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n *\n * {@link module:engine/view/containerelement~ContainerElement} may provide custom way of handling highlight. Most often,\n * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `span`).\n * For example, model marker set like this `[<image src=\"foo.jpg\"></image>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>`\n * in the view.\n *\n * For container elements, the conversion is two-step. While the converter processes highlight descriptor and passes it\n * to a container element, it is the container element instance itself which applies values from highlight descriptor.\n * So, in a sense, converter takes care of stating what should be applied on what, while element decides how to apply that.\n *\n *\t\tdowncastMarkerToHighlight( { model: 'comment', view: { class: 'comment' } } );\n *\n *\t\tdowncastMarkerToHighlight( { model: 'comment', view: { class: 'new-comment' }, priority: 'high' } );\n *\n * \t\tdowncastMarkerToHighlight( {\n * \t\t\tmodel: 'comment',\n * \t\t\tview: data => {\n * \t\t\t\t// Assuming that marker name is in a form of comment:commentType.\n *\t \t\t\tconst commentType = data.markerName.split( ':' )[ 1 ];\n *\n *\t \t\t\treturn {\n *\t \t\t\t\tclass: [ 'comment', 'comment-' + commentType ]\n *\t \t\t\t};\n * \t\t\t}\n * \t\t} );\n *\n * If function is passed as `config.view` parameter, it will be used to generate highlight descriptor. The function\n * receives `data` object as parameter and should return a {@link module:engine/conversion/downcast-converters~HighlightDescriptor}.\n * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String} config.model Name of the model marker (or model marker group) to convert.\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} config.view Highlight descriptor\n * which will be used for highlighting or a function that takes model marker data as a parameter and returns a highlight descriptor.\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastMarkerToHighlight( config ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightText( config.view ), { priority: config.priority || 'normal' } );\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightElement( config.view ), { priority: config.priority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeHighlight( config.view ), { priority: config.priority || 'normal' } );\n\t};\n}\n\n// Takes `config.view`, and if it is a {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n// to a function (because lower level converters accepts only element creator functions).\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\n// @returns {Function} Element creator function to use in lower level converters.\nfunction _normalizeToElementConfig( view, viewElementType ) {\n\tif ( typeof view == 'function' ) {\n\t\t// If `view` is already a function, don't do anything.\n\t\treturn view;\n\t}\n\n\treturn ( modelData, viewWriter ) => _createViewElementFromDefinition( view, viewWriter, viewElementType );\n}\n\n// Creates view element instance from provided viewElementDefinition and class.\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\n// @param {module:engine/view/writer~Writer} viewWriter\n// @param {'container'|'attribute'|'ui'} viewElementType\n// @returns {module:engine/view/element~Element}\nfunction _createViewElementFromDefinition( viewElementDefinition, viewWriter, viewElementType ) {\n\tif ( typeof viewElementDefinition == 'string' ) {\n\t\t// If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n\t\tviewElementDefinition = { name: viewElementDefinition };\n\t}\n\n\tlet element;\n\n\tif ( viewElementType == 'container' ) {\n\t\telement = viewWriter.createContainerElement( viewElementDefinition.name, Object.assign( {}, viewElementDefinition.attribute ) );\n\t} else if ( viewElementType == 'attribute' ) {\n\t\telement = viewWriter.createAttributeElement( viewElementDefinition.name, Object.assign( {}, viewElementDefinition.attribute ) );\n\t} else {\n\t\t// 'ui'.\n\t\telement = viewWriter.createUIElement( viewElementDefinition.name, Object.assign( {}, viewElementDefinition.attribute ) );\n\t}\n\n\tif ( viewElementDefinition.style ) {\n\t\tconst keys = Object.keys( viewElementDefinition.style );\n\n\t\tfor ( const key of keys ) {\n\t\t\tviewWriter.setStyle( key, viewElementDefinition.style[ key ], element );\n\t\t}\n\t}\n\n\tif ( viewElementDefinition.class ) {\n\t\tconst classes = viewElementDefinition.class;\n\n\t\tif ( typeof classes == 'string' ) {\n\t\t\tviewWriter.addClass( classes, element );\n\t\t} else {\n\t\t\tfor ( const className of classes ) {\n\t\t\t\tviewWriter.addClass( className, element );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction _getFromAttributeCreator( config ) {\n\tif ( config.model.values ) {\n\t\treturn ( modelAttributeValue, viewWriter ) => {\n\t\t\tconst view = config.view[ modelAttributeValue ];\n\n\t\t\tif ( view ) {\n\t\t\t\treturn view( modelAttributeValue, viewWriter );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t} else {\n\t\treturn config.view;\n\t}\n}\n\n// Takes config and adds default parameters if they don't exist and normalizes other parameters to be used in downcast converters\n// for generating view attribute.\n//\n// @param {Object} view View configuration.\nfunction _normalizeToAttributeConfig( view ) {\n\tif ( typeof view == 'string' ) {\n\t\treturn modelAttributeValue => ( { key: view, value: modelAttributeValue } );\n\t} else if ( typeof view == 'object' ) {\n\t\treturn () => view;\n\t} else {\n\t\t// function.\n\t\treturn view;\n\t}\n}\n\n/**\n * Function factory, creates a converter that converts node insertion changes from the model to the view.\n * Passed function will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert event}.\n * It's expected that the function returns a {@link module:engine/view/element~Element}.\n * The result of the function will be inserted to the view.\n *\n * The converter automatically consumes corresponding value from consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and bind model and view elements.\n *\n *\t\tdowncastDispatcher.on(\n *\t\t\t'insert:myElem',\n *\t\t\tinsertElement( ( modelItem, viewWriter ) => {\n *\t\t\t\tconst text = viewWriter.createText( 'myText' );\n *\t\t\t\tconst myElem = viewWriter.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n *\t\t\t\t// Do something fancy with myElem using `modelItem` or other parameters.\n *\n *\t\t\t\treturn myElem;\n *\t\t\t}\n *\t\t) );\n *\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewElement = elementCreator( data.item, conversionApi.writer );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n\t\tconversionApi.writer.insert( viewPosition, viewElement );\n\t};\n}\n\n/**\n * Function factory, creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes corresponding value from consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'insert:$text', insertText() );\n *\n * @returns {Function} Insert text event converter.\n */\nexport function insertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\t\tconst viewText = viewWriter.createText( data.item.data );\n\n\t\tviewWriter.insert( viewPosition, viewText );\n\t};\n}\n\n/**\n * Function factory, creates a default downcast converter for node remove changes.\n *\n *\t\tmodelDispatcher.on( 'remove', remove() );\n *\n * @returns {Function} Remove event converter.\n */\nexport function remove() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Find view range start position by mapping model position at which the remove happened.\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = conversionApi.mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\tconst viewRange = new ViewRange( viewStart, viewEnd );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst removed = conversionApi.writer.remove( viewRange.getTrimmed() );\n\n\t\t// After the range is removed, unbind all view elements from the model.\n\t\t// Range inside view document fragment is used to unbind deeply.\n\t\tfor ( const child of ViewRange.createIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts marker adding change to the view ui element.\n * The view ui element that will be added to the view depends on passed parameter. See {@link ~insertElement}.\n * In a case of collapsed range element will not wrap range but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * **Note:** unlike {@link ~insertElement}, the converter does not bind view element to model, because this converter\n * uses marker as \"model source of data\". This means that view ui element does not have corresponding model element.\n *\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator View ui element, or function returning a view element, which\n * will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertUIElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Create two view elements. One will be inserted at the beginning of marker, one at the end.\n\t\t// If marker is collapsed, only \"opening\" element will be inserted.\n\t\tdata.isOpening = true;\n\t\tconst viewStartElement = elementCreator( data, conversionApi.writer );\n\n\t\tdata.isOpening = false;\n\t\tconst viewEndElement = elementCreator( data, conversionApi.writer );\n\n\t\tif ( !viewStartElement || !viewEndElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\n\t\t// Marker that is collapsed has consumable build differently that non-collapsed one.\n\t\t// For more information see `addMarker` event description.\n\t\t// If marker's range is collapsed - check if it can be consumed.\n\t\tif ( markerRange.isCollapsed && !conversionApi.consumable.consume( markerRange, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If marker's range is not collapsed - consume all items inside.\n\t\tfor ( const value of markerRange ) {\n\t\t\tif ( !conversionApi.consumable.consume( value.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst mapper = conversionApi.mapper;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// Add \"opening\" element.\n\t\tviewWriter.insert( mapper.toViewPosition( markerRange.start ), viewStartElement );\n\n\t\t// Add \"closing\" element only if range is not collapsed.\n\t\tif ( !markerRange.isCollapsed ) {\n\t\t\tviewWriter.insert( mapper.toViewPosition( markerRange.end ), viewEndElement );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * Function factory, creates a default downcast converter for removing {@link module:engine/view/uielement~UIElement ui element}\n * basing on marker remove change.\n *\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator View ui element, or function returning\n * a view ui element, which will be used as a pattern when look for element to remove at the marker start position.\n * @returns {Function} Remove ui element converter.\n */\nexport function removeUIElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Create two view elements. One will be used to remove \"opening element\", the other for \"closing element\".\n\t\t// If marker was collapsed, only \"opening\" element will be removed.\n\t\tdata.isOpening = true;\n\t\tconst viewStartElement = elementCreator( data, conversionApi.writer );\n\n\t\tdata.isOpening = false;\n\t\tconst viewEndElement = elementCreator( data, conversionApi.writer );\n\n\t\tif ( !viewStartElement || !viewEndElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// When removing the ui elements, we map the model range to view twice, because that view range\n\t\t// may change after the first clearing.\n\t\tif ( !markerRange.isCollapsed ) {\n\t\t\tviewWriter.clear( conversionApi.mapper.toViewRange( markerRange ).getEnlarged(), viewEndElement );\n\t\t}\n\n\t\t// Remove \"opening\" element.\n\t\tviewWriter.clear( conversionApi.mapper.toViewRange( markerRange ).getEnlarged(), viewStartElement );\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts set/change/remove attribute changes from the model to the view.\n *\n * Attributes from model are converted to the view element attributes in the view. You may provide a custom function to generate\n * a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view elements\n * attributes on 1-to-1 basis.\n *\n * **Note:** Provided attribute creator should always return the same `key` for given attribute from the model.\n *\n * The converter automatically consumes corresponding value from consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n *\t\t\t// Change attribute key from `customAttr` to `class` in view.\n *\t\t\tconst key = 'class';\n *\t\t\tlet value = data.attributeNewValue;\n *\n *\t\t\t// Force attribute value to 'empty' if the model element is empty.\n *\t\t\tif ( data.item.childCount === 0 ) {\n *\t\t\t\tvalue = 'empty';\n *\t\t\t}\n *\n *\t\t\t// Return key-value pair.\n *\t\t\treturn { key, value };\n *\t\t} ) );\n *\n * @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\n * represents attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n * The function is passed model attribute value as first parameter and additional data about the change as a second parameter.\n * @returns {Function} Set/change attribute converter.\n */\nexport function changeAttribute( attributeCreator ) {\n\tattributeCreator = attributeCreator || ( ( value, data ) => ( { value, key: data.attributeKey } ) );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// First remove the old attribute if there was one.\n\t\tconst oldAttribute = attributeCreator( data.attributeOldValue, data );\n\n\t\tif ( data.attributeOldValue !== null && oldAttribute ) {\n\t\t\tif ( oldAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( oldAttribute.value ) ? oldAttribute.value : [ oldAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.removeClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( oldAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( oldAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.removeStyle( key, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.removeAttribute( oldAttribute.key, viewElement );\n\t\t\t}\n\t\t}\n\n\t\t// Then, if conversion was successful, set the new attribute.\n\t\tconst newAttribute = attributeCreator( data.attributeNewValue, data );\n\n\t\tif ( data.attributeNewValue !== null && newAttribute ) {\n\t\t\tif ( newAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( newAttribute.value ) ? newAttribute.value : [ newAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.addClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( newAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( newAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.setStyle( key, newAttribute.value[ key ], viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.setAttribute( newAttribute.key, newAttribute.value, viewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts set/change/remove attribute changes from the model to the view.\n * Also can be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from model are converted to a view element that will be wrapping those view nodes that are bound to\n * model elements having given attribute. This is useful for attributes like `bold`, which may be set on text nodes in model\n * but are represented as an element in the view:\n *\n *\t\t[paragraph]              MODEL ====> VIEW        <p>\n *\t\t\t|- a {bold: true}                             |- <b>\n *\t\t\t|- b {bold: true}                             |   |- ab\n *\t\t\t|- c                                          |- c\n *\n * Passed `Function` will be provided with attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute event}.\n * It's expected that the function returns a {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When provided `Function` does not return element, then will be no conversion.\n *\n * The converter automatically consumes corresponding value from consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:bold', wrapItem( ( modelAttributeValue, viewWriter ) => {\n *\t\t\treturn viewWriter.createAttributeElement( 'strong' );\n *\t\t} );\n *\n * @param {Function} elementCreator Function returning a view element, which will be used for wrapping.\n * @returns {Function} Set/change attribute converter.\n */\nexport function wrap( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n\t\t// or the attribute was removed.\n\t\tconst oldViewElement = elementCreator( data.attributeOldValue, conversionApi.writer );\n\n\t\t// Create node to wrap with.\n\t\tconst newViewElement = elementCreator( data.attributeNewValue, conversionApi.writer );\n\n\t\tif ( !oldViewElement && !newViewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\t// Selection attribute conversion.\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), newViewElement );\n\t\t} else {\n\t\t\t// Node attribute conversion.\n\t\t\tlet viewRange = conversionApi.mapper.toViewRange( data.range );\n\n\t\t\t// First, unwrap the range from current wrapper.\n\t\t\tif ( data.attributeOldValue !== null && oldViewElement ) {\n\t\t\t\tviewRange = viewWriter.unwrap( viewRange, oldViewElement );\n\t\t\t}\n\n\t\t\tif ( data.attributeNewValue !== null && newViewElement ) {\n\t\t\t\tviewWriter.wrap( viewRange, newViewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates converter that converts text inside marker's range. Converter wraps the text with\n * {@link module:engine/view/attributeelement~AttributeElement} created from provided descriptor.\n * See {link module:engine/conversion/downcast-converters~createViewElementFromHighlightDescriptor}.\n *\n * Also can be used to convert selection that is inside a marker. In that case, an empty attribute element will be\n * created and the selection will be put inside it.\n *\n * If the highlight descriptor will not provide `priority` property, `10` will be used.\n *\n * If the highlight descriptor will not provide `id` property, name of the marker will be used.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\n * @return {Function}\n */\nexport function highlightText( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) && !data.item.is( 'textProxy' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = createViewElementFromHighlightDescriptor( descriptor );\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement, viewSelection );\n\t\t} else {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( data.range );\n\t\t\tviewWriter.wrap( viewRange, viewElement );\n\t\t}\n\t};\n}\n\n/**\n * Converter function factory. Creates a function which applies the marker's highlight to an element inside the marker's range.\n *\n * The converter checks if an element has `addHighlight` function stored as\n * {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n * In such case converter will consume all element's children, assuming that they were handled by element itself.\n *\n * When `addHighlight` custom property is not present, element is not converted in any special way.\n * This means that converters will proceed to convert element's child nodes.\n *\n * If the highlight descriptor will not provide `priority` property, `10` will be used.\n *\n * If the highlight descriptor will not provide `id` property, name of the marker will be used.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\n * @return {Function}\n */\nexport function highlightElement( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\tif ( viewElement && viewElement.getCustomProperty( 'addHighlight' ) ) {\n\t\t\t// Consume element itself.\n\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\n\t\t\t// Consume all children nodes.\n\t\t\tfor ( const value of ModelRange.createIn( data.item ) ) {\n\t\t\t\tconversionApi.consumable.consume( value.item, evt.name );\n\t\t\t}\n\n\t\t\tviewElement.getCustomProperty( 'addHighlight' )( viewElement, descriptor, conversionApi.writer );\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts model marker remove to the view.\n *\n * Both text nodes and elements are handled by this converter by they are handled a bit differently.\n *\n * Text nodes are unwrapped using {@link module:engine/view/attributeelement~AttributeElement} created from provided\n * highlight descriptor. See {link module:engine/conversion/downcast-converters~highlightDescriptorToAttributeElement}.\n *\n * For elements, the converter checks if an element has `removeHighlight` function stored as\n * {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n * In such case, children of that element will not be converted.\n *\n * When `removeHighlight` is not present, element is not converted in any special way.\n * Instead converter will proceed to convert element's child nodes.\n *\n * If the highlight descriptor will not provide `priority` property, `10` will be used.\n *\n * If the highlight descriptor will not provide `id` property, name of the marker will be used.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\n * @return {Function}\n */\nexport function removeHighlight( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This conversion makes sense only for non-collapsed range.\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewRange = conversionApi.mapper.toViewRange( data.markerRange );\n\n\t\t// Retrieve all items in the affected range. We will process them and remove highlight from them appropriately.\n\t\tconst items = new Set( viewRange.getItems() );\n\n\t\t// First, iterate through all items and remove highlight from those container elements that have custom highlight handling.\n\t\tfor ( const item of items ) {\n\t\t\tif ( item.is( 'containerElement' ) && item.getCustomProperty( 'removeHighlight' ) ) {\n\t\t\t\titem.getCustomProperty( 'removeHighlight' )( item, descriptor.id, conversionApi.writer );\n\n\t\t\t\t// If container element had custom handling, remove all it's children from further processing.\n\t\t\t\tfor ( const descendant of ViewRange.createIn( item ) ) {\n\t\t\t\t\titems.delete( descendant );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Then, iterate through all other items. Look for text nodes and unwrap them. Start from the end\n\t\t// to prevent errors when view structure changes when unwrapping (and, for example, some attributes are merged).\n\t\tconst viewHighlightElement = createViewElementFromHighlightDescriptor( descriptor );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tfor ( const item of Array.from( items ).reverse() ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\tviewWriter.unwrap( ViewRange.createOn( item ), viewHighlightElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\nfunction _prepareDescriptor( highlightDescriptor, data, conversionApi ) {\n\t// If passed descriptor is a creator function, call it. If not, just use passed value.\n\tconst descriptor = typeof highlightDescriptor == 'function' ?\n\t\thighlightDescriptor( data, conversionApi ) :\n\t\thighlightDescriptor;\n\n\tif ( !descriptor ) {\n\t\treturn null;\n\t}\n\n\t// Apply default descriptor priority.\n\tif ( !descriptor.priority ) {\n\t\tdescriptor.priority = 10;\n\t}\n\n\t// Default descriptor id is marker name.\n\tif ( !descriptor.id ) {\n\t\tdescriptor.id = data.markerName;\n\t}\n\n\treturn descriptor;\n}\n\n/**\n * Creates `span` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from information\n * provided by {@link module:engine/conversion/downcast-converters~HighlightDescriptor} object. If priority\n * is not provided in descriptor - default priority will be used.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\n * @return {module:engine/conversion/downcast-converters~HighlightAttributeElement}\n */\nexport function createViewElementFromHighlightDescriptor( descriptor ) {\n\tconst viewElement = new HighlightAttributeElement( 'span', descriptor.attributes );\n\n\tif ( descriptor.class ) {\n\t\tviewElement._addClass( descriptor.class );\n\t}\n\n\tif ( descriptor.priority ) {\n\t\tviewElement._priority = descriptor.priority;\n\t}\n\n\tviewElement._setCustomProperty( 'highlightDescriptorId', descriptor.id );\n\n\treturn viewElement;\n}\n\n/**\n * Special kind of {@link module:engine/view/attributeelement~AttributeElement} that is created and used in\n * marker-to-highlight conversion.\n *\n * The difference between `HighlightAttributeElement` and {@link module:engine/view/attributeelement~AttributeElement}\n * is {@link module:engine/view/attributeelement~AttributeElement#isSimilar} method.\n *\n * For `HighlightAttributeElement` it checks just `highlightDescriptorId` custom property, that is set during marker-to-highlight\n * conversion basing on {@link module:engine/conversion/downcast-converters~HighlightDescriptor} object.\n * `HighlightAttributeElement`s with same `highlightDescriptorId` property are considered similar.\n */\nclass HighlightAttributeElement extends ViewAttributeElement {\n\tisSimilar( otherElement ) {\n\t\tif ( otherElement.is( 'attributeElement' ) ) {\n\t\t\treturn this.getCustomProperty( 'highlightDescriptorId' ) === otherElement.getCustomProperty( 'highlightDescriptorId' );\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * Object describing how the marker highlight should be represented in the view.\n *\n * Each text node contained in a highlighted range will be wrapped in a `span` {@link module:engine/view/attributeelement~AttributeElement}\n * with CSS class(es), attributes and priority described by this object.\n *\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement} can handle displaying the highlight separately\n * by providing `addHighlight` and `removeHighlight` custom properties. In this case:\n *\n *  * `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\n *  the element,\n *  * descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight of given\n *  id from the element.\n *\n * @typedef {Object} module:engine/conversion/downcast-converters~HighlightDescriptor\n *\n * @property {String|Array.<String>} class CSS class or array of classes to set. If descriptor is used to\n * create {@link module:engine/view/attributeelement~AttributeElement} over text nodes, those classes will be set\n * on that {@link module:engine/view/attributeelement~AttributeElement}. If descriptor is applied to an element,\n * usually those class will be set on that element, however this depends on how the element converts the descriptor.\n *\n * @property {String} [id] Descriptor identifier. If not provided, defaults to converted marker's name.\n *\n * @property {Number} [priority] Descriptor priority. If not provided, defaults to `10`. If descriptor is used to create\n * {@link module:engine/view/attributeelement~AttributeElement}, it will be that element's\n * {@link module:engine/view/attributeelement~AttributeElement#priority}. If descriptor is applied to an element,\n * the priority will be used to determine which descriptor is more important.\n *\n * @property {Object} [attributes] Attributes to set. If descriptor is used to create\n * {@link module:engine/view/attributeelement~AttributeElement} over text nodes, those attributes will be set on that\n * {@link module:engine/view/attributeelement~AttributeElement}. If descriptor is applied to an element, usually those\n * attributes will be set on that element, however this depends on how the element converts the descriptor.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\n\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport ViewWriter from '../view/writer';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport {\n\tinsertText,\n\tremove\n} from '../conversion/downcast-converters';\nimport { convertSelectionChange } from '../conversion/upcast-selection-converters';\nimport {\n\tconvertRangeSelection,\n\tconvertCollapsedSelection,\n\tclearAttributes,\n\tclearFakeSelection\n} from '../conversion/downcast-selection-converters';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view document} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController {\n\t/**\n\t * Creates an editing controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Editing model.\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * Editing model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Editing view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = new View();\n\n\t\t/**\n\t\t * Mapper which describes the model-view binding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\n\t\tconst doc = this.model.document;\n\t\tconst selection = doc.selection;\n\t\tconst markers = this.model.markers;\n\n\t\tthis.listenTo( doc, 'change', () => {\n\t\t\tthis.view.change( writer => {\n\t\t\t\tthis.downcastDispatcher.convertChanges( doc.differ, writer );\n\t\t\t\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\t// Convert selection from view to model.\n\t\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\n\n\t\t// Attach default model converters.\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\n\n\t\t// Attach default model selection converters.\n\t\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', clearFakeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\n\n\t\t// Convert markers removal.\n\t\t//\n\t\t// Markers should be removed from the view before changes to the model are applied. This is because otherwise\n\t\t// it would be impossible to map some markers to the view (if, for example, the marker's boundary parent got removed).\n\t\t//\n\t\t// `removedMarkers` keeps information which markers already has been removed to prevent removing them twice.\n\t\tconst removedMarkers = new Set();\n\n\t\t// We don't want to render view when markers are converted, so we need to create view writer\n\t\t// manually instead of using `View#change` block. See https://github.com/ckeditor/ckeditor5-engine/issues/1323.\n\t\tconst viewWriter = new ViewWriter( this.view.document );\n\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\t// Before operation is applied...\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tfor ( const marker of model.markers ) {\n\t\t\t\t// Check all markers, that aren't already removed...\n\t\t\t\tif ( removedMarkers.has( marker.name ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst markerRange = marker.getRange();\n\n\t\t\t\tif ( _operationAffectsMarker( operation, marker ) ) {\n\t\t\t\t\t// And if the operation in any way modifies the marker, remove the marker from the view.\n\t\t\t\t\tremovedMarkers.add( marker.name );\n\t\t\t\t\tthis.downcastDispatcher.convertMarkerRemove( marker.name, markerRange, viewWriter );\n\t\t\t\t\t// TODO: This stinks but this is the safest place to have this code.\n\t\t\t\t\tthis.model.document.differ.bufferMarkerChange( marker.name, markerRange, markerRange );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// If an existing marker is updated through `model.Model#markers` directly (not through operation), just remove it.\n\t\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange ) => {\n\t\t\tif ( oldRange && !removedMarkers.has( marker.name ) ) {\n\t\t\t\tremovedMarkers.add( marker.name );\n\t\t\t\tthis.downcastDispatcher.convertMarkerRemove( marker.name, oldRange, viewWriter );\n\t\t\t}\n\t\t} );\n\n\t\t// When all changes are done, clear `removedMarkers` set.\n\t\tthis.listenTo( model, '_change', () => {\n\t\t\tremovedMarkers.clear();\n\t\t}, { priority: 'low' } );\n\n\t\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\n\t\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\n\t\t// model root automatically creates corresponding view root.\n\t\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\n\t\t\t// $graveyard is a special root that has no reflection in the view.\n\t\t\tif ( root.rootName == '$graveyard' ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewRoot = new RootEditableElement( root.name );\n\n\t\t\tviewRoot.rootName = root.rootName;\n\t\t\tviewRoot._document = this.view.document;\n\t\t\tthis.mapper.bindElements( root, viewRoot );\n\n\t\t\treturn viewRoot;\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n\t * by `EditingController` that need to be destroyed.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t\tthis.stopListening();\n\t}\n}\n\nmix( EditingController, ObservableMixin );\n\n// Helper function which checks whether given operation will affect given marker after the operation is applied.\nfunction _operationAffectsMarker( operation, marker ) {\n\tconst range = marker.getRange();\n\n\tif ( operation.type == 'insert' || operation.type == 'rename' ) {\n\t\treturn _positionAffectsRange( operation.position, range );\n\t} else if ( operation.type == 'move' || operation.type == 'remove' || operation.type == 'reinsert' ) {\n\t\treturn _positionAffectsRange( operation.targetPosition, range ) || _positionAffectsRange( operation.sourcePosition, range );\n\t} else if ( operation.type == 'marker' && operation.name == marker.name ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Helper function which checks whether change at given position affects given range.\nfunction _positionAffectsRange( position, range ) {\n\treturn range.containsPosition( position ) || !range.start._getTransformedByInsertion( position, 1, true ).isEqual( range.start );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Contains {@link module:engine/view/selection~Selection view selection}\n * to {@link module:engine/model/selection~Selection model selection} conversion helpers.\n *\n * @module engine/conversion/upcast-selection-converters\n */\n\nimport ModelSelection from '../model/selection';\n\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection view selection} taken\n * from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n *\t\tview.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n *\n * @param {module:engine/model/model~Model} model Data model.\n * @param {module:engine/conversion/mapper~Mapper} mapper Conversion mapper.\n * @returns {Function} {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\nexport function convertSelectionChange( model, mapper ) {\n\treturn ( evt, data ) => {\n\t\tconst viewSelection = data.newSelection;\n\t\tconst modelSelection = new ModelSelection();\n\n\t\tconst ranges = [];\n\n\t\tfor ( const viewRange of viewSelection.getRanges() ) {\n\t\t\tranges.push( mapper.toModelRange( viewRange ) );\n\t\t}\n\n\t\tmodelSelection.setTo( ranges, viewSelection.isBackward );\n\n\t\tif ( !modelSelection.isEqual( model.document.selection ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( modelSelection );\n\t\t\t} );\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Contains {@link module:engine/model/selection~Selection model selection} to\n * {@link module:engine/view/selection~Selection view selection} converters for\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcast-selection-converters\n */\n\n/**\n * Function factory, creates a converter that converts non-collapsed {@link module:engine/model/selection~Selection model selection} to\n * {@link module:engine/view/selection~Selection view selection}. The converter consumes appropriate value from `consumable` object\n * and maps model positions from selection to view positions.\n *\n *\t\tmodelDispatcher.on( 'selection', convertRangeSelection() );\n *\n * @returns {Function} Selection converter.\n */\nexport function convertRangeSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( range );\n\t\t\tviewRanges.push( viewRange );\n\t\t}\n\n\t\tconversionApi.writer.setSelection( viewRanges, selection.isBackward );\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts collapsed {@link module:engine/model/selection~Selection model selection} to\n * {@link module:engine/view/selection~Selection view selection}. The converter consumes appropriate value from `consumable` object,\n * maps model selection position to view position and breaks {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n * at the selection position.\n *\n *\t\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\n *\n * Example of view state before and after converting collapsed selection:\n *\n *\t\t   <p><strong>f^oo<strong>bar</p>\n *\t\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n *\n * By breaking attribute elements like `<strong>`, selection is in correct element. Then, when selection attribute is\n * converted, the broken attributes might be merged again, or the position where the selection is may be wrapped\n * in different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcast-selection-converters~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns {Function} Selection converter.\n */\nexport function convertCollapsedSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelPosition = selection.getFirstPosition();\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\n\t\tconst brokenPosition = viewWriter.breakAttributes( viewPosition );\n\n\t\tviewWriter.setSelection( brokenPosition );\n\t};\n}\n\n/**\n * Function factory, creates a converter that clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merge sibling attributes at all start and end\n * positions of all ranges.\n *\n *\t\t   <p><strong>^</strong></p>\n *\t\t-> <p>^</p>\n *\n *\t\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n *\t\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n * This listener should be assigned before any converter for the new selection:\n *\n *\t\tmodelDispatcher.on( 'selection', clearAttributes() );\n *\n * See {@link module:engine/conversion/downcast-selection-converters~convertCollapsedSelection}\n * which do the opposite by breaking attributes in the selection position.\n *\n * @returns {Function} Selection converter.\n */\nexport function clearAttributes() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t// Not collapsed selection should not have artifacts.\n\t\t\tif ( range.isCollapsed ) {\n\t\t\t\t// Position might be in the node removed by the view writer.\n\t\t\t\tif ( range.end.parent.document ) {\n\t\t\t\t\tconversionApi.writer.mergeAttributes( range.start );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tviewWriter.setSelection( null );\n\t};\n}\n\n/**\n * Function factory, creates a converter that clears fake selection marking after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion.\n */\nexport function clearFakeSelection() {\n\treturn ( evt, data, conversionApi ) => conversionApi.writer.setFakeSelection( false );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/plugincollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n */\nexport default class PluginCollection {\n\t/**\n\t * Creates an instance of the PluginCollection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#load} is used with plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t */\n\tconstructor( editor, availablePlugins = [] ) {\n\t\t/**\n\t\t * @protected\n\t\t * @member {module:core/editor/editor~Editor} module:core/plugin~PluginCollection#_editor\n\t\t */\n\t\tthis._editor = editor;\n\n\t\t/**\n\t\t * Map of plugin constructors which can be retrieved by their names.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String|Function,Function>} module:core/plugin~PluginCollection#_availablePlugins\n\t\t */\n\t\tthis._availablePlugins = new Map();\n\n\t\t/**\n\t\t * @protected\n\t\t * @member {Map} module:core/plugin~PluginCollection#_plugins\n\t\t */\n\t\tthis._plugins = new Map();\n\n\t\tfor ( const PluginConstructor of availablePlugins ) {\n\t\t\tthis._availablePlugins.set( PluginConstructor, PluginConstructor );\n\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tfor ( const entry of this._plugins ) {\n\t\t\tif ( typeof entry[ 0 ] == 'function' ) {\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {module:core/plugin~PluginInterface}\n\t */\n\tget( key ) {\n\t\treturn this._plugins.get( key );\n\t}\n\n\t/**\n\t * Loads a set of plugins and adds them to the collection.\n\t *\n\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) work only if\n\t * `availablePlugins` were passed to the {@link #constructor}.\n\t * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\n\t * which should not be loaded (despite being specified in the `plugins` array).\n\t * @returns {Promise} A promise which gets resolved once all plugins are loaded and available into the\n\t * collection.\n\t * @returns {Promise.<Array.<module:core/plugin~PluginInterface>>} returns.loadedPlugins The array of loaded plugins.\n\t */\n\tload( plugins, removePlugins = [] ) {\n\t\tconst that = this;\n\t\tconst editor = this._editor;\n\t\tconst loading = new Set();\n\t\tconst loaded = [];\n\n\t\tconst pluginConstructors = mapToAvailableConstructors( plugins );\n\t\tconst removePluginConstructors = mapToAvailableConstructors( removePlugins );\n\t\tconst missingPlugins = getMissingPluginNames( plugins );\n\n\t\tif ( missingPlugins ) {\n\t\t\t// TODO update this error docs with links to docs because it will be a frequent problem.\n\n\t\t\t/**\n\t\t\t * Some plugins are not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done by the builder by setting the {@link module:core/editor/editor~Editor.build}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}** it means\n\t\t\t * that you try to enable a plugin which was not included into that build. This may a be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not part of this build. In the latter scenario,\n\t\t\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through reference (as a constructor function). Check out the examples in\n\t\t\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.';\n\n\t\t\t// Log the error so it's more visible on the console. Hopefully, for better DX.\n\t\t\tlog.error( errorMsg, { plugins: missingPlugins } );\n\n\t\t\treturn Promise.reject( new CKEditorError( errorMsg, { plugins: missingPlugins } ) );\n\t\t}\n\n\t\treturn Promise.all( pluginConstructors.map( loadPlugin ) )\n\t\t\t.then( () => loaded );\n\n\t\tfunction loadPlugin( PluginConstructor ) {\n\t\t\tif ( removePluginConstructors.includes( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The plugin is already loaded or being loaded - do nothing.\n\t\t\tif ( that.get( PluginConstructor ) || loading.has( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn instantiatePlugin( PluginConstructor )\n\t\t\t\t.catch( err => {\n\t\t\t\t\t/**\n\t\t\t\t\t * It was not possible to load the plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * This is a generic error logged to the console when a JavaSript error is thrown during one of\n\t\t\t\t\t * the plugins initialization.\n\t\t\t\t\t *\n\t\t\t\t\t * If you correctly handled a promise returned by the editor's `create()` method (like shown below)\n\t\t\t\t\t * you will find the original error logged on the console too:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tClassicEditor.create( document.getElementById( 'editor' ) )\n\t\t\t\t\t *\t\t\t.then( editor => {\n\t\t\t\t\t *\t\t\t\t// ...\n\t\t\t\t\t * \t\t\t} )\n\t\t\t\t\t *\t\t\t.catch( error => {\n\t\t\t\t\t *\t\t\t\tconsole.error( error );\n\t\t\t\t\t *\t\t\t} );\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-load\n\t\t\t\t\t * @param {String} plugin The name of the plugin that could not be loaded.\n\t\t\t\t\t */\n\t\t\t\t\tlog.error( 'plugincollection-load: It was not possible to load the plugin.', { plugin: PluginConstructor } );\n\n\t\t\t\t\tthrow err;\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction instantiatePlugin( PluginConstructor ) {\n\t\t\treturn new Promise( resolve => {\n\t\t\t\tloading.add( PluginConstructor );\n\n\t\t\t\tif ( PluginConstructor.requires ) {\n\t\t\t\t\tPluginConstructor.requires.forEach( RequiredPluginConstructorOrName => {\n\t\t\t\t\t\tconst RequiredPluginConstructor = getPluginConstructor( RequiredPluginConstructorOrName );\n\n\t\t\t\t\t\tif ( removePlugins.includes( RequiredPluginConstructor ) ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @error plugincollection-required\n\t\t\t\t\t\t\t * @param {Function} plugin The required plugin.\n\t\t\t\t\t\t\t * @param {Function} requiredBy The parent plugin.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' +\n\t\t\t\t\t\t\t\t'the `removePlugins` option.',\n\t\t\t\t\t\t\t\t{ plugin: RequiredPluginConstructor, requiredBy: PluginConstructor }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadPlugin( RequiredPluginConstructor );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tconst plugin = new PluginConstructor( editor );\n\t\t\t\tthat._add( PluginConstructor, plugin );\n\t\t\t\tloaded.push( plugin );\n\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginConstructor( PluginConstructorOrName ) {\n\t\t\tif ( typeof PluginConstructorOrName == 'function' ) {\n\t\t\t\treturn PluginConstructorOrName;\n\t\t\t}\n\n\t\t\treturn that._availablePlugins.get( PluginConstructorOrName );\n\t\t}\n\n\t\tfunction getMissingPluginNames( plugins ) {\n\t\t\tconst missingPlugins = [];\n\n\t\t\tfor ( const pluginNameOrConstructor of plugins ) {\n\t\t\t\tif ( !getPluginConstructor( pluginNameOrConstructor ) ) {\n\t\t\t\t\tmissingPlugins.push( pluginNameOrConstructor );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn missingPlugins.length ? missingPlugins : null;\n\t\t}\n\n\t\tfunction mapToAvailableConstructors( plugins ) {\n\t\t\treturn plugins\n\t\t\t\t.map( pluginNameOrConstructor => getPluginConstructor( pluginNameOrConstructor ) )\n\t\t\t\t.filter( PluginConstructor => !!PluginConstructor );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all loaded plugins.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tconst promises = Array.from( this )\n\t\t\t.map( ( [ , pluginInstance ] ) => pluginInstance )\n\t\t\t.filter( pluginInstance => typeof pluginInstance.destroy == 'function' )\n\t\t\t.map( pluginInstance => pluginInstance.destroy() );\n\n\t\treturn Promise.all( promises );\n\t}\n\n\t/**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @protected\n\t * @param {Function} PluginConstructor The plugin constructor.\n\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n\t */\n\t_add( PluginConstructor, plugin ) {\n\t\tthis._plugins.set( PluginConstructor, plugin );\n\n\t\tconst pluginName = PluginConstructor.pluginName;\n\n\t\tif ( !pluginName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._plugins.has( pluginName ) ) {\n\t\t\t/**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n\t\t\t * This may lead to runtime conflicts between these plugins. This usually means that incorrect\n\t\t\t * params were passed to {@link module:core/editor/editor~Editor.create}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param {String} pluginName The duplicated plugin name.\n\t\t\t * @param {Function} plugin1 The first plugin constructor.\n\t\t\t * @param {Function} plugin2 The second plugin constructor.\n\t\t\t */\n\t\t\tlog.warn(\n\t\t\t\t'plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.',\n\t\t\t\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\n\t\t\t);\n\t\t} else {\n\t\t\tthis._plugins.set( pluginName, plugin );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/commandcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n\t/**\n\t * Creates collection instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Command map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._commands = new Map();\n\t}\n\n\t/**\n\t * Registers a new command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {module:core/command~Command} command\n\t */\n\tadd( commandName, command ) {\n\t\tthis._commands.set( commandName, command );\n\t}\n\n\t/**\n\t * Retrieves a command from the collection.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @returns {module:core/command~Command}\n\t */\n\tget( commandName ) {\n\t\treturn this._commands.get( commandName );\n\t}\n\n\t/**\n\t * Executes a command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t */\n\texecute( commandName, ...args ) {\n\t\tconst command = this.get( commandName );\n\n\t\tif ( !command ) {\n\t\t\t/**\n\t\t\t * Command does not exist.\n\t\t\t *\n\t\t\t * @error commandcollection-command-not-found\n\t\t\t * @param {String} commandName Name of the command.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'commandcollection-command-not-found: Command does not exist.', { commandName } );\n\t\t}\n\n\t\tcommand.execute( ...args );\n\t}\n\n\t/**\n\t * Returns iterator of command names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tyield* this._commands.keys();\n\t}\n\n\t/**\n\t * Returns iterator of command instances.\n\t *\n\t * @returns {Iterable.<module:core/command~Command>}\n\t */\n\t* commands() {\n\t\tyield* this._commands.values();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ commandName, commandInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._commands[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Destroys all collection commands.\n\t */\n\tdestroy() {\n\t\tfor ( const command of this.commands() ) {\n\t\t\tcommand.destroy();\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\nlet dictionaries = {};\n\n/**\n * Adds package translations to existing ones.\n * These translations will later be available for {@link module:utils/translation-service~translate translate}.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * That function is accessible globally via `window.CKEDITOR_TRANSLATIONS.add()`. So it's possible to add translation from\n * the other script, just after that one.\n *\n * \t\t<script src=\"./path/to/ckeditor.js\"></script>\n * \t\t<script src=\"./path/to/translations/en.js\"></script>\n *\n * @param {String} lang Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\nexport function add( lang, translations ) {\n\tdictionaries[ lang ] = dictionaries[ lang ] || {};\n\n\tObject.assign( dictionaries[ lang ], translations );\n}\n\n/**\n * Translates string if the translation of the string was previously {@link module:utils/translation-service~add added}\n * to the dictionary. This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} lang Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\nexport function translate( lang, translationKey ) {\n\tconst numberOfLanguages = getNumberOfLanguages();\n\n\tif ( numberOfLanguages === 1 ) {\n\t\t// Override the language to the only supported one.\n\t\t// This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n\t\tlang = Object.keys( dictionaries )[ 0 ];\n\t}\n\n\tif ( numberOfLanguages === 0 || !hasTranslation( lang, translationKey ) ) {\n\t\treturn translationKey.replace( / \\[context: [^\\]]+\\]$/, '' );\n\t}\n\n\t// In case of missing translations we still need to cut off the `[context: ]` parts.\n\treturn dictionaries[ lang ][ translationKey ].replace( / \\[context: [^\\]]+\\]$/, '' );\n}\n\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation( lang, translationKey ) {\n\treturn (\n\t\t( lang in dictionaries ) &&\n\t\t( translationKey in dictionaries[ lang ] )\n\t);\n}\n\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n\tdictionaries = {};\n}\n\nfunction getNumberOfLanguages() {\n\treturn Object.keys( dictionaries ).length;\n}\n\n// Export globally add function to enable adding later translations.\n// See https://github.com/ckeditor/ckeditor5/issues/624\nwindow.CKEDITOR_TRANSLATIONS = window.CKEDITOR_TRANSLATIONS || {};\nwindow.CKEDITOR_TRANSLATIONS.add = add;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/locale\n */\n\nimport { translate } from './translation-service';\n\n/**\n * Represents the localization services.\n */\nexport default class Locale {\n\t/**\n\t * Creates a new instance of the Locale class.\n\t *\n\t * @param {String} [language='en'] The language code in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t */\n\tconstructor( language ) {\n\t\t/**\n\t\t * The language code in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.language = language || 'en';\n\n\t\t/**\n\t\t * Translates the given string to the {@link #language}. This method is also available in {@link module:core/editor/editor~Editor#t}\n\t\t * and {@link module:ui/view~View#t}.\n\t\t *\n\t\t * The strings may contain placeholders (`%<index>`) for values which are passed as the second argument.\n\t\t * `<index>` is the index in the `values` array.\n\t\t *\n\t\t *\t\teditor.t( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n\t\t *\n\t\t * This method's context is statically bound to Locale instance,\n\t\t * so it can be called as a function:\n\t\t *\n\t\t *\t\tconst t = this.t;\n\t\t *\t\tt( 'Label' );\n\t\t *\n\t\t * @method #t\n\t\t * @param {String} str The string to translate.\n\t\t * @param {String[]} values Values that should be used to interpolate the string.\n\t\t */\n\t\tthis.t = ( ...args ) => this._t( ...args );\n\t}\n\n\t/**\n\t * Base for the {@link #t} method.\n\t *\n\t * @private\n\t */\n\t_t( str, values ) {\n\t\tlet translatedString = translate( this.language, str );\n\n\t\tif ( values ) {\n\t\t\ttranslatedString = translatedString.replace( /%(\\d+)/g, ( match, index ) => {\n\t\t\t\treturn ( index < values.length ) ? values[ index ] : match;\n\t\t\t} );\n\t\t}\n\n\t\treturn translatedString;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/viewconsumable\n */\n\nimport isArray from '@ckeditor/ckeditor5-utils/src/lib/lodash/isArray';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n *\t\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n *\t\tviewConsumable.add( textNode ); // Adds text node for consumption.\n *\t\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\n *\t\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n *\t\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\n *\t\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n *\t\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\n *\t\tviewConsumable.consume( textNode ); // Consume text node.\n *\t\tviewConsumable.consume( docFragment ); // Consume document fragment.\n *\t\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n *\t\tviewConsumable.revert( textNode ); // Revert already consumed text node.\n *\t\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n */\nexport default class ViewConsumable {\n\t/**\n\t * Creates new ViewConsumable.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n\t\t * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n\t\t * For {@link module:engine/view/text~Text text nodes} and\n\t\t * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\n\t\t*/\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\n\t *\n\t *\t\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\n\t *\t\tviewConsumable.add( p, { attribute: 'name' } ); // Adds element's attribute.\n\t *\t\tviewConsumable.add( p, { class: 'foobar' } ); // Adds element's class.\n\t *\t\tviewConsumable.add( p, { style: 'color' } ); // Adds element's style\n\t *\t\tviewConsumable.add( p, { attribute: 'name', style: 'color' } ); // Adds attribute and style.\n\t *\t\tviewConsumable.add( p, { class: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\n\t *\t\tviewConsumable.add( textNode ); // Adds text node to consume.\n\t *\t\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing actual style/class.\n\t *\n\t *\t\tviewConsumable.add( p, { attribute: 'style' } ); // This call will throw an exception.\n\t *\t\tviewConsumable.add( p, { style: 'color' } ); // This is properly handled style.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\n\t */\n\tadd( element, consumables ) {\n\t\tlet elementConsumables;\n\n\t\t// For text nodes and document fragments just mark them as consumable.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\tthis._consumables.set( element, true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// For elements create new ViewElementConsumables or update already existing one.\n\t\tif ( !this._consumables.has( element ) ) {\n\t\t\telementConsumables = new ViewElementConsumables();\n\t\t\tthis._consumables.set( element, elementConsumables );\n\t\t} else {\n\t\t\telementConsumables = this._consumables.get( element );\n\t\t}\n\n\t\telementConsumables.add( consumables );\n\t}\n\n\t/**\n\t * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n\t * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n\t * first already consumed item is found and `null` when first non-consumable item is found.\n\t *\n\t *\t\tviewConsumable.test( p, { name: true } ); // Tests element's name.\n\t *\t\tviewConsumable.test( p, { attribute: 'name' } ); // Tests attribute.\n\t *\t\tviewConsumable.test( p, { class: 'foobar' } ); // Tests class.\n\t *\t\tviewConsumable.test( p, { style: 'color' } ); // Tests style.\n\t *\t\tviewConsumable.test( p, { attribute: 'name', style: 'color' } ); // Tests attribute and style.\n\t *\t\tviewConsumable.test( p, { class: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n\t *\t\tviewConsumable.test( textNode ); // Tests text node.\n\t *\t\tviewConsumable.test( docFragment ); // Tests document fragment.\n\t *\n\t * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.test( p, { attribute: 'class' } ); // Tests if all added classes can be consumed.\n\t *\t\tviewConsumable.test( p, { attribute: 'style' } ); // Tests if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\n\t * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\n\t * when first already consumed item is found and `null` when first non-consumable item is found.\n\t */\n\ttest( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// For text nodes and document fragments return stored boolean value.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\treturn elementConsumables;\n\t\t}\n\n\t\t// For elements test consumables object.\n\t\treturn elementConsumables.test( consumables );\n\t}\n\n\t/**\n\t * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n\t *\n\t *\t\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\n\t *\t\tviewConsumable.consume( p, { attribute: 'name' } ); // Consumes element's attribute.\n\t *\t\tviewConsumable.consume( p, { class: 'foobar' } ); // Consumes element's class.\n\t *\t\tviewConsumable.consume( p, { style: 'color' } ); // Consumes element's style.\n\t *\t\tviewConsumable.consume( p, { attribute: 'name', style: 'color' } ); // Consumes attribute and style.\n\t *\t\tviewConsumable.consume( p, { class: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n\t *\t\tviewConsumable.consume( textNode ); // Consumes text node.\n\t *\t\tviewConsumable.consume( docFragment ); // Consumes document fragment.\n\t *\n\t * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.consume( p, { attribute: 'class' } ); // Consume only if all added classes can be consumed.\n\t *\t\tviewConsumable.consume( p, { attribute: 'style' } ); // Consume only if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\n\t * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\n\t * otherwise returns `false`.\n\t */\n\tconsume( element, consumables ) {\n\t\tif ( this.test( element, consumables ) ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments set value to false.\n\t\t\t\tthis._consumables.set( element, false );\n\t\t\t} else {\n\t\t\t\t// For elements - consume consumables object.\n\t\t\t\tthis._consumables.get( element ).consume( consumables );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n\t * Method does not revert items that were never previously added for consumption, even if they are included in\n\t * method's call.\n\t *\n\t *\t\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\n\t *\t\tviewConsumable.revert( p, { attribute: 'name' } ); // Reverts element's attribute.\n\t *\t\tviewConsumable.revert( p, { class: 'foobar' } ); // Reverts element's class.\n\t *\t\tviewConsumable.revert( p, { style: 'color' } ); // Reverts element's style.\n\t *\t\tviewConsumable.revert( p, { attribute: 'name', style: 'color' } ); // Reverts attribute and style.\n\t *\t\tviewConsumable.revert( p, { class: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n\t *\t\tviewConsumable.revert( textNode ); // Reverts text node.\n\t *\t\tviewConsumable.revert( docFragment ); // Reverts document fragment.\n\t *\n\t * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n\t * consumption.\n\t *\n\t *\t\tviewConsumable.revert( p, { attribute: 'class' } ); // Reverts all classes added for consumption.\n\t *\t\tviewConsumable.revert( p, { attribute: 'style' } ); // Reverts all styles added for consumption.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\n\t */\n\trevert( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables !== undefined ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments - set consumable to true.\n\t\t\t\tthis._consumables.set( element, true );\n\t\t\t} else {\n\t\t\t\t// For elements - revert items from consumables object.\n\t\t\t\telementConsumables.revert( consumables );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n\t * element's name and all its attributes, classes and styles.\n\t *\n\t * @static\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Object} consumables\n\t */\n\tstatic consumablesFromElement( element ) {\n\t\tconst consumables = {\n\t\t\tname: true,\n\t\t\tattribute: [],\n\t\t\tclass: [],\n\t\t\tstyle: []\n\t\t};\n\n\t\tconst attributes = element.getAttributeKeys();\n\n\t\tfor ( const attribute of attributes ) {\n\t\t\t// Skip classes and styles - will be added separately.\n\t\t\tif ( attribute == 'style' || attribute == 'class' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconsumables.attribute.push( attribute );\n\t\t}\n\n\t\tconst classes = element.getClassNames();\n\n\t\tfor ( const className of classes ) {\n\t\t\tconsumables.class.push( className );\n\t\t}\n\n\t\tconst styles = element.getStyleNames();\n\n\t\tfor ( const style of styles ) {\n\t\t\tconsumables.style.push( style );\n\t\t}\n\n\t\treturn consumables;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n\t * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n\t *\n\t * @static\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n\t * from which `ViewConsumable` will be created.\n\t * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\n\t * to add all consumables. It will be returned instead of a new instance.\n\t */\n\tstatic createFrom( from, instance ) {\n\t\tif ( !instance ) {\n\t\t\tinstance = new ViewConsumable();\n\t\t}\n\n\t\tif ( from.is( 'text' ) ) {\n\t\t\tinstance.add( from );\n\n\t\t\treturn instance;\n\t\t}\n\n\t\t// Add `from` itself, if it is an element.\n\t\tif ( from.is( 'element' ) ) {\n\t\t\tinstance.add( from, ViewConsumable.consumablesFromElement( from ) );\n\t\t}\n\n\t\tif ( from.is( 'documentFragment' ) ) {\n\t\t\tinstance.add( from );\n\t\t}\n\n\t\tfor ( const child of from.getChildren() ) {\n\t\t\tinstance = ViewConsumable.createFrom( child, instance );\n\t\t}\n\n\t\treturn instance;\n\t}\n}\n\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n *\n * @private\n */\nclass ViewElementConsumables {\n\t/**\n\t * Creates ViewElementConsumables instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if name of the element can be consumed.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._canConsumeName = null;\n\n\t\t/**\n\t\t * Contains maps of element's consumables: attributes, classes and styles.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._consumables = {\n\t\t\tattribute: new Map(),\n\t\t\tstyle: new Map(),\n\t\t\tclass: new Map()\n\t\t};\n\t}\n\n\t/**\n\t * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n\t * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n\t * styles still could be consumed):\n\t *\n\t *\t\tconsumables.add( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.add( { attribute: 'title', class: 'foo', style: 'color' } );\n\t *\t\tconsumables.add( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n\t *\n\t * @param {Object} consumables Object describing which parts of the element can be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to add as consumable.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names to add as consumable.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names to add as consumable.\n\t */\n\tadd( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._add( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n\t *\n\t * Element's name can be tested:\n\t *\n\t *\t\tconsumables.test( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.test( { attribute: 'title', class: 'foo', style: 'color' } );\n\t *\t\tconsumables.test( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be tested.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be tested.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to test.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names to test.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names to test.\n\t * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\n\t * was never marked for consumption and `false` when even one of the items was already consumed.\n\t */\n\ttest( consumables ) {\n\t\t// Check if name can be consumed.\n\t\tif ( consumables.name && !this._canConsumeName ) {\n\t\t\treturn this._canConsumeName;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tconst value = this._test( type, consumables[ type ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return true only if all can be consumed.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n\t * is already consumed - it consumes all consumable items provided.\n\t * Element's name can be consumed:\n\t *\n\t *\t\tconsumables.consume( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.consume( { attribute: 'title', class: 'foo', style: 'color' } );\n\t *\t\tconsumables.consume( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to consume.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names to consume.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names to consume.\n\t */\n\tconsume( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = false;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._consume( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n\t * Element's name can be reverted:\n\t *\n\t *\t\tconsumables.revert( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.revert( { attribute: 'title', class: 'foo', style: 'color' } );\n\t *\t\tconsumables.revert( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be reverted.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\n\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to revert.\n\t * @param {String|Array.<String>} consumables.class Class name or array of class names to revert.\n\t * @param {String|Array.<String>} consumables.style Style name or array of style names to revert.\n\t */\n\trevert( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._revert( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that adds consumables of a given type: attribute, class or style.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * type is provided - it should be handled separately by providing actual style/class type.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attribute`, `class` or `style`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_add( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Class and style attributes should be handled separately in\n\t\t\t\t * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n\t\t\t\t *\n\t\t\t\t * What you have done is trying to use:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { attribute: [ 'class', 'style' ] } );\n\t\t\t\t *\n\t\t\t\t * While each class and style should be registered separately:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { class: 'some-class', style: 'font-weight' } );\n\t\t\t\t *\n\t\t\t\t * @error viewconsumable-invalid-attribute\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'viewconsumable-invalid-attribute: Classes and styles should be handled separately.' );\n\t\t\t}\n\n\t\t\tconsumables.set( name, true );\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that tests consumables of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attribute`, `class` or `style`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\n\t * consumed and `false` when one of the items is already consumed.\n\t */\n\t_test( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t// Check all classes/styles if class/style attribute is tested.\n\t\t\t\tconst value = this._test( name, [ ...this._consumables[ name ].keys() ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\t\t\t\t// Return null if attribute is not found.\n\t\t\t\tif ( value === undefined ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif ( !value ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper method that consumes items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attribute`, `class` or `style`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_consume( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t// If class or style is provided for consumption - consume them all.\n\t\t\t\tthis._consume( name, [ ...this._consumables[ name ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconsumables.set( name, false );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that reverts items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attribute`, `class` or , `style`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_revert( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t// If class or style is provided for reverting - revert them all.\n\t\t\t\tthis._revert( name, [ ...this._consumables[ name ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\n\t\t\t\tif ( value === false ) {\n\t\t\t\t\tconsumables.set( name, true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/schema\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport TreeWalker from './treewalker';\n\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * # Schema definitions\n *\n * Schema defines allowed model structures and allowed attributes separately. They are also checked separately\n * by using the {@link ~Schema#checkChild} and {@link ~Schema#checkAttribute} methods.\n *\n * ## Defining allowed structures\n *\n * When a feature introduces a model element it should register it in the schema. Besides\n * defining that such an element may exist in the model, the feature also needs to define where\n * this element may be placed:\n *\n *\t\tschema.register( 'myElement', {\n *\t\t\tallowIn: '$root'\n *\t\t} );\n *\n * This lets the schema know that `<myElement>` may be a child of the `<$root>` element. `$root` is one of generic\n * nodes defined by the editing framework. By default, the editor names the main root element a `<$root>`,\n * so the above definition allows `<myElement>` in the main editor element.\n *\n * In other words, this would be correct:\n *\n *\t\t<$root><myElement></myElement></$root>\n *\n * While this would not be correct:\n *\n *\t\t<$root><foo><myElement></myElement></foo></$root>\n *\n * ## Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block'\n *\t\t} );\n *\n * These definitions can then be reused by features to create their own definitions in a more extensible way.\n * For example, the {@link module:paragraph/paragraph~Paragraph} feature will define its item as:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tinheritAllFrom: '$block'\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block'\n *\t\t} );\n *\n * Which can be read as:\n *\n * * The `<paragraph>` element will be allowed in elements in which `<$block>` is allowed (e.g. in `<$root>`).\n * * The `<paragraph>` element will allow all nodes which are allowed in `<$block>` (e.g. `$text`).\n * * The `<paragraph>` element will allow all attributes allowed on `<$block>`.\n * * The `<paragraph>` element will inherit all `is*` properties of `<$block>` (e.g. `isBlock`).\n *\n * Thanks to the fact that `<paragraph>`'s definition is inherited from `<$block>` other features can use the `<$block>`\n * type to indirectly extend `<paragraph>`'s definition. For example, the {@link module:block-quote/blockquote~BlockQuote}\n * feature does this:\n *\n *\t\tschema.register( 'blockQuote', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$root'\n *\t\t} );\n *\n * Thanks to that, despite the fact that block quote and paragraph features know nothing about themselves, paragraphs\n * will be allowed in block quotes and block quotes will be allowed in all places where blocks are. So if anyone will\n * register a `<section>` element (with `allowContentOf: '$root'` rule), that `<section>` elements will allow\n * block quotes too.\n *\n * The side effect of such a definition inheritance is that now `<blockQuote>` is allowed in `<blockQuote>` which needs to be\n * resolved by a callback which will disallow this specific structure.\n *\n * You can read more about the format of an item definition in {@link module:engine/model/schema~SchemaItemDefinition}.\n *\n * ## Defining advanced rules in `checkChild()`'s callbacks\n *\n * The {@link ~Schema#checkChild} method which is the base method used to check whether some element is allowed in a given structure\n * is {@link module:utils/observablemixin~ObservableMixin#decorate a decorated method}.\n * It means that you can add listeners to implement your specific rules which are not limited by the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition API}.\n *\n * Those listeners can be added either by listening directly to the {@link ~Schema#event:checkChild} event or\n * by using the handy {@link ~Schema#addChildCheck} method.\n *\n * For instance, the block quote feature defines such a listener to disallow nested `<blockQuote>` structures:\n *\n *\t\tschema.addChildCheck( context, childDefinition ) => {\n *\t\t\t// Note that context is automatically normalized to SchemaContext instance and\n *\t\t\t// child to its definition (SchemaCompiledItemDefinition).\n *\n *\t\t\t// If checkChild() is called with a context that ends with blockQuote and blockQuote as a child\n *\t\t\t// to check, make the checkChild() method return false.\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'blockQuote' ) {\n *\t\t\t\treturn false;\n *\t\t\t}\n *\t\t} );\n *\n * ## Defining attributes\n *\n * TODO\n *\n * ## Implementing additional constraints\n *\n * Schema's capabilities were limited to simple (and atomic) {@link ~Schema#checkChild} and\n * {@link ~Schema#checkAttribute} checks on purpose.\n * One may imagine that schema should support defining more complex rules such as\n * \"element `<x>` must be always followed by `<y>`\".\n * While it is feasible to create an API which would enable feeding the schema with such definitions,\n * it is unfortunately unrealistic to then expect that every editing feature will consider those rules when processing the model.\n * It is also unrealistic to expect that it will be done automatically by the schema and the editing engine themselves.\n *\n * For instance, let's get back to the \"element `<x>` must be always followed by `<y>`\" rule and this initial content:\n *\n *\t\t<$root>\n *\t\t\t<x>foo</x>\n *\t\t\t<y>bar[bom</y>\n *\t\t\t<z>bom]bar</z>\n *\t\t</$root>\n *\n * Now, imagine that the user presses the \"block quote\" button. Usually it would wrap the two selected blocks\n * (`<y>` and `<z>`) with a `<blockQuote>` element:\n *\n *\t\t<$root>\n *\t\t\t<x>foo</x>\n *\t\t\t<blockQuote>\n *\t\t\t\t<y>bar[bom</y>\n *\t\t\t\t<z>bom]bar</z>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * But it turns out that this creates an incorrect structure – `<x>` is not followed by `<y>` anymore.\n *\n * What should happen instead? There are at least 4 possible solutions: the block quote feature should not be\n * applicable in such a context, someone should create a new `<y>` right after `<x>`, `<x>` should be moved\n * inside `<blockQuote>` together with `<y>` or vice versa.\n *\n * While this is a relatively simple scenario (unlike most real-time collaboration scenarios),\n * it turns out that it's already hard to say what should happen and who should react to fix this content.\n *\n * Therefore, if your editor needs to implement such rules, you should do that through model's post-fixers\n * fixing incorrect content or actively prevent such situations (e.g. by disabling certain features).\n * It means that those constraints will be defined specifically for your scenario by your code which\n * makes their implementation much easier.\n *\n * So the answer for who and how should implement additional constraints is your features or your editor\n * through CKEditor 5's rich and open API.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Schema {\n\t/**\n\t * Creates schema instance.\n\t */\n\tconstructor() {\n\t\tthis._sourceDefinitions = {};\n\n\t\tthis.decorate( 'checkChild' );\n\t\tthis.decorate( 'checkAttribute' );\n\n\t\tthis.on( 'checkAttribute', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.on( 'checkChild', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t\targs[ 1 ] = this.getDefinition( args[ 1 ] );\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Registers schema item. Can only be called once for every item name.\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tinheritAllFrom: '$block'\n\t *\t\t} );\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\tregister( itemName, definition ) {\n\t\tif ( this._sourceDefinitions[ itemName ] ) {\n\t\t\t// TODO docs\n\t\t\tthrow new CKEditorError( 'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.', {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ] = [\n\t\t\tObject.assign( {}, definition )\n\t\t];\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Extends a {@link #register registered} item's definition.\n\t *\n\t * Extending properties such as `allowIn` will add more items to the existing properties,\n\t * while redefining properties such as `isBlock` will override the previously defined ones.\n\t *\n\t *\t\tschema.register( 'foo', {\n\t *\t\t\tallowIn: '$root',\n\t *\t\t\tisBlock: true;\n\t *\t\t} );\n\t *\t\tschema.extend( 'foo', {\n\t *\t\t\tallowIn: 'blockQuote',\n\t *\t\t\tisBlock: false\n\t *\t\t} );\n\t *\n\t *\t\tschema.getDefinition( 'foo' );\n\t *\t\t//\t{\n\t *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n\t *\t\t// \t\tisBlock: false\n\t *\t\t//\t}\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\textend( itemName, definition ) {\n\t\tif ( !this._sourceDefinitions[ itemName ] ) {\n\t\t\t// TODO docs\n\t\t\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Returns all registered items.\n\t *\n\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n\t */\n\tgetDefinitions() {\n\t\tif ( !this._compiledDefinitions ) {\n\t\t\tthis._compile();\n\t\t}\n\n\t\treturn this._compiledDefinitions;\n\t}\n\n\t/**\n\t * Returns a definition of the given item or `undefined` if item is not registered.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n\t */\n\tgetDefinition( item ) {\n\t\tlet itemName;\n\n\t\tif ( typeof item == 'string' ) {\n\t\t\titemName = item;\n\t\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\n\t\t\titemName = '$text';\n\t\t}\n\t\t// Element or module:engine/model/schema~SchemaContextItem.\n\t\telse {\n\t\t\titemName = item.name;\n\t\t}\n\n\t\treturn this.getDefinitions()[ itemName ];\n\t}\n\n\t/**\n\t * Returns `true` if the given item is registered in the schema.\n\t *\n\t *\t\tschema.isRegistered( 'paragraph' ); // -> true\n\t *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isRegistered( 'foo' ); // -> false\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisRegistered( item ) {\n\t\treturn !!this.getDefinition( item );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n\t *\n\t *\t\tschema.isBlock( 'paragraph' ); // -> true\n\t *\t\tschema.isBlock( '$root' ); // -> false\n\t *\n\t *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n\t *\t\tschema.isBlock( paragraphElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisBlock( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isBlock );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` property.\n\t *\n\t *\t\tschema.isLimit( 'paragraph' ); // -> false\n\t *\t\tschema.isLimit( '$root' ); // -> true\n\t *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisLimit( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isLimit );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n\t *\n\t *\t\tschema.isObject( 'paragraph' ); // -> false\n\t *\t\tschema.isObject( 'image' ); // -> true\n\t *\n\t *\t\tconst imageElement = writer.createElement( 'image' );\n\t *\t\tschema.isObject( imageElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisObject( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isObject );\n\t}\n\n\t/**\n\t * Checks whether the given node (`child`) can be a child of the given context.\n\t *\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tallowIn: '$root'\n\t *\t\t} );\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n\t *\n\t * @fires checkChild\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context Context in which the child will be checked.\n\t * @param {module:engine/model/node~Node|String} def The child to check.\n\t */\n\tcheckChild( context, def ) {\n\t\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._checkContextMatch( def, context );\n\t}\n\n\t/**\n\t * Checks whether the given attribute can be applied in the given context (on the last\n\t * item of the context).\n\t *\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n\t *\n\t *\t\tschema.extend( '$text', {\n\t *\t\t\tallowAttributes: 'bold'\n\t *\t\t} );\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n\t *\n\t * @fires checkAttribute\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context Context in which the attribute will be checked.\n\t * @param {String} attributeName\n\t */\n\tcheckAttribute( context, attributeName ) {\n\t\tconst def = this.getDefinition( context.last );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn def.allowAttributes.includes( attributeName );\n\t}\n\n\t/**\n\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n\t *\n\t * In other words – whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n\t *\n\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n\t * will be valid.\n\t *\n\t * Instead of elements, you can pass the instance of {@link module:engine/model/position~Position} class as the `positionOrBaseElement`.\n\t * It means that the elements before and after the position will be checked whether they can be merged.\n\t *\n\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n\t * element to which the `elementToMerge` will be merged.\n\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is a element.\n\t * @returns {Boolean}\n\t */\n\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\n\t\tif ( positionOrBaseElement instanceof Position ) {\n\t\t\tconst nodeBefore = positionOrBaseElement.nodeBefore;\n\t\t\tconst nodeAfter = positionOrBaseElement.nodeAfter;\n\n\t\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node before the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-before\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'schema-check-merge-no-element-before: The node before the merge position must be an element.' );\n\t\t\t}\n\n\t\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node after the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-after\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'schema-check-merge-no-element-after: The node after the merge position must be an element.' );\n\t\t\t}\n\n\t\t\treturn this.checkMerge( nodeBefore, nodeAfter );\n\t\t}\n\n\t\tfor ( const child of elementToMerge.getChildren() ) {\n\t\t\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkChild} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow elements in specific contexts.\n\t *\n\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow heading1 directly inside a blockQuote.\n\t *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkChild', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst childDefinition = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkChild()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\n\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n\t */\n\taddChildCheck( callback ) {\n\t\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\n\t\t\t// checkChild() was called with a non-registered child.\n\t\t\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\n\t\t\t// don't even execute them.\n\t\t\tif ( !childDef ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst retValue = callback( ctx, childDef );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkAttribute} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow attribute if node to which it is applied\n\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n\t *\n\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow bold on $text inside heading1.\n\t *\t\tschema.addChildCheck( ( context, attributeName ) => {\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst attributeName = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkAttribute()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n\t */\n\taddAttributeCheck( callback ) {\n\t\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\n\t\t\tconst retValue = callback( ctx, attributeName );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n\t * selection or the root otherwise.\n\t *\n\t * @param {module:engine/model/selection~Selection} selection Selection which returns the common ancestor.\n\t * @returns {module:engine/model/element~Element}\n\t */\n\tgetLimitElement( selection ) {\n\t\t// Find the common ancestor for all selection's ranges.\n\t\tlet element = Array.from( selection.getRanges() )\n\t\t\t.reduce( ( element, range ) => {\n\t\t\t\tconst rangeCommonAncestor = range.getCommonAncestor();\n\n\t\t\t\tif ( !element ) {\n\t\t\t\t\treturn rangeCommonAncestor;\n\t\t\t\t}\n\n\t\t\t\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\n\t\t\t}, null );\n\n\t\twhile ( !this.isLimit( element ) ) {\n\t\t\tif ( element.parent ) {\n\t\t\t\telement = element.parent;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Checks whether the attribute is allowed in selection:\n\t *\n\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\n\t * specified attribute allowed.\n\t *\n\t * @param {module:engine/model/selection~Selection} selection Selection which will be checked.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Boolean}\n\t */\n\tcheckAttributeInSelection( selection, attribute ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\t// Check whether schema allows for a text with the attribute in the selection.\n\t\t\treturn this.checkAttribute( [ ...selection.getFirstPosition().getAncestors(), '$text' ], attribute );\n\t\t} else {\n\t\t\tconst ranges = selection.getRanges();\n\n\t\t\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tif ( this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\t\t// If we found a node that is allowed to have the attribute, return true.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't found such node, return false.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Array.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\tgetValidRanges( ranges, attribute ) {\n\t\tconst validRanges = [];\n\n\t\tfor ( const range of ranges ) {\n\t\t\tlet last = range.start;\n\t\t\tlet from = range.start;\n\t\t\tconst to = range.end;\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tif ( !this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\tif ( !from.isEqual( last ) ) {\n\t\t\t\t\t\tvalidRanges.push( new Range( from, last ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tfrom = value.nextPosition;\n\t\t\t\t}\n\n\t\t\t\tlast = value.nextPosition;\n\t\t\t}\n\n\t\t\tif ( from && !from.isEqual( to ) ) {\n\t\t\t\tvalidRanges.push( new Range( from, to ) );\n\t\t\t}\n\t\t}\n\n\t\treturn validRanges;\n\t}\n\n\t/**\n\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range Range} instance that is\n\t * nearest to that `position` and is a correct range for selection.\n\t *\n\t * Correct selection range might be collapsed - when it's located in position where text node can be placed.\n\t * Non-collapsed range is returned when selection can be placed around element marked as \"object\" in\n\t * {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * Direction of searching for nearest correct selection range can be specified as:\n\t * * `both` - searching will be performed in both ways,\n\t * * `forward` - searching will be performed only forward,\n\t * * `backward` - searching will be performed only backward.\n\t *\n\t * When valid selection range cannot be found, `null` is returned.\n\t *\n\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n\t */\n\tgetNearestSelectionRange( position, direction = 'both' ) {\n\t\t// Return collapsed range if provided position is valid.\n\t\tif ( this.checkChild( position, '$text' ) ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\tlet backwardWalker, forwardWalker;\n\n\t\tif ( direction == 'both' || direction == 'backward' ) {\n\t\t\tbackwardWalker = new TreeWalker( { startPosition: position, direction: 'backward' } );\n\t\t}\n\n\t\tif ( direction == 'both' || direction == 'forward' ) {\n\t\t\tforwardWalker = new TreeWalker( { startPosition: position } );\n\t\t}\n\n\t\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\n\t\t\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\n\t\t\tconst value = data.value;\n\n\t\t\tif ( value.type == type && this.isObject( value.item ) ) {\n\t\t\t\treturn Range.createOn( value.item );\n\t\t\t}\n\n\t\t\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\t\treturn new Range( value.nextPosition );\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to find position ancestors that allows to insert given node.\n\t * It starts searching from the given position and goes node by node to the top of the model tree\n\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n\t *\n\t * @params {module:engine/model/node~Node} node Node for which allowed parent should be found.\n\t * @params {module:engine/model/position~Position} position Position from searching will start.\n\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n\t */\n\tfindAllowedParent( node, position ) {\n\t\tlet parent = position.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( this.checkChild( parent, node ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\t// Do not split limit elements and objects.\n\t\t\tif ( this.isLimit( parent ) || this.isObject( parent ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes attributes disallowed by the schema.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\tremoveDisallowedAttributes( nodes, writer ) {\n\t\tfor ( const node of nodes ) {\n\t\t\tfor ( const attribute of node.getAttributeKeys() ) {\n\t\t\t\tif ( !this.checkAttribute( node, attribute ) ) {\n\t\t\t\t\twriter.removeAttribute( attribute, node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( node.is( 'element' ) ) {\n\t\t\t\tthis.removeDisallowedAttributes( node.getChildren(), writer );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_clearCache() {\n\t\tthis._compiledDefinitions = null;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_compile() {\n\t\tconst compiledDefinitions = {};\n\t\tconst sourceRules = this._sourceDefinitions;\n\t\tconst itemNames = Object.keys( sourceRules );\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowContentOf( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowWhere( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowAttributesOf( compiledDefinitions, itemName );\n\t\t\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcleanUpAllowIn( compiledDefinitions, itemName );\n\t\t\tcleanUpAllowAttributes( compiledDefinitions, itemName );\n\t\t}\n\n\t\tthis._compiledDefinitions = compiledDefinitions;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n\t * @param {module:engine/model/schema~SchemaContext} context\n\t * @param {Number} contextItemIndex\n\t */\n\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\n\t\tconst contextItem = context.getItem( contextItemIndex );\n\n\t\tif ( def.allowIn.includes( contextItem.name ) ) {\n\t\t\tif ( contextItemIndex == 0 ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst parentRule = this.getDefinition( contextItem );\n\n\t\t\t\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nmix( Schema, ObservableMixin );\n\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` – a string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` – a string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` – a string or an array of strings. Inherit \"allowed children\" from other items.\n * * `allowWhere` – a string or an array of strings. Inherit \"allowed in\" from other items.\n * * `allowAttributesOf` – a string or an array of strings. Inherit attributes from other items.\n * * `inheritTypesFrom` – a string or an array of strings. Inherit `is*` properties of other items.\n * * `inheritAllFrom` – a string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * additionall, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` – whether this item is paragraph-like. Generally speaking, a content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: there's also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` – can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements – `$root`, table cell, image caption, etc. In other words, all actions which happen inside\n * a limit element are limitted to its content.\n * * `isObject` – whether item is \"self-contained\" and should be treated as a whole. Examples of object elements –\n * `image`, `table`, `video`, etc.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block'\n *\t\t} );\n *\n * They reflect a typical editor content which is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@linkTODO Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes on it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it can't be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'type', 'indent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'type', 'indent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean – limit it to the actual data and store information in an normalized way.\n * * Remember about definining the `is*` properties. They don't affect the allowed structures, but they can\n * affect how editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules feed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * `name` property,\n * * `is*` properties,\n * * `allowIn` array,\n * * `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context – a list of ancestors of a given position in the document.\n *\n * Considering such a position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n\t/**\n\t * Creates an instance of the context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t */\n\tconstructor( context ) {\n\t\tif ( context instanceof SchemaContext ) {\n\t\t\treturn context;\n\t\t}\n\n\t\tif ( typeof context == 'string' ) {\n\t\t\tcontext = [ context ];\n\t\t} else if ( !Array.isArray( context ) ) {\n\t\t\t// `context` is item or position.\n\t\t\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\n\t\t\tcontext = context.getAncestors( { includeSelf: true } );\n\t\t}\n\n\t\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\n\t\t\tcontext.shift();\n\t\t}\n\n\t\tthis._items = context.map( mapContextItem );\n\t}\n\n\t/**\n\t * Number of items.\n\t *\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * The last item (the lowest node).\n\t *\n\t * @type {module:engine/model/schema~SchemaContextItem}\n\t */\n\tget last() {\n\t\treturn this._items[ this._items.length - 1 ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all context items.\n\t *\n\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns new SchemaContext instance with additional item\n\t *\n\t * Item can be added as:\n\t *\n\t * \t\tconst context = new SchemaContext( [ '$root' ] );\n\t *\n\t * \t\t// An element.\n\t * \t\tconst fooElement = writer.createElement( 'fooElement' );\n\t * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n\t *\n\t * \t\t// A text node.\n\t * \t\tconst text = writer.createText( 'foobar' );\n\t * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n\t *\n\t * \t\t// A string (element name).\n\t * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n\t *\n\t * **Note** {module:engine/model/node~Node} that is already in the model tree will be added as the only item (without ancestors).\n\t *\n\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item Item that will be added\n\t * to current context.\n\t * @returns {module:engine/model/schema~SchemaContext} New SchemaContext instance with additional item.\n\t */\n\tpush( item ) {\n\t\tconst ctx = new SchemaContext( [ item ] );\n\n\t\tctx._items = [ ...this._items, ...ctx._items ];\n\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Gets an item on the given index.\n\t *\n\t * @returns {module:engine/model/schema~SchemaContextItem}\n\t */\n\tgetItem( index ) {\n\t\treturn this._items[ index ];\n\t}\n\n\t/**\n\t * Returns the names of items.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* getNames() {\n\t\tyield* this._items.map( item => item.name );\n\t}\n\n\t/**\n\t * Checks whether the context ends with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$text' ); // -> true\n\t *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n\t *\t\tctx.endsWith( '$root' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tendsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\n\t}\n}\n\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( Position.createAt( paragraphElement ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\n\tconst itemRule = {\n\t\tname: itemName,\n\n\t\tallowIn: [],\n\t\tallowContentOf: [],\n\t\tallowWhere: [],\n\n\t\tallowAttributes: [],\n\t\tallowAttributesOf: [],\n\n\t\tinheritTypesFrom: []\n\t};\n\n\tcopyTypes( sourceItemRules, itemRule );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\n\n\tmakeInheritAllWork( sourceItemRules, itemRule );\n\n\treturn itemRule;\n}\n\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\n\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\n\t\t// The allowContentOf property may point to an unregistered element.\n\t\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\n\t\t\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\n\n\t\t\tallowedChildren.forEach( allowedItem => {\n\t\t\t\tallowedItem.allowIn.push( itemName );\n\t\t\t} );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowContentOf;\n}\n\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\n\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\n\n\t\t// The allowWhere property may point to an unregistered element.\n\t\tif ( inheritFrom ) {\n\t\t\tconst allowedIn = inheritFrom.allowIn;\n\n\t\t\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowWhere;\n}\n\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\n\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst inheritAttributes = inheritFrom.allowAttributes;\n\n\t\t\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\n\tconst item = compiledDefinitions[ itemName ];\n\n\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\n\t\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\n\n\t\t\tfor ( const name of typeNames ) {\n\t\t\t\tif ( !( name in item ) ) {\n\t\t\t\t\titem[ name ] = inheritFrom[ name ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete item.inheritTypesFrom;\n}\n\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\n\n\titemRule.allowIn = Array.from( new Set( existingItems ) );\n}\n\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\n}\n\nfunction copyTypes( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\n\n\t\tfor ( const name of typeNames ) {\n\t\t\titemRule[ name ] = sourceItemRule[ name ];\n\t\t}\n\t}\n}\n\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\n\t\t\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\n\t\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\n\t\t\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\n\t\t}\n\t}\n}\n\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst inheritFrom = sourceItemRule.inheritAllFrom;\n\n\t\tif ( inheritFrom ) {\n\t\t\titemRule.allowContentOf.push( inheritFrom );\n\t\t\titemRule.allowWhere.push( inheritFrom );\n\t\t\titemRule.allowAttributesOf.push( inheritFrom );\n\t\t\titemRule.inheritTypesFrom.push( inheritFrom );\n\t\t}\n\t}\n}\n\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\n}\n\nfunction getValues( obj ) {\n\treturn Object.keys( obj ).map( key => obj[ key ] );\n}\n\nfunction mapContextItem( ctxItem ) {\n\tif ( typeof ctxItem == 'string' ) {\n\t\treturn {\n\t\t\tname: ctxItem,\n\n\t\t\t* getAttributeKeys() {},\n\n\t\t\tgetAttribute() {}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\t// '$text' means text nodes and text proxies.\n\t\t\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\n\n\t\t\t* getAttributeKeys() {\n\t\t\t\tyield* ctxItem.getAttributeKeys();\n\t\t\t},\n\n\t\t\tgetAttribute( key ) {\n\t\t\t\treturn ctxItem.getAttribute( key );\n\t\t\t}\n\t\t};\n\t}\n}\n\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\nfunction* combineWalkers( backward, forward ) {\n\tlet done = false;\n\n\twhile ( !done ) {\n\t\tdone = true;\n\n\t\tif ( backward ) {\n\t\t\tconst step = backward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: backward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( forward ) {\n\t\t\tconst step = forward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: forward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/upcastdispatcher\n */\n\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `UpcastDispatcher` is a central point of {@link module:engine/view/view view} conversion, which is a process of\n * converting given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element} into another structure.\n * In default application, {@link module:engine/view/view view} is converted to {@link module:engine/model/model}.\n *\n * During conversion process, for all {@link module:engine/view/node~Node view nodes} from the converted view document fragment,\n * `UpcastDispatcher` fires corresponding events. Special callbacks called \"converters\" should listen to\n * `UpcastDispatcher` for those events.\n *\n * Each callback, as the second argument, is passed a special object `data` that has `viewItem`, `modelCursor` and\n * `modelRange` properties. `viewItem` property contains {@link module:engine/view/node~Node view node} or\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback. `modelRange` property should be used to save the result\n * of conversion and is always a {@link module:engine/model/range~Range} when conversion result is correct.\n * `modelCursor` property is a {@link module:engine/model/position~Position position} on which conversion result will be inserted\n * and is a context according to {@link module:engine/model/schema~Schema schema} will be checked before the conversion.\n * See also {@link ~UpcastDispatcher#convert}. It is also shared by reference by all callbacks listening to given event.\n *\n * The third parameter passed to a callback is an instance of {@link ~UpcastDispatcher}\n * which provides additional tools for converters.\n *\n * Examples of providing callbacks for `UpcastDispatcher`:\n *\n *\t\t// Converter for links (<a>).\n *\t\tupcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n *\t\t\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n *\t\t\t\t// <a> element is inline and is represented by an attribute in the model.\n *\t\t\t\t// This is why we need to convert only children.\n *\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\t\t\tfor ( let item of modelRange.getItems() ) {\n *\t\t\t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n *\t\t\t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// Convert all elements which have no custom converter into paragraph (autoparagraphing).\n *  \tdata.viewToModel.on( 'element', ( evt, data, conversionApi ) => {\n *  \t \t// When element is already consumed by higher priority converters then do nothing.\n *  \t \tif ( conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n *  \t \t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n *  \t \t\t\t// Find allowed parent for paragraph that we are going to insert. If current parent does not allow\n *  \t \t\t\t// to insert paragraph but one of the ancestors does then split nodes to allowed parent.\n *  \t \t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n *\n *  \t \t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n *  \t \t\t\tif ( splitResult ) {\n *  \t \t\t\t\t// Insert paragraph in allowed position.\n *  \t \t\t\t\tconversionApi.writer.insert( paragraph, splitResult.position );\n *\n *  \t \t\t\t\t// Convert children to paragraph.\n *  \t \t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, Position.createAt( paragraph ) );\n *\n * \t\t\t\t\t\t// Set as conversion result, attribute converters may use this property.\n *  \t \t\t\t\tdata.modelRange = new Range( Position.createBefore( paragraph ), modelRange.end );\n *\n *  \t \t\t\t\t// Continue conversion inside paragraph.\n *  \t \t\t\t\tdata.modelCursor = data.modelRange.end;\n *  \t \t\t\t}\n *  \t \t\t}\n *  \t \t}\n *  \t }, { priority: 'low' } );\n *\n * Before each conversion process, `UpcastDispatcher` fires {@link ~UpcastDispatcher#event:viewCleanup}\n * event which can be used to prepare tree view for conversion.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher {\n\t/**\n\t * Creates a `UpcastDispatcher` that operates using passed API.\n\t *\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi\n\t * @param {Object} [conversionApi] Additional properties for interface that will be passed to events fired\n\t * by `UpcastDispatcher`.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * List of elements that will be checked after conversion process and if element in the list will be empty it\n\t\t * will be removed from conversion result.\n\t\t *\n\t\t * After conversion process list is cleared.\n\t\t *\n\t\t * @protected\n\t\t * @type {Set<module:engine/model/element~Element>}\n\t\t */\n\t\tthis._removeIfEmpty = new Set();\n\n\t\t/**\n\t\t * Position in the temporary structure where the converted content is inserted. The structure reflect the context of\n\t\t * the target position where the content will be inserted. This property is build based on the context parameter of the\n\t\t * convert method.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/position~Position|null}\n\t\t */\n\t\tthis._modelCursor = null;\n\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/upcastdispatcher~ViewConversionApi}\n\t\t */\n\t\tthis.conversionApi = Object.assign( {}, conversionApi );\n\n\t\t// `convertItem`, `convertChildren` and `splitToAllowedParent` are bound to this `UpcastDispatcher`\n\t\t// instance and set on `conversionApi`. This way only a part of `UpcastDispatcher` API is exposed.\n\t\tthis.conversionApi.convertItem = this._convertItem.bind( this );\n\t\tthis.conversionApi.convertChildren = this._convertChildren.bind( this );\n\t\tthis.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind( this );\n\t}\n\n\t/**\n\t * Starts the conversion process. The entry point for the conversion.\n\t *\n\t * @fires element\n\t * @fires text\n\t * @fires documentFragment\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\n\t * Part of the view to be converted.\n\t * @param {module:engine/model/writer~Writer} writer Instance of model writer.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is a result of the conversion process\n\t * wrapped in `DocumentFragment`. Converted marker elements will be set as that document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t */\n\tconvert( viewItem, writer, context = [ '$root' ] ) {\n\t\tthis.fire( 'viewCleanup', viewItem );\n\n\t\t// Create context tree and set position in the top element.\n\t\t// Items will be converted according to this position.\n\t\tthis._modelCursor = createContextTree( context, writer );\n\n\t\t// Store writer in conversion as a conversion API\n\t\t// to be sure that conversion process will use the same batch.\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create consumable values list for conversion process.\n\t\tthis.conversionApi.consumable = ViewConsumable.createFrom( viewItem );\n\n\t\t// Custom data stored by converter for conversion process.\n\t\tthis.conversionApi.store = {};\n\n\t\t// Do the conversion.\n\t\tconst { modelRange } = this._convertItem( viewItem, this._modelCursor );\n\n\t\t// Conversion result is always a document fragment so let's create this fragment.\n\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t// When there is a conversion result.\n\t\tif ( modelRange ) {\n\t\t\t// Remove all empty elements that was added to #_removeIfEmpty list.\n\t\t\tthis._removeEmptyElements();\n\n\t\t\t// Move all items that was converted to context tree to document fragment.\n\t\t\tfor ( const item of Array.from( this._modelCursor.parent.getChildren() ) ) {\n\t\t\t\twriter.append( item, documentFragment );\n\t\t\t}\n\n\t\t\t// Extract temporary markers elements from model and set as static markers collection.\n\t\t\tdocumentFragment.markers = extractMarkersFromModelFragment( documentFragment, writer );\n\t\t}\n\n\t\t// Clear context position.\n\t\tthis._modelCursor = null;\n\n\t\t// Clear split elements.\n\t\tthis._removeIfEmpty.clear();\n\n\t\t// Clear conversion API.\n\t\tthis.conversionApi.writer = null;\n\t\tthis.conversionApi.store = null;\n\n\t\t// Return fragment as conversion result.\n\t\treturn documentFragment;\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#convertItem\n\t */\n\t_convertItem( viewItem, modelCursor ) {\n\t\tconst data = Object.assign( { viewItem, modelCursor, modelRange: null } );\n\n\t\tif ( viewItem.is( 'element' ) ) {\n\t\t\tthis.fire( 'element:' + viewItem.name, data, this.conversionApi );\n\t\t} else if ( viewItem.is( 'text' ) ) {\n\t\t\tthis.fire( 'text', data, this.conversionApi );\n\t\t} else {\n\t\t\tthis.fire( 'documentFragment', data, this.conversionApi );\n\t\t}\n\n\t\t// Handle incorrect conversion result.\n\t\tif ( data.modelRange && !( data.modelRange instanceof ModelRange ) ) {\n\t\t\t/**\n\t\t\t * Incorrect conversion result was dropped.\n\t\t\t *\n\t\t\t * {@link module:engine/model/range~Range Model range} should be a conversion result.\n\t\t\t *\n\t\t\t * @error view-conversion-dispatcher-incorrect-result\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.' );\n\t\t}\n\n\t\treturn { modelRange: data.modelRange, modelCursor: data.modelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#convertChildren\n\t */\n\t_convertChildren( viewItem, modelCursor ) {\n\t\tconst modelRange = new ModelRange( modelCursor );\n\t\tlet nextModelCursor = modelCursor;\n\n\t\tfor ( const viewChild of Array.from( viewItem.getChildren() ) ) {\n\t\t\tconst result = this._convertItem( viewChild, nextModelCursor );\n\n\t\t\tif ( result.modelRange instanceof ModelRange ) {\n\t\t\t\tmodelRange.end = result.modelRange.end;\n\t\t\t\tnextModelCursor = result.modelCursor;\n\t\t\t}\n\t\t}\n\n\t\treturn { modelRange, modelCursor: nextModelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#splitToAllowedParent\n\t */\n\t_splitToAllowedParent( node, modelCursor ) {\n\t\t// Try to find allowed parent.\n\t\tconst allowedParent = this.conversionApi.schema.findAllowedParent( node, modelCursor );\n\n\t\t// When there is no parent that allows to insert node then return `null`.\n\t\tif ( !allowedParent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When current position parent allows to insert node then return this position.\n\t\tif ( allowedParent === modelCursor.parent ) {\n\t\t\treturn { position: modelCursor };\n\t\t}\n\n\t\t// When allowed parent is in context tree.\n\t\tif ( this._modelCursor.parent.getAncestors().includes( allowedParent ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Split element to allowed parent.\n\t\tconst splitResult = this.conversionApi.writer.split( modelCursor, allowedParent );\n\n\t\t// Remember all elements that are created as a result of split.\n\t\t// This is important because at the end of conversion we want to remove all empty split elements.\n\t\t//\n\t\t// Loop through positions between elements in range (except split result position) and collect parents.\n\t\t// <notSplit><split1><split2>[pos]</split2>[pos]</split1>[omit]<split1>[pos]<split2>[pos]</split2></split1></notSplit>\n\t\tfor ( const position of splitResult.range.getPositions() ) {\n\t\t\tif ( !position.isEqual( splitResult.position ) ) {\n\t\t\t\tthis._removeIfEmpty.add( position.parent );\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tposition: splitResult.position,\n\t\t\tcursorParent: splitResult.range.end.parent\n\t\t};\n\t}\n\n\t/**\n\t * Checks if {@link #_removeIfEmpty} contains empty elements and remove them.\n\t * We need to do it smart because there could be elements that are not empty because contains\n\t * other empty elements and after removing its children they become available to remove.\n\t * We need to continue iterating over split elements as long as any element will be removed.\n\t *\n\t * @private\n\t */\n\t_removeEmptyElements() {\n\t\tlet removed = false;\n\n\t\tfor ( const element of this._removeIfEmpty ) {\n\t\t\tif ( element.isEmpty ) {\n\t\t\t\tthis.conversionApi.writer.remove( element );\n\t\t\t\tthis._removeIfEmpty.delete( element );\n\t\t\t\tremoved = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( removed ) {\n\t\t\tthis._removeEmptyElements();\n\t\t}\n\t}\n\n\t/**\n\t * Fired before the first conversion event, at the beginning of upcast (view to model conversion) process.\n\t *\n\t * @event viewCleanup\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\n\t * viewItem Part of the view to be converted.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/element~Element} is converted.\n\t *\n\t * `element` is a namespace event for a class of events. Names of actually called events follow this pattern:\n\t * `element:<elementName>` where `elementName` is the name of converted element. This way listeners may listen to\n\t * all elements conversion or to conversion of specific elements.\n\t *\n\t * @event element\n\t * @param {Object} data Conversion data. Keep in mind that this object is shared by reference between all\n\t * callbacks that will be called. This means that callbacks can override values if needed, and those values will\n\t * be available in other callbacks.\n\t * @param {module:engine/view/item~Item} data.viewItem Converted item.\n\t * @param {module:engine/model/position~Position} data.modelCursor Position where a converter should start changes.\n\t * Change this value for the next converter to tell where the conversion should continue.\n\t * @param {module:engine/model/range~Range} data.modelRange The current state of conversion result. Every change to\n\t * converted element should be reflected by setting or modifying this property.\n\t * @param {ViewConversionApi} conversionApi Conversion utilities to be used by callback.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/text~Text} is converted.\n\t *\n\t * @event text\n\t * @see #event:element\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/documentfragment~DocumentFragment} is converted.\n\t *\n\t * @event documentFragment\n\t * @see #event:element\n\t */\n}\n\nmix( UpcastDispatcher, EmitterMixin );\n\n// Traverses given model item and searches elements which marks marker range. Found element is removed from\n// DocumentFragment but path of this element is stored in a Map which is then returned.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\nfunction extractMarkersFromModelFragment( modelItem, writer ) {\n\tconst markerElements = new Set();\n\tconst markers = new Map();\n\n\t// Create ModelTreeWalker.\n\tconst range = ModelRange.createIn( modelItem ).getItems();\n\n\t// Walk through DocumentFragment and collect marker elements.\n\tfor ( const item of range ) {\n\t\t// Check if current element is a marker.\n\t\tif ( item.name == '$marker' ) {\n\t\t\tmarkerElements.add( item );\n\t\t}\n\t}\n\n\t// Walk through collected marker elements store its path and remove its from the DocumentFragment.\n\tfor ( const markerElement of markerElements ) {\n\t\tconst markerName = markerElement.getAttribute( 'data-name' );\n\t\tconst currentPosition = ModelPosition.createBefore( markerElement );\n\n\t\t// When marker of given name is not stored it means that we have found the beginning of the range.\n\t\tif ( !markers.has( markerName ) ) {\n\t\t\tmarkers.set( markerName, new ModelRange( ModelPosition.createFromPosition( currentPosition ) ) );\n\t\t// Otherwise is means that we have found end of the marker range.\n\t\t} else {\n\t\t\tmarkers.get( markerName ).end = ModelPosition.createFromPosition( currentPosition );\n\t\t}\n\n\t\t// Remove marker element from DocumentFragment.\n\t\twriter.remove( markerElement );\n\t}\n\n\treturn markers;\n}\n\n// Creates model fragment according to given context and returns position in top element.\nfunction createContextTree( contextDefinition, writer ) {\n\tlet position;\n\n\tfor ( const item of new SchemaContext( contextDefinition ) ) {\n\t\tconst attributes = {};\n\n\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\tattributes[ key ] = item.getAttribute( key );\n\t\t}\n\n\t\tconst current = writer.createElement( item.name, attributes );\n\n\t\tif ( position ) {\n\t\t\twriter.append( current, position );\n\t\t}\n\n\t\tposition = ModelPosition.createAt( current );\n\t}\n\n\treturn position;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface ViewConversionApi\n */\n\n/**\n * Starts conversion of given item by firing an appropriate event.\n *\n * Every fired event is passed (as first parameter) an object with `modelRange` property. Every event may set and/or\n * modify that property. When all callbacks are done, the final value of `modelRange` property is returned by this method.\n * The `modelRange` must be {@link module:engine/model/range~Range model range} or `null` (as set by default).\n *\n * @method #convertItem\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range|null} result.modelRange Model range containing result of item conversion,\n * created and modified by callbacks attached to fired event, or `null` if the conversion result was incorrect.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Starts conversion of all children of given item by firing appropriate events for all those children.\n *\n * @method #convertChildren\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range} result.modelRange Model range containing results of conversion of all children of given item.\n * When no children was converted then range is collapsed.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Checks {@link module:engine/model/schema~Schema schema} to find allowed parent for element that we are going to insert\n * starting from given position. If current parent does not allow to insert element but one of the ancestors does then\n * split nodes to allowed parent.\n *\n * If schema allows to insert node in given position, nothing is split and object with that position is returned.\n *\n * If it was not possible to find allowed parent, `null` is returned, nothing is split.\n *\n * Otherwise, ancestors are split and object with position and the copy of the split element is returned.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *  \t-> split for `<image>` ->\n *\n *  \t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * In the sample above position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\n * as `cursorParent`.\n *\n * @method #splitToAllowedParent\n * @param {module:engine/model/position~Position} position Position on which element is going to be inserted.\n * @param {module:engine/model/node~Node} node Node to insert.\n * @returns {Object|null} Split result. If it was not possible to find allowed position `null` is returned.\n * @returns {module:engine/model/position~Position} position between split elements.\n * @returns {module:engine/model/element~Element} [cursorParent] Element inside which cursor should be placed to\n * continue conversion. When element is not defined it means that there was no split.\n */\n\n/**\n * Instance of {@link module:engine/conversion/viewconsumable~ViewConsumable}. It stores\n * information about what parts of processed view item are still waiting to be handled. After a piece of view item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\n *\n * @param {Object} #consumable\n */\n\n/**\n * Custom data stored by converters for conversion process. Custom properties of this object can be defined and use to\n * pass parameters between converters.\n *\n * The difference between this property and `data` parameter of\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that `data` parameters allows you\n * to pass parameters within a single event and `store` within the whole conversion.\n *\n * @param {Object} #store\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport Matcher from '../view/matcher';\n\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\n\nimport cloneDeep from '@ckeditor/ckeditor5-utils/src/lib/lodash/cloneDeep';\n\n/**\n * Contains {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcast-converters\n */\n\n/**\n * View element to model element conversion helper.\n *\n * This conversion results in creating a model element. For example, view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n *\n * Keep in mind that the element will be inserted only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n *\n *\t\tupcastElementToElement( { view: 'p', model: 'paragraph' } );\n *\n *\t\tupcastElementToElement( { view: 'p', model: 'paragraph', priority: 'high' } );\n *\n *\t\tupcastElementToElement( {\n *\t\t\tview: {\n *\t\t\t\tname: 'p',\n *\t\t\t\tclass: 'fancy'\n *\t\t\t},\n *\t\t\tmodel: 'fancyParagraph'\n *\t\t} );\n *\n *\t\tupcastElementToElement( {\n * \t\t\tview: {\n *\t\t\t\tname: 'p',\n *\t\t\t\tclass: 'heading'\n * \t\t\t},\n * \t\t\tmodel: ( viewElement, modelWriter ) => {\n * \t\t\t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n * \t\t\t}\n * \t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n * @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst converter = _prepareToElementConverter( config );\n\n\tconst elementName = _getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.priority || 'normal' } );\n\t};\n}\n\n/**\n * View element to model attribute conversion helper.\n *\n * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n *\n * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n *\n *\t\tupcastElementToAttribute( { view: 'strong', model: 'bold' } );\n *\n *\t\tupcastElementToAttribute( { view: 'strong', model: 'bold', priority: 'high' } );\n *\n *\t\tupcastElementToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tclass: 'bold'\n *\t\t\t},\n *\t\t\tmodel: 'bold'\n *\t\t} );\n *\n *\t\tupcastElementToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tclass: [ 'styled', 'styled-dark' ]\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'styled',\n *\t\t\t\tvalue: 'dark'\n *\t\t\t}\n *\t\t} );\n *\n * \t\tupcastElementToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tstyle: {\n *\t\t\t\t\t'font-size': /[\\s\\S]+/\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'fontSize',\n *\t\t\t\tvalue: viewElement => {\n *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n *\t\t\t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n *\n *\t\t\t\t\tif ( value <= 10 ) {\n *\t\t\t\t\t\treturn 'small';\n *\t\t\t\t\t} else if ( value > 12 ) {\n *\t\t\t\t\t\treturn 'big';\n *\t\t\t\t\t}\n *\n *\t\t\t\t\treturn null;\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be set to `true`.\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastElementToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\t_normalizeModelAttributeConfig( config );\n\n\tconst converter = _prepareToAttributeConverter( config, true );\n\n\tconst elementName = _getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.priority || 'normal' } );\n\t};\n}\n\n/**\n * View attribute to model attribute conversion helper.\n *\n * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n * `<image source=\"foo.jpg\"></image>` in the model.\n *\n * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n *\n *\t\tupcastAttributeToAttribute( { view: 'src', model: 'source' } );\n *\n *\t\tupcastAttributeToAttribute( { view: { key: 'src' }, model: 'source' } );\n *\n *\t\tupcastAttributeToAttribute( { view: { key: 'src' }, model: 'source', priority: 'normal' } );\n *\n *\t\tupcastAttributeToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tkey: 'data-style',\n *\t\t\t\tvalue: /[\\s\\S]+/\n *\t\t\t},\n *\t\t\tmodel: 'styled'\n *\t\t} );\n *\n *\t\tupcastAttributeToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'img',\n *\t\t\t\tkey: 'class',\n *\t\t\t\tvalue: 'styled-dark'\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'styled',\n *\t\t\t\tvalue: 'dark'\n *\t\t\t}\n *\t\t} );\n *\n *\t\tupcastAttributeToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tkey: 'class',\n *\t\t\t\tvalue: /styled-[\\S]+/\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'styled'\n *\t\t\t\tvalue: viewElement => {\n *\t\t\t\t\tconst regexp = /styled-([\\S]+)/;\n *\t\t\t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n *\n *\t\t\t\t\treturn match[ 1 ];\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be same as view attribute value.\n * @param {module:utils/priorities~PriorityString} [config.priority='low'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tlet viewKey = null;\n\n\tif ( typeof config.view == 'string' || config.view.key ) {\n\t\tviewKey = _normalizeViewAttributeKeyValueConfig( config );\n\t}\n\n\t_normalizeModelAttributeConfig( config, viewKey );\n\n\tconst converter = _prepareToAttributeConverter( config, false );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element', converter, { priority: config.priority || 'low' } );\n\t};\n}\n\n/**\n * View element to model marker conversion helper.\n *\n * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n * after the conversion is done, the marker will be available in\n * {@link module:engine/model/model~Model#markers model document markers}.\n *\n *\t\tupcastElementToMarker( { view: 'marker-search', model: 'search' } );\n *\n *\t\tupcastElementToMarker( { view: 'marker-search', model: 'search', priority: 'high' } );\n *\n *\t\tupcastElementToMarker( {\n *\t\t\tview: 'marker-search',\n *\t\t\tmodel: viewElement => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n *\t\t} );\n *\n *\t\tupcastElementToMarker( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tattribute: {\n *\t\t\t\t\t'data-marker': 'search'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\tmodel: 'search'\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n * @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n * a model marker name.\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastElementToMarker( config ) {\n\tconfig = cloneDeep( config );\n\n\t_normalizeToMarkerConfig( config );\n\n\treturn upcastElementToElement( config );\n}\n\n// Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n// and if so, returns it.\n//\n// @param {Object} config Conversion config.\n// @returns {String|null} View element name or `null` if name is not directly set.\nfunction _getViewElementNameFromConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\treturn config.view;\n\t}\n\n\tif ( typeof config.view == 'object' && typeof config.view.name == 'string' ) {\n\t\treturn config.view.name;\n\t}\n\n\treturn null;\n}\n\n// Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n//\n// @param {Object} config Conversion configuration.\n// @returns {Function} View to model converter.\nfunction _prepareToElementConverter( config ) {\n\tconst matcher = new Matcher( config.view );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This will be usually just one pattern but we support matchers with many patterns too.\n\t\tconst match = matcher.match( data.viewItem );\n\n\t\t// If there is no match, this callback should not do anything.\n\t\tif ( !match ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Force consuming element's name.\n\t\tmatch.match.name = true;\n\n\t\t// Create model element basing on config.\n\t\tconst modelElement = _getModelElement( config.model, data.viewItem, conversionApi.writer );\n\n\t\t// Do not convert if element building function returned falsy value.\n\t\tif ( !modelElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When element was already consumed then skip it.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find allowed parent for element that we are going to insert.\n\t\t// If current parent does not allow to insert element but one of the ancestors does\n\t\t// then split nodes to allowed parent.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( modelElement, data.modelCursor );\n\n\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Insert element on allowed position.\n\t\tconversionApi.writer.insert( modelElement, splitResult.position );\n\n\t\t// Convert children and insert to element.\n\t\tconst childrenResult = conversionApi.convertChildren( data.viewItem, ModelPosition.createAt( modelElement ) );\n\n\t\t// Consume appropriate value from consumable values list.\n\t\tconversionApi.consumable.consume( data.viewItem, match.match );\n\n\t\t// Set conversion result range.\n\t\tdata.modelRange = new ModelRange(\n\t\t\t// Range should start before inserted element\n\t\t\tModelPosition.createBefore( modelElement ),\n\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t// before: <allowed>[]</allowed>\n\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\tModelPosition.createAfter( childrenResult.modelCursor.parent )\n\t\t);\n\n\t\t// Now we need to check where the modelCursor should be.\n\t\t// If we had to split parent to insert our element then we want to continue conversion inside split parent.\n\t\t//\n\t\t// before: <allowed><notAllowed>[]</notAllowed></allowed>\n\t\t// after:  <allowed><notAllowed></notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\t\tif ( splitResult.cursorParent ) {\n\t\t\tdata.modelCursor = ModelPosition.createAt( splitResult.cursorParent );\n\n\t\t\t// Otherwise just continue after inserted element.\n\t\t} else {\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t};\n}\n\n// Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n// and a writer instance and returns a model element instance to be inserted in the model.\n//\n// @param {String|Function|module:engine/model/element~Element} model Model conversion configuration.\n// @param {module:engine/view/node~Node} input The converted view node.\n// @param {module:engine/model/writer~Writer} writer A writer instance to use to create the model element.\nfunction _getModelElement( model, input, writer ) {\n\tif ( model instanceof Function ) {\n\t\treturn model( input, writer );\n\t} else {\n\t\treturn writer.createElement( model );\n\t}\n}\n\n// Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n// as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n// {@link module:engine/view/matcher~MatcherPattern}.\n//\n// @param {Object} config Conversion config.\n// @returns {String} Key of the converted view attribute.\nfunction _normalizeViewAttributeKeyValueConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\tconfig.view = { key: config.view };\n\t}\n\n\tconst key = config.view.key;\n\tlet normalized;\n\n\tif ( key == 'class' || key == 'style' ) {\n\t\tnormalized = {\n\t\t\t[ key ]: config.view.value\n\t\t};\n\t} else {\n\t\tconst value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n\n\t\tnormalized = {\n\t\t\tattribute: {\n\t\t\t\t[ key ]: value\n\t\t\t}\n\t\t};\n\t}\n\n\tif ( config.view.name ) {\n\t\tnormalized.name = config.view.name;\n\t}\n\n\tconfig.view = normalized;\n\n\treturn key;\n}\n\n// Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n// as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n// `config.model` is an `Object` with `key` and `value` properties.\n//\n// @param {Object} config Conversion config.\n// @param {String} viewAttributeKeyToCopy Key of the  converted view attribute. If it is set, model attribute value\n// will be equal to view attribute value.\nfunction _normalizeModelAttributeConfig( config, viewAttributeKeyToCopy = null ) {\n\tconst defaultModelValue = viewAttributeKeyToCopy === null ? true : viewElement => viewElement.getAttribute( viewAttributeKeyToCopy );\n\n\tconst key = typeof config.model != 'object' ? config.model : config.model.key;\n\tconst value = typeof config.model != 'object' ? defaultModelValue : config.model.value;\n\n\tconfig.model = { key, value };\n}\n\n// Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n// a proper converter function.\n//\n// @param {String} modelAttributeKey The key of the model attribute to set on a model node.\n// @param {Object|Array.<Object>} config Conversion configuration. It is possible to provide multiple configurations in an array.\n// @param {Boolean} consumeName If set to `true` converter will try to consume name. If set to `false` converter will not try to\n// consume name. This flag overwrites parameter returned by `Matcher#match`.\nfunction _prepareToAttributeConverter( config, consumeName ) {\n\tconst matcher = new Matcher( config.view );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst match = matcher.match( data.viewItem );\n\n\t\t// If there is no match, this callback should not do anything.\n\t\tif ( !match ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelKey = config.model.key;\n\t\tconst modelValue = typeof config.model.value == 'function' ? config.model.value( data.viewItem ) : config.model.value;\n\n\t\t// Do not convert if attribute building function returned falsy value.\n\t\tif ( modelValue === null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !consumeName ) {\n\t\t\t// Do not test or consume `name` consumable.\n\t\t\tdelete match.match.name;\n\t\t} else {\n\t\t\tmatch.match.name = true;\n\t\t}\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we are converting to attribute we need an range on which we will set the attribute.\n\t\t// If the range is not created yet, we will create it.\n\t\tif ( !data.modelRange ) {\n\t\t\t// Convert children and set conversion result as a current data.\n\t\t\tdata = Object.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\t// Set attribute on current `output`. `Schema` is checked inside this helper function.\n\t\tconst attributeWasSet = _setAttributeOn( data.modelRange, { key: modelKey, value: modelValue }, conversionApi );\n\n\t\tif ( attributeWasSet ) {\n\t\t\tconversionApi.consumable.consume( data.viewItem, match.match );\n\t\t}\n\t};\n}\n\n// Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n// to ensure proper model structure.\n//\n// @param {module:engine/model/range~Range} modelRange Model range on which attribute should be set.\n// @param {Object} modelAttribute Model attribute to set.\n// @param {Object} conversionApi Conversion API.\n// @returns {Boolean} `true` if attribute was set on at least one node from given `modelRange`.\nfunction _setAttributeOn( modelRange, modelAttribute, conversionApi ) {\n\tlet result = false;\n\n\t// Set attribute on each item in range according to Schema.\n\tfor ( const node of Array.from( modelRange.getItems() ) ) {\n\t\tif ( conversionApi.schema.checkAttribute( node, modelAttribute.key ) ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttribute.key, modelAttribute.value, node );\n\n\t\t\tresult = true;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n// Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n// function and converts it to a format that is supported by `upcastElementToElement()` function.\n//\n// @param {Object} config Conversion configuration.\nfunction _normalizeToMarkerConfig( config ) {\n\tconst oldModel = config.model;\n\n\tconfig.model = ( viewElement, modelWriter ) => {\n\t\tconst markerName = typeof oldModel == 'string' ? oldModel : oldModel( viewElement );\n\n\t\treturn modelWriter.createElement( '$marker', { 'data-name': markerName } );\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns {Function} Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\nexport function convertToModelFragment() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n\t\tif ( !data.modelRange && conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\t\tconst { modelRange, modelCursor } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n\n\t\t\tdata.modelRange = modelRange;\n\t\t\tdata.modelCursor = modelCursor;\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {Function} {@link module:engine/view/text~Text View text} converter.\n */\nexport function convertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( conversionApi.schema.checkChild( data.modelCursor, '$text' ) ) {\n\t\t\tif ( conversionApi.consumable.consume( data.viewItem ) ) {\n\t\t\t\tconst text = conversionApi.writer.createText( data.viewItem.data );\n\n\t\t\t\tconversionApi.writer.insert( text, data.modelCursor );\n\n\t\t\t\tdata.modelRange = ModelRange.createFromPositionAndShift( data.modelCursor, text.offsetSize );\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/controller/datacontroller\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\nimport Mapper from '../conversion/mapper';\n\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertText } from '../conversion/downcast-converters';\n\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\nimport { convertText, convertToModelFragment } from '../conversion/upcast-converters';\n\nimport ViewDocumentFragment from '../view/documentfragment';\nimport ViewDocument from '../view/document';\nimport ViewWriter from '../view/writer';\n\nimport ModelRange from '../model/range';\n\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class DataController {\n\t/**\n\t * Creates a data controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Data model.\n\t * @param {module:engine/dataprocessor/dataprocessor~DataProcessor} [dataProcessor] Data processor that should be used\n\t * by the controller.\n\t */\n\tconstructor( model, dataProcessor ) {\n\t\t/**\n\t\t * Data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Data processor used during the conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/dataProcessor~DataProcessor}\n\t\t */\n\t\tthis.processor = dataProcessor;\n\n\t\t/**\n\t\t * Mapper used for the conversion. It has no permanent bindings, because they are created when getting data and\n\t\t * cleared directly after the data are converted. However, the mapper is defined as a class property, because\n\t\t * it needs to be passed to the `DowncastDispatcher` as a conversion API.\n\t\t *\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher used by the {@link #get get method}. Downcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\n\t\t/**\n\t\t * Upcast dispatcher used by the {@link #set set method}. Upcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t\t */\n\t\tthis.upcastDispatcher = new UpcastDispatcher( {\n\t\t\tschema: model.schema\n\t\t} );\n\n\t\t// Define default converters for text and elements.\n\t\t//\n\t\t// Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n\t\t// converted to nothing. We add `convertToModelFragment` as a last converter so it converts children of that\n\t\t// element to the document fragment so `<b>foo</b>` will be converted to `foo` if there is no converter for `<b>`.\n\t\tthis.upcastDispatcher.on( 'text', convertText(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'element', convertToModelFragment(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'documentFragment', convertToModelFragment(), { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n\t * formatted by the {@link #processor data processor}.\n\t *\n\t * @param {String} [rootName='main'] Root name.\n\t * @returns {String} Output data.\n\t */\n\tget( rootName = 'main' ) {\n\t\t// Get model range.\n\t\treturn this.stringify( this.model.document.getRoot( rootName ) );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n\t * attached to {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element whose content will be stringified.\n\t * @returns {String} Output data.\n\t */\n\tstringify( modelElementOrFragment ) {\n\t\t// Model -> view.\n\t\tconst viewDocumentFragment = this.toView( modelElementOrFragment );\n\n\t\t// View -> data.\n\t\treturn this.processor.toData( viewDocumentFragment );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n\t * converters attached to {@link #downcastDispatcher} to a\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Output view DocumentFragment.\n\t */\n\ttoView( modelElementOrFragment ) {\n\t\t// First, convert elements.\n\t\tconst modelRange = ModelRange.createIn( modelElementOrFragment );\n\n\t\tconst viewDocumentFragment = new ViewDocumentFragment();\n\n\t\t// Create separate ViewWriter just for data conversion purposes.\n\t\t// We have no view controller and rendering do DOM in DataController so view.change() block is not used here.\n\t\tconst viewWriter = new ViewWriter( new ViewDocument() );\n\t\tthis.mapper.bindElements( modelElementOrFragment, viewDocumentFragment );\n\n\t\tthis.downcastDispatcher.convertInsert( modelRange, viewWriter );\n\n\t\tif ( !modelElementOrFragment.is( 'documentFragment' ) ) {\n\t\t\t// Then, if a document element is converted, convert markers.\n\t\t\t// From all document markers, get those, which \"intersect\" with the converter element.\n\t\t\tconst markers = _getMarkersRelativeToElement( modelElementOrFragment );\n\n\t\t\tfor ( const [ name, range ] of markers ) {\n\t\t\t\tthis.downcastDispatcher.convertMarkerAdd( name, range, viewWriter );\n\t\t\t}\n\t\t}\n\n\t\t// Clear bindings so the next call to this method gives correct results.\n\t\tthis.mapper.clearBindings();\n\n\t\treturn viewDocumentFragment;\n\t}\n\n\t/**\n\t * Sets input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t *\n\t * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n\t * the {@link #parse} method.\n\t *\n\t * @param {String} data Input data.\n\t * @param {String} [rootName='main'] Root name.\n\t */\n\tset( data, rootName = 'main' ) {\n\t\t// Save to model.\n\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\t// Clearing selection is a workaround for ticket #569 (LiveRange loses position after removing data from document).\n\t\t\t// After fixing it this code should be removed.\n\t\t\twriter.setSelection( null );\n\t\t\twriter.removeSelectionAttribute( this.model.document.selection.getAttributeKeys() );\n\n\t\t\twriter.remove( ModelRange.createIn( modelRoot ) );\n\t\t\twriter.insert( this.parse( data, modelRoot ), modelRoot );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n\t * attached to the {@link #upcastDispatcher}.\n\t *\n\t * @see #set\n\t * @param {String} data Data to parse.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Parsed data.\n\t */\n\tparse( data, context = '$root' ) {\n\t\t// data -> view\n\t\tconst viewDocumentFragment = this.processor.toView( data );\n\n\t\t// view -> model\n\t\treturn this.toModel( viewDocumentFragment, context );\n\t}\n\n\t/**\n\t * Returns the result of the given {@link module:engine/view/element~Element view element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n\t * {@link #upcastDispatcher view-to-model converters}, wrapped by {module:engine/model/documentfragment~DocumentFragment}.\n\t *\n\t * When marker elements were converted during the conversion process, it will be set as a document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Output document fragment.\n\t */\n\ttoModel( viewElementOrFragment, context = '$root' ) {\n\t\treturn this.model.change( writer => {\n\t\t\treturn this.upcastDispatcher.convert( viewElementOrFragment, writer, context );\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners set by the DataController.\n\t */\n\tdestroy() {}\n}\n\nmix( DataController, ObservableMixin );\n\n// Helper function for downcast conversion.\n//\n// Takes a document element (element that is added to a model document) and checks which markers are inside it\n// and which markers are containing it. If the marker is intersecting with element, the intersection is returned.\nfunction _getMarkersRelativeToElement( element ) {\n\tconst result = [];\n\tconst doc = element.root.document;\n\n\tif ( !doc ) {\n\t\treturn [];\n\t}\n\n\tconst elementRange = ModelRange.createIn( element );\n\n\tfor ( const marker of doc.model.markers ) {\n\t\tconst intersection = elementRange.getIntersection( marker.getRange() );\n\n\t\tif ( intersection ) {\n\t\t\tresult.push( [ marker.name, intersection ] );\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/conversion\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport {\n\tdowncastElementToElement,\n\tdowncastAttributeToElement,\n\tdowncastAttributeToAttribute\n} from './downcast-converters';\n\nimport {\n\tupcastElementToElement,\n\tupcastElementToAttribute,\n\tupcastAttributeToAttribute\n} from './upcast-converters';\n\n/**\n * An utility class that helps organizing dispatchers and adding converters to them.\n */\nexport default class Conversion {\n\t/**\n\t * Creates new Conversion instance.\n\t */\n\tconstructor() {\n\t\tthis._dispatchersGroups = new Map();\n\t}\n\n\t/**\n\t * Registers one or more converters under given group name. Then, group name can be used to assign a converter\n\t * to multiple dispatchers at once.\n\t *\n\t * If given group name is used for a second time,\n\t * {@link module:utils/ckeditorerror~CKEditorError conversion-register-group-exists} error is thrown.\n\t *\n\t * @param {String} groupName A name for dispatchers group.\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers Dispatchers to register\n\t * under given name.\n\t */\n\tregister( groupName, dispatchers ) {\n\t\tif ( this._dispatchersGroups.has( groupName ) ) {\n\t\t\t/**\n\t\t\t * Trying to register a group name that was already registered.\n\t\t\t *\n\t\t\t * @error conversion-register-group-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-register-group-exists: Trying to register a group name that was already registered.' );\n\t\t}\n\n\t\tthis._dispatchersGroups.set( groupName, dispatchers );\n\t}\n\n\t/**\n\t * Provides chainable API to assign converters to dispatchers registered under given group name. Converters are added\n\t * by calling `.add()` method of an object returned by this function.\n\t *\n\t *\t\tconversion.for( 'downcast' )\n\t *\t\t\t.add( conversionHelperA )\n\t *\t\t\t.add( conversionHelperB );\n\t *\n\t * In above example, `conversionHelperA` and `conversionHelperB` will be called for all dispatchers from `'model'` group.\n\t *\n\t * `.add()` takes exactly one parameter, which is a function. That function should accept one parameter, which\n\t * is a dispatcher instance. The function should add an actual converter to passed dispatcher instance.\n\t *\n\t * Conversion helpers for most common cases are already provided. They are flexible enough to cover most use cases.\n\t * See documentation to learn how they can be configured.\n\t *\n\t * For downcast (model to view conversion), these are:\n\t *\n\t * * {@link module:engine/conversion/downcast-converters~downcastElementToElement downcast element to element converter},\n\t * * {@link module:engine/conversion/downcast-converters~downcastAttributeToElement downcast attribute to element converter},\n\t * * {@link module:engine/conversion/downcast-converters~downcastAttributeToAttribute downcast attribute to attribute converter}.\n\t *\n\t * For upcast (view to model conversion), these are:\n\t *\n\t * * {@link module:engine/conversion/upcast-converters~upcastElementToElement upcast element to element converter},\n\t * * {@link module:engine/conversion/upcast-converters~upcastElementToAttribute upcast attribute to element converter},\n\t * * {@link module:engine/conversion/upcast-converters~upcastAttributeToAttribute upcast attribute to attribute converter}.\n\t *\n\t * An example of using conversion helpers to convert `paragraph` model element to `p` view element (and back):\n\t *\n\t *\t\t// Define conversion configuration - model element 'paragraph' should be converted to view element 'p'.\n\t *\t\tconst config = { model: 'paragraph', view: 'p' };\n\t *\n\t *\t\t// Add converters to proper dispatchers using conversion helpers.\n\t *\t\tconversion.for( 'downcast' ).add( downcastElementToElement( config ) );\n\t *\t\tconversion.for( 'upcast' ).add( upcastElementToElement( config ) );\n\t *\n\t * An example of providing custom conversion helper that uses custom converter function:\n\t *\n\t *\t\t// Adding custom `myConverter` converter for 'paragraph' element insertion, with default priority ('normal').\n\t *\t\tconversion.for( 'downcast' ).add( conversion.customConverter( 'insert:paragraph', myConverter ) );\n\t *\n\t * @param {String} groupName Name of dispatchers group to add converters to.\n\t * @returns {Object} Object with `.add()` method, providing a way to add converters.\n\t */\n\tfor( groupName ) {\n\t\tconst dispatchers = this._getDispatchers( groupName );\n\n\t\treturn {\n\t\t\tadd( conversionHelper ) {\n\t\t\t\t_addToDispatchers( dispatchers, conversionHelper );\n\n\t\t\t\treturn this;\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view which convert a model element to a view element (and vice versa).\n\t * For example, model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n\t *\n\t *\t\t// Simple conversion from `paragraph` model element to `<p>` view element (and vice versa).\n\t *\t\tconversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\t *\n\t *\t\t// Override other converters by specifying converter definition with higher priority.\n\t *\t\tconversion.elementToElement( { model: 'paragraph', view: 'div', priority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\tconversion.elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclass: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should be also converted to `paragraph` element.\n\t *\t\tconversion.elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'div',\n\t *\t\t\t\t{\n\t *\t\t\t\t\t// Any element with `display: block` style.\n\t *\t\t\t\t\tstyle: {\n\t *\t\t\t\t\t\tdisplay: 'block'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\tconversion.elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: 'h2',\n\t *\t\t\t// Convert \"headling-like\" paragraphs to headings.\n\t *\t\t\tupcastAlso: viewElement => {\n\t *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\tif ( size > 26 ) {\n\t *\t\t\t\t\t// Returned value be an object with the matched properties.\n\t *\t\t\t\t\t// Those properties will be \"consumed\" during conversion.\n\t *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\n\t *\n\t *\t\t\t\t\treturn { name: true, style: [ 'font-size' ] };\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` is a `String` with a model element name to converter from/to.\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition Converter definition.\n\t */\n\telementToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).add( downcastElementToElement( definition ) );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' ).add(\n\t\t\t\tupcastElementToElement( {\n\t\t\t\t\tmodel,\n\t\t\t\t\tview,\n\t\t\t\t\tpriority: definition.priority\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view which convert a model attribute to a view element (and vice versa).\n\t * For example, model text node with data `\"Foo\"` and `bold` attribute is `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\t// Simple conversion from `bold=true` attribute to `<strong>` view element (and vice versa).\n\t *\t\tconversion.attributeToElement( { model: 'bold', view: 'strong' } );\n\t *\n\t *\t\t// Override other converters by specifying converter definition with higher priority.\n\t *\t\tconversion.attributeToElement( { model: 'bold', view: 'b', priority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\tconversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclass: 'bold'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should be also converted to `bold` attribute.\n\t *\t\tconversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'b',\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tclass: 'bold'\n\t *\t\t\t\t},\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyle: {\n\t *\t\t\t\t\t\t'font-weight': 'bold'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tviewElement => {\n\t *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n\t *\t\t\t\t\t\t// Returned value be an object with the matched properties.\n\t *\t\t\t\t\t\t// Those properties will be \"consumed\" during conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\n\t *\n\t *\t\t\t\t\t\treturn {\n\t *\t\t\t\t\t\t\tname: true,\n\t *\t\t\t\t\t\t\tstyle: [ 'font-weight' ]\n\t *\t\t\t\t\t\t};\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from/to a model attribute key which value is an enum (`fontSize=big|small`).\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\tconversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyle: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyle: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tbig: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size > 10 ) {\n\t *\t\t\t\t\t\t// Returned value be an object with the matched properties.\n\t *\t\t\t\t\t\t// Those properties will be \"consumed\" during conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, style: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size < 10 ) {\n\t *\t\t\t\t\t\t// Returned value be an object with the matched properties.\n\t *\t\t\t\t\t\t// Those properties will be \"consumed\" during conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, style: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` parameter specifies what model attribute should be converted from/to. It can be a `{ key, value }` object\n\t * describing attribute key and value to convert or a `String` specifying just attribute key (then `value` is set to `true`).\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition Converter definition.\n\t */\n\tattributeToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).add( downcastAttributeToElement( definition ) );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' ).add(\n\t\t\t\tupcastElementToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel,\n\t\t\t\t\tpriority: definition.priority\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view which convert a model attribute to a view attribute (and vice versa).\n\t * For example, `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>` (same attribute key and value).\n\t *\n\t *\t\t// Simple conversion from `source` model attribute to `src` view attribute (and vice versa).\n\t *\t\tconversion.attributeToAttribute( { model: 'source', view: 'src' } );\n\t *\n\t *\t\t// Attributes values are strictly specified.\n\t *\t\tconversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Set style attribute.\n\t *\t\tconversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'style',\n\t *\t\t\t\t\tvalue: {\n\t *\t\t\t\t\t\tfloat: 'right',\n\t *\t\t\t\t\t\twidth: '50%',\n\t *\t\t\t\t\t\tmargin: '5px'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from/to a model attribute key which value is an enum (`align=right|center`).\n\t *\t\t// Use `upcastAlso` to define other view elements that should be also converted to `align=right` attribute.\n\t *\t\tconversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'align',\n\t *\t\t\t\tvalues: [ 'right', 'center' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-right'\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-center'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tstyle: {\n\t *\t\t\t\t\t\t'text-align': 'right'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tstyle: {\n\t *\t\t\t\t\t\t'text-align': 'center'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` parameter specifies what model attribute should be converted from/to.\n\t * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n\t * `key` property is the model attribute key to convert from/to.\n\t * `values` are the possible model attribute values. If `values` is not set, model attribute value will be the same as the\n\t * view attribute value.\n\t * If `name` is set, conversion will be set up only for model elements with the given name.\n\t *\n\t * `definition.view` parameter specifies what view attribute should be converted from/to.\n\t * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n\t * `key` property is the view attribute key to convert from/to.\n\t * `value` is the view attribute value to convert from/to. If `definition.value` is not set, view attribute value will be\n\t * the same as the model attribute value.\n\t * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n\t * If `key` is `'style'`, `value` is an object with key-value pairs.\n\t * In other cases, `value` is a `String`.\n\t * If `name` is set, conversion will be set up only for model elements with the given name.\n\t * If `definition.model.values` is set, `definition.view` is an object which assigns values from `definition.model.values`\n\t * to `{ key, value, [ name ] }` objects.\n\t *\n\t * `definition.upcastAlso` specifies which other matching view elements should be also upcast to given model configuration.\n\t * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n\t * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n\t *\n\t * **Note:** `definition.model` and `definition.view` form should be mirrored, that is the same type of parameters should\n\t * be given in both parameters.\n\t *\n\t * @param {Object} definition Converter definition.\n\t * @param {String|Object} definition.model Model attribute to convert from/to.\n\t * @param {String|Object} definition.view View attribute to convert from/to.\n\t * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n\t * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n\t * is used only if `config.model.values` is specified.\n\t */\n\tattributeToAttribute( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).add( downcastAttributeToAttribute( definition ) );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' ).add(\n\t\t\t\tupcastAttributeToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns dispatchers registered under given group name.\n\t *\n\t * If given group name has not been registered,\n\t * {@link module:utils/ckeditorerror~CKEditorError conversion-for-unknown-group} error is thrown.\n\t *\n\t * @private\n\t * @param {String} groupName\n\t * @returns {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>}\n\t */\n\t_getDispatchers( groupName ) {\n\t\tconst dispatchers = this._dispatchersGroups.get( groupName );\n\n\t\tif ( !dispatchers ) {\n\t\t\t/**\n\t\t\t * Trying to add a converter to an unknown dispatchers group.\n\t\t\t *\n\t\t\t * @error conversion-for-unknown-group\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.' );\n\t\t}\n\n\t\treturn dispatchers;\n\t}\n}\n\n/**\n * Defines how the model should be converted from/to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] Model conversion definition. Describes model element or model attribute to convert. This parameter differs\n * for different functions that accepts `ConverterDefinition`. See the description of a function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view Definition of a view element to convert from/to.\n * If `model` describes multiple values, `view` is an object that assigns those values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns those values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [priority] Conversion priority.\n */\n\n// Helper function for `Conversion` `.add()` method.\n//\n// Calls `conversionHelper` on each dispatcher from the group specified earlier in `.for()` call, effectively\n// adding converters to all specified dispatchers.\n//\n// @private\n// @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n// module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n// @param {Function} conversionHelper\nfunction _addToDispatchers( dispatchers, conversionHelper ) {\n\tfor ( const dispatcher of dispatchers ) {\n\t\tconversionHelper( dispatcher );\n\t}\n}\n\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\nfunction* _getAllUpcastDefinitions( definition ) {\n\tif ( definition.model.values ) {\n\t\tfor ( const value of definition.model.values ) {\n\t\t\tconst model = { key: definition.model.key, value };\n\t\t\tconst view = definition.view[ value ];\n\t\t\tconst upcastAlso = definition.upcastAlso ? definition.upcastAlso[ value ] : undefined;\n\n\t\t\tyield* _getUpcastDefinition( model, view, upcastAlso );\n\t\t}\n\t} else {\n\t\tyield* _getUpcastDefinition( definition.model, definition.view, definition.upcastAlso );\n\t}\n}\n\nfunction* _getUpcastDefinition( model, view, upcastAlso ) {\n\tyield { model, view };\n\n\tif ( upcastAlso ) {\n\t\tupcastAlso = Array.isArray( upcastAlso ) ? upcastAlso : [ upcastAlso ];\n\n\t\tfor ( const upcastAlsoItem of upcastAlso ) {\n\t\t\tyield { model, view: upcastAlsoItem };\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/operation\n */\n\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\n\n/**\n * Abstract base operation class.\n *\n * @abstract\n */\nexport default class Operation {\n\t/**\n\t * Base operation constructor.\n\t *\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( baseVersion ) {\n\t\t/**\n\t\t * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\n\t\t * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\n\t\t * {@link module:engine/model/document~Document#version document version} the\n\t\t * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @member {Number}\n\t\t */\n\t\tthis.baseVersion = baseVersion;\n\n\t\t/**\n\t\t * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isDocumentOperation\n\t\t */\n\t\tthis.isDocumentOperation = this.baseVersion !== null;\n\n\t\t/**\n\t\t * Operation type.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #type\n\t\t */\n\n\t\t/**\n\t\t * {@link module:engine/model/delta/delta~Delta Delta} which the operation is a part of. This property is set by the\n\t\t * {@link module:engine/model/delta/delta~Delta delta} when the operations is added to it by the\n\t\t * {@link module:engine/model/delta/delta~Delta#addOperation} method.\n\t\t *\n\t\t * @member {module:engine/model/delta/delta~Delta} #delta\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns an operation that has the same parameters as this operation.\n\t\t *\n\t\t * @method #clone\n\t\t * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns a reverse operation. Reverse operation when executed right after\n\t\t * the original operation will bring back tree model state to the point before the original\n\t\t * operation execution. In other words, it reverses changes done by the original operation.\n\t\t *\n\t\t * Keep in mind that tree model state may change since executing the original operation,\n\t\t * so reverse operation will be \"outdated\". In that case you will need to\n\t\t * {@link module:engine/model/operation/transform~transform} it by all operations that were executed after the original operation.\n\t\t *\n\t\t * @method #getReversed\n\t\t * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\n\t\t */\n\n\t\t/**\n\t\t * Executes the operation - modifications described by the operation properties will be applied to the model tree.\n\t\t *\n\t\t * @protected\n\t\t * @method #_execute\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n\t * an error if operation is not valid.\n\t *\n\t * @protected\n\t * @method #_validate\n\t */\n\t_validate() {\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @method #toJSON\n\t * @returns {Object} Clone of this object with the delta property replaced with string.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this, true );\n\n\t\tjson.__className = this.constructor.className;\n\n\t\t// Remove parent delta to avoid circular dependencies.\n\t\tdelete json.delta;\n\n\t\t// Only document operations are shared with other clients so it is not necessary to keep this information.\n\t\tdelete json.isDocumentOperation;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Name of the operation class used for serialization.\n\t *\n\t * @type {String}\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.Operation';\n\t}\n\n\t/**\n\t * Creates Operation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/operation~Operation}\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new this( json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module module:engine/model/documentfragment\n */\n\nimport NodeList from './nodelist';\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * DocumentFragment represents a part of model which does not have a common root but it's top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates an empty `DocumentFragment`.\n\t *\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * Nodes to be contained inside the `DocumentFragment`.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n\t\t * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n\t\t * when DocumentFragment will be inserted to the document.\n\t\t *\n\t\t * @member {Map<String,module:engine/model/range~Range>} module:engine/model/documentfragment~DocumentFragment#markers\n\t\t */\n\t\tthis.markers = new Map();\n\n\t\t/**\n\t\t * List of nodes contained inside the document fragment.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis.insertChildren( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all nodes contained inside this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this.getChildren();\n\t}\n\n\t/**\n\t * Number of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/model/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment';\n\t}\n\n\t/**\n\t * Gets the child at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node|null} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this document fragment's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n\t *\n\t * @returns {Array}\n\t */\n\tgetPath() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts offset \"position\" to index \"position\".\n\t *\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst docFrag = new DocumentFragment( [ textNode, pElement ] );\n\t *\t\tdocFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdocFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdocFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdocFrag.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdocFrag.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdocFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * {@link #insertChildren Inserts} one or more nodes at the end of this document fragment.\n\t *\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\tappendChildren( items ) {\n\t\tthis.insertChildren( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this document fragment.\n\t *\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\tinsertChildren( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children.insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index\n\t * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\tremoveChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children.removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Converts `DocumentFragment` instance to plain object and returns it.\n\t * Takes care of converting all of this document fragment's children.\n\t *\n\t * @returns {Object} `DocumentFragment` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = [];\n\n\t\tfor ( const node of this._children ) {\n\t\t\tjson.push( node.toJSON() );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `DocumentFragment` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `DocumentFragment`.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} `DocumentFragment` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\treturn new DocumentFragment( children );\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>}\n// @return {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/utils\n */\n\nimport Node from '../node';\nimport Text from '../text';\nimport TextProxy from '../textproxy';\nimport Range from '../range';\nimport DocumentFragment from '../documentfragment';\nimport NodeList from '../nodelist';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Contains functions used for composing model tree by {@link module:engine/model/operation/operation~Operation operations}.\n * Those functions are built on top of {@link module:engine/model/node~Node node}, and it's child classes', APIs.\n *\n * @protected\n * @namespace utils\n */\n\n/**\n * Inserts given nodes at given position.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.insert\n * @param {module:engine/model/position~Position} position Position at which nodes should be inserted.\n * @param {module:engine/model/node~NodeSet} nodes Nodes to insert.\n * @returns {module:engine/model/range~Range} Range spanning over inserted elements.\n */\nexport function _insert( position, nodes ) {\n\tnodes = _normalizeNodes( nodes );\n\n\t// We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n\tconst offset = nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\tconst parent = position.parent;\n\n\t// Insertion might be in a text node, we should split it if that's the case.\n\t_splitNodeAtPosition( position );\n\tconst index = position.index;\n\n\t// Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n\t// using basic `Element` API.\n\tparent.insertChildren( index, nodes );\n\n\t// Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n\t_mergeNodesAtIndex( parent, index + nodes.length );\n\t_mergeNodesAtIndex( parent, index );\n\n\treturn new Range( position, position.getShiftedBy( offset ) );\n}\n\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.remove\n * @param {module:engine/model/range~Range} range Range containing nodes to remove.\n * @returns {Array.<module:engine/model/node~Node>}\n */\nexport function _remove( range ) {\n\tif ( !range.isFlat ) {\n\t\t/**\n\t\t * Trying to remove a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-remove-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError( 'operation-utils-remove-range-not-flat: ' +\n\t\t\t'Trying to remove a range which starts and ends in different element.' );\n\t}\n\n\tconst parent = range.start.parent;\n\n\t// Range may be inside text nodes, we have to split them if that's the case.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Remove the text nodes using basic `Element` API.\n\tconst removed = parent.removeChildren( range.start.index, range.end.index - range.start.index );\n\n\t// Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n\t// touching at the position equal to the removed range beginning. We check merging possibility there.\n\t_mergeNodesAtIndex( parent, range.start.index );\n\n\treturn removed;\n}\n\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.move\n * @param {module:engine/model/range~Range} sourceRange Range containing nodes to move.\n * @param {module:engine/model/position~Position} targetPosition Position to which nodes should be moved.\n * @returns {module:engine/model/range~Range} Range containing moved nodes.\n */\nexport function _move( sourceRange, targetPosition ) {\n\tif ( !sourceRange.isFlat ) {\n\t\t/**\n\t\t * Trying to move a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-move-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError( 'operation-utils-move-range-not-flat: ' +\n\t\t\t'Trying to move a range which starts and ends in different element.' );\n\t}\n\n\tconst nodes = _remove( sourceRange );\n\n\t// We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n\t// that change might have an impact on `targetPosition`.\n\ttargetPosition = targetPosition._getTransformedByDeletion( sourceRange.start, sourceRange.end.offset - sourceRange.start.offset );\n\n\treturn _insert( targetPosition, nodes );\n}\n\n/**\n * Sets given attribute on nodes in given range.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.setAttribute\n * @param {module:engine/model/range~Range} range Range containing nodes that should have the attribute set.\n * @param {String} key Key of attribute to set.\n * @param {*} value Attribute value.\n */\nexport function _setAttribute( range, key, value ) {\n\t// Range might start or end in text nodes, so we have to split them.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Iterate over all items in the range.\n\tfor ( const item of range.getItems() ) {\n\t\t// Iterator will return `TextProxy` instances but we know that those text proxies will\n\t\t// always represent full text nodes (this is guaranteed thanks to splitting we did before).\n\t\t// So, we can operate on those text proxies' text nodes.\n\t\tconst node = item.is( 'textProxy' ) ? item.textNode : item;\n\n\t\tif ( value !== null ) {\n\t\t\tnode.setAttribute( key, value );\n\t\t} else {\n\t\t\tnode.removeAttribute( key );\n\t\t}\n\n\t\t// After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n\t\t_mergeNodesAtIndex( node.parent, node.index );\n\t}\n\n\t// Try to merge last changed node with it's previous sibling (not covered by the loop above).\n\t_mergeNodesAtIndex( range.end.parent, range.end.index );\n}\n\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link module:engine/model/node~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.normalizeNodes\n * @param {module:engine/model/node~NodeSet} nodes Objects to normalize.\n * @returns {Array.<module:engine/model/node~Node>} Normalized nodes.\n */\nexport function _normalizeNodes( nodes ) {\n\tconst normalized = [];\n\n\tif ( !( nodes instanceof Array ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Convert instances of classes other than Node.\n\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\tif ( typeof nodes[ i ] == 'string' ) {\n\t\t\tnormalized.push( new Text( nodes[ i ] ) );\n\t\t} else if ( nodes[ i ] instanceof TextProxy ) {\n\t\t\tnormalized.push( new Text( nodes[ i ].data, nodes[ i ].getAttributes() ) );\n\t\t} else if ( nodes[ i ] instanceof DocumentFragment || nodes[ i ] instanceof NodeList ) {\n\t\t\tfor ( const child of nodes[ i ] ) {\n\t\t\t\tnormalized.push( child );\n\t\t\t}\n\t\t} else if ( nodes[ i ] instanceof Node ) {\n\t\t\tnormalized.push( nodes[ i ] );\n\t\t}\n\t\t// Skip unrecognized type.\n\t}\n\n\t// Merge text nodes.\n\tfor ( let i = 1; i < normalized.length; i++ ) {\n\t\tconst node = normalized[ i ];\n\t\tconst prev = normalized[ i - 1 ];\n\n\t\tif ( node instanceof Text && prev instanceof Text && _haveSameAttributes( node, prev ) ) {\n\t\t\t// Doing this instead changing prev.data because .data is readonly.\n\t\t\tnormalized.splice( i - 1, 2, new Text( prev.data + node.data, prev.getAttributes() ) );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn normalized;\n}\n\n/**\n * Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n * merges them into one node if they have same attributes.\n *\n * Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n *\n * @ignore\n * @private\n * @param {module:engine/model/element~Element} element Parent element of nodes to merge.\n * @param {Number} index Index between nodes to merge.\n */\nfunction _mergeNodesAtIndex( element, index ) {\n\tconst nodeBefore = element.getChild( index - 1 );\n\tconst nodeAfter = element.getChild( index );\n\n\t// Check if both of those nodes are text objects with same attributes.\n\tif ( nodeBefore && nodeAfter && nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) && _haveSameAttributes( nodeBefore, nodeAfter ) ) {\n\t\t// Append text of text node after index to the before one.\n\t\tconst mergedNode = new Text( nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes() );\n\n\t\t// Remove separate text nodes.\n\t\telement.removeChildren( index - 1, 2 );\n\n\t\t// Insert merged text node.\n\t\telement.insertChildren( index - 1, mergedNode );\n\t}\n}\n\n/**\n * Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n * containing a part of original text node.\n *\n * @ignore\n * @private\n * @param {module:engine/model/position~Position} position Position at which node should be split.\n */\nfunction _splitNodeAtPosition( position ) {\n\tconst textNode = position.textNode;\n\tconst element = position.parent;\n\n\tif ( textNode ) {\n\t\tconst offsetDiff = position.offset - textNode.startOffset;\n\t\tconst index = textNode.index;\n\n\t\telement.removeChildren( index, 1 );\n\n\t\tconst firstPart = new Text( textNode.data.substr( 0, offsetDiff ), textNode.getAttributes() );\n\t\tconst secondPart = new Text( textNode.data.substr( offsetDiff ), textNode.getAttributes() );\n\n\t\telement.insertChildren( index, [ firstPart, secondPart ] );\n\t}\n}\n\n/**\n * Checks whether two given nodes have same attributes.\n *\n * @ignore\n * @private\n * @param {module:engine/model/node~Node} nodeA Node to check.\n * @param {module:engine/model/node~Node} nodeB Node to check.\n * @returns {Boolean} `true` if nodes have same attributes, `false` otherwise.\n */\nfunction _haveSameAttributes( nodeA, nodeB ) {\n\tconst iteratorA = nodeA.getAttributes();\n\tconst iteratorB = nodeB.getAttributes();\n\n\tfor ( const attr of iteratorA ) {\n\t\tif ( attr[ 1 ] !== nodeB.getAttribute( attr[ 0 ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\titeratorB.next();\n\t}\n\n\treturn iteratorB.next().done;\n}\n\n/**\n * Value that can be normalized to an array of {@link module:engine/model/node~Node nodes}.\n *\n * Non-arrays are normalized as follows:\n * * {@link module:engine/model/node~Node Node} is left as is,\n * * {@link module:engine/model/textproxy~TextProxy TextProxy} and `String` are normalized to {@link module:engine/model/text~Text Text},\n * * {@link module:engine/model/nodelist~NodeList NodeList} is normalized to an array containing all nodes that are in that node list,\n * * {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment} is normalized to an array containing all of it's\n * * children.\n *\n * Arrays are processed item by item like non-array values and flattened to one array. Normalization always results in\n * a flat array of {@link module:engine/model/node~Node nodes}. Consecutive text nodes (or items normalized to text nodes) will be\n * merged if they have same attributes.\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/textproxy~TextProxy|String|\n * module:engine/model/nodelist~NodeList|module:engine/model/documentfragment~DocumentFragment|Iterable}\n * module:engine/model/node~NodeSet\n */\n","import baseIsEqual from './_baseIsEqual';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are **not** supported.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent,\n *  else `false`.\n * @example\n *\n * var object = { 'user': 'fred' };\n * var other = { 'user': 'fred' };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport isEqual from '@ckeditor/ckeditor5-utils/src/lib/lodash/isEqual';\n\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes.\n\t *\n\t * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n\t * have an attribute with the same key as the added attribute.\n\t *\n\t * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n\t * must have an attribute with that key added.\n\t *\n\t * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n\t * operation's ranges must already have an attribute with given key and `oldValue` as value\n\t *\n\t * @param {module:engine/model/range~Range} range Range on which the operation should be applied.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n\t * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( range, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Range on which operation should be applied.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.range = Range.createFromRange( range );\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null`, if attribute was not set before.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue === undefined ? null : oldValue;\n\n\t\t/**\n\t\t * New value of the attribute with given key or `null`, if operation should remove attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue === undefined ? null : newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeAttribute';\n\t\t} else {\n\t\t\treturn 'changeAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new AttributeOperation( this.range, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new AttributeOperation( this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tfor ( const item of this.range.getItems() ) {\n\t\t\tif ( this.oldValue !== null && !isEqual( item.getAttribute( this.key ), this.oldValue ) ) {\n\t\t\t\t/**\n\t\t\t\t * Changed node has different attribute value than operation's old attribute value.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-wrong-old-value\n\t\t\t\t * @param {module:engine/model/item~Item} item\n\t\t\t\t * @param {String} key\n\t\t\t\t * @param {*} value\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t\t'old attribute value.',\n\t\t\t\t\t{ item, key: this.key, value: this.oldValue }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( this.oldValue === null && this.newValue !== null && item.hasAttribute( this.key ) ) {\n\t\t\t\t/**\n\t\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-attribute-exists\n\t\t\t\t * @param {module:engine/model/node~Node} node\n\t\t\t\t * @param {String} key\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\t\t{ node: item, key: this.key }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// If value to set is same as old value, don't do anything.\n\t\tif ( !isEqual( this.oldValue, this.newValue ) ) {\n\t\t\t// Execution.\n\t\t\t_setAttribute( this.range, this.key, this.newValue );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.AttributeOperation';\n\t}\n\n\t/**\n\t * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new AttributeOperation( Range.fromJSON( json.range, document ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/moveoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MoveOperation extends Operation {\n\t/**\n\t * Creates a move operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = Position.createFromPosition( sourcePosition );\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which moved nodes will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = Position.createFromPosition( targetPosition );\n\n\t\t/**\n\t\t * Defines whether `MoveOperation` is sticky. If `MoveOperation` is sticky, during\n\t\t * {@link module:engine/model/operation/transform~transform operational transformation} if there will be an operation that\n\t\t * inserts some nodes at the position equal to the boundary of this `MoveOperation`, that operation will\n\t\t * get their insertion path updated to the position where this `MoveOperation` moves the range.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/moveoperation~MoveOperation#isSticky\n\t\t */\n\t\tthis.isSticky = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'move';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst op = new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion );\n\t\top.isSticky = this.isSticky;\n\n\t\treturn op;\n\t}\n\n\t/**\n\t * Returns the start position of the moved range after it got moved. This may be different than\n\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n\t * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n\t * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n\t *\n\t *\t\t vv              vv\n\t *\t\tabcdefg ===> adefbcg\n\t *\t\t     ^          ^\n\t *\t\t     targetPos\tmovedRangeStart\n\t *\t\t     offset 6\toffset 4\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetMovedRangeStart() {\n\t\treturn this.targetPosition._getTransformedByDeletion( this.sourcePosition, this.howMany );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\n\n\t\tconst op = new this.constructor( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\n\t\top.isSticky = this.isSticky;\n\n\t\treturn op;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\t\tconst sourceOffset = this.sourcePosition.offset;\n\t\tconst targetOffset = this.targetPosition.offset;\n\n\t\t// Validate whether move operation has correct parameters.\n\t\t// Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n\t\t// We expect that many errors might be connected with one of scenarios described below.\n\t\tif ( !sourceElement || !targetElement ) {\n\t\t\t/**\n\t\t\t * Source position or target position is invalid.\n\t\t\t *\n\t\t\t * @error move-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-position-invalid: Source position or target position is invalid.'\n\t\t\t);\n\t\t} else if ( sourceOffset + this.howMany > sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * The nodes which should be moved do not exist.\n\t\t\t *\n\t\t\t * @error move-operation-nodes-do-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.'\n\t\t\t);\n\t\t} else if ( sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany ) {\n\t\t\t/**\n\t\t\t * Trying to move a range of nodes into the middle of that range.\n\t\t\t *\n\t\t\t * @error move-operation-range-into-itself\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.'\n\t\t\t);\n\t\t} else if ( this.sourcePosition.root == this.targetPosition.root ) {\n\t\t\tif ( compareArrays( this.sourcePosition.getParentPath(), this.targetPosition.getParentPath() ) == 'prefix' ) {\n\t\t\t\tconst i = this.sourcePosition.path.length - 1;\n\n\t\t\t\tif ( this.targetPosition.path[ i ] >= sourceOffset && this.targetPosition.path[ i ] < sourceOffset + this.howMany ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Trying to move a range of nodes into one of nodes from that range.\n\t\t\t\t\t *\n\t\t\t\t\t * @error move-operation-node-into-itself\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_move( Range.createFromPositionAndShift( this.sourcePosition, this.howMany ), this.targetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.MoveOperation';\n\t}\n\n\t/**\n\t * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\n\t\tconst move = new this( sourcePosition, json.howMany, targetPosition, json.baseVersion );\n\n\t\tif ( json.isSticky ) {\n\t\t\tmove.isSticky = true;\n\t\t}\n\n\t\treturn move;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/reinsertoperation\n */\n\nimport MoveOperation from './moveoperation';\nimport RemoveOperation from './removeoperation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to reinsert previously removed nodes back to the non-graveyard root. This operation acts like\n * {@link module:engine/model/operation/moveoperation~MoveOperation} but it returns\n * {@link module:engine/model/operation/removeoperation~RemoveOperation} when reversed\n * and fires different change event.\n */\nexport default class ReinsertOperation extends MoveOperation {\n\t/**\n\t * Position where nodes will be re-inserted.\n\t *\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget position() {\n\t\treturn this.targetPosition;\n\t}\n\n\t/**\n\t * @param {module:engine/model/position~Position} pos\n\t */\n\tset position( pos ) {\n\t\tthis.targetPosition = pos;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'reinsert';\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/removeoperation~RemoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\n\n\t\treturn new RemoveOperation( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tsuper._validate();\n\n\t\tif ( !this.sourcePosition.root.document ) {\n\t\t\tthrow new CKEditorError( 'reinsert-operation-on-detached-item: Cannot reinsert detached item.' );\n\t\t}\n\n\t\tif ( !this.targetPosition.root.document ) {\n\t\t\tthrow new CKEditorError( 'reinsert-operation-to-detached-parent: Cannot reinsert item to detached parent.' );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.ReinsertOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/removeoperation\n */\n\nimport MoveOperation from './moveoperation';\nimport ReinsertOperation from './reinsertoperation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to remove a range of nodes.\n */\nexport default class RemoveOperation extends MoveOperation {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'remove';\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/reinsertoperation~ReinsertOperation|module:engine/model/operation/nooperation~NoOperation}\n\t */\n\tgetReversed() {\n\t\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\n\n\t\treturn new ReinsertOperation( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tsuper._validate();\n\n\t\tif ( !this.sourcePosition.root.document ) {\n\t\t\t/**\n\t\t\t * Item that is going to be removed needs to be a {@link module:engine/model/document~Document document} child.\n\t\t\t * To remove Item from detached document fragment use\n\t\t\t * {@link module:engine/model/operation/detachoperation~DetachOperation DetachOperation}.\n\t\t\t *\n\t\t\t * @error remove-operation-on-detached-item\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'remove-operation-on-detached-item: Cannot remove detached item.' );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.RemoveOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport RemoveOperation from './removeoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = Position.createFromPosition( position );\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node.clone( true ) ) );\n\n\t\treturn new InsertOperation( this.position, nodes, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/removeoperation~RemoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new RemoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid: Insertion position is invalid.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node.clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\treturn new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\n\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n\t/**\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n\t * @param {module:engine/model/range~Range} newRange Marker range after the change.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( name, oldRange, newRange, markers, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Marker name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Marker range before the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.oldRange = oldRange ? Range.createFromRange( oldRange ) : null;\n\n\t\t/**\n\t\t * Marker range after the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.newRange = newRange ? Range.createFromRange( newRange ) : null;\n\n\t\t/**\n\t\t * Marker collection on which change should be executed.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markers = markers;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'marker';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new MarkerOperation( this.name, this.oldRange, this.newRange, this._markers, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tgetReversed() {\n\t\treturn new MarkerOperation( this.name, this.newRange, this.oldRange, this._markers, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst type = this.newRange ? '_set' : '_remove';\n\n\t\tthis._markers[ type ]( this.name, this.newRange, true );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tdelete json._markers;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.MarkerOperation';\n\t}\n\n\t/**\n\t * Creates `MarkerOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new MarkerOperation(\n\t\t\tjson.name,\n\t\t\tjson.oldRange ? Range.fromJSON( json.oldRange, document ) : null,\n\t\t\tjson.newRange ? Range.fromJSON( json.newRange, document ) : null,\n\t\t\tdocument.model.markers,\n\t\t\tjson.baseVersion\n\t\t);\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/nooperation\n */\n\nimport Operation from './operation';\n\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class NoOperation extends Operation {\n\tget type() {\n\t\treturn 'noop';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new NoOperation( this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation}\n\t */\n\tgetReversed() {\n\t\treturn new NoOperation( this.baseVersion + 1 );\n\t}\n\n\t_execute() {\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.NoOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\n\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n\t/**\n\t * Creates an operation that changes element's name.\n\t *\n\t * @param {module:engine/model/position~Position} position Position before an element to change.\n\t * @param {String} oldName Current name of the element.\n\t * @param {String} newName New name for the element.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, oldName, newName, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before an element to change.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n\t\t */\n\t\tthis.position = position;\n\n\t\t/**\n\t\t * Current name of the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n\t\t */\n\t\tthis.oldName = oldName;\n\n\t\t/**\n\t\t * New name for the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n\t\t */\n\t\tthis.newName = newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'rename';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RenameOperation( Position.createFromPosition( this.position ), this.oldName, this.newName, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RenameOperation( Position.createFromPosition( this.position ), this.newName, this.oldName, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Given position is invalid or node after it is not instance of Element.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.'\n\t\t\t);\n\t\t} else if ( element.name !== this.oldName ) {\n\t\t\t/**\n\t\t\t * Element to change has different name than operation's old name.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-name: Element to change has different name than operation\\'s old name.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\telement.name = this.newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.RenameOperation';\n\t}\n\n\t/**\n\t * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new RenameOperation( Position.fromJSON( json.position, document ), json.oldName, json.newName, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\n\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes on root element.\n\t *\n\t * @see module:engine/model/operation/attributeoperation~AttributeOperation\n\t * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n\t * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( root, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Root element to change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/rootelement~RootElement}\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null` if adding a new attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue;\n\n\t\t/**\n\t\t * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addRootAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeRootAttribute';\n\t\t} else {\n\t\t\treturn 'changeRootAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.root != this.root.root || this.root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * The element to change is not a root element.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-not-a-root\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-not-a-root: The element to change is not a root element.',\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue !== null && this.root.getAttribute( this.key ) !== this.oldValue ) {\n\t\t\t/**\n\t\t\t * The attribute which should be removed does not exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-wrong-old-value\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t'old attribute value.',\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue === null && this.newValue !== null && this.root.hasAttribute( this.key ) ) {\n\t\t\t/**\n\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-attribute-exists\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tif ( this.newValue !== null ) {\n\t\t\tthis.root.setAttribute( this.key, this.newValue );\n\t\t} else {\n\t\t\tthis.root.removeAttribute( this.key );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.RootAttributeOperation';\n\t}\n\n\t/**\n\t * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tif ( !document.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error rootattributeoperation-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.',\n\t\t\t\t{ rootName: json }\n\t\t\t);\n\t\t}\n\n\t\treturn new RootAttributeOperation( document.getRoot( json.root ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/operationfactory\n */\n\nimport AttributeOperation from '../operation/attributeoperation';\nimport InsertOperation from '../operation/insertoperation';\nimport MarkerOperation from '../operation/markeroperation';\nimport MoveOperation from '../operation/moveoperation';\nimport NoOperation from '../operation/nooperation';\nimport Operation from '../operation/operation';\nimport ReinsertOperation from '../operation/reinsertoperation';\nimport RemoveOperation from '../operation/removeoperation';\nimport RenameOperation from '../operation/renameoperation';\nimport RootAttributeOperation from '../operation/rootattributeoperation';\n\nconst operations = {};\noperations[ AttributeOperation.className ] = AttributeOperation;\noperations[ InsertOperation.className ] = InsertOperation;\noperations[ MarkerOperation.className ] = MarkerOperation;\noperations[ MoveOperation.className ] = MoveOperation;\noperations[ NoOperation.className ] = NoOperation;\noperations[ Operation.className ] = Operation;\noperations[ ReinsertOperation.className ] = ReinsertOperation;\noperations[ RemoveOperation.className ] = RemoveOperation;\noperations[ RenameOperation.className ] = RenameOperation;\noperations[ RootAttributeOperation.className ] = RootAttributeOperation;\n\n/**\n * A factory class for creating operations.\n *\n * @abstract\n */\nexport default class OperationFactory {\n\t/**\n\t * Creates concrete `Operation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/operation~Operation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn operations[ json.__className ].fromJSON( json, document );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/deltafactory\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport OperationFactory from '../operation/operationfactory';\n\nconst deserializers = new Map();\n\n/**\n * A factory class for creating operations.\n *\n * Delta is a single, from the user action point of view, change in the editable document, like insert, split or\n * rename element. Delta is composed of operations, which are unit changes needed to be done to execute user action.\n *\n * Multiple deltas are grouped into a single {@link module:engine/model/batch~Batch}.\n */\nexport default class DeltaFactory {\n\t/**\n\t * Creates InsertDelta from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json\n\t * @param {module:engine/model/document~Document} doc Document on which this delta will be applied.\n\t * @returns {module:engine/model/delta/insertdelta~InsertDelta}\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( !deserializers.has( json.__className ) ) {\n\t\t\t/**\n\t\t\t * This delta has no defined deserializer.\n\t\t\t *\n\t\t\t * @error delta-fromjson-no-deserializer\n\t\t\t * @param {String} name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'delta-fromjson-no-deserializer: This delta has no defined deserializer',\n\t\t\t\t{ name: json.__className }\n\t\t\t);\n\t\t}\n\n\t\tconst Delta = deserializers.get( json.__className );\n\n\t\tconst delta = new Delta();\n\n\t\tfor ( const operation of json.operations ) {\n\t\t\tdelta.addOperation( OperationFactory.fromJSON( operation, doc ) );\n\t\t}\n\n\t\t// Rewrite all other properties.\n\t\tfor ( const prop in json ) {\n\t\t\tif ( prop != '__className' && delta[ prop ] === undefined ) {\n\t\t\t\tdelta[ prop ] = json[ prop ];\n\t\t\t}\n\t\t}\n\n\t\treturn delta;\n\t}\n\n\t/**\n\t * Registers a class for delta factory.\n\t *\n\t * @param {Function} Delta A delta class to register.\n\t */\n\tstatic register( Delta ) {\n\t\tdeserializers.set( Delta.className, Delta );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/delta\n */\n\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\nimport DeltaFactory from './deltafactory';\n\n/**\n * Base class for all deltas.\n *\n * Delta is a single, from the user action point of view, change in the editable document, like insert, split or\n * rename element. Delta is composed of operations, which are unit changes needed to be done to execute user action.\n *\n * Multiple deltas are grouped into a single {@link module:engine/model/batch~Batch}.\n */\nexport default class Delta {\n\t/**\n\t * Creates a delta instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * {@link module:engine/model/batch~Batch} which delta is a part of. This property is null by default and set by the\n\t\t * {@link module:engine/model/batch~Batch#addDelta} method.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/batch~Batch} module:engine/model/delta/delta~Delta#batch\n\t\t */\n\t\tthis.batch = null;\n\n\t\t/**\n\t\t * Array of operations which compose delta.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/operation/operation~Operation[]} module:engine/model/delta/delta~Delta#operations\n\t\t */\n\t\tthis.operations = [];\n\t}\n\n\t/**\n\t * Returns delta base version which is equal to the base version of the first operation in delta. If there\n\t * are no operations in delta, returns `null`.\n\t *\n\t * @see module:engine/model/document~Document\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tif ( this.operations.length > 0 ) {\n\t\t\treturn this.operations[ 0 ].baseVersion;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * @param {Number} baseVersion\n\t */\n\tset baseVersion( baseVersion ) {\n\t\tfor ( const operation of this.operations ) {\n\t\t\toperation.baseVersion = baseVersion++;\n\t\t}\n\t}\n\n\t/**\n\t * A class that will be used when creating reversed delta.\n\t *\n\t * @private\n\t * @type {Function}\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn Delta;\n\t}\n\n\t/**\n\t * Delta type.\n\t *\n\t * @readonly\n\t * @member {String} #type\n\t */\n\n\t/**\n\t * Add operation to the delta.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation instance.\n\t */\n\taddOperation( operation ) {\n\t\toperation.delta = this;\n\t\tthis.operations.push( operation );\n\n\t\treturn operation;\n\t}\n\n\t/**\n\t * Creates and returns a delta that has the same parameters as this delta.\n\t *\n\t * @returns {module:engine/model/delta/delta~Delta} Clone of this delta.\n\t */\n\tclone() {\n\t\tconst delta = new this.constructor();\n\n\t\tfor ( const op of this.operations ) {\n\t\t\tdelta.addOperation( op.clone() );\n\t\t}\n\n\t\treturn delta;\n\t}\n\n\t/**\n\t * Creates and returns a reverse delta. Reverse delta when executed right after the original delta will bring back\n\t * tree model state to the point before the original delta execution. In other words, it reverses changes done\n\t * by the original delta.\n\t *\n\t * Keep in mind that tree model state may change since executing the original delta, so reverse delta may be \"outdated\".\n\t * In that case you will need to {@link module:engine/model/delta/transform~transform} it by all deltas that were executed after\n\t * the original delta.\n\t *\n\t * @returns {module:engine/model/delta/delta~Delta} Reversed delta.\n\t */\n\tgetReversed() {\n\t\tconst delta = new this._reverseDeltaClass();\n\n\t\tfor ( const op of this.operations ) {\n\t\t\tdelta.addOperation( op.getReversed() );\n\t\t}\n\n\t\tdelta.operations.reverse();\n\n\t\tfor ( let i = 0; i < delta.operations.length; i++ ) {\n\t\t\tdelta.operations[ i ].baseVersion = this.operations[ this.operations.length - 1 ].baseVersion + i + 1;\n\t\t}\n\n\t\treturn delta;\n\t}\n\n\t/**\n\t * Custom toJSON method to make deltas serializable.\n\t *\n\t * @returns {Object} Clone of this delta with added class name.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\tjson.__className = this.constructor.className;\n\n\t\t// Remove parent batch to avoid circular dependencies.\n\t\tdelete json.batch;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Delta class name. Used by {@link #toJSON} method for serialization and\n\t * {@link module:engine/model/delta/deltafactory~DeltaFactory.fromJSON} during deserialization.\n\t *\n\t * @type {String}\n\t * @readonly\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.Delta';\n\t}\n}\n\nDeltaFactory.register( Delta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/attributedelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\nimport NoOperation from '../operation/nooperation';\nimport Range from '../range';\n\n/**\n * To provide specific OT behavior and better collisions solving, methods to change attributes\n * ({@link module:engine/model/writer~Writer#setAttribute} and {@link module:engine/model/writer~Writer#removeAttribute})\n * use `AttributeDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class AttributeDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'attribute';\n\t}\n\n\t/**\n\t * The attribute key that is changed by the delta or `null` if the delta has no operations.\n\t *\n\t * @readonly\n\t * @type {String|null}\n\t */\n\tget key() {\n\t\treturn this.operations[ 0 ] ? this.operations[ 0 ].key : null;\n\t}\n\n\t/**\n\t * The attribute value that is set by the delta or `null` if the delta has no operations.\n\t *\n\t * @readonly\n\t * @type {*|null}\n\t */\n\tget value() {\n\t\treturn this.operations[ 0 ] ? this.operations[ 0 ].newValue : null;\n\t}\n\n\t/**\n\t * The range on which delta operates or `null` if the delta has no operations.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range|null}\n\t */\n\tget range() {\n\t\t// Check if it is cached.\n\t\tif ( this._range ) {\n\t\t\treturn this._range;\n\t\t}\n\n\t\tlet start = null;\n\t\tlet end = null;\n\n\t\tfor ( const operation of this.operations ) {\n\t\t\tif ( operation instanceof NoOperation ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( start === null || start.isAfter( operation.range.start ) ) {\n\t\t\t\tstart = operation.range.start;\n\t\t\t}\n\n\t\t\tif ( end === null || end.isBefore( operation.range.end ) ) {\n\t\t\t\tend = operation.range.end;\n\t\t\t}\n\t\t}\n\n\t\tif ( start && end ) {\n\t\t\tthis._range = new Range( start, end );\n\n\t\t\treturn this._range;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tget _reverseDeltaClass() {\n\t\treturn AttributeDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tdelete json._range;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.AttributeDelta';\n\t}\n}\n\nDeltaFactory.register( AttributeDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/splitdelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\nimport MoveOperation from '../operation/moveoperation';\nimport MergeDelta from '../delta/mergedelta';\n\n/**\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#split} method\n * uses `SplitDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class SplitDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position of split or `null` if there are no operations in the delta.\n\t *\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget position() {\n\t\treturn this._moveOperation ? this._moveOperation.sourcePosition : null;\n\t}\n\n\t/**\n\t * Operation in the delta that adds to model an element into which split nodes will be moved, or `null` if\n\t * there are no operations in the delta.\n\t *\n\t * Most commonly this will be {@link module:engine/model/operation/insertoperation~InsertOperation an insert operation},\n\t * as `SplitDelta` has to create a new node. If `SplitDelta` was created through\n\t * {@link module:engine/model/delta/delta~Delta#getReversed reversing}\n\t * a {@link module:engine/model/delta/mergedelta~MergeDelta merge delta},\n\t * this will be a {@link module:engine/model/operation/reinsertoperation~ReinsertOperation reinsert operation},\n\t * as we will want to re-insert the exact element that was removed by that merge delta.\n\t *\n\t * @protected\n\t * @type {module:engine/model/operation/insertoperation~InsertOperation|\n\t * module:engine/model/operation/reinsertoperation~ReinsertOperation|null}\n\t */\n\tget _cloneOperation() {\n\t\treturn this.operations[ 0 ] || null;\n\t}\n\n\t/**\n\t * Operation in the delta that moves model items, that are after split position, to their new parent or `null`\n\t * if there are no operations in the delta.\n\t *\n\t * @protected\n\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\n\t */\n\tget _moveOperation() {\n\t\treturn this.operations[ 1 ] && this.operations[ 1 ] instanceof MoveOperation ? this.operations[ 1 ] : null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn MergeDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.SplitDelta';\n\t}\n}\n\nDeltaFactory.register( SplitDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/mergedelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\nimport SplitDelta from './splitdelta';\n\n/**\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#merge} method\n * uses the `MergeDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class MergeDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'merge';\n\t}\n\n\t/**\n\t * Position between to merged nodes or `null` if the delta has no operations.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget position() {\n\t\treturn this._removeOperation ? this._removeOperation.sourcePosition : null;\n\t}\n\n\t/**\n\t * Operation in this delta that removes the node after merge position (which will be empty at that point) or\n\t * `null` if the delta has no operations. Note, that after {@link module:engine/model/delta/transform~transform transformation}\n\t * this might be an instance of {@link module:engine/model/operation/moveoperation~MoveOperation} instead of\n\t * {@link module:engine/model/operation/removeoperation~RemoveOperation}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\n\t */\n\tget _removeOperation() {\n\t\treturn this.operations[ 1 ] || null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn SplitDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.MergeDelta';\n\t}\n}\n\nDeltaFactory.register( MergeDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/movedelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\n\n/**\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#move} method\n * uses the `MoveDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class MoveDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'move';\n\t}\n\n\t/**\n\t * Offset size of moved range or `null` if there are no operations in the delta.\n\t *\n\t * @type {Number|null}\n\t */\n\tget howMany() {\n\t\treturn this._moveOperation ? this._moveOperation.howMany : null;\n\t}\n\n\t/**\n\t * {@link module:engine/model/delta/movedelta~MoveDelta#_moveOperation Move operation}\n\t * {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition source position} or `null` if there are\n\t * no operations in the delta.\n\t *\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget sourcePosition() {\n\t\treturn this._moveOperation ? this._moveOperation.sourcePosition : null;\n\t}\n\n\t/**\n\t * {@link module:engine/model/delta/movedelta~MoveDelta#_moveOperation Move operation}\n\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition target position} or `null` if there are\n\t * no operations in the delta.\n\t *\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget targetPosition() {\n\t\treturn this._moveOperation ? this._moveOperation.targetPosition : null;\n\t}\n\n\t/**\n\t * {@link module:engine/model/delta/movedelta~MoveDelta#_moveOperation Move operation} that is saved in this delta or `null`\n\t * if there are no operations in the delta.\n\t *\n\t * @protected\n\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\n\t */\n\tget _moveOperation() {\n\t\treturn this.operations[ 0 ] || null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn MoveDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.MoveDelta';\n\t}\n}\n\nDeltaFactory.register( MoveDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/removedelta\n */\n\nimport MoveDelta from './movedelta';\nimport DeltaFactory from './deltafactory';\n\n/**\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#remove} method\n * uses the `RemoveDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class RemoveDelta extends MoveDelta {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.RemoveDelta';\n\t}\n}\n\nDeltaFactory.register( RemoveDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/renamedelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\n\n/**\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#rename Batch#rename} method\n * uses the `RenameDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class RenameDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'rename';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn RenameDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.RenameDelta';\n\t}\n}\n\nDeltaFactory.register( RenameDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/wrapdelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\nimport UnwrapDelta from './unwrapdelta';\nimport Range from '../range';\n\n/**\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#merge} method\n * uses the `WrapDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class WrapDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'wrap';\n\t}\n\n\t/**\n\t * Range to wrap or `null` if there are no operations in the delta.\n\t *\n\t * @type {module:engine/model/range~Range|null}\n\t */\n\tget range() {\n\t\tconst moveOp = this._moveOperation;\n\n\t\treturn moveOp ? Range.createFromPositionAndShift( moveOp.sourcePosition, moveOp.howMany ) : null;\n\t}\n\n\t/**\n\t * Offset size of range to wrap by the delta or `null` if there are no operations in delta.\n\t *\n\t * @type {Number}\n\t */\n\tget howMany() {\n\t\tconst range = this.range;\n\n\t\treturn range ? range.end.offset - range.start.offset : 0;\n\t}\n\n\t/* eslint-disable max-len */\n\t/**\n\t * Operation that inserts wrapping element or `null` if there are no operations in the delta.\n\t *\n\t * @protected\n\t * @type {module:engine/model/operation/insertoperation~InsertOperation|module:engine/model/operation/reinsertoperation~ReinsertOperation}\n\t */\n\t/* eslint-enable max-len */\n\tget _insertOperation() {\n\t\treturn this.operations[ 0 ] || null;\n\t}\n\n\t/**\n\t * Operation that moves wrapped nodes to their new parent or `null` if there are no operations in the delta.\n\t *\n\t * @protected\n\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\n\t */\n\tget _moveOperation() {\n\t\treturn this.operations[ 1 ] || null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn UnwrapDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.WrapDelta';\n\t}\n}\n\nDeltaFactory.register( WrapDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/unwrapdelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\nimport WrapDelta from './wrapdelta';\n\n/**\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#merge} method\n * uses the `UnwrapDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class UnwrapDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'unwrap';\n\t}\n\n\t/**\n\t * Position before unwrapped element or `null` if there are no operations in the delta.\n\t *\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget position() {\n\t\treturn this._moveOperation ? this._moveOperation.targetPosition : null;\n\t}\n\n\t/**\n\t * Operation in the delta that moves unwrapped nodes to their new parent or `null` if there are no operations in the delta.\n\t *\n\t * @protected\n\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\n\t */\n\tget _moveOperation() {\n\t\treturn this.operations[ 0 ] || null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn WrapDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.UnwrapDelta';\n\t}\n}\n\nDeltaFactory.register( UnwrapDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/insertdelta\n */\n\nimport Delta from './delta';\nimport RemoveDelta from './removedelta';\nimport DeltaFactory from './deltafactory';\n\n/**\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#insert Batch#insert} method\n * uses the `InsertDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class InsertDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Position where the delta inserts nodes or `null` if there are no operations in the delta.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget position() {\n\t\treturn this._insertOperation ? this._insertOperation.position : null;\n\t}\n\n\t/**\n\t * Node list containing all the nodes inserted by the delta or `null` if there are no operations in the delta.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/nodelist~NodeList|null}\n\t */\n\tget nodes() {\n\t\treturn this._insertOperation ? this._insertOperation.nodes : null;\n\t}\n\n\t/**\n\t * Insert operation that is saved in this delta or `null` if there are no operations in the delta.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {module:engine/model/operation/insertoperation~InsertOperation|null}\n\t */\n\tget _insertOperation() {\n\t\treturn this.operations[ 0 ] || null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn RemoveDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.InsertDelta';\n\t}\n}\n\nDeltaFactory.register( InsertDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/weakinsertdelta\n */\n\nimport InsertDelta from './insertdelta';\nimport DeltaFactory from './deltafactory';\n\n/**\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#insert} method\n * uses the `WeakInsertDelta` class which inherits from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class WeakInsertDelta extends InsertDelta {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.WeakInsertDelta';\n\t}\n}\n\nDeltaFactory.register( WeakInsertDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/transform\n */\n\nimport InsertOperation from './insertoperation';\nimport AttributeOperation from './attributeoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport RenameOperation from './renameoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport RemoveOperation from './removeoperation';\nimport ReinsertOperation from './reinsertoperation';\nimport NoOperation from './nooperation';\nimport Range from '../range';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n/**\n * Transforms given {@link module:engine/model/operation/operation~Operation operation}\n * by another {@link module:engine/model/operation/operation~Operation operation}\n * and returns the result of that transformation as an array containing\n * one or more {@link module:engine/model/operation/operation~Operation operations}.\n *\n * Operations work on specified positions, passed to them when they are created.\n * Whenever {@link module:engine/model/document~Document document}\n * changes, we have to reflect those modifications by updating or \"transforming\" operations which are not yet applied.\n * When an operation is transformed, its parameters may change based on the operation by which it is transformed.\n * If the transform-by operation applied any modifications to the Tree Data Model which affect positions or nodes\n * connected with transformed operation, those changes will be reflected in the parameters of the returned operation(s).\n *\n * Whenever the {@link module:engine/model/document~Document document}\n * has different {@link module:engine/model/document~Document#version}\n * than the operation you want to {@link module:engine/model/model~Model#applyOperation apply}, you need to transform that\n * operation by all operations which were already applied to the {@link module:engine/model/document~Document document} and have greater\n * {@link module:engine/model/document~Document#version} than the operation being applied. Transform them in the same order as those\n * operations which were applied. This way all modifications done to the Tree Data Model will be reflected\n * in the operation parameters and the operation will \"operate\" on \"up-to-date\" version of the Tree Data Model.\n * This is mostly the case with Operational Transformations but it might be needed in particular features as well.\n *\n * In some cases, when given operation apply changes to the same nodes as this operation, two or more operations need\n * to be created as one would not be able to reflect the combination of these operations.\n * This is why an array is returned instead of a single object. All returned operations have to be applied\n * (or further transformed) to get an effect which was intended in pre-transformed operation.\n *\n * Sometimes two operations are in conflict. This happens when they modify the same node in a different way, i.e.\n * set different value for the same attribute or move the node into different positions. When this happens,\n * we need to decide which operation is more important. We can't assume that operation `a` or operation `b` is always\n * more important. In Operational Transformations algorithms we often need to get a result of transforming\n * `a` by `b` and also `b` by `a`. In both transformations the same operation has to be the important one. If we assume\n * that first or the second passed operation is always more important we won't be able to solve this case.\n *\n * @function module:engine/model/operation/transform~transform\n * @param {module:engine/model/operation/operation~Operation} a Operation that will be transformed.\n * @param {module:engine/model/operation/operation~Operation} b Operation to transform by.\n * @param {module:engine/model/delta/transform~transformationContext} [context] Transformation context.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} Result of the transformation.\n */\n\nexport default transform;\n\nconst ot = {\n\tInsertOperation: {\n\t\t// Transforms InsertOperation `a` by InsertOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tInsertOperation( a, b, context ) {\n\t\t\t// Transformed operations are always new instances, not references to the original operations.\n\t\t\tconst transformed = a.clone();\n\n\t\t\t// Check whether there is a forced order of nodes or use `context.isStrong` flag for conflict resolving.\n\t\t\tconst insertBefore = context.insertBefore === undefined ? !context.isStrong : context.insertBefore;\n\n\t\t\t// Transform insert position by the other operation position.\n\t\t\ttransformed.position = transformed.position._getTransformedByInsertion( b.position, b.nodes.maxOffset, insertBefore );\n\n\t\t\treturn [ transformed ];\n\t\t},\n\n\t\tAttributeOperation: doNotUpdate,\n\n\t\tRootAttributeOperation: doNotUpdate,\n\n\t\tRenameOperation: doNotUpdate,\n\n\t\tMarkerOperation: doNotUpdate,\n\n\t\t// Transforms InsertOperation `a` by MoveOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tMoveOperation( a, b, context ) {\n\t\t\tconst transformed = a.clone();\n\n\t\t\t// Check whether there is a forced order of nodes or use `context.isStrong` flag for conflict resolving.\n\t\t\tconst insertBefore = context.insertBefore === undefined ? !context.isStrong : context.insertBefore;\n\n\t\t\t// Transform insert position by the other operation parameters.\n\t\t\ttransformed.position = a.position._getTransformedByMove(\n\t\t\t\tb.sourcePosition,\n\t\t\t\tb.targetPosition,\n\t\t\t\tb.howMany,\n\t\t\t\tinsertBefore,\n\t\t\t\tb.isSticky && !context.forceNotSticky\n\t\t\t);\n\n\t\t\treturn [ transformed ];\n\t\t}\n\t},\n\n\tAttributeOperation: {\n\t\t// Transforms AttributeOperation `a` by InsertOperation `b`. Returns results as an array of operations.\n\t\tInsertOperation( a, b ) {\n\t\t\t// Transform this operation's range.\n\t\t\tconst ranges = a.range._getTransformedByInsertion( b.position, b.nodes.maxOffset, true, false );\n\n\t\t\t// Map transformed range(s) to operations and return them.\n\t\t\treturn ranges.reverse().map( range => {\n\t\t\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t\t\t} );\n\t\t},\n\n\t\t// Transforms AttributeOperation `a` by AttributeOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tAttributeOperation( a, b, context ) {\n\t\t\tif ( a.key === b.key ) {\n\t\t\t\t// If operations attributes are in conflict, check if their ranges intersect and manage them properly.\n\n\t\t\t\t// First, we want to apply change to the part of a range that has not been changed by the other operation.\n\t\t\t\tconst operations = a.range.getDifference( b.range ).map( range => {\n\t\t\t\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t\t\t\t} );\n\n\t\t\t\t// Then we take care of the common part of ranges.\n\t\t\t\tconst common = a.range.getIntersection( b.range );\n\n\t\t\t\tif ( common ) {\n\t\t\t\t\t// If this operation is more important, we also want to apply change to the part of the\n\t\t\t\t\t// original range that has already been changed by the other operation. Since that range\n\t\t\t\t\t// got changed we also have to update `oldValue`.\n\t\t\t\t\tif ( context.isStrong ) {\n\t\t\t\t\t\toperations.push( new AttributeOperation( common, b.key, b.newValue, a.newValue, a.baseVersion ) );\n\t\t\t\t\t} else if ( operations.length === 0 ) {\n\t\t\t\t\t\toperations.push( new NoOperation( 0 ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn operations;\n\t\t\t} else {\n\t\t\t\t// If operations don't conflict, simply return an array containing just a clone of this operation.\n\t\t\t\treturn [ a.clone() ];\n\t\t\t}\n\t\t},\n\n\t\tRootAttributeOperation: doNotUpdate,\n\n\t\tRenameOperation: doNotUpdate,\n\n\t\tMarkerOperation: doNotUpdate,\n\n\t\t// Transforms AttributeOperation `a` by MoveOperation `b`. Returns results as an array of operations.\n\t\tMoveOperation( a, b ) {\n\t\t\t// Convert MoveOperation properties into a range.\n\t\t\tconst rangeB = Range.createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\t\t\t// This will aggregate transformed ranges.\n\t\t\tlet ranges = [];\n\n\t\t\t// Difference is a part of changed range that is modified by AttributeOperation but is not affected\n\t\t\t// by MoveOperation. This can be zero, one or two ranges (if moved range is inside changed range).\n\t\t\t// Right now we will make a simplification and join difference ranges and transform them as one. We will cover rangeB later.\n\t\t\tconst difference = joinRanges( a.range.getDifference( rangeB ) );\n\n\t\t\t// Common is a range of nodes that is affected by MoveOperation. So it got moved to other place.\n\t\t\tconst common = a.range.getIntersection( rangeB );\n\n\t\t\tif ( difference !== null ) {\n\t\t\t\t// MoveOperation removes nodes from their original position. We acknowledge this by proper transformation.\n\t\t\t\t// Take the start and the end of the range and transform them by deletion of moved nodes.\n\t\t\t\t// Note that if rangeB was inside AttributeOperation range, only difference.end will be transformed.\n\t\t\t\t// This nicely covers the joining simplification we did in the previous step.\n\t\t\t\tdifference.start = difference.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\t\t\tdifference.end = difference.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\n\t\t\t\t// MoveOperation pastes nodes into target position. We acknowledge this by proper transformation.\n\t\t\t\t// Note that since we operate on transformed difference range, we should transform by\n\t\t\t\t// previously transformed target position.\n\t\t\t\t// Note that we do not use Position._getTransformedByMove on range boundaries because we need to\n\t\t\t\t// transform by insertion a range as a whole, since newTargetPosition might be inside that range.\n\t\t\t\tranges = difference._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, true, false ).reverse();\n\t\t\t}\n\n\t\t\tif ( common !== null ) {\n\t\t\t\t// Here we do not need to worry that newTargetPosition is inside moved range, because that\n\t\t\t\t// would mean that the MoveOperation targets into itself, and that is incorrect operation.\n\t\t\t\t// Instead, we calculate the new position of that part of original range.\n\t\t\t\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\t\t\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\t\t\tranges.push( common );\n\t\t\t}\n\n\t\t\t// Map transformed range(s) to operations and return them.\n\t\t\treturn ranges.map( range => {\n\t\t\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t\t\t} );\n\t\t}\n\t},\n\n\tRootAttributeOperation: {\n\t\tInsertOperation: doNotUpdate,\n\n\t\tAttributeOperation: doNotUpdate,\n\n\t\t// Transforms RootAttributeOperation `a` by RootAttributeOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tRootAttributeOperation( a, b, context ) {\n\t\t\tif ( a.root === b.root && a.key === b.key ) {\n\t\t\t\tif ( ( a.newValue !== b.newValue && !context.isStrong ) || a.newValue === b.newValue ) {\n\t\t\t\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [ a.clone() ];\n\t\t},\n\n\t\tRenameOperation: doNotUpdate,\n\n\t\tMarkerOperation: doNotUpdate,\n\n\t\tMoveOperation: doNotUpdate\n\t},\n\n\tRenameOperation: {\n\t\t// Transforms RenameOperation `a` by InsertOperation `b`. Returns results as an array of operations.\n\t\tInsertOperation( a, b ) {\n\t\t\t// Clone the operation, we don't want to alter the original operation.\n\t\t\tconst clone = a.clone();\n\n\t\t\t// Transform this operation's position.\n\t\t\tclone.position = clone.position._getTransformedByInsertion( b.position, b.nodes.maxOffset, true );\n\n\t\t\treturn [ clone ];\n\t\t},\n\n\t\tAttributeOperation: doNotUpdate,\n\n\t\tRootAttributeOperation: doNotUpdate,\n\n\t\t// Transforms RenameOperation `a` by RenameOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tRenameOperation( a, b, context ) {\n\t\t\t// Clone the operation, we don't want to alter the original operation.\n\t\t\tconst clone = a.clone();\n\n\t\t\tif ( a.position.isEqual( b.position ) ) {\n\t\t\t\tif ( context.isStrong ) {\n\t\t\t\t\tclone.oldName = b.newName;\n\t\t\t\t} else {\n\t\t\t\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [ clone ];\n\t\t},\n\n\t\tMarkerOperation: doNotUpdate,\n\n\t\t// Transforms RenameOperation `a` by MoveOperation `b`. Returns results as an array of operations.\n\t\tMoveOperation( a, b ) {\n\t\t\tconst clone = a.clone();\n\t\t\tconst isSticky = clone.position.isEqual( b.sourcePosition );\n\n\t\t\tclone.position = clone.position._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, true, isSticky );\n\n\t\t\treturn [ clone ];\n\t\t}\n\t},\n\n\tMarkerOperation: {\n\t\t// Transforms MarkerOperation `a` by InsertOperation `b`. Returns results as an array of operations.\n\t\tInsertOperation( a, b ) {\n\t\t\t// Clone the operation, we don't want to alter the original operation.\n\t\t\tconst clone = a.clone();\n\n\t\t\tif ( clone.oldRange ) {\n\t\t\t\tclone.oldRange = clone.oldRange._getTransformedByInsertion( b.position, b.nodes.maxOffset, false, false )[ 0 ];\n\t\t\t}\n\n\t\t\tif ( clone.newRange ) {\n\t\t\t\tclone.newRange = clone.newRange._getTransformedByInsertion( b.position, b.nodes.maxOffset, false, false )[ 0 ];\n\t\t\t}\n\n\t\t\treturn [ clone ];\n\t\t},\n\n\t\tAttributeOperation: doNotUpdate,\n\n\t\tRootAttributeOperation: doNotUpdate,\n\n\t\tRenameOperation: doNotUpdate,\n\n\t\t// Transforms MarkerOperation `a` by MarkerOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tMarkerOperation( a, b, context ) {\n\t\t\t// Clone the operation, we don't want to alter the original operation.\n\t\t\tconst clone = a.clone();\n\n\t\t\tif ( a.name == b.name ) {\n\t\t\t\tif ( context.isStrong ) {\n\t\t\t\t\tclone.oldRange = b.newRange;\n\t\t\t\t} else {\n\t\t\t\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [ clone ];\n\t\t},\n\n\t\t// Transforms MarkerOperation `a` by MoveOperation `b`. Returns results as an array of operations.\n\t\tMoveOperation( a, b ) {\n\t\t\t// Clone the operation, we don't want to alter the original operation.\n\t\t\tconst clone = a.clone();\n\n\t\t\tif ( clone.oldRange ) {\n\t\t\t\tconst oldRanges = clone.oldRange._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\t\t\tclone.oldRange = Range.createFromRanges( oldRanges );\n\t\t\t}\n\n\t\t\tif ( clone.newRange ) {\n\t\t\t\tconst newRanges = clone.newRange._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\t\t\tclone.newRange = Range.createFromRanges( newRanges );\n\t\t\t}\n\n\t\t\treturn [ clone ];\n\t\t}\n\t},\n\n\tMoveOperation: {\n\t\t// Transforms MoveOperation `a` by InsertOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tInsertOperation( a, b, context ) {\n\t\t\t// Create range from MoveOperation properties and transform it by insertion.\n\t\t\tlet range = Range.createFromPositionAndShift( a.sourcePosition, a.howMany );\n\t\t\tconst includeB = a.isSticky && !context.forceNotSticky;\n\n\t\t\trange = range._getTransformedByInsertion( b.position, b.nodes.maxOffset, false, includeB )[ 0 ];\n\n\t\t\t// Check whether there is a forced order of nodes or use `context.isStrong` flag for conflict resolving.\n\t\t\tconst insertBefore = context.insertBefore === undefined ? !context.isStrong : context.insertBefore;\n\n\t\t\tconst result = new a.constructor(\n\t\t\t\trange.start,\n\t\t\t\trange.end.offset - range.start.offset,\n\t\t\t\ta.targetPosition._getTransformedByInsertion( b.position, b.nodes.maxOffset, insertBefore ),\n\t\t\t\ta.baseVersion\n\t\t\t);\n\n\t\t\tresult.isSticky = a.isSticky;\n\n\t\t\treturn [ result ];\n\t\t},\n\n\t\tAttributeOperation: doNotUpdate,\n\n\t\tRootAttributeOperation: doNotUpdate,\n\n\t\tRenameOperation: doNotUpdate,\n\n\t\tMarkerOperation: doNotUpdate,\n\n\t\t// Transforms MoveOperation `a` by MoveOperation `b`. Accepts a flag stating whether `a` is more important\n\t\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\n\t\tMoveOperation( a, b, context ) {\n\t\t\t//\n\t\t\t// Setting and evaluating some variables that will be used in special cases and default algorithm.\n\t\t\t//\n\t\t\t// Create ranges from `MoveOperations` properties.\n\t\t\tconst rangeA = Range.createFromPositionAndShift( a.sourcePosition, a.howMany );\n\t\t\tconst rangeB = Range.createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\t\t\t// Assign `context.isStrong` to a different variable, because the value may change during execution of\n\t\t\t// this algorithm and we do not want to override original `context.isStrong` that will be used in later transformations.\n\t\t\tlet isStrong = context.isStrong;\n\n\t\t\t// Whether range moved by operation `b` is includable in operation `a` move range.\n\t\t\t// For this, `a` operation has to be sticky (so `b` sticks to the range) and context has to allow stickiness.\n\t\t\tconst includeB = a.isSticky && !context.forceNotSticky;\n\n\t\t\t// Evaluate new target position for transformed operation.\n\t\t\t// Check whether there is a forced order of nodes or use `isStrong` flag for conflict resolving.\n\t\t\tconst insertBefore = context.insertBefore === undefined ? !isStrong : context.insertBefore;\n\n\t\t\t// `a.targetPosition` could be affected by the `b` operation. We will transform it.\n\t\t\tconst newTargetPosition = a.targetPosition._getTransformedByMove(\n\t\t\t\tb.sourcePosition,\n\t\t\t\tb.targetPosition,\n\t\t\t\tb.howMany,\n\t\t\t\tinsertBefore,\n\t\t\t\tb.isSticky && !context.forceNotSticky\n\t\t\t);\n\n\t\t\t//\n\t\t\t// Special case #1 + mirror.\n\t\t\t//\n\t\t\t// Special case when both move operations' target positions are inside nodes that are\n\t\t\t// being moved by the other move operation. So in other words, we move ranges into inside of each other.\n\t\t\t// This case can't be solved reasonably (on the other hand, it should not happen often).\n\t\t\tif ( moveTargetIntoMovedRange( a, b ) && moveTargetIntoMovedRange( b, a ) ) {\n\t\t\t\t// Instead of transforming operation, we return a reverse of the operation that we transform by.\n\t\t\t\t// So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n\t\t\t\treturn [ b.getReversed() ];\n\t\t\t}\n\t\t\t//\n\t\t\t// End of special case #1.\n\t\t\t//\n\n\t\t\t//\n\t\t\t// Special case #2.\n\t\t\t//\n\t\t\t// Check if `b` operation targets inside `rangeA`. Use stickiness if possible.\n\t\t\tconst bTargetsToA = rangeA.containsPosition( b.targetPosition ) ||\n\t\t\t\t( rangeA.start.isEqual( b.targetPosition ) && includeB ) ||\n\t\t\t\t( rangeA.end.isEqual( b.targetPosition ) && includeB );\n\n\t\t\t// If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n\t\t\t// You might say that operation `b` is captured inside operation `a`.\n\t\t\tif ( bTargetsToA && rangeA.containsRange( rangeB, true ) ) {\n\t\t\t\t// There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n\t\t\t\t// we need to transform `a` operation anyway.\n\t\t\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, !includeB );\n\t\t\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, includeB );\n\n\t\t\t\treturn makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition, a );\n\t\t\t}\n\n\t\t\t//\n\t\t\t// Special case #2 mirror.\n\t\t\t//\n\t\t\tconst aTargetsToB = rangeB.containsPosition( a.targetPosition ) ||\n\t\t\t\t( rangeB.start.isEqual( a.targetPosition ) && b.isSticky && !context.forceNotSticky ) ||\n\t\t\t\t( rangeB.end.isEqual( a.targetPosition ) && b.isSticky && !context.forceNotSticky );\n\n\t\t\tif ( aTargetsToB && rangeB.containsRange( rangeA, true ) ) {\n\t\t\t\t// `a` operation is \"moved together\" with `b` operation.\n\t\t\t\t// Here, just move `rangeA` \"inside\" `rangeB`.\n\t\t\t\trangeA.start = rangeA.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\t\t\trangeA.end = rangeA.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\t\t\treturn makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition, a );\n\t\t\t}\n\t\t\t//\n\t\t\t// End of special case #2.\n\t\t\t//\n\n\t\t\t//\n\t\t\t// Special case #3 + mirror.\n\t\t\t//\n\t\t\t// `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n\t\t\t// but not on the same tree level. In such case ranges have common part but we have to treat it\n\t\t\t// differently, because in such case those ranges are not really conflicting and should be treated like\n\t\t\t// two separate ranges. Also we have to discard two difference parts.\n\t\t\tconst aCompB = compareArrays( a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath() );\n\n\t\t\tif ( aCompB == 'prefix' || aCompB == 'extension' ) {\n\t\t\t\t// Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n\t\t\t\t// Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n\t\t\t\t// like a one difference part.\n\t\t\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, !includeB );\n\t\t\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, includeB );\n\n\t\t\t\treturn makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition, a );\n\t\t\t}\n\t\t\t//\n\t\t\t// End of special case #3.\n\t\t\t//\n\n\t\t\t//\n\t\t\t// Default case - ranges are on the same level or are not connected with each other.\n\t\t\t//\n\t\t\t// Modifier for default case.\n\t\t\t// Modifies `isStrong` flag in certain conditions.\n\t\t\t//\n\t\t\t// If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n\t\t\t// to provide more expected results. This is done only if `context.forceWeakRemove` is set to `false`.\n\t\t\t// `context.forceWeakRemove` is set to `true` in certain conditions when transformation takes place during undo.\n\t\t\tif ( !context.forceWeakRemove ) {\n\t\t\t\tif ( a instanceof RemoveOperation && !( b instanceof RemoveOperation ) ) {\n\t\t\t\t\tisStrong = true;\n\t\t\t\t} else if ( !( a instanceof RemoveOperation ) && b instanceof RemoveOperation ) {\n\t\t\t\t\tisStrong = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n\t\t\t// This will aggregate transformed ranges.\n\t\t\tconst ranges = [];\n\n\t\t\t// Get the \"difference part\" of `a` operation source range.\n\t\t\t// This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n\t\t\tconst difference = rangeA.getDifference( rangeB );\n\n\t\t\tfor ( const range of difference ) {\n\t\t\t\t// Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n\t\t\t\trange.start = range.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\t\t\trange.end = range.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\n\t\t\t\t// If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n\t\t\t\tconst shouldSpread = compareArrays( range.start.getParentPath(), b.getMovedRangeStart().getParentPath() ) == 'same';\n\t\t\t\tconst newRanges = range._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, shouldSpread, includeB );\n\n\t\t\t\tranges.push( ...newRanges );\n\t\t\t}\n\n\t\t\t// Then, we have to manage the \"common part\" of both move ranges.\n\t\t\tconst common = rangeA.getIntersection( rangeB );\n\n\t\t\tif ( common !== null && isStrong && !bTargetsToA ) {\n\t\t\t\t// Calculate the new position of that part of original range.\n\t\t\t\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\t\t\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\t\t\t// Take care of proper range order.\n\t\t\t\t//\n\t\t\t\t// Put `common` at appropriate place. Keep in mind that we are interested in original order.\n\t\t\t\t// Basically there are only three cases: there is zero, one or two difference ranges.\n\t\t\t\t//\n\t\t\t\t// If there is zero difference ranges, just push `common` in the array.\n\t\t\t\tif ( ranges.length === 0 ) {\n\t\t\t\t\tranges.push( common );\n\t\t\t\t}\n\t\t\t\t// If there is one difference range, we need to check whether common part was before it or after it.\n\t\t\t\telse if ( ranges.length == 1 ) {\n\t\t\t\t\tif ( rangeB.start.isBefore( rangeA.start ) || rangeB.start.isEqual( rangeA.start ) ) {\n\t\t\t\t\t\tranges.unshift( common );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tranges.push( common );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// If there are more ranges (which means two), put common part between them. This is the only scenario\n\t\t\t\t// where there could be two difference ranges so we don't have to make any comparisons.\n\t\t\t\telse {\n\t\t\t\t\tranges.splice( 1, 0, common );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ranges.length === 0 ) {\n\t\t\t\t// If there are no \"source ranges\", nothing should be changed.\n\t\t\t\t// Note that this can happen only if `isStrong == false` and `rangeA.isEqual( rangeB )`.\n\t\t\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t\t\t}\n\n\t\t\treturn makeMoveOperationsFromRanges( ranges, newTargetPosition, a );\n\t\t}\n\t}\n};\n\nfunction transform( a, b, context = { isStrong: false } ) {\n\tlet group, algorithm;\n\n\tif ( a instanceof InsertOperation ) {\n\t\tgroup = ot.InsertOperation;\n\t} else if ( a instanceof AttributeOperation ) {\n\t\tgroup = ot.AttributeOperation;\n\t} else if ( a instanceof RootAttributeOperation ) {\n\t\tgroup = ot.RootAttributeOperation;\n\t} else if ( a instanceof RenameOperation ) {\n\t\tgroup = ot.RenameOperation;\n\t} else if ( a instanceof MarkerOperation ) {\n\t\tgroup = ot.MarkerOperation;\n\t} else if ( a instanceof MoveOperation ) {\n\t\tgroup = ot.MoveOperation;\n\t} else {\n\t\talgorithm = doNotUpdate;\n\t}\n\n\tif ( group ) {\n\t\tif ( b instanceof InsertOperation ) {\n\t\t\talgorithm = group.InsertOperation;\n\t\t} else if ( b instanceof AttributeOperation ) {\n\t\t\talgorithm = group.AttributeOperation;\n\t\t} else if ( b instanceof RootAttributeOperation ) {\n\t\t\talgorithm = group.RootAttributeOperation;\n\t\t} else if ( b instanceof RenameOperation ) {\n\t\t\talgorithm = group.RenameOperation;\n\t\t} else if ( b instanceof MarkerOperation ) {\n\t\t\talgorithm = group.MarkerOperation;\n\t\t} else if ( b instanceof MoveOperation ) {\n\t\t\talgorithm = group.MoveOperation;\n\t\t} else {\n\t\t\talgorithm = doNotUpdate;\n\t\t}\n\t}\n\n\tconst transformed = algorithm( a, b, context );\n\n\treturn updateBaseVersions( a.baseVersion, transformed );\n}\n\n// When we don't want to update an operation, we create and return a clone of it.\n// Returns the operation in \"unified format\" - wrapped in an Array.\nfunction doNotUpdate( operation ) {\n\treturn [ operation.clone() ];\n}\n\n// Takes an Array of operations and sets consecutive base versions for them, starting from given base version.\n// Returns the passed array.\nfunction updateBaseVersions( baseVersion, operations ) {\n\tfor ( let i = 0; i < operations.length; i++ ) {\n\t\toperations[ i ].baseVersion = baseVersion + i + 1;\n\t}\n\n\treturn operations;\n}\n\n// Checks whether MoveOperation targetPosition is inside a node from the moved range of the other MoveOperation.\nfunction moveTargetIntoMovedRange( a, b ) {\n\treturn a.targetPosition._getTransformedByDeletion( b.sourcePosition, b.howMany ) === null;\n}\n\n// Gets an array of Ranges and produces one Range out of it. The root of a new range will be same as\n// the root of the first range in the array. If any of given ranges has different root than the first range,\n// it will be discarded.\nfunction joinRanges( ranges ) {\n\tif ( ranges.length === 0 ) {\n\t\treturn null;\n\t} else if ( ranges.length == 1 ) {\n\t\treturn ranges[ 0 ];\n\t} else {\n\t\tranges[ 0 ].end = ranges[ ranges.length - 1 ].end;\n\n\t\treturn ranges[ 0 ];\n\t}\n}\n\n// Helper function for `MoveOperation` x `MoveOperation` transformation.\n// Convert given ranges and target position to move operations and return them.\n// Ranges and target position will be transformed on-the-fly when generating operations.\n// Given `ranges` should be in the order of how they were in the original transformed operation.\n// Given `targetPosition` is the target position of the first range from `ranges`.\nfunction makeMoveOperationsFromRanges( ranges, targetPosition, a ) {\n\t// At this moment we have some ranges and a target position, to which those ranges should be moved.\n\t// Order in `ranges` array is the go-to order of after transformation.\n\t//\n\t// We are almost done. We have `ranges` and `targetPosition` to make operations from.\n\t// Unfortunately, those operations may affect each other. Precisely, first operation after move\n\t// may affect source range and target position of second and third operation. Same with second\n\t// operation affecting third.\n\t//\n\t// We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n\tconst operations = [];\n\n\t// Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t// Create new operation out of a range and target position.\n\t\tconst op = makeMoveOperation( ranges[ i ], targetPosition, a.isSticky );\n\n\t\toperations.push( op );\n\n\t\t// Transform other ranges by the generated operation.\n\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t// All ranges in `ranges` array should be:\n\t\t\t// * non-intersecting (these are part of original operation source range), and\n\t\t\t// * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n\t\t\t//\n\t\t\t// This means that the transformation will be \"clean\" and always return one result.\n\t\t\tranges[ j ] = ranges[ j ]._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany )[ 0 ];\n\t\t}\n\n\t\ttargetPosition = targetPosition._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany, true, false );\n\t}\n\n\treturn operations;\n}\n\nfunction makeMoveOperation( range, targetPosition, isSticky ) {\n\t// We want to keep correct operation class.\n\tlet OperationClass;\n\n\tif ( targetPosition.root.rootName == '$graveyard' ) {\n\t\tOperationClass = RemoveOperation;\n\t} else if ( range.start.root.rootName == '$graveyard' ) {\n\t\tOperationClass = ReinsertOperation;\n\t} else {\n\t\tOperationClass = MoveOperation;\n\t}\n\n\tconst result = new OperationClass(\n\t\trange.start,\n\t\trange.end.offset - range.start.offset,\n\t\ttargetPosition,\n\t\t0 // Is corrected anyway later.\n\t);\n\n\tresult.isSticky = isSticky;\n\n\treturn result;\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice';\nimport isIterateeCall from './_isIterateeCall';\nimport toInteger from './toInteger';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array ? array.length : 0;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nexport default chunk;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array ? array.length : 0,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","import isArguments from './isArguments';\nimport isArray from './isArray';\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value);\n}\n\nexport default isFlattenable;\n","import arrayPush from './_arrayPush';\nimport isFlattenable from './_isFlattenable';\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nexport default baseFlatten;\n","import arrayPush from './_arrayPush';\nimport baseFlatten from './_baseFlatten';\nimport copyArray from './_copyArray';\nimport isArray from './isArray';\n\n/**\n * Creates a new array concatenating `array` with any additional arrays\n * and/or values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to concatenate.\n * @param {...*} [values] The values to concatenate.\n * @returns {Array} Returns the new concatenated array.\n * @example\n *\n * var array = [1];\n * var other = _.concat(array, 2, [3], [[4]]);\n *\n * console.log(other);\n * // => [1, 2, 3, [4]]\n *\n * console.log(array);\n * // => [1]\n */\nfunction concat() {\n  var length = arguments.length,\n      args = Array(length ? length - 1 : 0),\n      array = arguments[0],\n      index = length;\n\n  while (index--) {\n    args[index - 1] = arguments[index];\n  }\n  return length\n    ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))\n    : [];\n}\n\nexport default concat;\n","/**\n * Gets the index at which the first occurrence of `NaN` is found in `array`.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n */\nfunction indexOfNaN(array, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 0 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    var other = array[index];\n    if (other !== other) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default indexOfNaN;\n","import indexOfNaN from './_indexOfNaN';\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return indexOfNaN(array, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default baseIndexOf;\n","import baseIndexOf from './_baseIndexOf';\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  return !!array.length && baseIndexOf(array, value, 0) > -1;\n}\n\nexport default arrayIncludes;\n","/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arrayIncludesWith;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","/**\n * The base implementation of `_.unary` without support for storing wrapper metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","/**\n * Checks if a cache value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache';\nimport arrayIncludes from './_arrayIncludes';\nimport arrayIncludesWith from './_arrayIncludesWith';\nimport arrayMap from './_arrayMap';\nimport baseUnary from './_baseUnary';\nimport cacheHas from './_cacheHas';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference';\nimport baseFlatten from './_baseFlatten';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport rest from './rest';\n\n/**\n * Creates an array of unique `array` values not included in the other given\n * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons. The order of result values is determined by the\n * order they occur in the first array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([3, 2, 1], [4, 2]);\n * // => [3, 1]\n */\nvar difference = rest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","import Stack from './_Stack';\nimport baseIsEqual from './_baseIsEqual';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport default baseIsMatch;\n","import isObject from './isObject';\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nexport default isStrictComparable;\n","import arrayMap from './_arrayMap';\n\n/**\n * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n * of key-value pairs for `object` corresponding to the property names of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the key-value pairs.\n */\nfunction baseToPairs(object, props) {\n  return arrayMap(props, function(key) {\n    return [key, object[key]];\n  });\n}\n\nexport default baseToPairs;\n","/**\n * Converts `set` to its value-value pairs.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the value-value pairs.\n */\nfunction setToPairs(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = [value, value];\n  });\n  return result;\n}\n\nexport default setToPairs;\n","import baseToPairs from './_baseToPairs';\nimport getTag from './_getTag';\nimport mapToArray from './_mapToArray';\nimport setToPairs from './_setToPairs';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/**\n * Creates a `_.toPairs` or `_.toPairsIn` function.\n *\n * @private\n * @param {Function} keysFunc The function to get the keys of a given object.\n * @returns {Function} Returns the new pairs function.\n */\nfunction createToPairs(keysFunc) {\n  return function(object) {\n    var tag = getTag(object);\n    if (tag == mapTag) {\n      return mapToArray(object);\n    }\n    if (tag == setTag) {\n      return setToPairs(object);\n    }\n    return baseToPairs(object, keysFunc(object));\n  };\n}\n\nexport default createToPairs;\n","import createToPairs from './_createToPairs';\nimport keys from './keys';\n\n/**\n * Creates an array of own enumerable string keyed-value pairs for `object`\n * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n * entries are returned.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias entries\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the key-value pairs.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.toPairs(new Foo);\n * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n */\nvar toPairs = createToPairs(keys);\n\nexport default toPairs;\n","import isStrictComparable from './_isStrictComparable';\nimport toPairs from './toPairs';\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = toPairs(object),\n      length = result.length;\n\n  while (length--) {\n    result[length][2] = isStrictComparable(result[length][1]);\n  }\n  return result;\n}\n\nexport default getMatchData;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nexport default matchesStrictComparable;\n","import baseIsMatch from './_baseIsMatch';\nimport getMatchData from './_getMatchData';\nimport matchesStrictComparable from './_matchesStrictComparable';\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nexport default baseMatches;\n","import MapCache from './_MapCache';\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\nexport default memoize;\n","import Symbol from './_Symbol';\nimport isSymbol from './isSymbol';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","import memoize from './memoize';\nimport toString from './toString';\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  var result = [];\n  toString(string).replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nexport default stringToPath;\n","import isArray from './isArray';\nimport stringToPath from './_stringToPath';\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nexport default castPath;\n","import isArray from './isArray';\nimport isSymbol from './isSymbol';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nexport default isKey;\n","import isSymbol from './isSymbol';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default toKey;\n","import castPath from './_castPath';\nimport isKey from './_isKey';\nimport toKey from './_toKey';\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nexport default baseGet;\n","import baseGet from './_baseGet';\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is used in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nexport default get;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return key in Object(object);\n}\n\nexport default baseHasIn;\n","import castPath from './_castPath';\nimport isArguments from './isArguments';\nimport isArray from './isArray';\nimport isIndex from './_isIndex';\nimport isKey from './_isKey';\nimport isLength from './isLength';\nimport isString from './isString';\nimport toKey from './_toKey';\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isString(object) || isArguments(object));\n}\n\nexport default hasPath;\n","import baseHasIn from './_baseHasIn';\nimport hasPath from './_hasPath';\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nexport default hasIn;\n","import baseIsEqual from './_baseIsEqual';\nimport get from './get';\nimport hasIn from './hasIn';\nimport isKey from './_isKey';\nimport isStrictComparable from './_isStrictComparable';\nimport matchesStrictComparable from './_matchesStrictComparable';\nimport toKey from './_toKey';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\nexport default baseMatchesProperty;\n","/**\n * This method returns the first argument given to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","import baseGet from './_baseGet';\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nexport default basePropertyDeep;\n","import baseProperty from './_baseProperty';\nimport basePropertyDeep from './_basePropertyDeep';\nimport isKey from './_isKey';\nimport toKey from './_toKey';\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nexport default property;\n","import baseMatches from './_baseMatches';\nimport baseMatchesProperty from './_baseMatchesProperty';\nimport identity from './identity';\nimport isArray from './isArray';\nimport property from './property';\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nexport default baseIteratee;\n","import baseDifference from './_baseDifference';\nimport baseFlatten from './_baseFlatten';\nimport baseIteratee from './_baseIteratee';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.difference` except that it accepts `iteratee` which\n * is invoked for each element of `array` and `values` to generate the criterion\n * by which they're compared. Result values are chosen from the first array.\n * The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\n * // => [3.1, 1.3]\n *\n * // The `_.property` iteratee shorthand.\n * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n * // => [{ 'x': 2 }]\n */\nvar differenceBy = rest(function(array, values) {\n  var iteratee = last(values);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee))\n    : [];\n});\n\nexport default differenceBy;\n","import baseDifference from './_baseDifference';\nimport baseFlatten from './_baseFlatten';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. Result values\n * are chosen from the first array. The comparator is invoked with two arguments:\n * (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = rest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nexport default differenceWith;\n","import baseSlice from './_baseSlice';\nimport toInteger from './toInteger';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import baseSlice from './_baseSlice';\nimport toInteger from './toInteger';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import baseSlice from './_baseSlice';\n\n/**\n * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n * without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseWhile(array, predicate, isDrop, fromRight) {\n  var length = array.length,\n      index = fromRight ? length : -1;\n\n  while ((fromRight ? index-- : ++index < length) &&\n    predicate(array[index], index, array)) {}\n\n  return isDrop\n    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n}\n\nexport default baseWhile;\n","import baseIteratee from './_baseIteratee';\nimport baseWhile from './_baseWhile';\n\n/**\n * Creates a slice of `array` excluding elements dropped from the end.\n * Elements are dropped until `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ];\n *\n * _.dropRightWhile(users, function(o) { return !o.active; });\n * // => objects for ['barney']\n *\n * // The `_.matches` iteratee shorthand.\n * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n * // => objects for ['barney', 'fred']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.dropRightWhile(users, ['active', false]);\n * // => objects for ['barney']\n *\n * // The `_.property` iteratee shorthand.\n * _.dropRightWhile(users, 'active');\n * // => objects for ['barney', 'fred', 'pebbles']\n */\nfunction dropRightWhile(array, predicate) {\n  return (array && array.length)\n    ? baseWhile(array, baseIteratee(predicate, 3), true, true)\n    : [];\n}\n\nexport default dropRightWhile;\n","import baseIteratee from './_baseIteratee';\nimport baseWhile from './_baseWhile';\n\n/**\n * Creates a slice of `array` excluding elements dropped from the beginning.\n * Elements are dropped until `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.dropWhile(users, function(o) { return !o.active; });\n * // => objects for ['pebbles']\n *\n * // The `_.matches` iteratee shorthand.\n * _.dropWhile(users, { 'user': 'barney', 'active': false });\n * // => objects for ['fred', 'pebbles']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.dropWhile(users, ['active', false]);\n * // => objects for ['pebbles']\n *\n * // The `_.property` iteratee shorthand.\n * _.dropWhile(users, 'active');\n * // => objects for ['barney', 'fred', 'pebbles']\n */\nfunction dropWhile(array, predicate) {\n  return (array && array.length)\n    ? baseWhile(array, baseIteratee(predicate, 3), true)\n    : [];\n}\n\nexport default dropWhile;\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nexport default baseClamp;\n","import baseClamp from './_baseClamp';\nimport toInteger from './toInteger';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object.\n *\n * **Note:** This method is based on\n * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toLength(3.2);\n * // => 3\n *\n * _.toLength(Number.MIN_VALUE);\n * // => 0\n *\n * _.toLength(Infinity);\n * // => 4294967295\n *\n * _.toLength('3.2');\n * // => 3\n */\nfunction toLength(value) {\n  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n}\n\nexport default toLength;\n","import toInteger from './toInteger';\nimport toLength from './toLength';\n\n/**\n * The base implementation of `_.fill` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n */\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n\n  start = toInteger(start);\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = (end === undefined || end > length) ? length : toInteger(end);\n  if (end < 0) {\n    end += length;\n  }\n  end = start > end ? 0 : toLength(end);\n  while (start < end) {\n    array[start++] = value;\n  }\n  return array;\n}\n\nexport default baseFill;\n","import baseFill from './_baseFill';\nimport isIterateeCall from './_isIterateeCall';\n\n/**\n * Fills elements of `array` with `value` from `start` up to, but not\n * including, `end`.\n *\n * **Note:** This method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Array\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [1, 2, 3];\n *\n * _.fill(array, 'a');\n * console.log(array);\n * // => ['a', 'a', 'a']\n *\n * _.fill(Array(3), 2);\n * // => [2, 2, 2]\n *\n * _.fill([4, 6, 8, 10], '*', 1, 3);\n * // => [4, '*', '*', 10]\n */\nfunction fill(array, value, start, end) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n    start = 0;\n    end = length;\n  }\n  return baseFill(array, value, start, end);\n}\n\nexport default fill;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromRight) {\n  var length = array.length,\n      index = fromRight ? length : -1;\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default baseFindIndex;\n","import baseFindIndex from './_baseFindIndex';\nimport baseIteratee from './_baseIteratee';\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate) {\n  return (array && array.length)\n    ? baseFindIndex(array, baseIteratee(predicate, 3))\n    : -1;\n}\n\nexport default findIndex;\n","import baseFindIndex from './_baseFindIndex';\nimport baseIteratee from './_baseIteratee';\n\n/**\n * This method is like `_.findIndex` except that it iterates over elements\n * of `collection` from right to left.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ];\n *\n * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n * // => 2\n *\n * // The `_.matches` iteratee shorthand.\n * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n * // => 0\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findLastIndex(users, ['active', false]);\n * // => 2\n *\n * // The `_.property` iteratee shorthand.\n * _.findLastIndex(users, 'active');\n * // => 0\n */\nfunction findLastIndex(array, predicate) {\n  return (array && array.length)\n    ? baseFindIndex(array, baseIteratee(predicate, 3), true)\n    : -1;\n}\n\nexport default findLastIndex;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","import baseFlatten from './_baseFlatten';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array ? array.length : 0;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import baseFlatten from './_baseFlatten';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Recursively flattens `array`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flattenDeep([1, [2, [3, [4]], 5]]);\n * // => [1, 2, 3, 4, 5]\n */\nfunction flattenDeep(array) {\n  var length = array ? array.length : 0;\n  return length ? baseFlatten(array, INFINITY) : [];\n}\n\nexport default flattenDeep;\n","import baseFlatten from './_baseFlatten';\nimport toInteger from './toInteger';\n\n/**\n * Recursively flatten `array` up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * var array = [1, [2, [3, [4]], 5]];\n *\n * _.flattenDepth(array, 1);\n * // => [1, 2, [3, [4]], 5]\n *\n * _.flattenDepth(array, 2);\n * // => [1, 2, 3, [4], 5]\n */\nfunction flattenDepth(array, depth) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(array, depth);\n}\n\nexport default flattenDepth;\n","/**\n * The inverse of `_.toPairs`; this method returns an object composed\n * from key-value `pairs`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} pairs The key-value pairs.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.fromPairs([['fred', 30], ['barney', 40]]);\n * // => { 'fred': 30, 'barney': 40 }\n */\nfunction fromPairs(pairs) {\n  var index = -1,\n      length = pairs ? pairs.length : 0,\n      result = {};\n\n  while (++index < length) {\n    var pair = pairs[index];\n    result[pair[0]] = pair[1];\n  }\n  return result;\n}\n\nexport default fromPairs;\n","import baseIndexOf from './_baseIndexOf';\nimport toInteger from './toInteger';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return -1;\n  }\n  fromIndex = toInteger(fromIndex);\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return baseIndexOf(array, value, fromIndex);\n}\n\nexport default indexOf;\n","import dropRight from './dropRight';\n\n/**\n * Gets all but the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.initial([1, 2, 3]);\n * // => [1, 2]\n */\nfunction initial(array) {\n  return dropRight(array, 1);\n}\n\nexport default initial;\n","import SetCache from './_SetCache';\nimport arrayIncludes from './_arrayIncludes';\nimport arrayIncludesWith from './_arrayIncludesWith';\nimport arrayMap from './_arrayMap';\nimport baseUnary from './_baseUnary';\nimport cacheHas from './_cacheHas';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseIntersection;\n","import isArrayLikeObject from './isArrayLikeObject';\n\n/**\n * Casts `value` to an empty array if it's not an array like object.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array|Object} Returns the cast array-like object.\n */\nfunction castArrayLikeObject(value) {\n  return isArrayLikeObject(value) ? value : [];\n}\n\nexport default castArrayLikeObject;\n","import arrayMap from './_arrayMap';\nimport baseIntersection from './_baseIntersection';\nimport castArrayLikeObject from './_castArrayLikeObject';\nimport rest from './rest';\n\n/**\n * Creates an array of unique values that are included in all given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons. The order of result values is determined by the\n * order they occur in the first array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersection([2, 1], [4, 2], [1, 2]);\n * // => [2]\n */\nvar intersection = rest(function(arrays) {\n  var mapped = arrayMap(arrays, castArrayLikeObject);\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped)\n    : [];\n});\n\nexport default intersection;\n","import arrayMap from './_arrayMap';\nimport baseIntersection from './_baseIntersection';\nimport baseIteratee from './_baseIteratee';\nimport castArrayLikeObject from './_castArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.intersection` except that it accepts `iteratee`\n * which is invoked for each element of each `arrays` to generate the criterion\n * by which they're compared. Result values are chosen from the first array.\n * The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n * // => [2.1]\n *\n * // The `_.property` iteratee shorthand.\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }]\n */\nvar intersectionBy = rest(function(arrays) {\n  var iteratee = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, baseIteratee(iteratee))\n    : [];\n});\n\nexport default intersectionBy;\n","import arrayMap from './_arrayMap';\nimport baseIntersection from './_baseIntersection';\nimport castArrayLikeObject from './_castArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.intersection` except that it accepts `comparator`\n * which is invoked to compare elements of `arrays`. Result values are chosen\n * from the first array. The comparator is invoked with two arguments:\n * (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.intersectionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }]\n */\nvar intersectionWith = rest(function(arrays) {\n  var comparator = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (comparator === last(mapped)) {\n    comparator = undefined;\n  } else {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, undefined, comparator)\n    : [];\n});\n\nexport default intersectionWith;\n","/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeJoin = arrayProto.join;\n\n/**\n * Converts all elements in `array` into a string separated by `separator`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to convert.\n * @param {string} [separator=','] The element separator.\n * @returns {string} Returns the joined string.\n * @example\n *\n * _.join(['a', 'b', 'c'], '~');\n * // => 'a~b~c'\n */\nfunction join(array, separator) {\n  return array ? nativeJoin.call(array, separator) : '';\n}\n\nexport default join;\n","import indexOfNaN from './_indexOfNaN';\nimport toInteger from './toInteger';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * This method is like `_.indexOf` except that it iterates over elements of\n * `array` from right to left.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=array.length-1] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.lastIndexOf([1, 2, 1, 2], 2);\n * // => 3\n *\n * // Search from the `fromIndex`.\n * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n * // => 1\n */\nfunction lastIndexOf(array, value, fromIndex) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return -1;\n  }\n  var index = length;\n  if (fromIndex !== undefined) {\n    index = toInteger(fromIndex);\n    index = (\n      index < 0\n        ? nativeMax(length + index, 0)\n        : nativeMin(index, length - 1)\n    ) + 1;\n  }\n  if (value !== value) {\n    return indexOfNaN(array, index, true);\n  }\n  while (index--) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default lastIndexOf;\n","import isIndex from './_isIndex';\n\n/**\n * The base implementation of `_.nth` which doesn't coerce `n` to an integer.\n *\n * @private\n * @param {Array} array The array to query.\n * @param {number} n The index of the element to return.\n * @returns {*} Returns the nth element of `array`.\n */\nfunction baseNth(array, n) {\n  var length = array.length;\n  if (!length) {\n    return;\n  }\n  n += n < 0 ? length : 0;\n  return isIndex(n, length) ? array[n] : undefined;\n}\n\nexport default baseNth;\n","import baseNth from './_baseNth';\nimport toInteger from './toInteger';\n\n/**\n * Gets the element at `n` index of `array`. If `n` is negative, the nth\n * element from the end is returned.\n *\n * @static\n * @memberOf _\n * @since 4.11.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=0] The index of the element to return.\n * @returns {*} Returns the nth element of `array`.\n * @example\n *\n * var array = ['a', 'b', 'c', 'd'];\n *\n * _.nth(array, 1);\n * // => 'b'\n *\n * _.nth(array, -2);\n * // => 'c';\n */\nfunction nth(array, n) {\n  return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n}\n\nexport default nth;\n","/**\n * This function is like `baseIndexOf` except that it accepts a comparator.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOfWith(array, value, fromIndex, comparator) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (comparator(array[index], value)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default baseIndexOfWith;\n","import arrayMap from './_arrayMap';\nimport baseIndexOf from './_baseIndexOf';\nimport baseIndexOfWith from './_baseIndexOfWith';\nimport baseUnary from './_baseUnary';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nexport default basePullAll;\n","import basePullAll from './_basePullAll';\n\n/**\n * This method is like `_.pull` except that it accepts an array of values to remove.\n *\n * **Note:** Unlike `_.difference`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [1, 2, 3, 1, 2, 3];\n *\n * _.pullAll(array, [2, 3]);\n * console.log(array);\n * // => [1, 1]\n */\nfunction pullAll(array, values) {\n  return (array && array.length && values && values.length)\n    ? basePullAll(array, values)\n    : array;\n}\n\nexport default pullAll;\n","import pullAll from './pullAll';\nimport rest from './rest';\n\n/**\n * Removes all given values from `array` using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n * to remove elements from an array by predicate.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...*} [values] The values to remove.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [1, 2, 3, 1, 2, 3];\n *\n * _.pull(array, 2, 3);\n * console.log(array);\n * // => [1, 1]\n */\nvar pull = rest(pullAll);\n\nexport default pull;\n","import baseIteratee from './_baseIteratee';\nimport basePullAll from './_basePullAll';\n\n/**\n * This method is like `_.pullAll` except that it accepts `iteratee` which is\n * invoked for each element of `array` and `values` to generate the criterion\n * by which they're compared. The iteratee is invoked with one argument: (value).\n *\n * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n *\n * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n * console.log(array);\n * // => [{ 'x': 2 }]\n */\nfunction pullAllBy(array, values, iteratee) {\n  return (array && array.length && values && values.length)\n    ? basePullAll(array, values, baseIteratee(iteratee))\n    : array;\n}\n\nexport default pullAllBy;\n","import basePullAll from './_basePullAll';\n\n/**\n * This method is like `_.pullAll` except that it accepts `comparator` which\n * is invoked to compare elements of `array` to `values`. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 4.6.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n *\n * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n * console.log(array);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n */\nfunction pullAllWith(array, values, comparator) {\n  return (array && array.length && values && values.length)\n    ? basePullAll(array, values, undefined, comparator)\n    : array;\n}\n\nexport default pullAllWith;\n","import get from './get';\n\n/**\n * The base implementation of `_.at` without support for individual paths.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {string[]} paths The property paths of elements to pick.\n * @returns {Array} Returns the picked elements.\n */\nfunction baseAt(object, paths) {\n  var index = -1,\n      isNil = object == null,\n      length = paths.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = isNil ? undefined : get(object, paths[index]);\n  }\n  return result;\n}\n\nexport default baseAt;\n","import baseGet from './_baseGet';\nimport baseSlice from './_baseSlice';\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nexport default parent;\n","import castPath from './_castPath';\nimport isIndex from './_isIndex';\nimport isKey from './_isKey';\nimport last from './last';\nimport parent from './_parent';\nimport toKey from './_toKey';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAt` without support for individual\n * indexes or capturing the removed elements.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {number[]} indexes The indexes of elements to remove.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAt(array, indexes) {\n  var length = array ? indexes.length : 0,\n      lastIndex = length - 1;\n\n  while (length--) {\n    var index = indexes[length];\n    if (length == lastIndex || index !== previous) {\n      var previous = index;\n      if (isIndex(index)) {\n        splice.call(array, index, 1);\n      }\n      else if (!isKey(index, array)) {\n        var path = castPath(index),\n            object = parent(array, path);\n\n        if (object != null) {\n          delete object[toKey(last(path))];\n        }\n      }\n      else {\n        delete array[toKey(index)];\n      }\n    }\n  }\n  return array;\n}\n\nexport default basePullAt;\n","import isSymbol from './isSymbol';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import arrayMap from './_arrayMap';\nimport baseAt from './_baseAt';\nimport baseFlatten from './_baseFlatten';\nimport basePullAt from './_basePullAt';\nimport compareAscending from './_compareAscending';\nimport isIndex from './_isIndex';\nimport rest from './rest';\n\n/**\n * Removes elements from `array` corresponding to `indexes` and returns an\n * array of removed elements.\n *\n * **Note:** Unlike `_.at`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = [5, 10, 15, 20];\n * var evens = _.pullAt(array, 1, 3);\n *\n * console.log(array);\n * // => [5, 15]\n *\n * console.log(evens);\n * // => [10, 20]\n */\nvar pullAt = rest(function(array, indexes) {\n  indexes = baseFlatten(indexes, 1);\n\n  var length = array ? array.length : 0,\n      result = baseAt(array, indexes);\n\n  basePullAt(array, arrayMap(indexes, function(index) {\n    return isIndex(index, length) ? +index : index;\n  }).sort(compareAscending));\n\n  return result;\n});\n\nexport default pullAt;\n","import baseIteratee from './_baseIteratee';\nimport basePullAt from './_basePullAt';\n\n/**\n * Removes all elements from `array` that `predicate` returns truthy for\n * and returns an array of the removed elements. The predicate is invoked\n * with three arguments: (value, index, array).\n *\n * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n * to pull elements from an array by value.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = [1, 2, 3, 4];\n * var evens = _.remove(array, function(n) {\n *   return n % 2 == 0;\n * });\n *\n * console.log(array);\n * // => [1, 3]\n *\n * console.log(evens);\n * // => [2, 4]\n */\nfunction remove(array, predicate) {\n  var result = [];\n  if (!(array && array.length)) {\n    return result;\n  }\n  var index = -1,\n      indexes = [],\n      length = array.length;\n\n  predicate = baseIteratee(predicate, 3);\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result.push(value);\n      indexes.push(index);\n    }\n  }\n  basePullAt(array, indexes);\n  return result;\n}\n\nexport default remove;\n","/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeReverse = arrayProto.reverse;\n\n/**\n * Reverses `array` so that the first element becomes the last, the second\n * element becomes the second to last, and so on.\n *\n * **Note:** This method mutates `array` and is based on\n * [`Array#reverse`](https://mdn.io/Array/reverse).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [1, 2, 3];\n *\n * _.reverse(array);\n * // => [3, 2, 1]\n *\n * console.log(array);\n * // => [3, 2, 1]\n */\nfunction reverse(array) {\n  return array ? nativeReverse.call(array) : array;\n}\n\nexport default reverse;\n","import baseSlice from './_baseSlice';\nimport isIterateeCall from './_isIterateeCall';\nimport toInteger from './toInteger';\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n * returned.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction slice(array, start, end) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  }\n  else {\n    start = start == null ? 0 : toInteger(start);\n    end = end === undefined ? length : toInteger(end);\n  }\n  return baseSlice(array, start, end);\n}\n\nexport default slice;\n","import isSymbol from './isSymbol';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n * which invokes `iteratee` for `value` and each element of `array` to compute\n * their sort ranking. The iteratee is invoked with one argument; (value).\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndexBy(array, value, iteratee, retHighest) {\n  value = iteratee(value);\n\n  var low = 0,\n      high = array ? array.length : 0,\n      valIsNaN = value !== value,\n      valIsNull = value === null,\n      valIsSymbol = isSymbol(value),\n      valIsUndefined = value === undefined;\n\n  while (low < high) {\n    var mid = nativeFloor((low + high) / 2),\n        computed = iteratee(array[mid]),\n        othIsDefined = computed !== undefined,\n        othIsNull = computed === null,\n        othIsReflexive = computed === computed,\n        othIsSymbol = isSymbol(computed);\n\n    if (valIsNaN) {\n      var setLow = retHighest || othIsReflexive;\n    } else if (valIsUndefined) {\n      setLow = othIsReflexive && (retHighest || othIsDefined);\n    } else if (valIsNull) {\n      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n    } else if (valIsSymbol) {\n      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n    } else if (othIsNull || othIsSymbol) {\n      setLow = false;\n    } else {\n      setLow = retHighest ? (computed <= value) : (computed < value);\n    }\n    if (setLow) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return nativeMin(high, MAX_ARRAY_INDEX);\n}\n\nexport default baseSortedIndexBy;\n","import baseSortedIndexBy from './_baseSortedIndexBy';\nimport identity from './identity';\nimport isSymbol from './isSymbol';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array ? array.length : low;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;\n","import baseSortedIndex from './_baseSortedIndex';\n\n/**\n * Uses a binary search to determine the lowest index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * _.sortedIndex([30, 50], 40);\n * // => 1\n *\n * _.sortedIndex([4, 5], 4);\n * // => 0\n */\nfunction sortedIndex(array, value) {\n  return baseSortedIndex(array, value);\n}\n\nexport default sortedIndex;\n","import baseIteratee from './_baseIteratee';\nimport baseSortedIndexBy from './_baseSortedIndexBy';\n\n/**\n * This method is like `_.sortedIndex` except that it accepts `iteratee`\n * which is invoked for `value` and each element of `array` to compute their\n * sort ranking. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\n *\n * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\n * // => 1\n *\n * // The `_.property` iteratee shorthand.\n * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n * // => 0\n */\nfunction sortedIndexBy(array, value, iteratee) {\n  return baseSortedIndexBy(array, value, baseIteratee(iteratee));\n}\n\nexport default sortedIndexBy;\n","import baseSortedIndex from './_baseSortedIndex';\nimport eq from './eq';\n\n/**\n * This method is like `_.indexOf` except that it performs a binary\n * search on a sorted `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.sortedIndexOf([1, 1, 2, 2], 2);\n * // => 2\n */\nfunction sortedIndexOf(array, value) {\n  var length = array ? array.length : 0;\n  if (length) {\n    var index = baseSortedIndex(array, value);\n    if (index < length && eq(array[index], value)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default sortedIndexOf;\n","import baseSortedIndex from './_baseSortedIndex';\n\n/**\n * This method is like `_.sortedIndex` except that it returns the highest\n * index at which `value` should be inserted into `array` in order to\n * maintain its sort order.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * _.sortedLastIndex([4, 5], 4);\n * // => 1\n */\nfunction sortedLastIndex(array, value) {\n  return baseSortedIndex(array, value, true);\n}\n\nexport default sortedLastIndex;\n","import baseIteratee from './_baseIteratee';\nimport baseSortedIndexBy from './_baseSortedIndexBy';\n\n/**\n * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n * which is invoked for `value` and each element of `array` to compute their\n * sort ranking. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * // The `_.property` iteratee shorthand.\n * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n * // => 1\n */\nfunction sortedLastIndexBy(array, value, iteratee) {\n  return baseSortedIndexBy(array, value, baseIteratee(iteratee), true);\n}\n\nexport default sortedLastIndexBy;\n","import baseSortedIndex from './_baseSortedIndex';\nimport eq from './eq';\n\n/**\n * This method is like `_.lastIndexOf` except that it performs a binary\n * search on a sorted `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.sortedLastIndexOf([1, 1, 2, 2], 2);\n * // => 3\n */\nfunction sortedLastIndexOf(array, value) {\n  var length = array ? array.length : 0;\n  if (length) {\n    var index = baseSortedIndex(array, value, true) - 1;\n    if (eq(array[index], value)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport default sortedLastIndexOf;\n","import eq from './eq';\n\n/**\n * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseSortedUniq(array, iteratee) {\n  var index = -1,\n      length = array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    if (!index || !eq(computed, seen)) {\n      var seen = computed;\n      result[resIndex++] = value === 0 ? 0 : value;\n    }\n  }\n  return result;\n}\n\nexport default baseSortedUniq;\n","import baseSortedUniq from './_baseSortedUniq';\n\n/**\n * This method is like `_.uniq` except that it's designed and optimized\n * for sorted arrays.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.sortedUniq([1, 1, 2]);\n * // => [1, 2]\n */\nfunction sortedUniq(array) {\n  return (array && array.length)\n    ? baseSortedUniq(array)\n    : [];\n}\n\nexport default sortedUniq;\n","import baseIteratee from './_baseIteratee';\nimport baseSortedUniq from './_baseSortedUniq';\n\n/**\n * This method is like `_.uniqBy` except that it's designed and optimized\n * for sorted arrays.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n * // => [1.1, 2.3]\n */\nfunction sortedUniqBy(array, iteratee) {\n  return (array && array.length)\n    ? baseSortedUniq(array, baseIteratee(iteratee))\n    : [];\n}\n\nexport default sortedUniqBy;\n","import drop from './drop';\n\n/**\n * Gets all but the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.tail([1, 2, 3]);\n * // => [2, 3]\n */\nfunction tail(array) {\n  return drop(array, 1);\n}\n\nexport default tail;\n","import baseSlice from './_baseSlice';\nimport toInteger from './toInteger';\n\n/**\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.take([1, 2, 3]);\n * // => [1]\n *\n * _.take([1, 2, 3], 2);\n * // => [1, 2]\n *\n * _.take([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.take([1, 2, 3], 0);\n * // => []\n */\nfunction take(array, n, guard) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default take;\n","import baseSlice from './_baseSlice';\nimport toInteger from './toInteger';\n\n/**\n * Creates a slice of `array` with `n` elements taken from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.takeRight([1, 2, 3]);\n * // => [3]\n *\n * _.takeRight([1, 2, 3], 2);\n * // => [2, 3]\n *\n * _.takeRight([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.takeRight([1, 2, 3], 0);\n * // => []\n */\nfunction takeRight(array, n, guard) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default takeRight;\n","import baseIteratee from './_baseIteratee';\nimport baseWhile from './_baseWhile';\n\n/**\n * Creates a slice of `array` with elements taken from the end. Elements are\n * taken until `predicate` returns falsey. The predicate is invoked with\n * three arguments: (value, index, array).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ];\n *\n * _.takeRightWhile(users, function(o) { return !o.active; });\n * // => objects for ['fred', 'pebbles']\n *\n * // The `_.matches` iteratee shorthand.\n * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n * // => objects for ['pebbles']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.takeRightWhile(users, ['active', false]);\n * // => objects for ['fred', 'pebbles']\n *\n * // The `_.property` iteratee shorthand.\n * _.takeRightWhile(users, 'active');\n * // => []\n */\nfunction takeRightWhile(array, predicate) {\n  return (array && array.length)\n    ? baseWhile(array, baseIteratee(predicate, 3), false, true)\n    : [];\n}\n\nexport default takeRightWhile;\n","import baseIteratee from './_baseIteratee';\nimport baseWhile from './_baseWhile';\n\n/**\n * Creates a slice of `array` with elements taken from the beginning. Elements\n * are taken until `predicate` returns falsey. The predicate is invoked with\n * three arguments: (value, index, array).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Array|Function|Object|string} [predicate=_.identity]\n *  The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false},\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.takeWhile(users, function(o) { return !o.active; });\n * // => objects for ['barney', 'fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.takeWhile(users, { 'user': 'barney', 'active': false });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.takeWhile(users, ['active', false]);\n * // => objects for ['barney', 'fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.takeWhile(users, 'active');\n * // => []\n */\nfunction takeWhile(array, predicate) {\n  return (array && array.length)\n    ? baseWhile(array, baseIteratee(predicate, 3))\n    : [];\n}\n\nexport default takeWhile;\n","/**\n * A no-operation function that returns `undefined` regardless of the\n * arguments it receives.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.noop(object) === undefined;\n * // => true\n */\nfunction noop() {\n  // No operation performed.\n}\n\nexport default noop;\n","import Set from './_Set';\nimport noop from './noop';\nimport setToArray from './_setToArray';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nexport default createSet;\n","import SetCache from './_SetCache';\nimport arrayIncludes from './_arrayIncludes';\nimport arrayIncludesWith from './_arrayIncludesWith';\nimport cacheHas from './_cacheHas';\nimport createSet from './_createSet';\nimport setToArray from './_setToArray';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseUniq;\n","import baseFlatten from './_baseFlatten';\nimport baseUniq from './_baseUniq';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport rest from './rest';\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2, 1], [4, 2], [1, 2]);\n * // => [2, 1, 4]\n */\nvar union = rest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nexport default union;\n","import baseFlatten from './_baseFlatten';\nimport baseIteratee from './_baseIteratee';\nimport baseUniq from './_baseUniq';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n * // => [2.1, 1.2, 4.3]\n *\n * // The `_.property` iteratee shorthand.\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nvar unionBy = rest(function(arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee));\n});\n\nexport default unionBy;\n","import baseFlatten from './_baseFlatten';\nimport baseUniq from './_baseUniq';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.union` except that it accepts `comparator` which\n * is invoked to compare elements of `arrays`. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.unionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar unionWith = rest(function(arrays) {\n  var comparator = last(arrays);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n});\n\nexport default unionWith;\n","import baseUniq from './_baseUniq';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each\n * element is kept.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length)\n    ? baseUniq(array)\n    : [];\n}\n\nexport default uniq;\n","import baseIteratee from './_baseIteratee';\nimport baseUniq from './_baseUniq';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length)\n    ? baseUniq(array, baseIteratee(iteratee))\n    : [];\n}\n\nexport default uniqBy;\n","import baseUniq from './_baseUniq';\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The comparator is invoked with\n * two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  return (array && array.length)\n    ? baseUniq(array, undefined, comparator)\n    : [];\n}\n\nexport default uniqWith;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","import arrayFilter from './_arrayFilter';\nimport arrayMap from './_arrayMap';\nimport baseProperty from './_baseProperty';\nimport baseTimes from './_baseTimes';\nimport isArrayLikeObject from './isArrayLikeObject';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n * // => [['fred', 30, true], ['barney', 40, false]]\n *\n * _.unzip(zipped);\n * // => [['fred', 'barney'], [30, 40], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var length = 0;\n  array = arrayFilter(array, function(group) {\n    if (isArrayLikeObject(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  return baseTimes(length, function(index) {\n    return arrayMap(array, baseProperty(index));\n  });\n}\n\nexport default unzip;\n","import apply from './_apply';\nimport arrayMap from './_arrayMap';\nimport unzip from './unzip';\n\n/**\n * This method is like `_.unzip` except that it accepts `iteratee` to specify\n * how regrouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @param {Function} [iteratee=_.identity] The function to combine\n *  regrouped values.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n * // => [[1, 10, 100], [2, 20, 200]]\n *\n * _.unzipWith(zipped, _.add);\n * // => [3, 30, 300]\n */\nfunction unzipWith(array, iteratee) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var result = unzip(array);\n  if (iteratee == null) {\n    return result;\n  }\n  return arrayMap(result, function(group) {\n    return apply(iteratee, undefined, group);\n  });\n}\n\nexport default unzipWith;\n","import baseDifference from './_baseDifference';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport rest from './rest';\n\n/**\n * Creates an array excluding all given values using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.xor\n * @example\n *\n * _.without([1, 2, 1, 3], 1, 2);\n * // => [3]\n */\nvar without = rest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, values)\n    : [];\n});\n\nexport default without;\n","import arrayPush from './_arrayPush';\nimport baseDifference from './_baseDifference';\nimport baseUniq from './_baseUniq';\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var index = -1,\n      length = arrays.length;\n\n  while (++index < length) {\n    var result = result\n      ? arrayPush(\n          baseDifference(result, arrays[index], iteratee, comparator),\n          baseDifference(arrays[index], result, iteratee, comparator)\n        )\n      : arrays[index];\n  }\n  return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n}\n\nexport default baseXor;\n","import arrayFilter from './_arrayFilter';\nimport baseXor from './_baseXor';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport rest from './rest';\n\n/**\n * Creates an array of unique values that is the\n * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n * of the given arrays. The order of result values is determined by the order\n * they occur in the arrays.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.without\n * @example\n *\n * _.xor([2, 1], [4, 2]);\n * // => [1, 4]\n */\nvar xor = rest(function(arrays) {\n  return baseXor(arrayFilter(arrays, isArrayLikeObject));\n});\n\nexport default xor;\n","import arrayFilter from './_arrayFilter';\nimport baseIteratee from './_baseIteratee';\nimport baseXor from './_baseXor';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.xor` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which by which they're compared. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Array|Function|Object|string} [iteratee=_.identity]\n *  The iteratee invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);\n * // => [1.2, 4.3]\n *\n * // The `_.property` iteratee shorthand.\n * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 2 }]\n */\nvar xorBy = rest(function(arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee));\n});\n\nexport default xorBy;\n","import arrayFilter from './_arrayFilter';\nimport baseXor from './_baseXor';\nimport isArrayLikeObject from './isArrayLikeObject';\nimport last from './last';\nimport rest from './rest';\n\n/**\n * This method is like `_.xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The comparator is invoked with\n * two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.xorWith(objects, others, _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar xorWith = rest(function(arrays) {\n  var comparator = last(arrays);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\n\nexport default xorWith;\n","import rest from './rest';\nimport unzip from './unzip';\n\n/**\n * Creates an array of grouped elements, the first of which contains the\n * first elements of the given arrays, the second of which contains the\n * second elements of the given arrays, and so on.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n * // => [['fred', 30, true], ['barney', 40, false]]\n */\nvar zip = rest(unzip);\n\nexport default zip;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue';\nimport baseZipObject from './_baseZipObject';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","import assignValue from './_assignValue';\nimport castPath from './_castPath';\nimport isIndex from './_isIndex';\nimport isKey from './_isKey';\nimport isObject from './isObject';\nimport toKey from './_toKey';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]);\n    if (isObject(nested)) {\n      var newValue = value;\n      if (index != lastIndex) {\n        var objValue = nested[key];\n        newValue = customizer ? customizer(objValue, key, nested) : undefined;\n        if (newValue === undefined) {\n          newValue = objValue == null\n            ? (isIndex(path[index + 1]) ? [] : {})\n            : objValue;\n        }\n      }\n      assignValue(nested, key, newValue);\n    }\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseSet from './_baseSet';\nimport baseZipObject from './_baseZipObject';\n\n/**\n * This method is like `_.zipObject` except that it supports property paths.\n *\n * @static\n * @memberOf _\n * @since 4.1.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n */\nfunction zipObjectDeep(props, values) {\n  return baseZipObject(props || [], values || [], baseSet);\n}\n\nexport default zipObjectDeep;\n","import rest from './rest';\nimport unzipWith from './unzipWith';\n\n/**\n * This method is like `_.zip` except that it accepts `iteratee` to specify\n * how grouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n *   return a + b + c;\n * });\n * // => [111, 222]\n */\nvar zipWith = rest(function(arrays) {\n  var length = arrays.length,\n      iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n  return unzipWith(arrays, iteratee);\n});\n\nexport default zipWith;\n","import chunk from './chunk';\nimport compact from './compact';\nimport concat from './concat';\nimport difference from './difference';\nimport differenceBy from './differenceBy';\nimport differenceWith from './differenceWith';\nimport drop from './drop';\nimport dropRight from './dropRight';\nimport dropRightWhile from './dropRightWhile';\nimport dropWhile from './dropWhile';\nimport fill from './fill';\nimport findIndex from './findIndex';\nimport findLastIndex from './findLastIndex';\nimport first from './first';\nimport flatten from './flatten';\nimport flattenDeep from './flattenDeep';\nimport flattenDepth from './flattenDepth';\nimport fromPairs from './fromPairs';\nimport head from './head';\nimport indexOf from './indexOf';\nimport initial from './initial';\nimport intersection from './intersection';\nimport intersectionBy from './intersectionBy';\nimport intersectionWith from './intersectionWith';\nimport join from './join';\nimport last from './last';\nimport lastIndexOf from './lastIndexOf';\nimport nth from './nth';\nimport pull from './pull';\nimport pullAll from './pullAll';\nimport pullAllBy from './pullAllBy';\nimport pullAllWith from './pullAllWith';\nimport pullAt from './pullAt';\nimport remove from './remove';\nimport reverse from './reverse';\nimport slice from './slice';\nimport sortedIndex from './sortedIndex';\nimport sortedIndexBy from './sortedIndexBy';\nimport sortedIndexOf from './sortedIndexOf';\nimport sortedLastIndex from './sortedLastIndex';\nimport sortedLastIndexBy from './sortedLastIndexBy';\nimport sortedLastIndexOf from './sortedLastIndexOf';\nimport sortedUniq from './sortedUniq';\nimport sortedUniqBy from './sortedUniqBy';\nimport tail from './tail';\nimport take from './take';\nimport takeRight from './takeRight';\nimport takeRightWhile from './takeRightWhile';\nimport takeWhile from './takeWhile';\nimport union from './union';\nimport unionBy from './unionBy';\nimport unionWith from './unionWith';\nimport uniq from './uniq';\nimport uniqBy from './uniqBy';\nimport uniqWith from './uniqWith';\nimport unzip from './unzip';\nimport unzipWith from './unzipWith';\nimport without from './without';\nimport xor from './xor';\nimport xorBy from './xorBy';\nimport xorWith from './xorWith';\nimport zip from './zip';\nimport zipObject from './zipObject';\nimport zipObjectDeep from './zipObjectDeep';\nimport zipWith from './zipWith';\n\nexport default {\n  chunk, compact, concat, difference, differenceBy,\n  differenceWith, drop, dropRight, dropRightWhile, dropWhile,\n  fill, findIndex, findLastIndex, first, flatten,\n  flattenDeep, flattenDepth, fromPairs, head, indexOf,\n  initial, intersection, intersectionBy, intersectionWith, join,\n  last, lastIndexOf, nth, pull, pullAll,\n  pullAllBy, pullAllWith, pullAt, remove, reverse,\n  slice, sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex,\n  sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy, tail,\n  take, takeRight, takeRightWhile, takeWhile, union,\n  unionBy, unionWith, uniq, uniqBy, uniqWith,\n  unzip, unzipWith, without, xor, xorBy,\n  xorWith, zip, zipObject, zipObjectDeep, zipWith\n};\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @protected\n * @module engine/model/delta/transform\n */\n\nimport Delta from './delta';\nimport MoveDelta from './movedelta';\nimport RemoveDelta from './removedelta';\nimport MergeDelta from './mergedelta';\nimport SplitDelta from './splitdelta';\nimport WrapDelta from './wrapdelta';\nimport UnwrapDelta from './unwrapdelta';\nimport RenameDelta from './renamedelta';\nimport AttributeDelta from './attributedelta';\nimport operationTransform from '../operation/transform';\nimport NoOperation from '../operation/nooperation';\nimport MoveOperation from '../operation/moveoperation';\nimport RemoveOperation from '../operation/removeoperation';\nimport arrayUtils from '@ckeditor/ckeditor5-utils/src/lib/lodash/array';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\nconst specialCases = new Map();\n\n/**\n * @namespace\n */\nconst transform = {\n\t/**\n\t * Transforms given {@link module:engine/model/delta/delta~Delta delta} by another {@link module:engine/model/delta/delta~Delta delta}\n\t * and returns the result of that transformation as an array containing one or more {@link module:engine/model/delta/delta~Delta delta}\n\t * instances.\n\t *\n\t * Delta transformations heavily base on {@link module:engine/model/operation/transform~transform operational transformations}. Since\n\t * delta is a list of operations most situations can be handled thanks to operational transformation. Unfortunately,\n\t * deltas are more complicated than operations and have they semantic meaning, as they represent user's editing intentions.\n\t *\n\t * Sometimes, simple operational transformation on deltas' operations might result in some unexpected results. Those\n\t * results would be fine from OT point of view, but would not reflect user's intentions. Because of such conflicts\n\t * we need to handle transformations in special cases in a custom way.\n\t *\n\t * The function itself looks whether two given delta types have a special case function registered. If so, the deltas are\n\t * transformed using that function. If not,\n\t * {@link module:engine/model/delta/transform~transform.defaultTransform default transformation algorithm} is used.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} a Delta that will be transformed.\n\t * @param {module:engine/model/delta/delta~Delta} b Delta to transform by.\n\t * @param {module:engine/model/delta/transform~transformationContext} context Transformation context object.\n\t * @returns {Array.<module:engine/model/delta/delta~Delta>} Result of the transformation.\n\t */\n\ttransform( a, b, context ) {\n\t\tconst transformAlgorithm = transform.getTransformationCase( a, b ) || transform.defaultTransform;\n\n\t\t// Make new instance of context object, so all changes done during transformation are not saved in original object.\n\t\tconst transformed = transformAlgorithm( a, b, Object.assign( {}, context ) );\n\t\tconst baseVersion = arrayUtils.last( b.operations ).baseVersion;\n\n\t\treturn updateBaseVersion( baseVersion, transformed );\n\t},\n\n\t/**\n\t * The default delta transformation function. It is used for those deltas that are not in special case conflict.\n\t *\n\t * This algorithm is similar to a popular `dOPT` algorithm used in operational transformation, as we are in fact\n\t * transforming two sets of operations by each other.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} a Delta that will be transformed.\n\t * @param {module:engine/model/delta/delta~Delta} b Delta to transform by.\n\t * @param {module:engine/model/delta/transform~transformationContext} context Transformation context object.\n\t * @returns {Array.<module:engine/model/delta/delta~Delta>} Result of the transformation.\n\t */\n\tdefaultTransform( a, b, context ) {\n\t\t// This will hold operations from delta `a` that will be transformed by operations from delta `b`.\n\t\t// Eventually, those operations will be used to create result delta(s).\n\t\tconst transformed = [];\n\n\t\t// Array containing operations that we will transform by. At the beginning these are just operations from\n\t\tlet byOps = b.operations;\n\n\t\t// This array is storing operations from `byOps` which got transformed by operation from delta `a`.\n\t\tlet newByOps = [];\n\n\t\t// We take each operation from original set of operations to transform.\n\t\tfor ( const opA of a.operations ) {\n\t\t\t// We wrap the operation in the array. This is important, because operation transformation algorithm returns\n\t\t\t// an array of operations so we need to make sure that our algorithm is ready to handle arrays.\n\t\t\tconst ops = [ opA ];\n\n\t\t\t// Now the real algorithm takes place.\n\t\t\tfor ( const opB of byOps ) {\n\t\t\t\t// For each operation that we need transform by...\n\t\t\t\tfor ( let i = 0; i < ops.length; i++ ) {\n\t\t\t\t\t// We take each operation to transform...\n\t\t\t\t\tconst op = ops[ i ];\n\n\t\t\t\t\t// And transform both of them by themselves.\n\n\t\t\t\t\t// The result of transforming operation from delta B by operation from delta A is saved in\n\t\t\t\t\t// `newByOps` array. We will use that array for transformations in next loops. We need delta B\n\t\t\t\t\t// operations after transformed by delta A operations to get correct results of transformations\n\t\t\t\t\t// of next operations from delta A.\n\t\t\t\t\t//\n\t\t\t\t\t// It's like this because 2nd operation from delta A assumes that 1st operation from delta A\n\t\t\t\t\t// is \"already applied\". When we transform 2nd operation from delta A by operations from delta B\n\t\t\t\t\t// we have to be sure that operations from delta B are in a state that acknowledges 1st operation\n\t\t\t\t\t// from delta A.\n\t\t\t\t\t//\n\t\t\t\t\t// This can be easier understood when operations sets to transform are represented by diamond diagrams:\n\t\t\t\t\t// http://www.codecommit.com/blog/java/understanding-and-applying-operational-transformation\n\n\t\t\t\t\t// Transform operation from delta A by operation from delta B.\n\t\t\t\t\tconst results = operationTransform( op, opB, context );\n\n\t\t\t\t\t// We replace currently processed operation from `ops` array by the results of transformation.\n\t\t\t\t\t// Note, that we process single operation but `operationTransform` result is an array, so we\n\t\t\t\t\t// might have to splice-in more than one operation. Save them in `ops` array and move `i` pointer by a proper offset.\n\t\t\t\t\tArray.prototype.splice.apply( ops, [ i, 1 ].concat( results ) );\n\n\t\t\t\t\ti += results.length - 1;\n\n\t\t\t\t\t// Then, transform operation from delta B by operation from delta A.\n\t\t\t\t\t// Since this is a \"mirror\" transformation, first, we \"mirror\" some of context values.\n\t\t\t\t\tconst reverseContext = Object.assign( {}, context );\n\t\t\t\t\treverseContext.isStrong = !context.isStrong;\n\t\t\t\t\treverseContext.insertBefore = context.insertBefore !== undefined ? !context.insertBefore : undefined;\n\n\t\t\t\t\t// Transform operations.\n\t\t\t\t\tconst updatedOpB = operationTransform( opB, op, reverseContext );\n\n\t\t\t\t\t// Update `newByOps` by transformed, updated `opB`.\n\t\t\t\t\t// Using push.apply because `operationTransform` returns an array with one or multiple results.\n\t\t\t\t\tArray.prototype.push.apply( newByOps, updatedOpB );\n\t\t\t\t}\n\n\t\t\t\t// At this point a single operation from delta A got transformed by a single operation from delta B.\n\t\t\t\t// The transformation result is in `ops` array and it may be one or more operations. This was just the first step.\n\t\t\t\t// Operation from delta A has to be further transformed by the other operations from delta B.\n\t\t\t\t// So in next iterator loop we will take another operation from delta B and use transformed delta A (`ops`)\n\t\t\t\t// to transform it further.\n\t\t\t}\n\n\t\t\t// We got through all delta B operations and have a final transformed state of an operation from delta A.\n\n\t\t\t// As previously mentioned, we substitute operations from delta B by their transformed equivalents.\n\t\t\tbyOps = newByOps;\n\t\t\tnewByOps = [];\n\n\t\t\t// We add transformed operation from delta A to newly created delta.\n\t\t\t// Remember that transformed operation from delta A may consist of multiple operations.\n\t\t\tfor ( const op of ops ) {\n\t\t\t\ttransformed.push( op );\n\t\t\t}\n\n\t\t\t// In next loop, we will take another operation from delta A and transform it through (transformed) operations\n\t\t\t// from delta B...\n\t\t}\n\n\t\treturn getNormalizedDeltas( a.constructor, transformed );\n\t},\n\n\t/**\n\t * Adds a special case callback for given delta classes.\n\t *\n\t * @param {Function} A Delta constructor which instance will get transformed.\n\t * @param {Function} B Delta constructor which instance will be transformed by.\n\t * @param {Function} resolver A callback that will handle custom special case transformation for instances of given delta classes.\n\t */\n\taddTransformationCase( A, B, resolver ) {\n\t\tlet casesA = specialCases.get( A );\n\n\t\tif ( !casesA ) {\n\t\t\tcasesA = new Map();\n\t\t\tspecialCases.set( A, casesA );\n\t\t}\n\n\t\tcasesA.set( B, resolver );\n\t},\n\n\t/**\n\t * Gets a special case callback which was previously {@link module:engine/model/delta/transform~transform.addTransformationCase added}.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} a Delta to transform.\n\t * @param {module:engine/model/delta/delta~Delta} b Delta to be transformed by.\n\t */\n\tgetTransformationCase( a, b ) {\n\t\tlet casesA = specialCases.get( a.constructor );\n\n\t\t// If there are no special cases registered for class which `a` is instance of, we will\n\t\t// check if there are special cases registered for any parent class.\n\t\tif ( !casesA || !casesA.get( b.constructor ) ) {\n\t\t\tconst cases = specialCases.keys();\n\n\t\t\tfor ( const caseClass of cases ) {\n\t\t\t\tif ( a instanceof caseClass && specialCases.get( caseClass ).get( b.constructor ) ) {\n\t\t\t\t\tcasesA = specialCases.get( caseClass );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( casesA ) {\n\t\t\treturn casesA.get( b.constructor );\n\t\t}\n\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Transforms two sets of deltas by themselves. Returns both transformed sets.\n\t *\n\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasA Array with the first set of deltas to transform. These\n\t * deltas are considered more important (than `deltasB`) when resolving conflicts.\n\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasB Array with the second set of deltas to transform. These\n\t * deltas are considered less important (than `deltasA`) when resolving conflicts.\n\t * @param {module:engine/model/document~Document} [document=null] If set, deltas will be transformed in \"undo mode\"\n\t * and given `document` will be used to determine relations between deltas. If not set (default), deltas will be\n\t * transforming without additional context information.\n\t * @returns {Object}\n\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasA The first set of deltas transformed\n\t * by the second set of deltas.\n\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasB The second set of deltas transformed\n\t * by the first set of deltas.\n\t */\n\ttransformDeltaSets( deltasA, deltasB, document = null ) {\n\t\tconst transformedDeltasA = Array.from( deltasA );\n\t\tconst transformedDeltasB = Array.from( deltasB );\n\n\t\tconst useAdditionalContext = document !== null;\n\n\t\tconst contextAB = {\n\t\t\tisStrong: true\n\t\t};\n\n\t\tif ( useAdditionalContext ) {\n\t\t\tcontextAB.wasAffected = new Map();\n\t\t\tcontextAB.originalDelta = new Map();\n\t\t\tcontextAB.document = document;\n\t\t\tcontextAB.undoMode = true;\n\n\t\t\tfor ( const delta of transformedDeltasB ) {\n\t\t\t\tcontextAB.originalDelta.set( delta, delta );\n\t\t\t}\n\t\t}\n\n\t\tfor ( let i = 0; i < transformedDeltasA.length; i++ ) {\n\t\t\tconst deltaA = [ transformedDeltasA[ i ] ];\n\n\t\t\tfor ( let j = 0; j < transformedDeltasB.length; j++ ) {\n\t\t\t\tconst deltaB = [ transformedDeltasB[ j ] ];\n\n\t\t\t\tfor ( let k = 0; k < deltaA.length; k++ ) {\n\t\t\t\t\tfor ( let l = 0; l < deltaB.length; l++ ) {\n\t\t\t\t\t\tif ( useAdditionalContext ) {\n\t\t\t\t\t\t\t_setContext( deltaA[ k ], deltaB[ l ], contextAB );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst resultAB = transform.transform( deltaA[ k ], deltaB[ l ], {\n\t\t\t\t\t\t\tinsertBefore: contextAB.insertBefore,\n\t\t\t\t\t\t\tforceNotSticky: contextAB.forceNotSticky,\n\t\t\t\t\t\t\tisStrong: contextAB.isStrong,\n\t\t\t\t\t\t\tforceWeakRemove: contextAB.forceWeakRemove,\n\t\t\t\t\t\t\tundoMode: contextAB.undoMode\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tconst resultBA = transform.transform( deltaB[ l ], deltaA[ k ], {\n\t\t\t\t\t\t\tinsertBefore: !contextAB.insertBefore,\n\t\t\t\t\t\t\tforceNotSticky: contextAB.forceNotSticky,\n\t\t\t\t\t\t\tisStrong: !contextAB.isStrong,\n\t\t\t\t\t\t\tforceWeakRemove: contextAB.forceWeakRemove,\n\t\t\t\t\t\t\tundoMode: contextAB.undoMode\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tif ( useAdditionalContext ) {\n\t\t\t\t\t\t\t_updateContext( deltaA[ k ], resultAB, contextAB );\n\n\t\t\t\t\t\t\tconst originalDelta = contextAB.originalDelta.get( deltaB[ l ] );\n\n\t\t\t\t\t\t\tfor ( const deltaBA of resultBA ) {\n\t\t\t\t\t\t\t\tcontextAB.originalDelta.set( deltaBA, originalDelta );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdeltaA.splice( k, 1, ...resultAB );\n\t\t\t\t\t\tk += resultAB.length - 1;\n\n\t\t\t\t\t\tdeltaB.splice( l, 1, ...resultBA );\n\t\t\t\t\t\tl += resultBA.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttransformedDeltasB.splice( j, 1, ...deltaB );\n\t\t\t\tj += deltaB.length - 1;\n\t\t\t}\n\n\t\t\ttransformedDeltasA.splice( i, 1, ...deltaA );\n\t\t\ti += deltaA.length - 1;\n\t\t}\n\n\t\tconst opsDiffA = getOpsCount( transformedDeltasA ) - getOpsCount( deltasA );\n\t\tconst opsDiffB = getOpsCount( transformedDeltasB ) - getOpsCount( deltasB );\n\n\t\tif ( opsDiffB < opsDiffA ) {\n\t\t\tpadWithNoOps( transformedDeltasB, opsDiffA - opsDiffB );\n\t\t} else if ( opsDiffA < opsDiffB ) {\n\t\t\tpadWithNoOps( transformedDeltasA, opsDiffB - opsDiffA );\n\t\t}\n\n\t\treturn { deltasA: transformedDeltasA, deltasB: transformedDeltasB };\n\t}\n};\n\nexport default transform;\n\n// Updates base versions of operations inside deltas (which are the results of delta transformation).\nfunction updateBaseVersion( baseVersion, deltas ) {\n\tfor ( const delta of deltas ) {\n\t\tfor ( const op of delta.operations ) {\n\t\t\top.baseVersion = ++baseVersion;\n\t\t}\n\t}\n\n\treturn deltas;\n}\n\n// Returns number of operations in given array of deltas.\nfunction getOpsCount( deltas ) {\n\treturn deltas.reduce( ( current, delta ) => {\n\t\treturn current + delta.operations.length;\n\t}, 0 );\n}\n\n// Adds a delta containing `howMany` `NoOperation` instances to given array with deltas.\n// Used to \"synchronize\" the number of operations in two delta sets.\nfunction padWithNoOps( deltas, howMany ) {\n\tconst lastDelta = deltas[ deltas.length - 1 ];\n\tlet baseVersion = lastDelta.operations.length + lastDelta.baseVersion;\n\n\tconst noDelta = new Delta();\n\n\tfor ( let i = 0; i < howMany; i++ ) {\n\t\tnoDelta.addOperation( new NoOperation( baseVersion++ ) );\n\t}\n\n\tdeltas.push( noDelta );\n}\n\n// Sets context data before delta `a` by delta `b` transformation.\n// Using data given in `context` object, sets `context.insertBefore` and `context.forceNotSticky` flags.\n// Also updates `context.wasAffected`.\nfunction _setContext( a, b, context ) {\n\t_setWasAffected( a, b, context );\n\t_setInsertBeforeContext( a, b, context );\n\t_setForceWeakRemove( b, context );\n\t_setForceNotSticky( b, context );\n}\n\n// Sets `context.insertBefore` basing on `context.document` history for `a` by `b` transformation.\n//\n// Simply saying, if `b` is \"undoing delta\" it means that `a` might already be transformed by the delta\n// which was undone by `b` (let's call it `oldB`). If this is true, `a` by `b` transformation has to consider\n// how `a` was transformed by `oldB` to get an expected result.\n//\n// This is used to resolve conflict when two operations want to insert nodes at the same position. If the operations\n// are not related, it doesn't matter in what order operations insert those nodes. However if the operations are\n// related (for example, in undo) we need to keep the same order.\n//\n// For example, assume that editor has two letters: 'ab'. Then, both letters are removed, creating two operations:\n// (op. 1) REM [ 1 ] - [ 2 ] => (graveyard) [ 0 ]\n// (op. 2) REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ]\n// Then, we undo operation 2:\n// REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ] is reversed to REI (graveyard) [ 1 ] => [ 0 ] - [ 1 ] and is applied.\n// History stack is:\n// (op. 1) REM [ 1 ] - [ 2 ] => (graveyard) [ 0 ]\n// (op. 2) REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ]\n// (op. 3) REI (graveyard) [ 1 ] => [ 0 ] - [ 1 ]\n// Then, we undo operation 1:\n// REM [ 1 ] - [ 2 ] => (graveyard) [ 0 ] is reversed to REI (graveyard) [ 0 ] => [ 1 ] - [ 2 ] then,\n// is transformed by (op. 2) REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ] and becomes REI (graveyard) [ 0 ] => [ 0 ] - [ 1 ] then,\n// is transformed by (op. 3) REI (graveyard) [ 1 ] => [ 0 ] - [ 1 ] and we have a conflict because both operations\n// insert at the same position, but thanks to keeping the context, we know that in this case, the transformed operation should\n// insert the node after operation 3.\n//\n// Keep in mind, that `context.insertBefore` may be either `Boolean` or `undefined`. If it is `Boolean` then the order is\n// known (deltas are related and `a` should insert nodes before or after `b`). However, if deltas were not related,\n// `context.isBefore` is `undefined` and other factors will be taken into consideration when resolving the order\n// (this, however, happens in operational transformation algorithms).\n//\n// This affects both `MoveOperation` (and its derivatives) and `InsertOperation`.\nfunction _setInsertBeforeContext( a, b, context ) {\n\t// If `b` is a delta that undoes other delta...\n\tconst originalDelta = context.originalDelta.get( b );\n\n\tif ( context.document.history.isUndoingDelta( originalDelta ) ) {\n\t\t// Get the undone delta...\n\t\tconst undoneDelta = context.document.history.getUndoneDelta( originalDelta );\n\t\t// Get a map with deltas related to `a` delta...\n\t\tconst aWasAffectedBy = context.wasAffected.get( a );\n\t\t// And check if the undone delta is related with delta `a`.\n\t\tconst affected = aWasAffectedBy.get( undoneDelta );\n\n\t\tif ( affected !== undefined ) {\n\t\t\t// If deltas are related, set `context.insertBefore` basing on whether `a` was affected by the undone delta.\n\t\t\tcontext.insertBefore = affected;\n\t\t}\n\t}\n}\n\n// Sets `context.forceNotSticky` basing on `context.document` history for transformation by `b` delta.\n//\n// `MoveOperation` may be \"sticky\" which means, that anything that was inserted at the boundary of moved range, should\n// also be moved. This is particularly helpful for actions like splitting or merging a node. However, this behavior\n// sometimes leads to an error, for example in undo.\n//\n// Simply saying, if delta is going to be transformed by delta `b`, stickiness should not be taken into consideration\n// if delta `b` was already undone or if delta `b` is an undoing delta.\n//\n// This affects `MoveOperation` (and its derivatives).\nfunction _setForceNotSticky( b, context ) {\n\tconst originalDelta = context.originalDelta.get( b );\n\tconst history = context.document.history;\n\n\tcontext.forceNotSticky = history.isUndoneDelta( originalDelta ) || history.isUndoingDelta( originalDelta );\n}\n\n// Sets `context.forceWeakRemove` basing on `context.document` history for transformation by `b` delta.\n//\n// When additional context is not used, default `MoveOperation` x `RemoveOperation` transformation\n// always treats `RemoveOperation` as a stronger one, no matter how `context.isStrong` is set. It is like this\n// to provide better results when transformations happen.\n//\n// This, however, works fine only when additional context is not used.\n//\n// When additional context is used, we need a better way to decide whether `RemoveOperation` is \"dominating\" (or in other\n// words, whether nodes removed by given operation should stay in graveyard if other operation wants to move them).\n//\n// The answer to this is easy: if `RemoveOperation` has been already undone, we are not forcing given nodes to stay\n// in graveyard. In such scenario, we set `context.forceWeakRemove` to `true`. However, if the `RemoveOperation` has\n// not been undone, we set `context.forceWeakRemove` to `false` because we want the operation to be \"dominating\".\nfunction _setForceWeakRemove( b, context ) {\n\tconst history = context.document.history;\n\tconst originalB = context.originalDelta.get( b );\n\n\t// If `b` delta has not been undone yet, forceWeakRemove should be `false`.\n\t// It should be `true`, in any other case, if additional context is used.\n\tcontext.forceWeakRemove = history.isUndoneDelta( originalB );\n}\n\n// Sets `context.wasAffected` which holds context information about how transformed deltas are related. `context.wasAffected`\n// is used by `_setInsertBeforeContext` helper function.\nfunction _setWasAffected( a, b, context ) {\n\tif ( !context.wasAffected.get( a ) ) {\n\t\t// Create a new map with relations for `a` delta.\n\t\tcontext.wasAffected.set( a, new Map() );\n\t}\n\n\tconst originalDelta = context.originalDelta.get( b );\n\tlet wasAffected = !!context.wasAffected.get( a ).get( originalDelta );\n\n\t// Cross-check all operations from both deltas...\n\tfor ( const opA of a.operations ) {\n\t\tfor ( const opB of b.operations ) {\n\t\t\tif ( opA instanceof MoveOperation && opB instanceof MoveOperation ) {\n\t\t\t\tif ( _isOperationAffected( opA, opB ) ) {\n\t\t\t\t\t// If any of them are move operations that affect each other, set the relation accordingly.\n\t\t\t\t\twasAffected = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Break both loops if affecting pair has been found.\n\t\tif ( wasAffected ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tcontext.wasAffected.get( a ).set( originalDelta, wasAffected );\n}\n\n// Checks whether `opA` is affected by `opB`. It is assumed that both operations are `MoveOperation`.\n// Operation is affected only if the other operation's source range is before that operation's source range.\nfunction _isOperationAffected( opA, opB ) {\n\tconst target = opA.targetPosition;\n\tconst source = opB.sourcePosition;\n\n\tconst cmpResult = compareArrays( source.getParentPath(), target.getParentPath() );\n\n\tif ( target.root != source.root ) {\n\t\treturn false;\n\t}\n\n\treturn cmpResult == 'same' && source.offset < target.offset;\n}\n\n// Updates `context` object after delta by delta transformation is done.\n//\n// This means two things:\n// 1. Some information are removed from context (those that apply only to the transformation that just happened).\n// 2. `context.wasAffected` is updated because `oldDelta` has been transformed to one or many `newDeltas` and we\n// need to update entries in `context.wasAffected`. Basically, anything that was in `context.wasAffected` under\n// `oldDelta` key should be rewritten to `newDeltas`. This way in next transformation steps, `newDeltas` \"remember\"\n// the context of `oldDelta`.\nfunction _updateContext( oldDelta, newDeltas, context ) {\n\tdelete context.insertBefore;\n\tdelete context.forceNotSticky;\n\tdelete context.forceWeakRemove;\n\n\tconst wasAffected = context.wasAffected.get( oldDelta );\n\n\tcontext.wasAffected.delete( oldDelta );\n\n\tfor ( const delta of newDeltas ) {\n\t\tcontext.wasAffected.set( delta, new Map( wasAffected ) );\n\t}\n}\n\n// Takes base delta class (`DeltaClass`) and a set of `operations` that are transformation results and creates\n// one or more deltas, acknowledging that the result is a transformation of a delta that is of `DeltaClass`.\n//\n// The normalization ensures that each delta has it's \"normal\" state, that is, for example, `MoveDelta` has\n// just one `MoveOperation`, `SplitDelta` has just two operations of which first is `InsertOperation` and second\n// is `MoveOperation` or `NoOperation`, etc.\nfunction getNormalizedDeltas( DeltaClass, operations ) {\n\tlet deltas = [];\n\tlet delta = null;\n\tlet attributeOperationIndex;\n\n\tswitch ( DeltaClass ) {\n\t\tcase MoveDelta:\n\t\tcase RemoveDelta:\n\t\t\t// Normal MoveDelta has just one MoveOperation.\n\t\t\t// Take all operations and create MoveDelta for each of them.\n\t\t\tfor ( const o of operations ) {\n\t\t\t\tif ( o instanceof NoOperation ) {\n\t\t\t\t\t// An operation may be instance of NoOperation and this may be correct.\n\t\t\t\t\t// If that's the case, do not create a MoveDelta with singular NoOperation.\n\t\t\t\t\t// Create \"no delta\" instead, that is Delta instance with NoOperation.\n\t\t\t\t\tdelta = new Delta();\n\t\t\t\t} else {\n\t\t\t\t\tif ( o instanceof RemoveOperation ) {\n\t\t\t\t\t\tdelta = new RemoveDelta();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelta = new MoveDelta();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdelta.addOperation( o );\n\t\t\t\tdeltas.push( delta );\n\t\t\t}\n\n\t\t\t// Return all created MoveDeltas.\n\t\t\treturn deltas;\n\t\tcase SplitDelta:\n\t\tcase WrapDelta:\n\t\t\t// Normal SplitDelta and WrapDelta have two operations: first is InsertOperation and second is MoveOperation.\n\t\t\t// The MoveOperation may be split into multiple MoveOperations.\n\t\t\t// If that's the case, convert additional MoveOperations into MoveDeltas.\n\t\t\t// First, create normal SplitDelta or WrapDelta, using first two operations.\n\t\t\tdelta = new DeltaClass();\n\t\t\tdelta.addOperation( operations[ 0 ] );\n\t\t\tdelta.addOperation( operations[ 1 ] );\n\t\t\t// Then, take all but last two operations and use them to create normalized MoveDeltas.\n\t\t\tdeltas = getNormalizedDeltas( MoveDelta, operations.slice( 2 ) );\n\n\t\t\t// Return all deltas as one array, in proper order.\n\t\t\treturn [ delta ].concat( deltas );\n\t\tcase MergeDelta:\n\t\tcase UnwrapDelta:\n\t\t\t// Normal MergeDelta and UnwrapDelta have two operations: first is MoveOperation and second is RemoveOperation.\n\t\t\t// The MoveOperation may be split into multiple MoveOperations.\n\t\t\t// If that's the case, convert additional MoveOperations into MoveDeltas.\n\t\t\t// Take all but last two operations and use them to create normalized MoveDeltas.\n\t\t\tdeltas = getNormalizedDeltas( MoveDelta, operations.slice( 0, -2 ) );\n\t\t\t// Then, create normal MergeDelta or UnwrapDelta, using last two operations.\n\t\t\tdelta = new DeltaClass();\n\t\t\tdelta.addOperation( operations[ operations.length - 2 ] );\n\t\t\tdelta.addOperation( operations[ operations.length - 1 ] );\n\n\t\t\t// Return all deltas as one array, in proper order.\n\t\t\treturn deltas.concat( delta );\n\t\tcase RenameDelta:\n\t\t\t// RenameDelta may become a \"no delta\" if it's only operation is transformed to NoOperation.\n\t\t\t// This may happen when RenameOperation is transformed by RenameOperation.\n\t\t\t// Keep in mind that RenameDelta always have just one operation.\n\t\t\tif ( operations[ 0 ] instanceof NoOperation ) {\n\t\t\t\tdelta = new Delta();\n\t\t\t} else {\n\t\t\t\tdelta = new RenameDelta();\n\t\t\t}\n\n\t\t\tdelta.addOperation( operations[ 0 ] );\n\n\t\t\treturn [ delta ];\n\t\tcase AttributeDelta:\n\t\t\t// AttributeDelta is allowed to have multiple AttributeOperations and also NoOperations but\n\t\t\t// the first operation has to be an AttributeOperation as it is used as a reference for deltas properties.\n\t\t\t// Keep in mind that we cannot simply remove NoOperations cause that would mess up base versions.\n\t\t\t// Find an index of first operation that is not a NoOperation.\n\t\t\tfor ( attributeOperationIndex = 0; attributeOperationIndex < operations.length; attributeOperationIndex++ ) {\n\t\t\t\tif ( !( operations[ attributeOperationIndex ] instanceof NoOperation ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// No AttributeOperations has been found. Convert AttributeDelta to \"no delta\".\n\t\t\tif ( attributeOperationIndex == operations.length ) {\n\t\t\t\tdelta = new Delta();\n\t\t\t}\n\t\t\t// AttributeOperation found.\n\t\t\telse {\n\t\t\t\tdelta = new AttributeDelta();\n\n\t\t\t\t// AttributeOperation wasn't the first operation.\n\t\t\t\tif ( attributeOperationIndex != 0 ) {\n\t\t\t\t\t// Move AttributeOperation to the beginning.\n\t\t\t\t\toperations.unshift( operations.splice( attributeOperationIndex, 1 )[ 0 ] );\n\t\t\t\t\t// No need to update base versions - they are updated at the end of transformation algorithm anyway.\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add all operations to the delta (even if it is just a couple of NoOperations we have to keep them all).\n\t\t\tfor ( const o of operations ) {\n\t\t\t\tdelta.addOperation( o );\n\t\t\t}\n\n\t\t\treturn [ delta ];\n\t\tdefault:\n\t\t\t// For all other deltas no normalization is needed.\n\t\t\tdelta = new DeltaClass();\n\n\t\t\tfor ( const o of operations ) {\n\t\t\t\tdelta.addOperation( o );\n\t\t\t}\n\n\t\t\treturn [ delta ];\n\t}\n}\n\n/**\n * Object containing values and flags describing context of a transformation.\n *\n * @typedef {Object} module:engine/model/delta/transform~transformationContext\n * @property {Boolean} useAdditionalContext Whether additional context should be evaluated and used during transformations.\n * @property {Boolean} isStrong Whether transformed deltas are more (`true`) or less (`false`) important than deltas to transform by.\n * @property {module:engine/model/document~Document} [document] Model document which is a context for transformations.\n * Available only if `useAdditionalContext` is `true`.\n * @property {Boolean|undefined} forceWeakRemove Whether {@link module:engine/model/operation/removeoperation~RemoveOperation}\n * should be always more important than other operations. Available only if `useAdditionalContext` is `true`.\n * @property {Boolean|undefined} insertBefore Used when transforming {@link module:engine/model/operation/moveoperation~MoveOperation}s\n * If two `MoveOperation`s target to the same position, `insertBefore` is used to resolve such conflict. This flag\n * is set and used internally by transformation algorithms. Available only if `useAdditionalContext` is `true`.\n * @property {Boolean|undefined} forceNotSticky Used when transforming\n * {@link module:engine/model/operation/moveoperation~MoveOperation#isSticky sticky MoveOperation}. If set to `true`,\n * `isSticky` flag is discarded during transformations. This flag is set and used internally by transformation algorithms.\n * Available only if `useAdditionalContext` is `true`.\n * @property {Map|undefined} wasAffected Used to evaluate `insertBefore` flag. This map is set and used internally by\n * transformation algorithms. Available only if `useAdditionalContext` is `true`.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/markerdelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\n\n/**\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#setMarker Batch#setMarker}\n * and {@link module:engine/model/writer~Writer#removeMarker Batch#removeMarker} methods use the `MarkerDelta` class which inherits\n * from the `Delta` class and may overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class MarkerDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'marker';\n\t}\n\n\t/**\n\t * A class that will be used when creating reversed delta.\n\t *\n\t * @private\n\t * @type {Function}\n\t */\n\tget _reverseDeltaClass() {\n\t\treturn MarkerDelta;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.MarkerDelta';\n\t}\n}\n\nDeltaFactory.register( MarkerDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/basic-transformations\n */\n\nimport deltaTransform from './transform';\nconst addTransformationCase = deltaTransform.addTransformationCase;\nconst defaultTransform = deltaTransform.defaultTransform;\n\nimport Range from '../range';\nimport Position from '../position';\n\nimport NoOperation from '../operation/nooperation';\nimport AttributeOperation from '../operation/attributeoperation';\nimport InsertOperation from '../operation/insertoperation';\nimport ReinsertOperation from '../operation/reinsertoperation';\n\nimport Delta from './delta';\nimport AttributeDelta from './attributedelta';\nimport InsertDelta from './insertdelta';\nimport MarkerDelta from './markerdelta';\nimport MergeDelta from './mergedelta';\nimport MoveDelta from './movedelta';\nimport SplitDelta from './splitdelta';\nimport WeakInsertDelta from './weakinsertdelta';\nimport WrapDelta from './wrapdelta';\nimport UnwrapDelta from './unwrapdelta';\nimport RenameDelta from './renamedelta';\nimport RemoveDelta from './removedelta';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n// Provide transformations for default deltas.\n\n// Add special case for AttributeDelta x WeakInsertDelta transformation.\naddTransformationCase( AttributeDelta, WeakInsertDelta, ( a, b, context ) => {\n\t// If nodes are weak-inserted into attribute delta range, we need to apply changes from attribute delta on them.\n\t// So first we do the normal transformation and if this special cases happens, we will add an extra delta.\n\tconst deltas = defaultTransform( a, b, context );\n\n\tif ( a.range.containsPosition( b.position ) ) {\n\t\tdeltas.push( _getComplementaryAttrDelta( b, a ) );\n\t}\n\n\treturn deltas;\n} );\n\n// Add special case for AttributeDelta x SplitDelta transformation.\naddTransformationCase( AttributeDelta, SplitDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\n\tif ( !b.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\tconst undoMode = context.undoMode;\n\tconst splitPosition = new Position( b.position.root, b.position.path.slice( 0, -1 ) );\n\n\tconst deltas = defaultTransform( a, b, context );\n\n\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\n\tif ( undoMode || !( b._cloneOperation instanceof InsertOperation ) ) {\n\t\treturn deltas;\n\t}\n\n\tfor ( const operation of a.operations ) {\n\t\t// If a node that has been split has it's attribute updated, we should also update attribute of\n\t\t// the node created during splitting.\n\t\tif ( operation.range.containsPosition( splitPosition ) || operation.range.start.isEqual( splitPosition ) ) {\n\t\t\tconst additionalAttributeDelta = new AttributeDelta();\n\n\t\t\tconst rangeStart = splitPosition.getShiftedBy( 1 );\n\t\t\tconst rangeEnd = Position.createFromPosition( rangeStart );\n\t\t\trangeEnd.path.push( 0 );\n\n\t\t\tconst oldValue = b._cloneOperation.nodes.getNode( 0 ).getAttribute( operation.key );\n\n\t\t\tadditionalAttributeDelta.addOperation( new AttributeOperation(\n\t\t\t\tnew Range( rangeStart, rangeEnd ),\n\t\t\t\toperation.key,\n\t\t\t\toldValue === undefined ? null : oldValue,\n\t\t\t\toperation.newValue,\n\t\t\t\t0\n\t\t\t) );\n\n\t\t\tdeltas.push( additionalAttributeDelta );\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn deltas;\n} );\n\n// Add special case for InsertDelta x MergeDelta transformation.\naddTransformationCase( InsertDelta, MergeDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `MergeDelta` has `NoOperation` as the second operation.\n\tif ( !b.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\tconst undoMode = context.undoMode;\n\n\t// If insert is applied at the same position where merge happened, we reverse the merge (we treat it like it\n\t// didn't happen) and then apply the original insert operation. This is \"mirrored\" in MergeDelta x InsertDelta\n\t// transformation below, where we simply do not apply MergeDelta.\n\tif ( !undoMode && a.position.isEqual( b.position ) ) {\n\t\treturn [\n\t\t\tb.getReversed(),\n\t\t\ta.clone()\n\t\t];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\nfunction transformMarkerDelta( a, b ) {\n\tconst transformedDelta = a.clone();\n\tconst transformedOp = transformedDelta.operations[ 0 ];\n\n\tif ( transformedOp.oldRange ) {\n\t\ttransformedOp.oldRange = transformedOp.oldRange.getTransformedByDelta( b )[ 0 ];\n\t}\n\n\tif ( transformedOp.newRange ) {\n\t\ttransformedOp.newRange = transformedOp.newRange.getTransformedByDelta( b )[ 0 ];\n\t}\n\n\treturn [ transformedDelta ];\n}\n\naddTransformationCase( MarkerDelta, SplitDelta, transformMarkerDelta );\naddTransformationCase( MarkerDelta, MergeDelta, transformMarkerDelta );\naddTransformationCase( MarkerDelta, WrapDelta, transformMarkerDelta );\naddTransformationCase( MarkerDelta, UnwrapDelta, transformMarkerDelta );\naddTransformationCase( MarkerDelta, MoveDelta, transformMarkerDelta );\naddTransformationCase( MarkerDelta, RenameDelta, transformMarkerDelta );\n\n// Add special case for MoveDelta x MergeDelta transformation.\naddTransformationCase( MoveDelta, MergeDelta, ( a, b, context ) => {\n\tconst undoMode = context.undoMode;\n\n\t// Do not apply special transformation case in undo mode or if `MergeDelta` has `NoOperation` as the second operation.\n\tif ( undoMode || !b.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// If move delta is supposed to move a node that has been merged, we reverse the merge (we treat it like it\n\t// didn't happen) and then apply the original move operation. This is \"mirrored\" in MergeDelta x MoveDelta\n\t// transformation below, where we simply do not apply MergeDelta.\n\tconst operateInSameParent =\n\t\ta.sourcePosition.root == b.position.root &&\n\t\tcompareArrays( a.sourcePosition.getParentPath(), b.position.getParentPath() ) === 'same';\n\n\tconst mergeInsideMoveRange = a.sourcePosition.offset <= b.position.offset && a.sourcePosition.offset + a.howMany > b.position.offset;\n\n\tif ( operateInSameParent && mergeInsideMoveRange ) {\n\t\treturn [\n\t\t\tb.getReversed(),\n\t\t\ta.clone()\n\t\t];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Add special case for MergeDelta x InsertDelta transformation.\naddTransformationCase( MergeDelta, InsertDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `MergeDelta` has `NoOperation` as the second operation.\n\tif ( !a.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\tconst undoMode = context.undoMode;\n\n\t// If merge is applied at the same position where we inserted a range of nodes we cancel the merge as it's results\n\t// may be unexpected and very weird. Even if we do some \"magic\" we don't know what really are users' expectations.\n\tif ( !undoMode && a.position.isEqual( b.position ) ) {\n\t\treturn [ noDelta() ];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Add special case for MergeDelta x MoveDelta transformation.\naddTransformationCase( MergeDelta, MoveDelta, ( a, b, context ) => {\n\tconst undoMode = context.undoMode;\n\n\t// Do not apply special transformation case in undo mode or if `MergeDelta` has `NoOperation` as the second operation.\n\tif ( undoMode || !a.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// If merge is applied at the position between moved nodes we cancel the merge as it's results may be unexpected and\n\t// very weird. Even if we do some \"magic\" we don't know what really are users' expectations.\n\tconst operateInSameParent =\n\t\ta.position.root == b.sourcePosition.root &&\n\t\tcompareArrays( a.position.getParentPath(), b.sourcePosition.getParentPath() ) === 'same';\n\n\tconst mergeInsideMoveRange = b.sourcePosition.offset <= a.position.offset && b.sourcePosition.offset + b.howMany > a.position.offset;\n\n\tif ( operateInSameParent && mergeInsideMoveRange ) {\n\t\treturn [ noDelta() ];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\naddTransformationCase( SplitDelta, SplitDelta, ( a, b, context ) => {\n\tconst undoMode = context.undoMode;\n\n\t// Do not apply special transformation case if transformation is in undo mode.\n\tif ( undoMode ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\n\tif ( !a.position || !b.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\tconst pathA = a.position.getParentPath();\n\tconst pathB = b.position.getParentPath();\n\n\t// The special case is for splits inside the same parent.\n\tif ( a.position.root == b.position.root && compareArrays( pathA, pathB ) == 'same' ) {\n\t\ta = a.clone();\n\n\t\tif ( a.position.offset < b.position.offset || ( a.position.offset == b.position.offset && context.isStrong ) ) {\n\t\t\t// If both first operations are `ReinsertOperation`s, we might need to transform `a._cloneOperation`,\n\t\t\t// so it will take correct node from graveyard.\n\t\t\tif (\n\t\t\t\ta._cloneOperation instanceof ReinsertOperation && b._cloneOperation instanceof ReinsertOperation &&\n\t\t\t\ta._cloneOperation.sourcePosition.offset > b._cloneOperation.sourcePosition.offset\n\t\t\t) {\n\t\t\t\ta._cloneOperation.sourcePosition.offset--;\n\t\t\t}\n\n\t\t\t// `a` splits closer or at same offset.\n\t\t\t// Change how many nodes are moved. Do not move nodes that were moved by delta `b`.\n\t\t\tconst aRange = Range.createFromPositionAndShift( a.position, a._moveOperation.howMany );\n\t\t\tconst bRange = Range.createFromPositionAndShift( b.position, b._moveOperation.howMany );\n\n\t\t\tconst diff = aRange.getDifference( bRange );\n\n\t\t\tlet newHowMany = 0;\n\n\t\t\tfor ( const range of diff ) {\n\t\t\t\tnewHowMany += range.end.offset - range.start.offset;\n\t\t\t}\n\n\t\t\tif ( newHowMany === 0 ) {\n\t\t\t\ta.operations.pop(); // Remove last operation (`MoveOperation`).\n\t\t\t\ta.addOperation( new NoOperation( a.operations[ 0 ].baseVersion + 1 ) ); // Add `NoOperation` instead.\n\t\t\t} else {\n\t\t\t\ta.operations[ 1 ].howMany = newHowMany;\n\t\t\t}\n\n\t\t\treturn [ a ];\n\t\t} else {\n\t\t\t// `a` splits further.\n\t\t\t// This is more complicated case, thankfully we can solve it using default transformation and setting proper context.\n\t\t\tconst newContext = Object.assign( {}, context );\n\t\t\tnewContext.isStrong = true;\n\t\t\tnewContext.insertBefore = true;\n\n\t\t\treturn defaultTransform( a, b, newContext );\n\t\t}\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Add special case for SplitDelta x UnwrapDelta transformation.\naddTransformationCase( SplitDelta, UnwrapDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\n\tif ( !a.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// If incoming split delta tries to split a node that just got unwrapped, there is actually nothing to split,\n\t// so we discard that delta.\n\tif ( a.position.root == b.position.root && compareArrays( b.position.path, a.position.getParentPath() ) === 'same' ) {\n\t\treturn [ noDelta() ];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Add special case for SplitDelta x WrapDelta transformation.\naddTransformationCase( SplitDelta, WrapDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\n\tif ( !a.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// If split is applied at the position between wrapped nodes, we cancel the split as it's results may be unexpected and\n\t// very weird. Even if we do some \"magic\" we don't know what really are users' expectations.\n\n\tconst sameRoot = a.position.root == b.range.start.root;\n\tconst operateInSameParent = sameRoot && compareArrays( a.position.getParentPath(), b.range.start.getParentPath() ) === 'same';\n\tconst splitInsideWrapRange = b.range.start.offset < a.position.offset && b.range.end.offset >= a.position.offset;\n\n\tif ( operateInSameParent && splitInsideWrapRange ) {\n\t\treturn [ noDelta() ];\n\t} else if ( sameRoot && compareArrays( a.position.getParentPath(), b.range.end.getShiftedBy( -1 ).path ) === 'same' ) {\n\t\t// Split position is directly inside the last node from wrap range.\n\t\t// If that's the case, we manually change split delta so it will \"target\" inside the wrapping element.\n\t\t// By doing so we will be inserting split node right to the original node which feels natural and is a good UX.\n\t\tconst delta = a.clone();\n\n\t\t// 1. Fix insert operation position.\n\t\t// Node to split is the last children of the wrapping element.\n\t\t// Wrapping element is the element inserted by WrapDelta (re)insert operation.\n\t\t// It is inserted after the wrapped range, but the wrapped range will be moved inside it.\n\t\t// Having this in mind, it is correct to use wrapped range start position as the position before wrapping element.\n\t\tconst splitNodePos = Position.createFromPosition( b.range.start );\n\t\t// Now, `splitNodePos` points before wrapping element.\n\t\t// To get a position before last children of that element, we expand position's `path` member by proper offset.\n\t\tsplitNodePos.path.push( b.howMany - 1 );\n\n\t\t// SplitDelta insert operation position should be right after the node we split.\n\t\tconst insertPos = splitNodePos.getShiftedBy( 1 );\n\t\tdelta._cloneOperation.position = insertPos;\n\n\t\t// 2. Fix move operation source position.\n\t\t// Nodes moved by SplitDelta will be moved from new position, modified by WrapDelta.\n\t\t// To obtain that new position, `splitNodePos` will be used, as this is the node we are extracting children from.\n\t\tconst sourcePos = Position.createFromPosition( splitNodePos );\n\t\t// Nothing changed inside split node so it is correct to use the original split position offset.\n\t\tsourcePos.path.push( a.position.offset );\n\t\tdelta._moveOperation.sourcePosition = sourcePos;\n\n\t\t// 3. Fix move operation target position.\n\t\t// SplitDelta move operation target position should be inside the node inserted by operation above.\n\t\t// Since the node is empty, we will insert at offset 0.\n\t\tconst targetPos = Position.createFromPosition( insertPos );\n\t\ttargetPos.path.push( 0 );\n\t\tdelta._moveOperation.targetPosition = targetPos;\n\n\t\treturn [ delta ];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Add special case for SplitDelta x WrapDelta transformation.\naddTransformationCase( SplitDelta, AttributeDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\n\tif ( !a.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\ta = a.clone();\n\n\tconst undoMode = context.undoMode;\n\tconst splitPosition = new Position( a.position.root, a.position.path.slice( 0, -1 ) );\n\n\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\n\tif ( undoMode || !( a._cloneOperation instanceof InsertOperation ) ) {\n\t\treturn [ a ];\n\t}\n\n\t// If element to split had it's attribute changed, we have to reflect this change in an element\n\t// that is in SplitDelta's InsertOperation.\n\tfor ( const operation of b.operations ) {\n\t\tif ( operation.range.containsPosition( splitPosition ) || operation.range.start.isEqual( splitPosition ) ) {\n\t\t\tif ( operation.newValue !== null ) {\n\t\t\t\ta._cloneOperation.nodes.getNode( 0 ).setAttribute( operation.key, operation.newValue );\n\t\t\t} else {\n\t\t\t\ta._cloneOperation.nodes.getNode( 0 ).removeAttribute( operation.key );\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\n// Add special case for UnwrapDelta x SplitDelta transformation.\naddTransformationCase( UnwrapDelta, SplitDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\n\tif ( !b.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// If incoming unwrap delta tries to unwrap node that got split we should unwrap the original node and the split copy.\n\t// This can be achieved either by reverting split and applying unwrap to singular node, or creating additional unwrap delta.\n\tif ( a.position.root == b.position.root && compareArrays( a.position.path, b.position.getParentPath() ) === 'same' ) {\n\t\treturn [\n\t\t\tb.getReversed(),\n\t\t\ta.clone()\n\t\t];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Add special case for WeakInsertDelta x AttributeDelta transformation.\naddTransformationCase( WeakInsertDelta, AttributeDelta, ( a, b ) => {\n\t// If nodes are weak-inserted into attribute delta range, we need to apply changes from attribute delta on them.\n\tconst deltas = [ a.clone() ];\n\n\tif ( b.range.containsPosition( a.position ) ) {\n\t\tdeltas.push( _getComplementaryAttrDelta( a, b ) );\n\t}\n\n\treturn deltas;\n} );\n\n// Add special case for WrapDelta x SplitDelta transformation.\naddTransformationCase( WrapDelta, SplitDelta, ( a, b, context ) => {\n\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\n\tif ( !b.position ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// If incoming wrap delta tries to wrap range that contains split position, we have to cancel the split and apply\n\t// the wrap. Since split was already applied, we have to revert it.\n\tconst sameRoot = a.range.start.root == b.position.root;\n\tconst operateInSameParent = sameRoot && compareArrays( a.range.start.getParentPath(), b.position.getParentPath() ) === 'same';\n\tconst splitInsideWrapRange = a.range.start.offset < b.position.offset && a.range.end.offset >= b.position.offset;\n\n\tif ( operateInSameParent && splitInsideWrapRange ) {\n\t\treturn [\n\t\t\tb.getReversed(),\n\t\t\ta.clone()\n\t\t];\n\t} else if ( sameRoot && compareArrays( b.position.getParentPath(), a.range.end.getShiftedBy( -1 ).path ) === 'same' ) {\n\t\tconst delta = a.clone();\n\n\t\t// Move wrapping element insert position one node further so it is after the split node insertion.\n\t\tdelta._insertOperation.position.offset++;\n\n\t\t// Include the split node copy.\n\t\tdelta._moveOperation.howMany++;\n\n\t\t// Change the path to wrapping element in move operation.\n\t\tdelta._moveOperation.targetPosition.path[ delta._moveOperation.targetPosition.path.length - 2 ]++;\n\n\t\treturn [ delta ];\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Add special case for RenameDelta x SplitDelta transformation.\naddTransformationCase( RenameDelta, SplitDelta, ( a, b, context ) => {\n\tconst undoMode = context.undoMode;\n\tconst deltas = defaultTransform( a, b, context );\n\n\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\n\tif ( undoMode || !( b._cloneOperation instanceof InsertOperation ) ) {\n\t\treturn deltas;\n\t}\n\n\tconst insertPosition = b._cloneOperation.position.getShiftedBy( -1 );\n\n\tif ( insertPosition && a.operations[ 0 ].position.isEqual( insertPosition ) ) {\n\t\t// If a node that has been split has it's name changed, we should also change name of\n\t\t// the node created during splitting.\n\t\tconst additionalRenameDelta = a.clone();\n\t\tadditionalRenameDelta.operations[ 0 ].position = insertPosition.getShiftedBy( 1 );\n\n\t\tdeltas.push( additionalRenameDelta );\n\t}\n\n\treturn deltas;\n} );\n\n// Add special case for SplitDelta x RenameDelta transformation.\naddTransformationCase( SplitDelta, RenameDelta, ( a, b, context ) => {\n\ta = a.clone();\n\n\tconst undoMode = context.undoMode;\n\n\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\n\tif ( undoMode || !( a._cloneOperation instanceof InsertOperation ) ) {\n\t\treturn [ a ];\n\t}\n\n\tconst insertPosition = a._cloneOperation.position.getShiftedBy( -1 );\n\n\t// If element to split had it's name changed, we have to reflect this by creating additional rename operation.\n\tif ( insertPosition && !undoMode && b.operations[ 0 ].position.isEqual( insertPosition ) ) {\n\t\tconst additionalRenameDelta = b.clone();\n\t\tadditionalRenameDelta.operations[ 0 ].position = insertPosition.getShiftedBy( 1 );\n\t\tadditionalRenameDelta.operations[ 0 ].oldName = a._cloneOperation.nodes.getNode( 0 ).name;\n\n\t\treturn [ a, additionalRenameDelta ];\n\t}\n\n\treturn [ a ];\n} );\n\n// Add special case for RemoveDelta x SplitDelta transformation.\naddTransformationCase( RemoveDelta, SplitDelta, ( a, b, context ) => {\n\tconst deltas = defaultTransform( a, b, context );\n\t// The \"clone operation\" may be InsertOperation, ReinsertOperation, MoveOperation or NoOperation.\n\tconst insertPosition = b._cloneOperation.position || b._cloneOperation.targetPosition;\n\n\t// NoOperation.\n\tif ( !insertPosition ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\tconst undoMode = context.undoMode;\n\n\t// Special case applies only if undo is not a context.\n\tif ( undoMode ) {\n\t\treturn deltas;\n\t}\n\n\t// In case if `defaultTransform` returned more than one delta.\n\tfor ( const delta of deltas ) {\n\t\t// \"No delta\" may be returned in some cases.\n\t\tif ( delta instanceof RemoveDelta ) {\n\t\t\tconst operation = delta._moveOperation;\n\t\t\tconst rangeEnd = operation.sourcePosition.getShiftedBy( operation.howMany );\n\n\t\t\tif ( rangeEnd.isEqual( insertPosition ) ) {\n\t\t\t\toperation.howMany += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deltas;\n} );\n\n// Add special case for SplitDelta x RemoveDelta transformation.\naddTransformationCase( SplitDelta, RemoveDelta, ( a, b, context ) => {\n\tconst undoMode = context.undoMode;\n\n\t// Special case applies only if undo is not a context.\n\tif ( undoMode ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\t// This case is very trickily solved.\n\t// Instead of fixing `a` delta, we change `b` delta for a while and fire default transformation with fixed `b` delta.\n\t// Thanks to that fixing `a` delta will be differently (correctly) transformed.\n\t//\n\t// The \"clone operation\" may be InsertOperation, ReinsertOperation, MoveOperation or NoOperation.\n\tconst insertPosition = a._cloneOperation.position || a._cloneOperation.targetPosition;\n\n\t// NoOperation.\n\tif ( !insertPosition ) {\n\t\treturn defaultTransform( a, b, context );\n\t}\n\n\tb = b.clone();\n\tconst operation = b._moveOperation;\n\tconst rangeEnd = operation.sourcePosition.getShiftedBy( operation.howMany );\n\n\tif ( rangeEnd.isEqual( insertPosition ) ) {\n\t\toperation.howMany += 1;\n\t}\n\n\treturn defaultTransform( a, b, context );\n} );\n\n// Helper function for `AttributeDelta` class transformations.\n// Creates an attribute delta that sets attribute from given `attributeDelta` on nodes from given `weakInsertDelta`.\nfunction _getComplementaryAttrDelta( weakInsertDelta, attributeDelta ) {\n\tconst complementaryAttrDelta = new AttributeDelta();\n\tconst nodes = weakInsertDelta.nodes;\n\n\t// At the beginning we store the attribute value from the first node on `weakInsertDelta` node list.\n\tlet val = nodes.getNode( 0 ).getAttribute( attributeDelta.key );\n\n\t// This stores the last index of `weakInsertDelta` node list where the attribute value was different\n\t// than in the previous node. We need it to create separate `AttributeOperation`s for nodes with different attributes.\n\tlet lastOffset = 0;\n\t// Sum of offsets of already processed nodes.\n\tlet offsetSum = nodes.getNode( 0 ).offsetSize;\n\n\tfor ( let i = 1; i < nodes.length; i++ ) {\n\t\tconst node = nodes.getNode( i );\n\t\tconst nodeAttrVal = node.getAttribute( attributeDelta.key );\n\n\t\t// If previous node has different attribute value, we will create an operation to the point before current node.\n\t\t// So all nodes with the same attributes up to this point will be included in one `AttributeOperation`.\n\t\tif ( nodeAttrVal != val ) {\n\t\t\t// New operation is created only when it is needed. If given node already has proper value for this\n\t\t\t// attribute we simply skip it without adding a new operation.\n\t\t\tif ( val != attributeDelta.value ) {\n\t\t\t\taddOperation();\n\t\t\t}\n\n\t\t\tval = nodeAttrVal;\n\t\t\tlastOffset = offsetSum;\n\t\t}\n\n\t\toffsetSum = offsetSum + node.offsetSize;\n\t}\n\n\t// At the end we have to add additional `AttributeOperation` for the last part of node list. If all nodes on the\n\t// node list had same attributes, this will be the only operation added to the delta.\n\taddOperation();\n\n\treturn complementaryAttrDelta;\n\n\tfunction addOperation() {\n\t\tconst range = new Range(\n\t\t\tweakInsertDelta.position.getShiftedBy( lastOffset ),\n\t\t\tweakInsertDelta.position.getShiftedBy( offsetSum )\n\t\t);\n\n\t\tconst attrOperation = new AttributeOperation( range, attributeDelta.key, val, attributeDelta.value, 0 );\n\t\tcomplementaryAttrDelta.addOperation( attrOperation );\n\t}\n}\n\n// This is \"no-op\" delta, it has no type and only no-operation, it basically does nothing.\n// It is used when we don't want to apply changes but still we need to return a delta.\nfunction noDelta() {\n\tconst noDelta = new Delta();\n\n\t// BaseVersion will be fixed later anyway.\n\tnoDelta.addOperation( new NoOperation( 0 ) );\n\n\treturn noDelta;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/delta/delta~Delta deltas}). All deltas grouped in a single batch\n * can be reverted together, so you can think about a batch as of a single undo step. If you want to extend a given undo step, you\n * can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n\t/**\n\t * Creates a batch instance.\n\t *\n\t * @see module:engine/model/model~Model#enqueueChange\n\t * @see module:engine/model/model~Model#change\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t */\n\tconstructor( type = 'default' ) {\n\t\t/**\n\t\t * An array of deltas that compose this batch.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:engine/model/delta/delta~Delta>}\n\t\t */\n\t\tthis.deltas = [];\n\n\t\t/**\n\t\t * The type of the batch.\n\t\t *\n\t\t * It can be one of the following values:\n\t\t * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n\t\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n\t\t * changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {'transparent'|'default'}\n\t\t */\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * Returns the base version of this batch, which is equal to the base version of the first delta (which has the base version set)\n\t * in the batch. If there are no deltas in the batch or neither delta has the base version set, it returns `null`.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tfor ( const delta of this.deltas ) {\n\t\t\tif ( delta.baseVersion !== null ) {\n\t\t\t\treturn delta.baseVersion;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds a delta to the batch instance. All modification methods (insert, remove, split, etc.) use this method\n\t * to add created deltas.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} delta A delta to add.\n\t * @return {module:engine/model/delta/delta~Delta} An added delta.\n\t */\n\taddDelta( delta ) {\n\t\tdelta.batch = this;\n\t\tthis.deltas.push( delta );\n\n\t\treturn delta;\n\t}\n\n\t/**\n\t * Gets an iterable collection of operations.\n\t *\n\t * @returns {Iterable.<module:engine/model/operation/operation~Operation>}\n\t */\n\t* getOperations() {\n\t\tfor ( const delta of this.deltas ) {\n\t\t\tyield* delta.operations;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/delta/rootattributedelta\n */\n\nimport Delta from './delta';\nimport DeltaFactory from './deltafactory';\n\n/**\n * To provide specific OT behavior and better collisions solving, methods to change attributes\n * ({@link module:engine/model/writer~Writer#setAttribute} and {@link module:engine/model/writer~Writer#removeAttribute})\n * use `RootAttributeDelta` class which inherits from the `Delta` class and may\n * overwrite some methods.\n *\n * @extends module:engine/model/delta/delta~Delta\n */\nexport default class RootAttributeDelta extends Delta {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.delta.RootAttributeDelta';\n\t}\n}\n\nDeltaFactory.register( RootAttributeDelta );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class DetachOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t */\n\tconstructor( sourcePosition, howMany ) {\n\t\tsuper( null );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to detach.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #sourcePosition\n\t\t */\n\t\tthis.sourcePosition = Position.createFromPosition( sourcePosition );\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} #howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'detach';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.sourcePosition.root.document ) {\n\t\t\t/**\n\t\t\t * Cannot detach document node.\n\t\t\t * Use {@link module:engine/model/operation/removeoperation~RemoveOperation remove operation} instead.\n\t\t\t *\n\t\t\t * @error detach-operation-on-document-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'detach-operation-on-document-node: Cannot detach document node.' );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_remove( Range.createFromPositionAndShift( this.sourcePosition, this.howMany ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'engine.model.operation.DetachOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/rootelement\n */\n\nimport Element from './element';\n\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n\t/**\n\t * Creates root element.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n\t * @param {String} name Node name.\n\t * @param {String} [rootName='main'] Unique root name used to identify this root\n\t * element by {@link module:engine/model/document~Document}.\n\t */\n\tconstructor( doc, name, rootName = 'main' ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Document that is an owner of this root.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis._doc = doc;\n\n\t\t/**\n\t\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = rootName;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this root element.\n\t *\n\t * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this._doc;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Converts `RootElement` instance to `String` containing it's name.\n\t *\n\t * @returns {String} `RootElement` instance converted to `String`.\n\t */\n\ttoJSON() {\n\t\treturn this.rootName;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/writer\n */\n\nimport AttributeDelta from './delta/attributedelta';\nimport InsertDelta from './delta/insertdelta';\nimport MarkerDelta from './delta/markerdelta';\nimport MergeDelta from './delta/mergedelta';\nimport MoveDelta from './delta/movedelta';\nimport RemoveDelta from './delta/removedelta';\nimport RenameDelta from './delta/renamedelta';\nimport RootAttributeDelta from './delta/rootattributedelta';\nimport SplitDelta from './delta/splitdelta';\nimport UnwrapDelta from './delta/unwrapdelta';\nimport WeakInsertDelta from './delta/weakinsertdelta';\nimport WrapDelta from './delta/wrapdelta';\n\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MoveOperation from './operation/moveoperation';\nimport RemoveOperation from './operation/removeoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\n\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport Element from './element';\nimport RootElement from './rootelement';\nimport Position from './position';\nimport Range from './range.js';\nimport DocumentSelection from './documentselection';\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\n/**\n * Model writer it the proper way of modifying model. It should be used whenever you wants to create node, modify\n * child nodes, attributes or text. To get writer use {@link module:engine/model/model~Model#change} or\n * {@link module:engine/model/model~Model#enqueueChange}.\n *\n *\t\tmodel.change( writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * Note that writer can be passed to a nested function but you should never store and use it outside the `change` or\n * `enqueueChange` block.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n\t/**\n\t * Writer class constructor.\n\t *\n\t * It is not recommended to use it directly, use {@link module:engine/model/model~Model#change} or\n\t * {@link module:engine/model/model~Model#enqueueChange} instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/model~Model} model\n\t * @param {module:engine/model/batch~Batch} batch\n\t */\n\tconstructor( model, batch ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/model/batch~Batch}\n\t\t */\n\t\tthis.batch = batch;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\t\twriter.createText( 'foo', { 'bold': true } );\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @returns {module:engine/model/text~Text} Created text node.\n\t */\n\tcreateText( data, attributes ) {\n\t\treturn new Text( data, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/element~Element element}.\n\t *\n\t *\t\twriter.createElement( 'paragraph' );\n\t *\t\twriter.createElement( 'paragraph', { 'alignment': 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/model/element~Element} Created element.\n\t */\n\tcreateElement( name, attributes ) {\n\t\treturn new Element( name, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\n\t */\n\tcreateDocumentFragment() {\n\t\treturn new DocumentFragment();\n\t}\n\n\t/**\n\t * Inserts item on given position.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, position );\n\t *\n\t * Instead of using position you can use parent and offset:\n\t *\n\t * \t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 5 );\n\t *\n\t * You can also use `end` instead of the offset to insert at the end:\n\t *\n\t * \t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 'end' );\n\t *\n\t * Or insert before or after another element:\n\t *\n\t * \t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, anotherParagraph, 'after' );\n\t *\n\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move move}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\n\t * fragment to insert.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsert( item, itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst position = Position.createAt( itemOrPosition, offset );\n\n\t\t// For text that has no parent we need to make a WeakInsert.\n\t\tconst delta = item instanceof Text && !item.parent ? new WeakInsertDelta() : new InsertDelta();\n\n\t\t// If item has a parent already.\n\t\tif ( item.parent ) {\n\t\t\t// We need to check if item is going to be inserted within the same document.\n\t\t\tif ( isSameTree( item.root, position.root ) ) {\n\t\t\t\t// If it's we just need to move it.\n\t\t\t\tthis.move( Range.createOn( item ), position );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If it isn't the same root.\n\t\t\telse {\n\t\t\t\t// We need to remove this item from old position first.\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\t\t}\n\n\t\tconst version = position.root.document ? position.root.document.version : null;\n\n\t\tconst insert = new InsertOperation( position, item, version );\n\n\t\tthis.batch.addDelta( delta );\n\t\tdelta.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\t// When element is a DocumentFragment we need to move its markers to Document#markers.\n\t\tif ( item instanceof DocumentFragment ) {\n\t\t\tfor ( const [ markerName, markerRange ] of item.markers ) {\n\t\t\t\t// We need to migrate marker range from DocumentFragment to Document.\n\t\t\t\tconst rangeRootPosition = Position.createAt( markerRange.root );\n\t\t\t\tconst range = new Range(\n\t\t\t\t\tmarkerRange.start._getCombined( rangeRootPosition, position ),\n\t\t\t\t\tmarkerRange.end._getCombined( rangeRootPosition, position )\n\t\t\t\t);\n\n\t\t\t\tthis.setMarker( markerName, range, { usingOperation: true } );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts text on given position. You can optionally set text attributes:\n\t *\n\t *\t\twriter.insertText( 'foo', position );\n\t *\t\twriter.insertText( 'foo', { 'bold': true }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t * \t\twriter.insertText( 'foo', paragraph, 5 ); // inserts in paragraph, at offset 5\n\t *\t\twriter.insertText( 'foo', paragraph, 'end' ); // inserts at the end of the paragraph\n\t *\t\twriter.insertText( 'foo', image, 'after' ); // inserts after image\n\t *\n\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertText( text, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createText( text ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts element on given position. You can optionally set attributes:\n\t *\n\t *\t\twriter.insertElement( 'paragraph', position );\n\t *\t\twriter.insertElement( 'paragraph', { 'alignment': 'center' }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t * \t\twriter.insertElement( 'paragraph', paragraph, 5 ); // inserts in paragraph, at offset 5\n\t *\t\twriter.insertElement( 'paragraph', blockquote, 'end' ); // insets at the end of the blockquote\n\t *\t\twriter.insertElement( 'paragraph', image, 'after' ); // inserts after image\n\t *\n\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertElement( name, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts item at the end of the given parent.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.append( paragraph, root );\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move move}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\n\t * item Item or document fragment to insert.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappend( item, parent ) {\n\t\tthis.insert( item, parent, 'end' );\n\t}\n\n\t/**\n\t * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\n\t *\n\t *\t\twriter.appendText( 'foo', paragraph );\n\t *\t\twriter.appendText( 'foo', { 'bold': true }, paragraph );\n\t *\n\t * @param {String} text Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendText( text, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createText( text ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Creates element and inserts it at the end of the parent. You can optionally set attributes:\n\t *\n\t *\t\twriter.appendElement( 'paragraph', root );\n\t *\t\twriter.appendElement( 'paragraph', { 'alignment': 'center' }, root );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendElement( name, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {*} value Attribute new value.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attribute will be set.\n\t */\n\tsetAttribute( key, value, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tsetAttributeOnRange( this, key, value, itemOrRange );\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, value, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t *\t\twriter.setAttributes( {\n\t *\t\t\t'bold': true,\n\t *\t\t\t'italic': true\n\t *\t\t}, range );\n\t *\n\t * @param {Object} attributes Attributes keys and values.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attributes will be set.\n\t */\n\tsetAttributes( attributes, itemOrRange ) {\n\t\tfor ( const [ key, val ] of toMap( attributes ) ) {\n\t\t\tthis.setAttribute( key, val, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n\t * or from a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which the attribute will be removed.\n\t */\n\tremoveAttribute( key, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tsetAttributeOnRange( this, key, null, itemOrRange );\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, null, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from all elements in the range or from the given item.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which all attributes will be removed.\n\t */\n\tclearAttributes( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst removeAttributesFromItem = item => {\n\t\t\tfor ( const attribute of item.getAttributeKeys() ) {\n\t\t\t\tthis.removeAttribute( attribute, item );\n\t\t\t}\n\t\t};\n\n\t\tif ( !( itemOrRange instanceof Range ) ) {\n\t\t\tremoveAttributesFromItem( itemOrRange );\n\t\t} else {\n\t\t\tfor ( const item of itemOrRange.getItems() ) {\n\t\t\t\tremoveAttributesFromItem( item );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves all items in the source range to the target position.\n\t *\n\t *\t\twriter.move( sourceRange, targetPosition );\n\t *\n\t * Instead of the target position you can use parent and offset or define that range should be moved to the end\n\t * or before or after chosen item:\n\t *\n\t * \t\twriter.move( sourceRange, paragraph, 5 ); // moves all items in the range to the paragraph at offset 5\n\t *\t\twriter.move( sourceRange, blockquote, 'end' ); // moves all items in the range at the end of the blockquote\n\t *\t\twriter.move( sourceRange, image, 'after' ); // moves all items in the range after the image\n\t *\n\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\n\t *\n\t * Note that items can be moved only within the same tree. It means that you can move items within the same root\n\t * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n\t * but you can not move items from document fragment to the document or from one detached element to another. Use\n\t * {@link module:engine/model/writer~Writer#insert} in such cases.\n\t *\n\t * @param {module:engine/model/range~Range} range Source range.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tmove( range, itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Invalid range to move.\n\t\t\t *\n\t\t\t * @error writer-move-invalid-range\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-invalid-range: Invalid range to move.' );\n\t\t}\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to move is not flat.\n\t\t\t *\n\t\t\t * @error writer-move-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-range-not-flat: Range to move is not flat.' );\n\t\t}\n\n\t\tconst position = Position.createAt( itemOrPosition, offset );\n\n\t\tif ( !isSameTree( range.root, position.root ) ) {\n\t\t\t/**\n\t\t\t * Range is going to be moved within not the same document. Please use\n\t\t\t * {@link module:engine/model/writer~Writer#insert insert} instead.\n\t\t\t *\n\t\t\t * @error writer-move-different-document\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-different-document: Range is going to be moved between different documents.' );\n\t\t}\n\n\t\tconst delta = new MoveDelta();\n\t\tthis.batch.addDelta( delta );\n\n\t\tconst version = range.root.document ? range.root.document.version : null;\n\n\t\tconst operation = new MoveOperation( range.start, range.end.offset - range.start.offset, position, version );\n\t\tdelta.addOperation( operation );\n\t\tthis.model.applyOperation( operation );\n\t}\n\n\t/**\n\t * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\n\t */\n\tremove( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst addRemoveDelta = ( position, howMany ) => {\n\t\t\tconst delta = new RemoveDelta();\n\t\t\tthis.batch.addDelta( delta );\n\n\t\t\tapplyRemoveOperation( position, howMany, delta, this.model );\n\t\t};\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\t// The array is reversed, so the ranges to remove are in correct order and do not have to be updated.\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges().reverse();\n\n\t\t\tfor ( const flat of ranges ) {\n\t\t\t\taddRemoveDelta( flat.start, flat.end.offset - flat.start.offset );\n\t\t\t}\n\t\t} else {\n\t\t\tconst howMany = itemOrRange.is( 'text' ) ? itemOrRange.offsetSize : 1;\n\n\t\t\taddRemoveDelta( Position.createBefore( itemOrRange ), howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Merges two siblings at the given position.\n\t *\n\t * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n\t * `writer-merge-no-element-after` error will be thrown.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of merge.\n\t */\n\tmerge( position ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst delta = new MergeDelta();\n\t\tthis.batch.addDelta( delta );\n\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node before merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-before\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-before: Node before merge position must be an element.' );\n\t\t}\n\n\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node after merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-after\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-after: Node after merge position must be an element.' );\n\t\t}\n\n\t\tconst positionAfter = Position.createFromParentAndOffset( nodeAfter, 0 );\n\t\tconst positionBefore = Position.createFromParentAndOffset( nodeBefore, nodeBefore.maxOffset );\n\n\t\tconst moveVersion = position.root.document ? position.root.document.version : null;\n\n\t\tconst move = new MoveOperation(\n\t\t\tpositionAfter,\n\t\t\tnodeAfter.maxOffset,\n\t\t\tpositionBefore,\n\t\t\tmoveVersion\n\t\t);\n\n\t\tmove.isSticky = true;\n\t\tdelta.addOperation( move );\n\t\tthis.model.applyOperation( move );\n\n\t\tapplyRemoveOperation( position, 1, delta, this.model );\n\t}\n\n\t/**\n\t * Renames given element.\n\t *\n\t * @param {module:engine/model/element~Element} element The element to rename.\n\t * @param {String} newName New element name.\n\t */\n\trename( element, newName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Trying to rename an object which is not an instance of Element.\n\t\t\t *\n\t\t\t * @error writer-rename-not-element-instance\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.'\n\t\t\t);\n\t\t}\n\n\t\tconst delta = new RenameDelta();\n\t\tthis.batch.addDelta( delta );\n\n\t\tconst version = element.root.document ? element.root.document.version : null;\n\n\t\tconst renameOperation = new RenameOperation( Position.createBefore( element ), element.name, newName, version );\n\t\tdelta.addOperation( renameOperation );\n\t\tthis.model.applyOperation( renameOperation );\n\t}\n\n\t/**\n\t * Splits elements start from the given position and goes to the top of the model tree as long as given\n\t * `limitElement` won't be reached. When limitElement is not defined then only a parent of given position will be split.\n\t *\n\t * The element needs to have a parent. It cannot be a root element nor document fragment.\n\t * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of split.\n\t * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\n\t * @returns {Object} result Split result.\n\t * @returns {module:engine/model/position~Position} result.position between split elements.\n\t * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ands\n\t * at the beginning of the first copy element.\n\t */\n\tsplit( position, limitElement ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tlet splitElement = position.parent;\n\n\t\tif ( !splitElement.parent ) {\n\t\t\t/**\n\t\t\t * Element with no parent can not be split.\n\t\t\t *\n\t\t\t * @error writer-split-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-split-element-no-parent: Element with no parent can not be split.' );\n\t\t}\n\n\t\t// When limit element is not defined lets set splitElement parent as limit.\n\t\tif ( !limitElement ) {\n\t\t\tlimitElement = splitElement.parent;\n\t\t}\n\n\t\tif ( !position.parent.getAncestors( { includeSelf: true } ).includes( limitElement ) ) {\n\t\t\tthrow new CKEditorError( 'writer-split-invalid-limit-element: Limit element is not a position ancestor.' );\n\t\t}\n\n\t\t// We need to cache elements that will be created as a result of the first split because\n\t\t// we need to create a range from the end of the first split element to the beginning of the\n\t\t// first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n\t\tlet firstSplitElement, firstCopyElement;\n\n\t\tdo {\n\t\t\tconst delta = new SplitDelta();\n\t\t\tthis.batch.addDelta( delta );\n\n\t\t\tconst copy = new Element( splitElement.name, splitElement.getAttributes() );\n\t\t\tconst insertVersion = splitElement.root.document ? splitElement.root.document.version : null;\n\n\t\t\tconst insert = new InsertOperation(\n\t\t\t\tPosition.createAfter( splitElement ),\n\t\t\t\tcopy,\n\t\t\t\tinsertVersion\n\t\t\t);\n\n\t\t\tdelta.addOperation( insert );\n\t\t\tthis.model.applyOperation( insert );\n\n\t\t\tconst moveVersion = insertVersion !== null ? insertVersion + 1 : null;\n\n\t\t\tconst move = new MoveOperation(\n\t\t\t\tposition,\n\t\t\t\tsplitElement.maxOffset - position.offset,\n\t\t\t\tPosition.createFromParentAndOffset( copy, 0 ),\n\t\t\t\tmoveVersion\n\t\t\t);\n\t\t\tmove.isSticky = true;\n\n\t\t\tdelta.addOperation( move );\n\t\t\tthis.model.applyOperation( move );\n\n\t\t\t// Cache result of the first split.\n\t\t\tif ( !firstSplitElement && !firstCopyElement ) {\n\t\t\t\tfirstSplitElement = splitElement;\n\t\t\t\tfirstCopyElement = copy;\n\t\t\t}\n\n\t\t\tposition = Position.createBefore( copy );\n\t\t\tsplitElement = position.parent;\n\t\t} while ( splitElement !== limitElement );\n\n\t\treturn {\n\t\t\tposition,\n\t\t\trange: new Range( Position.createAt( firstSplitElement, 'end' ), Position.createAt( firstCopyElement ) )\n\t\t};\n\t}\n\n\t/**\n\t * Wraps given range with given element or with a new element with specified name, if string has been passed.\n\t *\n\t * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat}). If not, error will be thrown.\n\t *\n\t * @param {module:engine/model/range~Range} range Range to wrap.\n\t * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\n\t */\n\twrap( range, elementOrString ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to wrap is not flat.\n\t\t\t *\n\t\t\t * @error writer-wrap-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-range-not-flat: Range to wrap is not flat.' );\n\t\t}\n\n\t\tconst element = elementOrString instanceof Element ? elementOrString : new Element( elementOrString );\n\n\t\tif ( element.childCount > 0 ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is not empty.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-not-empty: Element to wrap with is not empty.' );\n\t\t}\n\n\t\tif ( element.parent !== null ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is already attached to a tree model.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-attached\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-attached: Element to wrap with is already attached to tree model.' );\n\t\t}\n\n\t\tconst delta = new WrapDelta();\n\t\tthis.batch.addDelta( delta );\n\n\t\tconst insertVersion = range.root.document ? range.root.document.version : null;\n\n\t\tconst insert = new InsertOperation( range.end, element, insertVersion );\n\t\tdelta.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\tconst moveVersion = insertVersion !== null ? insertVersion + 1 : null;\n\n\t\tconst targetPosition = Position.createFromParentAndOffset( element, 0 );\n\t\tconst move = new MoveOperation(\n\t\t\trange.start,\n\t\t\trange.end.offset - range.start.offset,\n\t\t\ttargetPosition,\n\t\t\tmoveVersion\n\t\t);\n\t\tdelta.addOperation( move );\n\t\tthis.model.applyOperation( move );\n\t}\n\n\t/**\n\t * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n\t * Throws error if you try to unwrap an element which does not have a parent.\n\t *\n\t * @param {module:engine/model/element~Element} element Element to unwrap.\n\t */\n\tunwrap( element ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( element.parent === null ) {\n\t\t\t/**\n\t\t\t * Trying to unwrap an element which has no parent.\n\t\t\t *\n\t\t\t * @error writer-unwrap-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.' );\n\t\t}\n\n\t\tconst delta = new UnwrapDelta();\n\t\tthis.batch.addDelta( delta );\n\n\t\tconst sourcePosition = Position.createFromParentAndOffset( element, 0 );\n\t\tconst moveVersion = sourcePosition.root.document ? sourcePosition.root.document.version : null;\n\n\t\tconst move = new MoveOperation(\n\t\t\tsourcePosition,\n\t\t\telement.maxOffset,\n\t\t\tPosition.createBefore( element ),\n\t\t\tmoveVersion\n\t\t);\n\n\t\tmove.isSticky = true;\n\t\tdelta.addOperation( move );\n\t\tthis.model.applyOperation( move );\n\n\t\tapplyRemoveOperation( Position.createBefore( element ), 1, delta, this.model );\n\t}\n\n\t/**\n\t * Adds or updates a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n\t * marker's range directly using this method.\n\t *\n\t * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n\t * name is created and returned.\n\t *\n\t * The `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n\t * This is useful when a marker have been created earlier and then later, it needs to be added to the document history.\n\t *\n\t * Create/update marker directly base on marker's name:\n\t *\n\t * \t\tsetMarker( markerName, range );\n\t *\n\t * Update marker using operation:\n\t *\n\t * \t\tsetMarker( marker, range, { usingOperation: true } );\n\t * \t\tsetMarker( markerName, range, { usingOperation: true } );\n\t *\n\t * Create marker with a unique id using operation:\n\t *\n\t * \t\tsetMarker( range, { usingOperation: true } );\n\t *\n\t * Create marker directly without using operations:\n\t *\n\t * \t\tsetMarker( range )\n\t *\n\t * Change marker's option (start using operations to manage it):\n\t *\n\t * \t\tsetMarker( marker, { usingOperation: true } );\n\t *\n\t * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {module:engine/model/markercollection~Marker|String} [markerOrName]\n\t * Name of a marker to create or update, or `Marker` instance to update, or range for the marker with a unique name.\n\t * @param {module:engine/model/range~Range} [range] Marker range.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.usingOperation=false] Flag indicated whether the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @returns {module:engine/model/markercollection~Marker} Marker that was set.\n\t */\n\tsetMarker( markerOrNameOrRange, rangeOrOptions, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tlet markerName, newRange, usingOperation;\n\n\t\tif ( markerOrNameOrRange instanceof Range ) {\n\t\t\tmarkerName = uid();\n\t\t\tnewRange = markerOrNameOrRange;\n\t\t\tusingOperation = !!rangeOrOptions && !!rangeOrOptions.usingOperation;\n\t\t} else {\n\t\t\tmarkerName = typeof markerOrNameOrRange === 'string' ? markerOrNameOrRange : markerOrNameOrRange.name;\n\n\t\t\tif ( rangeOrOptions instanceof Range ) {\n\t\t\t\tnewRange = rangeOrOptions;\n\t\t\t\tusingOperation = !!options && !!options.usingOperation;\n\t\t\t} else {\n\t\t\t\tnewRange = null;\n\t\t\t\tusingOperation = !!rangeOrOptions && !!rangeOrOptions.usingOperation;\n\t\t\t}\n\t\t}\n\n\t\tconst currentMarker = this.model.markers.get( markerName );\n\n\t\tif ( !usingOperation ) {\n\t\t\tif ( !newRange ) {\n\t\t\t\t/**\n\t\t\t \t * Range parameter is required when adding a new marker.\n\t\t\t\t *\n\t\t\t\t * @error writer-setMarker-no-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'writer-setMarker-no-range: Range parameter is required when adding a new marker.' );\n\t\t\t}\n\n\t\t\t// If marker changes to marker that do not use operations then we need to create additional operation\n\t\t\t// that removes that marker first.\n\t\t\tif ( currentMarker && currentMarker.managedUsingOperations && !usingOperation ) {\n\t\t\t\tapplyMarkerOperation( this, markerName, currentMarker.getRange(), null );\n\t\t\t}\n\n\t\t\treturn this.model.markers._set( markerName, newRange, usingOperation );\n\t\t}\n\n\t\tif ( !newRange && !currentMarker ) {\n\t\t\tthrow new CKEditorError( 'writer-setMarker-no-range: Range parameter is required when adding a new marker.' );\n\t\t}\n\n\t\tconst currentRange = currentMarker ? currentMarker.getRange() : null;\n\n\t\tif ( !newRange ) {\n\t\t\t// If `newRange` is not given, treat this as synchronizing existing marker.\n\t\t\t// Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n\t\t\tapplyMarkerOperation( this, markerName, null, currentRange );\n\t\t} else {\n\t\t\t// Just change marker range.\n\t\t\tapplyMarkerOperation( this, markerName, currentRange, newRange );\n\t\t}\n\n\t\treturn this.model.markers.get( markerName );\n\t}\n\n\t/**\n\t * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n\t * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n\t * it will be destroyed using operation.\n\t *\n\t * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\n\t */\n\tremoveMarker( markerOrName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\n\t\tif ( !this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove marker which does not exist.\n\t\t\t *\n\t\t\t * @error writer-removeMarker-no-marker\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-removeMarker-no-marker: Trying to remove marker which does not exist.' );\n\t\t}\n\n\t\tconst marker = this.model.markers.get( name );\n\n\t\tif ( !marker.managedUsingOperations ) {\n\t\t\tthis.model.markers._remove( name );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldRange = marker.getRange();\n\n\t\tapplyMarkerOperation( this, name, oldRange, null );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/element~Element element}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\n\t *\n\t *\t\t// Sets ranges from the given range.\n\t *\t\tconst range = new Range( start, end );\n\t *\t\twriter.setSelection( range, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the iterable of ranges.\n\t * \t\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\n\t *\t\twriter.setSelection( range, isBackwardSelection );\n\t *\n\t *\t\t// Sets ranges from the other selection.\n\t *\t\tconst otherSelection = new Selection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets ranges from the given document selection's ranges.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\twriter.setSelection( documentSelection );\n\t *\n\t * \t\t// Sets collapsed range at the given position.\n\t *\t\tconst position = new Position( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed range at the given offset in element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/element~Element|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Boolean|Number|'before'|'end'|'after'} [backwardSelectionOrOffset]\n\t */\n\tsetSelection( selectable, backwardSelectionOrOffset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setTo( selectable, backwardSelectionOrOffset );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/model/position~Position.createAt} parameters.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * Using key and value pair:\n\t *\n\t * \twriter.setSelectionAttribute( 'italic', true );\n\t *\n\t * Using key-value object:\n\t *\n\t * \twriter.setSelectionAttribute( { italic: true, bold: false } );\n\t *\n\t * Using iterable object:\n\t *\n\t * \twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\n\t *\n\t * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\n\t * or object / iterable of key - value attribute pairs.\n\t * @param {*} [value] Attribute value.\n\t */\n\tsetSelectionAttribute( keyOrObjectOrIterable, value ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrObjectOrIterable === 'string' ) {\n\t\t\tthis._setSelectionAttribute( keyOrObjectOrIterable, value );\n\t\t} else {\n\t\t\tfor ( const [ key, value ] of toMap( keyOrObjectOrIterable ) ) {\n\t\t\t\tthis._setSelectionAttribute( key, value );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute(s) with given key(s) from the selection.\n\t *\n\t * Using key\n\t *\n\t * \twriter.removeSelectionAttribute( 'italic' );\n\t *\n\t * Using iterable of keys\n\t *\n\t * \twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\n\t *\n\t * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n\t */\n\tremoveSelectionAttribute( keyOrIterableOfKeys ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrIterableOfKeys === 'string' ) {\n\t\t\tthis._removeSelectionAttribute( keyOrIterableOfKeys );\n\t\t} else {\n\t\t\tfor ( const key of keyOrIterableOfKeys ) {\n\t\t\t\tthis._removeSelectionAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n\t * of the selection from left to right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n\t * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * For the following model fragment:\n\t *\n\t *\t\t<$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n\t *\n\t * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n\t * * Overridden gravity: selection will have `bold` attribute.\n\t *\n\t * By default the selection's gravity is automatically restored just after a direct selection change (when user\n\t * moved the caret) but you can pass `customRestore = true` in which case you will have to call\n\t * {@link ~Writer#restoreSelectionGravity} manually.\n\t *\n\t * When the selection's gravity is overridden more than once without being restored in the meantime then it needs\n\t * to be restored the same number of times. This is to prevent conflicts when\n\t * more than one feature want to independently override and restore the selection's gravity.\n\t *\n\t * @param {Boolean} [customRestore=false] When `true` then gravity won't be restored until\n\t * {@link ~Writer#restoreSelectionGravity} will be called directly. When `false` then gravity is restored\n\t * after selection is moved by user.\n\t */\n\toverrideSelectionGravity( customRestore ) {\n\t\tthis.model.document.selection._overrideGravity( customRestore );\n\t}\n\n\t/**\n\t * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t */\n\trestoreSelectionGravity() {\n\t\tthis.model.document.selection._restoreGravity();\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t * @param {*} value Attribute value.\n\t */\n\t_setSelectionAttribute( key, value ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Store attribute in parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.setAttribute( storeKey, value, selection.anchor.parent );\n\t\t}\n\n\t\tselection._setAttribute( key, value );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeSelectionAttribute( key ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Remove stored attribute from parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.removeAttribute( storeKey, selection.anchor.parent );\n\t\t}\n\n\t\tselection._removeAttribute( key );\n\t}\n\n\t/**\n\t * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n\t *\n\t * @private\n\t */\n\t_assertWriterUsedCorrectly() {\n\t\t/**\n\t\t * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()` or\n\t\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n\t\t *\n\t\t * The writer can only be used inside these blocks which ensures that the model\n\t\t * can only be changed during such \"sessions\".\n\t\t *\n\t\t * @error writer-incorrect-use\n\t\t */\n\t\tif ( this.model._currentWriter !== this ) {\n\t\t\tthrow new CKEditorError( 'writer-incorrect-use: Trying to use a writer outside the change() block.' );\n\t\t}\n\t}\n}\n\n// Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n//\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\n// the range into smaller parts.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\nfunction setAttributeOnRange( writer, key, value, range ) {\n\tconst delta = new AttributeDelta();\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\t// Position of the last split, the beginning of the new range.\n\tlet lastSplitPosition = range.start;\n\n\t// Currently position in the scanning range. Because we need value after the position, it is not a current\n\t// position of the iterator but the previous one (we need to iterate one more time to get the value after).\n\tlet position;\n\n\t// Value before the currently position.\n\tlet valueBefore;\n\n\t// Value after the currently position.\n\tlet valueAfter;\n\n\tfor ( const val of range ) {\n\t\tvalueAfter = val.item.getAttribute( key );\n\n\t\t// At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n\t\t// because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n\t\tif ( position && valueBefore != valueAfter ) {\n\t\t\t// if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n\t\t\tif ( valueBefore != value ) {\n\t\t\t\taddOperation();\n\t\t\t}\n\n\t\t\tlastSplitPosition = position;\n\t\t}\n\n\t\tposition = val.nextPosition;\n\t\tvalueBefore = valueAfter;\n\t}\n\n\t// Because position in the loop is not the iterator position (see let position comment), the last position in\n\t// the while loop will be last but one position in the range. We need to check the last position manually.\n\tif ( position instanceof Position && position != lastSplitPosition && valueBefore != value ) {\n\t\taddOperation();\n\t}\n\n\tfunction addOperation() {\n\t\t// Add delta to the batch only if there is at least operation in the delta. Add delta only once.\n\t\tif ( delta.operations.length === 0 ) {\n\t\t\twriter.batch.addDelta( delta );\n\t\t}\n\n\t\tconst range = new Range( lastSplitPosition, position );\n\t\tconst version = range.root.document ? doc.version : null;\n\t\tconst operation = new AttributeOperation( range, key, valueBefore, value, version );\n\n\t\tdelta.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\nfunction setAttributeOnItem( writer, key, value, item ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\tconst previousValue = item.getAttribute( key );\n\tlet range, operation;\n\n\tif ( previousValue != value ) {\n\t\tconst isRootChanged = item.root === item;\n\n\t\tconst delta = isRootChanged ? new RootAttributeDelta() : new AttributeDelta();\n\t\twriter.batch.addDelta( delta );\n\n\t\tif ( isRootChanged ) {\n\t\t\t// If we change attributes of root element, we have to use `RootAttributeOperation`.\n\t\t\tconst version = item.document ? doc.version : null;\n\n\t\t\toperation = new RootAttributeOperation( item, key, previousValue, value, version );\n\t\t} else {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\t// If we change the attribute of the element, we do not want to change attributes of its children, so\n\t\t\t\t// the end of the range cannot be after the closing tag, it should be inside that element, before any of\n\t\t\t\t// it's children, so the range will contain only the opening tag.\n\t\t\t\trange = new Range( Position.createBefore( item ), Position.createFromParentAndOffset( item, 0 ) );\n\t\t\t} else {\n\t\t\t\t// If `item` is text proxy, we create a range from the beginning to the end of that text proxy, to change\n\t\t\t\t// all characters represented by it.\n\t\t\t\trange = new Range( Position.createBefore( item ), Position.createAfter( item ) );\n\t\t\t}\n\n\t\t\tconst version = range.root.document ? doc.version : null;\n\n\t\t\toperation = new AttributeOperation( range, key, previousValue, value, version );\n\t\t}\n\n\t\tdelta.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Creates and applies marker operation to {@link module:engine/model/delta/delta~Delta delta}.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} name Marker name.\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\nfunction applyMarkerOperation( writer, name, oldRange, newRange ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\tconst delta = new MarkerDelta();\n\n\tconst operation = new MarkerOperation( name, oldRange, newRange, model.markers, doc.version );\n\n\twriter.batch.addDelta( delta );\n\tdelta.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Creates `RemoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n// The operation will be applied on given model instance and added to given delta instance.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\n// @param {Number} howMany Number of nodes to remove.\n// @param {module:engine/model/delta~Delta} delta Delta to add new operation to.\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\nfunction applyRemoveOperation( position, howMany, delta, model ) {\n\tlet operation;\n\n\tif ( position.root.document ) {\n\t\tconst doc = model.document;\n\t\tconst graveyardPosition = new Position( doc.graveyard, [ 0 ] );\n\n\t\toperation = new RemoveOperation( position, howMany, graveyardPosition, doc.version );\n\t} else {\n\t\toperation = new DetachOperation( position, howMany );\n\t}\n\n\tdelta.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Returns `true` if both root elements are the same element or both are documents root elements.\n//\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\n// unexpected `move` operation.\nfunction isSameTree( rootA, rootB ) {\n\t// If it is the same root this is the same tree.\n\tif ( rootA === rootB ) {\n\t\treturn true;\n\t}\n\n\t// If both roots are documents root it is operation within the document what we still treat as the same tree.\n\tif ( rootA instanceof RootElement && rootB instanceof RootElement ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/differ\n */\n\nimport Position from './position';\nimport Range from './range';\n\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nexport default class Differ {\n\tconstructor() {\n\t\t/**\n\t\t * A map that stores changes that happened in a given element.\n\t\t *\n\t\t * The keys of the map are references to the model elements.\n\t\t * The values of the map are arrays with changes that were done on this element.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changesInElement = new Map();\n\n\t\t/**\n\t\t * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n\t\t * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n\t\t * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._elementSnapshots = new Map();\n\n\t\t/**\n\t\t * A map that stores all changed markers.\n\t\t *\n\t\t * The keys of the map are marker names.\n\t\t * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\n\t\t * state before and after the change.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changedMarkers = new Map();\n\n\t\t/**\n\t\t * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n\t\t * when changes are sorted.\n\t\t *\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._changeCount = 0;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n\t\t * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores those changes that did not take place in graveyard root.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChanges = null;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n\t\t * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChangesWithGraveyard = null;\n\t}\n\n\t/**\n\t * Informs whether there are any changes buffered in `Differ`.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._changesInElement.size == 0 && this._changedMarkers.size == 0;\n\t}\n\n\t/**\n\t * Buffers a given operation. An operation has to be buffered before it is executed.\n\t *\n\t * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\n\t * in the state before the operation is executed.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\n\t */\n\tbufferOperation( operation ) {\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, operation.nodes.maxOffset );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'addAttribute':\n\t\t\tcase 'removeAttribute':\n\t\t\tcase 'changeAttribute': {\n\t\t\t\tfor ( const item of operation.range.getItems() ) {\n\t\t\t\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._markAttribute( item );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'remove':\n\t\t\tcase 'move':\n\t\t\tcase 'reinsert': {\n\t\t\t\tconst sourceParentInserted = this._isInInsertedElement( operation.sourcePosition.parent );\n\t\t\t\tconst targetParentInserted = this._isInInsertedElement( operation.targetPosition.parent );\n\n\t\t\t\tif ( !sourceParentInserted ) {\n\t\t\t\t\tthis._markRemove( operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tif ( !targetParentInserted ) {\n\t\t\t\t\tthis._markInsert( operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'rename': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markRemove( operation.position.parent, operation.position.offset, 1 );\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, 1 );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers marker change.\n\t *\n\t * @param {String} markerName The name of the marker that changed.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\n\t * been created.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\n\t */\n\tbufferMarkerChange( markerName, oldRange, newRange ) {\n\t\tconst buffered = this._changedMarkers.get( markerName );\n\n\t\tif ( !buffered ) {\n\t\t\tthis._changedMarkers.set( markerName, {\n\t\t\t\toldRange,\n\t\t\t\tnewRange\n\t\t\t} );\n\t\t} else {\n\t\t\tbuffered.newRange = newRange;\n\n\t\t\tif ( buffered.oldRange == null && buffered.newRange == null ) {\n\t\t\t\t// The marker is going to be removed (`newRange == null`) but it did not exist before the change set\n\t\t\t\t// (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\n\t\t\t\tthis._changedMarkers.delete( markerName );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all markers that should be removed as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToRemove() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.oldRange != null ) {\n\t\t\t\tresult.push( { name, range: change.oldRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which should be added as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToAdd() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.newRange != null ) {\n\t\t\t\tresult.push( { name, range: change.newRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n\t * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n\t *\n\t * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\n\t * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\n\t * another one, it will be on an earlier index in the diff set.\n\t *\n\t * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n\t * previous {@link #getChanges} call, the next call will return the cached value.\n\t *\n\t * @param {Object} options Additional options.\n\t * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\n\t * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n\t * @returns {Array.<Object>} Diff between the old and the new model tree state.\n\t */\n\tgetChanges( options = { includeChangesInGraveyard: false } ) {\n\t\t// If there are cached changes, just return them instead of calculating changes again.\n\t\tif ( this._cachedChanges ) {\n\t\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\t\treturn this._cachedChangesWithGraveyard.slice();\n\t\t\t} else {\n\t\t\t\treturn this._cachedChanges.slice();\n\t\t\t}\n\t\t}\n\n\t\t// Will contain returned results.\n\t\tconst diffSet = [];\n\n\t\t// Check all changed elements.\n\t\tfor ( const element of this._changesInElement.keys() ) {\n\t\t\t// Get changes for this element and sort them.\n\t\t\tconst changes = this._changesInElement.get( element ).sort( ( a, b ) => {\n\t\t\t\tif ( a.offset === b.offset ) {\n\t\t\t\t\tif ( a.type != b.type ) {\n\t\t\t\t\t\t// If there are multiple changes at the same position, \"remove\" change should be first.\n\t\t\t\t\t\t// If the order is different, for example, we would first add some nodes and then removed them\n\t\t\t\t\t\t// (instead of the nodes that we should remove).\n\t\t\t\t\t\treturn a.type == 'remove' ? -1 : 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn a.offset < b.offset ? -1 : 1;\n\t\t\t} );\n\n\t\t\t// Get children of this element before any change was applied on it.\n\t\t\tconst snapshotChildren = this._elementSnapshots.get( element );\n\t\t\t// Get snapshot of current element's children.\n\t\t\tconst elementChildren = _getChildrenSnapshot( element.getChildren() );\n\n\t\t\t// Generate actions basing on changes done on element.\n\t\t\tconst actions = _generateActionsFromChanges( snapshotChildren.length, changes );\n\n\t\t\tlet i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n\t\t\tlet j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n\n\t\t\t// Process every action.\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'i' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getInsertDiff( element, i, elementChildren[ i ].name ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t} else if ( action === 'r' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getRemoveDiff( element, i, snapshotChildren[ j ].name ) );\n\n\t\t\t\t\tj++;\n\t\t\t\t} else if ( action === 'a' ) {\n\t\t\t\t\t// Take attributes from saved and current children.\n\t\t\t\t\tconst elementAttributes = elementChildren[ i ].attributes;\n\t\t\t\t\tconst snapshotAttributes = snapshotChildren[ j ].attributes;\n\t\t\t\t\tlet range;\n\n\t\t\t\t\tif ( elementChildren[ i ].name == '$text' ) {\n\t\t\t\t\t\trange = Range.createFromParentsAndOffsets( element, i, element, i + 1 );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index = element.offsetToIndex( i );\n\t\t\t\t\t\trange = Range.createFromParentsAndOffsets( element, i, element.getChild( index ), 0 );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Generate diff items for this change (there might be multiple attributes changed and\n\t\t\t\t\t// there is a single diff for each of them) and insert them into the diff set.\n\t\t\t\t\tdiffSet.push( ...this._getAttributesDiff( range, snapshotAttributes, elementAttributes ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\t// `action` is 'equal'. Child not changed.\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Then, sort the changes by the position (change at position before other changes is first).\n\t\tdiffSet.sort( ( a, b ) => {\n\t\t\t// If the change is in different root, we don't care much, but we'd like to have all changes in given\n\t\t\t// root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n\t\t\t// will be processed first.\n\t\t\tif ( a.position.root != b.position.root ) {\n\t\t\t\treturn a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n\t\t\t}\n\n\t\t\t// If change happens at the same position...\n\t\t\tif ( a.position.isEqual( b.position ) ) {\n\t\t\t\t// Keep chronological order of operations.\n\t\t\t\treturn a.changeCount < b.changeCount ? -1 : 1;\n\t\t\t}\n\n\t\t\t// If positions differ, position \"on the left\" should be earlier in the result.\n\t\t\treturn a.position.isBefore( b.position ) ? -1 : 1;\n\t\t} );\n\n\t\t// Glue together multiple changes (mostly on text nodes).\n\t\tfor ( let i = 1; i < diffSet.length; i++ ) {\n\t\t\tconst prevDiff = diffSet[ i - 1 ];\n\t\t\tconst thisDiff = diffSet[ i ];\n\n\t\t\t// Glue remove changes if they happen on text on same position.\n\t\t\tconst isConsecutiveTextRemove =\n\t\t\t\tprevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.isEqual( thisDiff.position );\n\n\t\t\t// Glue insert changes if they happen on text on consecutive fragments.\n\t\t\tconst isConsecutiveTextAdd =\n\t\t\t\tprevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n\n\t\t\t// Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n\t\t\tconst isConsecutiveAttributeChange =\n\t\t\t\tprevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.range.isFlat && thisDiff.range.isFlat &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset &&\n\t\t\t\tprevDiff.attributeKey == thisDiff.attributeKey &&\n\t\t\t\tprevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n\t\t\t\tprevDiff.attributeNewValue == thisDiff.attributeNewValue;\n\n\t\t\tif ( isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange ) {\n\t\t\t\tdiffSet[ i - 1 ].length++;\n\n\t\t\t\tif ( isConsecutiveAttributeChange ) {\n\t\t\t\t\tdiffSet[ i - 1 ].range.end = diffSet[ i - 1 ].range.end.getShiftedBy( 1 );\n\t\t\t\t}\n\n\t\t\t\tdiffSet.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\t// Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n\t\tfor ( const item of diffSet ) {\n\t\t\tdelete item.changeCount;\n\n\t\t\tif ( item.type == 'attribute' ) {\n\t\t\t\tdelete item.position;\n\t\t\t\tdelete item.length;\n\t\t\t}\n\t\t}\n\n\t\tthis._changeCount = 0;\n\n\t\t// Cache changes.\n\t\tthis._cachedChangesWithGraveyard = diffSet.slice();\n\t\tthis._cachedChanges = diffSet.slice().filter( _changesInGraveyardFilter );\n\n\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\treturn this._cachedChangesWithGraveyard;\n\t\t} else {\n\t\t\treturn this._cachedChanges;\n\t\t}\n\t}\n\n\t/**\n\t * Resets `Differ`. Removes all buffered changes.\n\t */\n\treset() {\n\t\tthis._changesInElement.clear();\n\t\tthis._elementSnapshots.clear();\n\t\tthis._changedMarkers.clear();\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Saves and handles an insert change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markInsert( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a remove change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markRemove( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\n\t\tthis._removeAllNestedChanges( parent, offset, howMany );\n\t}\n\n\t/**\n\t * Saves and handles an attribute change.\n\t *\n\t * @private\n\t * @param {module:engine/model/item~Item} item\n\t */\n\t_markAttribute( item ) {\n\t\tconst changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n\n\t\tthis._markChange( item.parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a model change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Object} changeItem\n\t */\n\t_markChange( parent, changeItem ) {\n\t\t// First, make a snapshot of this parent's children (it will be made only if it was not made before).\n\t\tthis._makeSnapshot( parent );\n\n\t\t// Then, get all changes that already were done on the element (empty array if this is the first change).\n\t\tconst changes = this._getChangesForElement( parent );\n\n\t\t// Then, look through all the changes, and transform them or the new change.\n\t\tthis._handleChange( changeItem, changes );\n\n\t\t// Add the new change.\n\t\tchanges.push( changeItem );\n\n\t\t// Remove incorrect changes. During transformation some change might be, for example, included in another.\n\t\t// In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n\t\tfor ( let i = 0; i < changes.length; i++ ) {\n\t\t\tif ( changes[ i ].howMany < 1 ) {\n\t\t\t\tchanges.splice( i, 1 );\n\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets an array of changes that have already been saved for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {Array.<Object>}\n\t */\n\t_getChangesForElement( element ) {\n\t\tlet changes;\n\n\t\tif ( this._changesInElement.has( element ) ) {\n\t\t\tchanges = this._changesInElement.get( element );\n\t\t} else {\n\t\t\tchanges = [];\n\n\t\t\tthis._changesInElement.set( element, changes );\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t/**\n\t * Saves a children snapshot for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_makeSnapshot( element ) {\n\t\tif ( !this._elementSnapshots.has( element ) ) {\n\t\t\tthis._elementSnapshots.set( element, _getChildrenSnapshot( element.getChildren() ) );\n\t\t}\n\t}\n\n\t/**\n\t * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n\t * change and/or the old change.\n\t *\n\t * @private\n\t * @param {Object} inc Incoming (new) change.\n\t * @param {Array.<Object>} changes An array containing all the changes done on that element.\n\t */\n\t_handleChange( inc, changes ) {\n\t\t// We need a helper variable that will store how many nodes are to be still handled for this change item.\n\t\t// `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n\t\t// needs to be differentiated.\n\t\t//\n\t\t// This comes up when there are multiple changes that are affected by `inc` change item.\n\t\t//\n\t\t// For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n\t\t// Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n\t\t//\n\t\t// Then, we:\n\t\t// - \"forget\" about first insert change (it is \"eaten\" by remove),\n\t\t// - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n\t\t// - but still we have to change offset of the second insert change from `5` to `3`!\n\t\t//\n\t\t// So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n\t\t// while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n\t\tinc.nodesToHandle = inc.howMany;\n\n\t\tfor ( const old of changes ) {\n\t\t\tconst incEnd = inc.offset + inc.howMany;\n\t\t\tconst oldEnd = old.offset + old.howMany;\n\n\t\t\tif ( inc.type == 'insert' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\told.howMany += inc.nodesToHandle;\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t// This case is more complicated, because attribute change has to be split into two.\n\t\t\t\t\t\t// Example (assume that uppercase and lowercase letters mean different attributes):\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// initial state:\t\tabcxyz\n\t\t\t\t\t\t// attribute change:\taBCXYz\n\t\t\t\t\t\t// incoming insert:\t\taBCfooXYz\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Change ranges cannot intersect because each item has to be described exactly (it was either\n\t\t\t\t\t\t// not changed, inserted, removed, or its attribute was changed). That's why old attribute\n\t\t\t\t\t\t// change has to be split and both parts has to be handled separately from now on.\n\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: incEnd,\n\t\t\t\t\t\t\thowMany: howMany - old.howMany,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'remove' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( incEnd <= oldEnd ) {\n\t\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\t\told.offset = inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= inc.nodesToHandle;\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\t\tinc.nodesToHandle -= old.howMany;\n\t\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t\tconst intersectionLength = oldEnd - inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( inc.offset + inc.howMany <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\told.offset = inc.offset;\n\t\t\t\t\t\told.howMany += inc.nodesToHandle;\n\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\told.offset = inc.offset;\n\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd <= oldEnd ) {\n\t\t\t\t\t\t\t// On first sight in this case we don't need to split attribute operation into two.\n\t\t\t\t\t\t\t// However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n\t\t\t\t\t\t\t// For that reason, no two changes may intersect.\n\t\t\t\t\t\t\t// So we cannot have an attribute change that \"contains\" remove change.\n\t\t\t\t\t\t\t// Attribute change needs to be split.\n\t\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t\tconst howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n\n\t\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: inc.offset,\n\t\t\t\t\t\t\t\thowMany: howManyAfter,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= oldEnd - inc.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'attribute' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\t// This case is similar to a case described when incoming change was insert and old change was attribute.\n\t\t\t\t\t\t\t// See comment above.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// This time incoming change is attribute. We need to split incoming change in this case too.\n\t\t\t\t\t\t\t// However this time, the second part of the attribute change needs to be processed further\n\t\t\t\t\t\t\t// because there might be other changes that it collides with.\n\t\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: oldEnd,\n\t\t\t\t\t\t\t\thowMany: incEnd - oldEnd,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\t\tchanges.push( attributePart );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t} else if ( inc.offset >= old.offset && inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\tinc.nodesToHandle = incEnd - oldEnd;\n\t\t\t\t\t\t\tinc.offset = oldEnd;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( inc.offset >= old.offset && incEnd <= oldEnd ) {\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinc.howMany = inc.nodesToHandle;\n\t\tdelete inc.nodesToHandle;\n\t}\n\n\t/**\n\t * Returns an object with a single insert change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which the change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getInsertDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'insert',\n\t\t\tposition: Position.createFromParentAndOffset( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an object with a single remove change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getRemoveDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'remove',\n\t\t\tposition: Position.createFromParentAndOffset( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an array of objects where each one is a single attribute change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The range where the change happened.\n\t * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n\t * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\n\t * @returns {Array.<Object>} An array containing one or more diff items.\n\t */\n\t_getAttributesDiff( range, oldAttributes, newAttributes ) {\n\t\t// Results holder.\n\t\tconst diffs = [];\n\n\t\t// Clone new attributes as we will be performing changes on this object.\n\t\tnewAttributes = new Map( newAttributes );\n\n\t\t// Look through old attributes.\n\t\tfor ( const [ key, oldValue ] of oldAttributes ) {\n\t\t\t// Check what is the new value of the attribute (or if it was removed).\n\t\t\tconst newValue = newAttributes.has( key ) ? newAttributes.get( key ) : null;\n\n\t\t\t// If values are different (or attribute was removed)...\n\t\t\tif ( newValue !== oldValue ) {\n\t\t\t\t// Add diff item.\n\t\t\t\tdiffs.push( {\n\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\tposition: range.start,\n\t\t\t\t\trange: Range.createFromRange( range ),\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tattributeKey: key,\n\t\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\t\tattributeNewValue: newValue,\n\t\t\t\t\tchangeCount: this._changeCount++\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Prevent returning two diff items for the same change.\n\t\t\tnewAttributes.delete( key );\n\t\t}\n\n\t\t// Look through new attributes that weren't handled above.\n\t\tfor ( const [ key, newValue ] of newAttributes ) {\n\t\t\t// Each of them is a new attribute. Add diff item.\n\t\t\tdiffs.push( {\n\t\t\t\ttype: 'attribute',\n\t\t\t\tposition: range.start,\n\t\t\t\trange: Range.createFromRange( range ),\n\t\t\t\tlength: 1,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: newValue,\n\t\t\t\tchangeCount: this._changeCount++\n\t\t\t} );\n\t\t}\n\n\t\treturn diffs;\n\t}\n\n\t/**\n\t * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element Element to check.\n\t * @returns {Boolean}\n\t */\n\t_isInInsertedElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( !parent ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst changes = this._changesInElement.get( parent );\n\t\tconst offset = element.startOffset;\n\n\t\tif ( changes ) {\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._isInInsertedElement( parent );\n\t}\n\n\t/**\n\t * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n\t * and `howMany`.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_removeAllNestedChanges( parent, offset, howMany ) {\n\t\tconst range = Range.createFromParentsAndOffsets( parent, offset, parent, offset + howMany );\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tthis._elementSnapshots.delete( item );\n\t\t\t\tthis._changesInElement.delete( item );\n\n\t\t\t\tthis._removeAllNestedChanges( item, 0, item.maxOffset );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n// objects, each representing one character and attributes set on that character.\nfunction _getChildrenSnapshot( children ) {\n\tconst snapshot = [];\n\n\tfor ( const child of children ) {\n\t\tif ( child.is( 'text' ) ) {\n\t\t\tfor ( let i = 0; i < child.data.length; i++ ) {\n\t\t\t\tsnapshot.push( {\n\t\t\t\t\tname: '$text',\n\t\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tsnapshot.push( {\n\t\t\t\tname: child.name,\n\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn snapshot;\n}\n\n// Generates array of actions for given changes set.\n// It simulates what `diff` function does.\n// Generated actions are:\n// - 'e' for 'equal' - when item at that position did not change,\n// - 'i' for 'insert' - when item at that position was inserted,\n// - 'r' for 'remove' - when item at that position was removed,\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\n//\n// Example (assume that uppercase letters have bold attribute, compare with function code):\n//\n// children before:\tfooBAR\n// children after:\tfoxybAR\n//\n// changes: type: remove, offset: 1, howMany: 1\n//\t\t\ttype: insert, offset: 2, howMany: 2\n//\t\t\ttype: attribute, offset: 4, howMany: 1\n//\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n//\n// steps taken by th script:\n//\n// 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n//    1.2 this change removes one node, add one remove action\n//    1.3 change last visited `offset` to 1\n//    1.4 since an old child has been removed, one more old child has been handled\n//    1.5 actions at this point are: equal, remove\n//\n// 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n//    2.2 this change inserts two nodes, add two insert actions\n//    2.3 change last visited offset to the end of the inserted range, that is 4\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\n//\n// 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n//    3.1 between this change and previous change are no not-changed nodes\n//    3.2 this change changes one node, add one attribute action\n//    3.3 change last visited `offset` to the end of change range, that is 5\n//    3.4 since an old child has been changed, one more old child has been handled\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n//\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n//    4.1 fill up with two equal actions\n//\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\nfunction _generateActionsFromChanges( oldChildrenLength, changes ) {\n\tconst actions = [];\n\n\tlet offset = 0;\n\tlet oldChildrenHandled = 0;\n\n\t// Go through all buffered changes.\n\tfor ( const change of changes ) {\n\t\t// First, fill \"holes\" between changes with \"equal\" actions.\n\t\tif ( change.offset > offset ) {\n\t\t\tactions.push( ...'e'.repeat( change.offset - offset ).split( '' ) );\n\n\t\t\toldChildrenHandled += change.offset - offset;\n\t\t}\n\n\t\t// Then, fill up actions accordingly to change type.\n\t\tif ( change.type == 'insert' ) {\n\t\t\tactions.push( ...'i'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is after inserted range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t} else if ( change.type == 'remove' ) {\n\t\t\tactions.push( ...'r'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is at the position where the nodes were removed.\n\t\t\toffset = change.offset;\n\t\t\t// We removed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t} else {\n\t\t\tactions.push( ...'a'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset isa at the position after the changed range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t\t// We changed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t}\n\t}\n\n\t// Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n\t// has not been changed / removed at the end of their parent.\n\tif ( oldChildrenHandled < oldChildrenLength ) {\n\t\tactions.push( ...'e'.repeat( oldChildrenLength - oldChildrenHandled ).split( '' ) );\n\t}\n\n\treturn actions;\n}\n\n// Filter callback for Array.filter that filters out change entries that are in graveyard.\nfunction _changesInGraveyardFilter( entry ) {\n\tconst posInGy = entry.position && entry.position.root.rootName == '$graveyard';\n\tconst rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\n\n\treturn !posInGy && !rangeInGy;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/history\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `History` keeps the track of all the deltas applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n\t/**\n\t * Creates an empty History instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Deltas added to the history.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/model/delta/delta~Delta>} module:engine/model/history~History#_deltas\n\t\t */\n\t\tthis._deltas = [];\n\n\t\t/**\n\t\t * Helper structure that maps added delta's base version to the index in {@link module:engine/model/history~History#_deltas}\n\t\t * at which the delta was added.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} module:engine/model/history~History#_historyPoints\n\t\t */\n\t\tthis._historyPoints = new Map();\n\n\t\t/**\n\t\t * Holds an information which {@link module:engine/model/delta/delta~Delta delta} undoes which\n\t\t * {@link module:engine/model/delta/delta~Delta delta}.\n\t\t *\n\t\t * Keys of the map are \"undoing deltas\", that is deltas that undone some other deltas. For each key, the\n\t\t * value is a delta that has been undone by the \"undoing delta\".\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/history~History#_undoPairs\n\t\t */\n\t\tthis._undoPairs = new Map();\n\n\t\t/**\n\t\t * Holds all undone deltas.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/delta/delta~Delta>} module:engine/model/history~History#_undoneDeltas\n\t\t */\n\t\tthis._undoneDeltas = new Set();\n\t}\n\n\t/**\n\t * Adds delta to the history.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} delta Delta to add.\n\t */\n\taddDelta( delta ) {\n\t\tif ( delta.operations.length > 0 && !this._historyPoints.has( delta.baseVersion ) ) {\n\t\t\tconst index = this._deltas.length;\n\n\t\t\tthis._deltas[ index ] = delta;\n\t\t\tthis._historyPoints.set( delta.baseVersion, index );\n\t\t}\n\t}\n\n\t/**\n\t * Returns deltas added to the history.\n\t *\n\t * @param {Number} [from=0] Base version from which deltas should be returned (inclusive). Defaults to `0`, which means\n\t * that deltas from the first one will be returned.\n\t * @param {Number} [to=Number.POSITIVE_INFINITY] Base version up to which deltas should be returned (exclusive).\n\t * Defaults to `Number.POSITIVE_INFINITY` which means that deltas up to the last one will be returned.\n\t * @returns {Iterable.<module:engine/model/delta/delta~Delta>} Deltas added to the history from given base versions range.\n\t */\n\t* getDeltas( from = 0, to = Number.POSITIVE_INFINITY ) {\n\t\t// No deltas added, nothing to yield.\n\t\tif ( this._deltas.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Will throw if base version is incorrect.\n\t\tlet fromIndex = this._getIndex( from );\n\n\t\t// Base version is too low or too high and is not found in history.\n\t\tif ( fromIndex == -1 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// We have correct `fromIndex` so let's iterate starting from it.\n\t\twhile ( fromIndex < this._deltas.length ) {\n\t\t\tconst delta = this._deltas[ fromIndex++ ];\n\n\t\t\tif ( delta.baseVersion >= to ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tyield delta;\n\t\t}\n\t}\n\n\t/**\n\t * Returns delta from history that bases on given `baseVersion`.\n\t *\n\t * @param {Number} baseVersion Base version of the delta to get.\n\t * @returns {module:engine/model/delta/delta~Delta|null} Delta with given base version or `null` if there is no such delta in history.\n\t */\n\tgetDelta( baseVersion ) {\n\t\tconst index = this._historyPoints.get( baseVersion );\n\n\t\treturn index === undefined ? null : this._deltas[ index ];\n\t}\n\n\t/**\n\t * Marks in history that one delta is a delta that is undoing the other delta. By marking deltas this way,\n\t * history is keeping more context information about deltas which helps in operational transformation.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} undoneDelta Delta which is undone by `undoingDelta`.\n\t * @param {module:engine/model/delta/delta~Delta} undoingDelta Delta which undoes `undoneDelta`.\n\t */\n\tsetDeltaAsUndone( undoneDelta, undoingDelta ) {\n\t\tthis._undoPairs.set( undoingDelta, undoneDelta );\n\t\tthis._undoneDeltas.add( undoneDelta );\n\t}\n\n\t/**\n\t * Checks whether given `delta` is undoing by any other delta.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} delta Delta to check.\n\t * @returns {Boolean} `true` if given `delta` is undoing any other delta, `false` otherwise.\n\t */\n\tisUndoingDelta( delta ) {\n\t\treturn this._undoPairs.has( delta );\n\t}\n\n\t/**\n\t * Checks whether given `delta` has been undone by any other delta.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} delta Delta to check.\n\t * @returns {Boolean} `true` if given `delta` has been undone any other delta, `false` otherwise.\n\t */\n\tisUndoneDelta( delta ) {\n\t\treturn this._undoneDeltas.has( delta );\n\t}\n\n\t/**\n\t * For given `undoingDelta`, returns the delta which has been undone by it.\n\t *\n\t * @param {module:engine/model/delta/delta~Delta} undoingDelta\n\t * @returns {module:engine/model/delta/delta~Delta|undefined} Delta that has been undone by given `undoingDelta` or `undefined`\n\t * if given `undoingDelta` is not undoing any other delta.\n\t */\n\tgetUndoneDelta( undoingDelta ) {\n\t\treturn this._undoPairs.get( undoingDelta );\n\t}\n\n\t/**\n\t * Gets an index in {@link module:engine/model/history~History#_deltas} where delta with given `baseVersion` is added.\n\t *\n\t * @private\n\t * @param {Number} baseVersion Base version of delta.\n\t */\n\t_getIndex( baseVersion ) {\n\t\tconst index = this._historyPoints.get( baseVersion );\n\n\t\t// Base version not found - it is either too high or too low, or is in the middle of delta.\n\t\tif ( index === undefined ) {\n\t\t\tconst lastDelta = this._deltas[ this._deltas.length - 1 ];\n\t\t\tconst nextBaseVersion = lastDelta.baseVersion + lastDelta.operations.length;\n\n\t\t\tif ( baseVersion < 0 || baseVersion >= nextBaseVersion ) {\n\t\t\t\t// Base version is too high or too low - it's acceptable situation.\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Given base version points to the middle of a delta.\n\t\t\t *\n\t\t\t * @error history-wrong-version\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-history-wrong-version: Given base version points to the middle of a delta.' );\n\t\t}\n\n\t\treturn index;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark( character ) {\n\treturn !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\ud800-\\udbff]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\udc00-\\udfff]/.test( character );\n}\n\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair( string, offset ) {\n\treturn isHighSurrogateHalf( string.charAt( offset - 1 ) ) && isLowSurrogateHalf( string.charAt( offset ) );\n}\n\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol( string, offset ) {\n\treturn isCombiningMark( string.charAt( offset ) );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/document\n */\n\nimport Differ from './differ';\nimport Range from './range';\nimport Position from './position';\nimport RootElement from './rootelement';\nimport History from './history';\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\n\nconst graveyardName = '$graveyard';\n\n/**\n * Document tree model describes all editable data in the editor. It may contain multiple\n * {@link module:engine/model/document~Document#roots root elements}. For example, if the editor has multiple editable areas,\n * each area will be represented by a separate root.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Document {\n\t/**\n\t * Creates an empty document instance with no {@link #roots} (other than\n\t * the {@link #graveyard graveyard root}).\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * The {@link module:engine/model/model~Model model} that the document is a part of.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The document version. It starts from `0` and every operation increases the version number. It is used to ensure that\n\t\t * operations are applied on a proper document version.\n\t\t * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n\t\t * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The document's history.\n\t\t *\n\t\t * **Note:** Be aware that deltas applied to the document might get removed or changed.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/history~History}\n\t\t */\n\t\tthis.history = new History( this );\n\n\t\t/**\n\t\t * The selection done on this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = new DocumentSelection( this );\n\n\t\t/**\n\t\t * A list of roots that are owned and managed by this document. Use {@link #createRoot} and\n\t\t * {@link #getRoot} to manipulate it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection}\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * The model differ object. Its role is to buffer changes done on the model document and then calculate a diff of those changes.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/differ~Differ}\n\t\t */\n\t\tthis.differ = new Differ();\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the model document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\n\t\t// Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n\t\tthis.createRoot( '$root', graveyardName );\n\n\t\t// First, if the operation is a document operation check if it's base version is correct.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation && operation.baseVersion !== this.version ) {\n\t\t\t\t/**\n\t\t\t\t * Only operations with matching versions can be applied.\n\t\t\t\t *\n\t\t\t\t * @error document-applyOperation-wrong-version\n\t\t\t\t * @param {module:engine/model/operation/operation~Operation} operation\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.',\n\t\t\t\t\t{ operation }\n\t\t\t\t);\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\t// Then, still before an operation is applied on model, buffer the change in differ.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.differ.bufferOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// After the operation is applied, bump document's version and add the operation to the history.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.version++;\n\t\t\t\tthis.history.addDelta( operation.delta );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Listen to selection changes. If selection changed, mark it.\n\t\tlet hasSelectionChanged = false;\n\n\t\tthis.listenTo( this.selection, 'change', () => {\n\t\t\thasSelectionChanged = true;\n\t\t} );\n\n\t\t// Wait for `_change` event from model, which signalizes that outermost change block has finished.\n\t\t// When this happens, check if there were any changes done on document, and if so, call post fixers,\n\t\t// fire `change` event for features and conversion and then reset the differ.\n\t\tthis.listenTo( model, '_change', ( evt, writer ) => {\n\t\t\tif ( !this.differ.isEmpty || hasSelectionChanged ) {\n\t\t\t\tthis._callPostFixers( writer );\n\n\t\t\t\tthis.fire( 'change', writer.batch );\n\n\t\t\t\tthis.differ.reset();\n\t\t\t\thasSelectionChanged = false;\n\t\t\t}\n\t\t} );\n\n\t\t// Buffer marker changes.\n\t\t// This is not covered in buffering operations because markers may change outside of them (when they\n\t\t// are modified using `model.markers` collection, not through `MarkerOperation`).\n\t\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange, newRange ) => {\n\t\t\t// Whenever marker is updated, buffer that change.\n\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, newRange );\n\n\t\t\tif ( !oldRange ) {\n\t\t\t\t// Whenever marker changes, buffer that.\n\t\t\t\tmarker.on( 'change', ( evt, oldRange ) => {\n\t\t\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, marker.getRange() );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n\t *\n\t * @readonly\n\t * @member {module:engine/model/rootelement~RootElement}\n\t */\n\tget graveyard() {\n\t\treturn this.getRoot( graveyardName );\n\t}\n\n\t/**\n\t * Creates a new top-level root.\n\t *\n\t * @param {String} [elementName='$root'] The element name. Defaults to `'$root'` which also has some basic schema defined\n\t * (`$block`s are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n\t * @param {String} [rootName='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement} The created root.\n\t */\n\tcreateRoot( elementName = '$root', rootName = 'main' ) {\n\t\tif ( this.roots.get( rootName ) ) {\n\t\t\t/**\n\t\t\t * A root with the specified name already exists.\n\t\t\t *\n\t\t\t * @error model-document-createRoot-name-exists\n\t\t\t * @param {module:engine/model/document~Document} doc\n\t\t\t * @param {String} name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-document-createRoot-name-exists: Root with specified name already exists.',\n\t\t\t\t{ name: rootName }\n\t\t\t);\n\t\t}\n\n\t\tconst root = new RootElement( this, elementName, rootName );\n\t\tthis.roots.add( root );\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * Removes all event listeners set by the document instance.\n\t */\n\tdestroy() {\n\t\tthis.selection.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns the top-level root by its name.\n\t *\n\t * @param {String} [name='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement|null} The root registered under a given name or null when\n\t * there is no root with the given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Returns an array with names of all roots (without the {@link #graveyard}) added to the document.\n\t *\n\t * @returns {Array.<String>} Roots names.\n\t */\n\tgetRootNames() {\n\t\treturn Array.from( this.roots, root => root.rootName ).filter( name => name != graveyardName );\n\t}\n\n\t/**\n\t * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features that listen to\n\t * the {@link module:engine/model/model~Model#event:_change model's change event} will operate on a correct model state.\n\t *\n\t * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n\t * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n\t * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n\t * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n\t * for the user.\n\t *\n\t * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n\t * callback should add an empty paragraph so that the editor is never empty:\n\t *\n\t *\t\tdocument.registerPostFixer( writer => {\n\t *\t\t\tconst changes = document.differ.getChanges();\n\t *\n\t *\t\t\t// Check if the changes lead to an empty root in the editor.\n\t *\t\t\tfor ( const entry of changes ) {\n\t *\t\t\t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n\t *\t\t\t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n\t *\n\t *\t\t\t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n\t *\t\t\t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n\t *\t\t\t\t\treturn true;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * A custom `toJSON()` method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} A clone of this object with the document property changed to a string.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tjson.selection = '[engine.model.DocumentSelection]';\n\t\tjson.model = '[engine.model.Model]';\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Returns the default root for this document which is either the first root that was added to the document using\n\t * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/rootelement~RootElement} The default root for this document.\n\t */\n\t_getDefaultRoot() {\n\t\tfor ( const root of this.roots ) {\n\t\t\tif ( root !== this.graveyard ) {\n\t\t\t\treturn root;\n\t\t\t}\n\t\t}\n\n\t\treturn this.graveyard;\n\t}\n\n\t/**\n\t * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n\t * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getDefaultRange() {\n\t\tconst defaultRoot = this._getDefaultRoot();\n\t\tconst schema = this.model.schema;\n\n\t\t// Find the first position where the selection can be put.\n\t\tconst position = new Position( defaultRoot, [ 0 ] );\n\t\tconst nearestRange = schema.getNearestSelectionRange( position );\n\n\t\t// If valid selection range is not found - return range collapsed at the beginning of the root.\n\t\treturn nearestRange || new Range( position );\n\t}\n\n\t/**\n\t * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n\t * the {@link #selection document's selection}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range A range to check.\n\t * @returns {Boolean} `true` if `range` is valid, `false` otherwise.\n\t */\n\t_validateSelectionRange( range ) {\n\t\treturn validateTextNodePosition( range.start ) && validateTextNodePosition( range.end );\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @private\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Fired after an {@link module:engine/model/model~Model#enqueueChange enqueue change block} or the outermost\n\t * {@link module:engine/model/model~Model#change change block} was executed and the document model tree was changed\n\t * during that block execution.\n\t *\n\t * @event change\n\t * @param {@link module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n}\n\nmix( Document, EmitterMixin );\n\n// Checks whether given range boundary position is valid for document selection, meaning that is not between\n// unicode surrogate pairs or base character and combining marks.\nfunction validateTextNodePosition( rangeBoundary ) {\n\tconst textNode = rangeBoundary.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tconst offset = rangeBoundary.offset - textNode.startOffset;\n\n\t\treturn !isInsideSurrogatePair( data, offset ) && !isInsideCombinedSymbol( data, offset );\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/markercollection\n */\n\nimport LiveRange from './liverange';\nimport Position from './position';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#setMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection {\n\t/**\n\t * Creates a markers collection.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Stores {@link ~Marker markers} added to the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_markers\n\t\t */\n\t\tthis._markers = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link ~Marker markers} added to the collection.\n\t *\n\t * @returns {Iterable}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._markers.values();\n\t}\n\n\t/**\n\t * Checks if marker with given `markerName` is in the collection.\n\t *\n\t * @param {String} markerName Marker name.\n\t * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\n\t */\n\thas( markerName ) {\n\t\treturn this._markers.has( markerName );\n\t}\n\n\t/**\n\t * Returns {@link ~Marker marker} with given `markerName`.\n\t *\n\t * @param {String} markerName Name of marker to get.\n\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n\t * not added to the collection.\n\t */\n\tget( markerName ) {\n\t\treturn this._markers.get( markerName ) || null;\n\t}\n\n\t/**\n\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n\t * {@link module:engine/model/range~Range range}.\n\t *\n\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n\t * flag has changed.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n\t * @param {module:engine/model/range~Range} range Marker range.\n\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n\t */\n\t_set( markerOrName, range, managedUsingOperations = false ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tconst oldRange = oldMarker.getRange();\n\t\t\tlet hasChanged = false;\n\n\t\t\tif ( !oldRange.isEqual( range ) ) {\n\t\t\t\toldMarker._attachLiveRange( LiveRange.createFromRange( range ) );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\n\t\t\t\toldMarker._managedUsingOperations = managedUsingOperations;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\n\t\t\t}\n\n\t\t\treturn oldMarker;\n\t\t}\n\n\t\tconst liveRange = LiveRange.createFromRange( range );\n\t\tconst marker = new Marker( markerName, liveRange, managedUsingOperations );\n\n\t\tthis._markers.set( markerName, marker );\n\t\tthis.fire( 'update:' + markerName, marker, null, range );\n\n\t\treturn marker;\n\t}\n\n\t/**\n\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to remove.\n\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n\t */\n\t_remove( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tthis._markers.delete( markerName );\n\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\n\n\t\t\tthis._destroyMarker( oldMarker );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersAtPosition( position ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().containsPosition( position ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys marker collection and all markers inside it.\n\t */\n\tdestroy() {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tthis._destroyMarker( marker );\n\t\t}\n\n\t\tthis._markers = null;\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Iterates over all markers that starts with given `prefix`.\n\t *\n\t *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n\t *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n\t *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n\t *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n\t *\n\t * @param prefix\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersGroup( prefix ) {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tif ( marker.name.startsWith( prefix + ':' ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the marker.\n\t *\n\t * @private\n\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n\t */\n\t_destroyMarker( marker ) {\n\t\tmarker.stopListening();\n\t\tmarker._detachLiveRange();\n\t}\n\n\t/**\n\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n\t *\n\t * @event update\n\t * @param {module:engine/model/markercollection~Marker} Updated Marker.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n\t * means that marker is just added.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n\t * means that marker is just removed.\n\t */\n}\n\nmix( MarkerCollection, EmitterMixin );\n\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'set:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#setMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.setMarker( name, range, { usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcast-converters downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcast-converters upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker {\n\t/**\n\t * Creates a marker instance.\n\t *\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n\t */\n\tconstructor( name, liveRange, managedUsingOperations ) {\n\t\t/**\n\t\t * Marker's name.\n\t\t *\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Flag indicates if the marker is managed using operations or not.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._managedUsingOperations = managedUsingOperations;\n\n\t\t/**\n\t\t * Range marked by the marker.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liverange~LiveRange} #_liveRange\n\t\t */\n\t\tthis._liveRange = this._attachLiveRange( liveRange );\n\t}\n\n\t/**\n\t * Returns value of flag indicates if the marker is managed using operations or not.\n\t * See {@link ~Marker marker class description} to learn more about marker types.\n\t * See {@link module:engine/model/writer~Writer#setMarker}.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget managedUsingOperations() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn this._managedUsingOperations;\n\t}\n\n\t/**\n\t * Returns current marker start position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetStart() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn Position.createFromPosition( this._liveRange.start );\n\t}\n\n\t/**\n\t * Returns current marker end position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetEnd() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn Position.createFromPosition( this._liveRange.end );\n\t}\n\n\t/**\n\t * Returns a range that represents current state of marker.\n\t *\n\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n\t * that it's data is up-to-date.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tgetRange() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn Range.createFromRange( this._liveRange );\n\t}\n\n\t/**\n\t * Binds new live range to marker and detach the old one if is attached.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n\t * @return {module:engine/model/liverange~LiveRange} Attached live range.\n\t */\n\t_attachLiveRange( liveRange ) {\n\t\tif ( this._liveRange ) {\n\t\t\tthis._detachLiveRange();\n\t\t}\n\n\t\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\t\tliveRange.delegate( 'change:range' ).to( this );\n\t\tliveRange.delegate( 'change:content' ).to( this );\n\n\t\tthis._liveRange = liveRange;\n\n\t\treturn liveRange;\n\t}\n\n\t/**\n\t * Unbinds and destroys currently attached live range.\n\t *\n\t * @protected\n\t */\n\t_detachLiveRange() {\n\t\tthis._liveRange.stopDelegating( 'change:range', this );\n\t\tthis._liveRange.stopDelegating( 'change:content', this );\n\t\tthis._liveRange.detach();\n\t\tthis._liveRange = null;\n\t}\n\n\t/**\n\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:range\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n\n\t/**\n\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:content\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n}\n\nmix( Marker, EmitterMixin );\n\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/liveposition\n */\n\nimport Position from './position';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends Position {\n\t/**\n\t * Creates a live position.\n\t *\n\t * @see module:engine/model/position~Position\n\t * @param {module:engine/model/rootelement~RootElement} root\n\t * @param {Array.<Number>} path\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness] Defaults to `'sticksToNext'`.\n\t * See {@link module:engine/model/liveposition~LivePosition#stickiness}.\n\t */\n\tconstructor( root, path, stickiness ) {\n\t\tsuper( root, path );\n\n\t\tif ( !this.root.is( 'rootElement' ) ) {\n\t\t\t/**\n\t\t\t * LivePosition's root has to be an instance of RootElement.\n\t\t\t *\n\t\t\t * @error liveposition-root-not-rootelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-liveposition-root-not-rootelement: LivePosition\\'s root has to be an instance of RootElement.'\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Flag representing `LivePosition` stickiness. `LivePosition` might be sticking to previous node or next node.\n\t\t * Whenever some nodes are inserted at the same position as `LivePosition`, `stickiness` is checked to decide if\n\t\t * LivePosition should be moved. Similar applies when a range of nodes is moved and one of it's boundary\n\t\t * position is same as `LivePosition`.\n\t\t *\n\t\t * Examples:\n\t\t *\n\t\t *\t\tInsert:\n\t\t *\t\tPosition is at | and we insert at the same position, marked as ^:\n\t\t *\t\t- | sticks to previous node: `<p>f|^oo</p>` => `<p>f|baroo</p>`\n\t\t *\t\t- | sticks to next node: `<p>f^|oo</p>` => `<p>fbar|oo</p>`\n\t\t *\n\t\t *\t\tMove:\n\t\t *\t\tPosition is at | and range [ ] is moved to position ^:\n\t\t *\t\t- | sticks to previous node: `<p>f|[oo]</p><p>b^ar</p>` => `<p>f|</p><p>booar</p>`\n\t\t *\t\t- | sticks to next node: `<p>f|[oo]</p><p>b^ar</p>` => `<p>f</p><p>b|ooar</p>`\n\t\t *\n\t\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/liveposition~LivePosition#stickiness\n\t\t */\n\t\tthis.stickiness = stickiness || 'sticksToNext';\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * @static\n\t * @method module:engine/model/liveposition~LivePosition.createAfter\n\t * @see module:engine/model/position~Position.createAfter\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @method module:engine/model/liveposition~LivePosition.createBefore\n\t * @see module:engine/model/position~Position.createBefore\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @method module:engine/model/liveposition~LivePosition.createFromParentAndOffset\n\t * @see module:engine/model/position~Position.createFromParentAndOffset\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @method module:engine/model/liveposition~LivePosition.createFromPosition\n\t * @see module:engine/model/position~Position.createFromPosition\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n\t *\n\t * @event module:engine/model/liveposition~LivePosition#change\n\t * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n\t */\n}\n\n/**\n * Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n * this position's {@link module:engine/model/position~Position#root root}.\n *\n * @ignore\n * @private\n * @method module:engine/model/liveposition~LivePosition.bindWithDocument\n */\nfunction bindWithDocument() {\n\t// Operation types handled by LivePosition (these are operations that change model tree structure).\n\tconst supportedTypes = new Set( [ 'insert', 'move', 'remove', 'reinsert' ] );\n\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( supportedTypes.has( operation.type ) ) {\n\t\t\t\ttransform.call( this, operation );\n\t\t\t}\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n/**\n * Updates this position accordingly to the updates applied to the model. Bases on change events.\n *\n * @ignore\n * @private\n * @method transform\n * @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n */\nfunction transform( operation ) {\n\t/* eslint-disable no-case-declarations */\n\tlet range;\n\tlet position;\n\n\tif ( operation.type == 'insert' ) {\n\t\trange = Range.createFromPositionAndShift( operation.position, operation.nodes.maxOffset );\n\t} else {\n\t\trange = Range.createFromPositionAndShift( operation.getMovedRangeStart(), operation.howMany );\n\t\tposition = operation.sourcePosition;\n\t}\n\n\tconst howMany = range.end.offset - range.start.offset;\n\tlet transformed;\n\n\tswitch ( operation.type ) {\n\t\tcase 'insert':\n\t\t\tconst insertBefore = this.stickiness == 'sticksToNext';\n\t\t\ttransformed = this._getTransformedByInsertion( range.start, howMany, insertBefore );\n\t\t\tbreak;\n\n\t\tcase 'move':\n\t\tcase 'remove':\n\t\tcase 'reinsert':\n\t\t\tconst originalRange = Range.createFromPositionAndShift( position, howMany );\n\n\t\t\tconst gotMoved = originalRange.containsPosition( this ) ||\n\t\t\t\t( originalRange.start.isEqual( this ) && this.stickiness == 'sticksToNext' ) ||\n\t\t\t\t( originalRange.end.isEqual( this ) && this.stickiness == 'sticksToPrevious' );\n\n\t\t\t// We can't use ._getTransformedByMove() because we have a different if-condition.\n\t\t\tif ( gotMoved ) {\n\t\t\t\ttransformed = this._getCombined( position, range.start );\n\t\t\t} else {\n\t\t\t\tconst insertBefore = this.stickiness == 'sticksToNext';\n\n\t\t\t\t// `Position._getTransformedByMove` is expecting `targetPosition` to be \"before\" move\n\t\t\t\t// (before transformation). `range.start` is already after the move happened.\n\t\t\t\t// We have to revert `targetPosition` to the state before the move.\n\t\t\t\tconst targetPosition = range.start._getTransformedByInsertion( position, howMany );\n\n\t\t\t\ttransformed = this._getTransformedByMove( position, targetPosition, howMany, insertBefore );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif ( !this.isEqual( transformed ) ) {\n\t\tconst oldPosition = Position.createFromPosition( this );\n\n\t\tthis.path = transformed.path;\n\t\tthis.root = transformed.root;\n\n\t\tthis.fire( 'change', oldPosition );\n\t}\n\t/* eslint-enable no-case-declarations */\n}\n\nmix( LivePosition, EmitterMixin );\n\n/**\n * Enum representing how position is \"sticking\" with their neighbour nodes.\n * Possible values: `'sticksToNext'`, `'sticksToPrevious'`.\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/insertcontent\n */\n\nimport Position from '../position';\nimport LivePosition from '../liveposition';\nimport Element from '../element';\nimport Range from '../range';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport DocumentSelection from '../documentselection';\n\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste\n * functionality to work.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection into which the content should be inserted.\n */\nexport default function insertContent( model, content, selection ) {\n\tmodel.change( writer => {\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tmodel.deleteContent( selection );\n\t\t}\n\n\t\tconst insertion = new Insertion( model, writer, selection.anchor );\n\n\t\tlet nodesToInsert;\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tnodesToInsert = content.getChildren();\n\t\t} else {\n\t\t\tnodesToInsert = [ content ];\n\t\t}\n\n\t\tinsertion.handleNodes( nodesToInsert, {\n\t\t\t// The set of children being inserted is the only set in this context\n\t\t\t// so it's the first and last (it's a hack ;)).\n\t\t\tisFirst: true,\n\t\t\tisLast: true\n\t\t} );\n\n\t\tconst newRange = insertion.getSelectionRange();\n\n\t\t/* istanbul ignore else */\n\t\tif ( newRange ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\twriter.setSelection( newRange );\n\t\t\t} else {\n\t\t\t\tselection.setTo( newRange );\n\t\t\t}\n\t\t} else {\n\t\t\t// We are not testing else because it's a safe check for unpredictable edge cases:\n\t\t\t// an insertion without proper range to select.\n\n\t\t\t/**\n\t\t\t * Cannot determine a proper selection range after insertion.\n\t\t\t *\n\t\t\t * @warning insertcontent-no-range\n\t\t\t */\n\t\t\tlog.warn( 'insertcontent-no-range: Cannot determine a proper selection range after insertion.' );\n\t\t}\n\t} );\n}\n\n/**\n * Utility class for performing content insertion.\n *\n * @private\n */\nclass Insertion {\n\tconstructor( model, writer, position ) {\n\t\t/**\n\t\t * The model in context of which the insertion should be performed.\n\t\t *\n\t\t * @member {module:engine/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Batch to which deltas will be added.\n\t\t *\n\t\t * @member {module:engine/controller/writer~Batch} #writer\n\t\t */\n\t\tthis.writer = writer;\n\n\t\t/**\n\t\t * The position at which (or near which) the next node will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #position\n\t\t */\n\t\tthis.position = position;\n\n\t\t/**\n\t\t * Elements with which the inserted elements can be merged.\n\t\t *\n\t\t *\t\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\n\t\t *\t\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\n\t\t *\t\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\n\t\t *\t\t\t\t\t\t\t\tso both its pieces will be added to this set)\n\t\t *\n\t\t *\n\t\t * @member {Set} #canMergeWith\n\t\t */\n\t\tthis.canMergeWith = new Set( [ this.position.parent ] );\n\n\t\t/**\n\t\t * Schema of the model.\n\t\t *\n\t\t * @member {module:engine/model/schema~Schema} #schema\n\t\t */\n\t\tthis.schema = model.schema;\n\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Handles insertion of a set of nodes.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\n\t * @param {Object} parentContext Context in which parent of these nodes was supposed to be inserted.\n\t * If the parent context is passed it means that the parent element was stripped (was not allowed).\n\t */\n\thandleNodes( nodes, parentContext ) {\n\t\tnodes = Array.from( nodes );\n\n\t\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\t\tconst node = nodes[ i ];\n\n\t\t\tthis._handleNode( node, {\n\t\t\t\tisFirst: i === 0 && parentContext.isFirst,\n\t\t\t\tisLast: ( i === ( nodes.length - 1 ) ) && parentContext.isLast\n\t\t\t} );\n\t\t}\n\n\t\t// TMP this will become a postfixer.\n\t\tthis.schema.removeDisallowedAttributes( this._filterAttributesOf, this.writer );\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Returns range to be selected after insertion.\n\t * Returns null if there is no valid range to select after insertion.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetSelectionRange() {\n\t\tif ( this.nodeToSelect ) {\n\t\t\treturn Range.createOn( this.nodeToSelect );\n\t\t}\n\n\t\treturn this.model.schema.getNearestSelectionRange( this.position );\n\t}\n\n\t/**\n\t * Handles insertion of a single node.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @param {Object} context\n\t * @param {Boolean} context.isFirst Whether the given node is the first one in the content to be inserted.\n\t * @param {Boolean} context.isLast Whether the given node is the last one in the content to be inserted.\n\t */\n\t_handleNode( node, context ) {\n\t\t// Let's handle object in a special way.\n\t\t// * They should never be merged with other elements.\n\t\t// * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n\t\tif ( this.schema.isObject( node ) ) {\n\t\t\tthis._handleObject( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to find a place for the given node.\n\t\t// Split the position.parent's branch up to a point where the node can be inserted.\n\t\t// If it isn't allowed in the whole branch, then of course don't split anything.\n\t\tconst isAllowed = this._checkAndSplitToAllowedPosition( node, context );\n\n\t\tif ( !isAllowed ) {\n\t\t\tthis._handleDisallowedNode( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._insert( node );\n\n\t\t// After the node was inserted we may try to merge it with its siblings.\n\t\t// This should happen only if it was the first and/or last of the nodes (so only with boundary nodes)\n\t\t// and only if the selection was in those elements initially.\n\t\t//\n\t\t// E.g.:\n\t\t// <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n\t\t// and:\n\t\t// <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>y</p><p>z</p> => <p>xy[]z</p>\n\t\t// but:\n\t\t// <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging)\n\t\t// <p>x</p>[<img>]<p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging, note: after running deletetContents\n\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t it's exactly the same case as above)\n\t\tthis._mergeSiblingsOf( node, context );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/element~Element} node The object element.\n\t * @param {Object} context\n\t */\n\t_handleObject( node, context ) {\n\t\t// Try finding it a place in the tree.\n\t\tif ( this._checkAndSplitToAllowedPosition( node ) ) {\n\t\t\tthis._insert( node );\n\t\t}\n\t\t// Try autoparagraphing.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\n\t * @param {Object} context\n\t */\n\t_handleDisallowedNode( node, context ) {\n\t\t// If the node is an element, try inserting its children (strip the parent).\n\t\tif ( node.is( 'element' ) ) {\n\t\t\tthis.handleNodes( node.getChildren(), context );\n\t\t}\n\t\t// If text is not allowed, try autoparagraphing it.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to insert.\n\t */\n\t_insert( node ) {\n\t\t/* istanbul ignore if */\n\t\tif ( !this.schema.checkChild( this.position, node ) ) {\n\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t// Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n\t\t\tlog.error(\n\t\t\t\t'insertcontent-wrong-position: The node cannot be inserted on the given position.',\n\t\t\t\t{ node, position: this.position }\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst livePos = LivePosition.createFromPosition( this.position );\n\n\t\tthis.writer.insert( node, this.position );\n\n\t\tthis.position = Position.createFromPosition( livePos );\n\t\tlivePos.detach();\n\n\t\t// The last inserted object should be selected because we can't put a collapsed selection after it.\n\t\tif ( this.schema.isObject( node ) && !this.schema.checkChild( this.position, '$text' ) ) {\n\t\t\tthis.nodeToSelect = node;\n\t\t} else {\n\t\t\tthis.nodeToSelect = null;\n\t\t}\n\n\t\tthis._filterAttributesOf.push( node );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t */\n\t_mergeSiblingsOf( node, context ) {\n\t\tif ( !( node instanceof Element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mergeLeft = this._canMergeLeft( node, context );\n\t\tconst mergeRight = this._canMergeRight( node, context );\n\t\tconst mergePosLeft = LivePosition.createBefore( node );\n\t\tconst mergePosRight = LivePosition.createAfter( node );\n\n\t\tif ( mergeLeft ) {\n\t\t\tconst position = LivePosition.createFromPosition( this.position );\n\n\t\t\tthis.writer.merge( mergePosLeft );\n\n\t\t\tthis.position = Position.createFromPosition( position );\n\t\t\tposition.detach();\n\t\t}\n\n\t\tif ( mergeRight ) {\n\t\t\t/* istanbul ignore if */\n\t\t\tif ( !this.position.isEqual( mergePosRight ) ) {\n\t\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t\t// At this point the insertion position should be after the node we'll merge. If it isn't,\n\t\t\t\t// it should need to be secured as in the left merge case.\n\t\t\t\tlog.error( 'insertcontent-wrong-position-on-merge: The insertion position should equal the merge position' );\n\t\t\t}\n\n\t\t\t// Move the position to the previous node, so it isn't moved to the graveyard on merge.\n\t\t\t// <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n\t\t\tthis.position = Position.createAt( mergePosRight.nodeBefore, 'end' );\n\n\t\t\t// OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n\t\t\t// NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n\t\t\tconst position = new LivePosition( this.position.root, this.position.path, 'sticksToPrevious' );\n\n\t\t\tthis.writer.merge( mergePosRight );\n\n\t\t\tthis.position = Position.createFromPosition( position );\n\t\t\tposition.detach();\n\t\t}\n\n\t\tif ( mergeLeft || mergeRight ) {\n\t\t\t// After merge elements that were marked by _insert() to be filtered might be gone so\n\t\t\t// we need to mark the new container.\n\t\t\tthis._filterAttributesOf.push( this.position.parent );\n\t\t}\n\n\t\tmergePosLeft.detach();\n\t\tmergePosRight.detach();\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with previous sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeLeft( node, context ) {\n\t\tconst previousSibling = node.previousSibling;\n\n\t\treturn context.isFirst &&\n\t\t\t( previousSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( previousSibling ) &&\n\t\t\tthis.model.schema.checkMerge( previousSibling, node );\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with next sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeRight( node, context ) {\n\t\tconst nextSibling = node.nextSibling;\n\n\t\treturn context.isLast &&\n\t\t\t( nextSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( nextSibling ) &&\n\t\t\tthis.model.schema.checkMerge( node, nextSibling );\n\t}\n\n\t/**\n\t * Tries wrapping the node in a new paragraph and inserting it this way.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\n\t * @param {Object} context\n\t */\n\t_tryAutoparagraphing( node, context ) {\n\t\tconst paragraph = this.writer.createElement( 'paragraph' );\n\n\t\t// Do not autoparagraph if the paragraph won't be allowed there,\n\t\t// cause that would lead to an infinite loop. The paragraph would be rejected in\n\t\t// the next _handleNode() call and we'd be here again.\n\t\tif ( this._getAllowedIn( paragraph, this.position.parent ) && this.schema.checkChild( paragraph, node ) ) {\n\t\t\tparagraph.appendChildren( node );\n\t\t\tthis._handleNode( paragraph, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {Boolean} Whether an allowed position was found.\n\t * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n\t */\n\t_checkAndSplitToAllowedPosition( node ) {\n\t\tconst allowedIn = this._getAllowedIn( node, this.position.parent );\n\n\t\tif ( !allowedIn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\twhile ( allowedIn != this.position.parent ) {\n\t\t\t// If a parent which we'd need to leave is a limit element, break.\n\t\t\tif ( this.schema.isLimit( this.position.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( this.position.isAtStart ) {\n\t\t\t\tconst parent = this.position.parent;\n\t\t\t\tthis.position = Position.createBefore( parent );\n\n\t\t\t\t// Special case – parent is empty (<p>^</p>) so isAtStart == isAtEnd == true.\n\t\t\t\t// We can remove the element after moving selection out of it.\n\t\t\t\tif ( parent.isEmpty ) {\n\t\t\t\t\tthis.writer.remove( parent );\n\t\t\t\t}\n\t\t\t} else if ( this.position.isAtEnd ) {\n\t\t\t\tthis.position = Position.createAfter( this.position.parent );\n\t\t\t} else {\n\t\t\t\tconst tempPos = Position.createAfter( this.position.parent );\n\n\t\t\t\tthis.writer.split( this.position );\n\n\t\t\t\tthis.position = tempPos;\n\n\t\t\t\tthis.canMergeWith.add( this.position.nodeAfter );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to check.\n\t * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getAllowedIn( node, element ) {\n\t\tif ( this.schema.checkChild( element, node ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\tif ( element.parent ) {\n\t\t\treturn this._getAllowedIn( node, element.parent );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/deletecontent\n */\n\nimport LivePosition from '../liveposition';\nimport Position from '../position';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\n\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection of which the content should be deleted.\n * @param {module:engine/model/batch~Batch} batch Batch to which the deltas will be added.\n * @param {Object} [options]\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph> will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n */\nexport default function deleteContent( model, selection, options = {} ) {\n\tif ( selection.isCollapsed ) {\n\t\treturn;\n\t}\n\n\tconst schema = model.schema;\n\n\tmodel.change( writer => {\n\t\t// 1. Replace the entire content with paragraph.\n\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n\t\tif ( !options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph( schema, selection ) ) {\n\t\t\treplaceEntireContentWithParagraph( writer, selection, schema );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst selRange = selection.getFirstRange();\n\t\tconst startPos = selRange.start;\n\t\tconst endPos = LivePosition.createFromPosition( selRange.end );\n\n\t\t// 2. Remove the content if there is any.\n\t\tif ( !selRange.start.isTouching( selRange.end ) ) {\n\t\t\twriter.remove( selRange );\n\t\t}\n\n\t\t// 3. Merge elements in the right branch to the elements in the left branch.\n\t\t// The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n\t\t//\n\t\t// <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n\t\t//\n\t\t// However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n\t\t// as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n\t\t// want to override that behavior anyway.\n\t\tif ( !options.leaveUnmerged ) {\n\t\t\tmergeBranches( writer, startPos, endPos );\n\n\t\t\t// TMP this will be replaced with a postifxer.\n\t\t\t// We need to check and strip disallowed attributes in all nested nodes because after merge\n\t\t\t// some attributes could end up in a path where are disallowed.\n\t\t\t//\n\t\t\t// e.g. bold is disallowed for <H1>\n\t\t\t// <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n\t\t\tschema.removeDisallowedAttributes( startPos.parent.getChildren(), writer );\n\t\t}\n\n\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\twriter.setSelection( startPos );\n\t\t} else {\n\t\t\tselection.setTo( startPos );\n\t\t}\n\n\t\t// 4. Autoparagraphing.\n\t\t// Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n\t\tif ( shouldAutoparagraph( schema, startPos ) ) {\n\t\t\tinsertParagraph( writer, startPos, selection );\n\t\t}\n\n\t\tendPos.detach();\n\t} );\n}\n\n// This function is a result of reaching the Ballmer's peak for just the right amount of time.\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\nfunction mergeBranches( writer, startPos, endPos ) {\n\tconst startParent = startPos.parent;\n\tconst endParent = endPos.parent;\n\n\t// If both positions ended up in the same parent, then there's nothing more to merge:\n\t// <$root><p>x[]</p><p>{}y</p></$root> => <$root><p>xy</p>[]{}</$root>\n\tif ( startParent == endParent ) {\n\t\treturn;\n\t}\n\n\t// If one of the positions is a root, then there's nothing more to merge (at least in the current state of implementation).\n\t// Theoretically in this case we could unwrap the <p>: <$root>x[]<p>{}y</p></$root>, but we don't need to support it yet\n\t// so let's just abort.\n\tif ( !startParent.parent || !endParent.parent ) {\n\t\treturn;\n\t}\n\n\t// Check if operations we'll need to do won't need to cross object or limit boundaries.\n\t// E.g., we can't merge endParent into startParent in this case:\n\t// <limit><startParent>x[]</startParent></limit><endParent>{}</endParent>\n\tif ( !checkCanBeMerged( startPos, endPos, writer.model.schema ) ) {\n\t\treturn;\n\t}\n\n\t// Remember next positions to merge. For example:\n\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t// will become:\n\t// <a><b>xy</b>[]</a><c>{}</c>\n\tstartPos = Position.createAfter( startParent );\n\tendPos = Position.createBefore( endParent );\n\n\tif ( !endPos.isEqual( startPos ) ) {\n\t\t// In this case, before we merge, we need to move `endParent` to the `startPos`:\n\t\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t\t// becomes:\n\t\t// <a><b>x</b>[]<d>y</d></a><c>{}</c>\n\t\twriter.insert( endParent, startPos );\n\t}\n\n\t// Merge two siblings:\n\t// <a>x</a>[]<b>y</b> -> <a>xy</a> (the usual case)\n\t// <a><b>x</b>[]<d>y</d></a><c></c> -> <a><b>xy</b>[]</a><c></c> (this is the \"move parent\" case shown above)\n\twriter.merge( startPos );\n\n\t// Remove empty end ancestors:\n\t// <a>fo[o</a><b><a><c>bar]</c></a></b>\n\t// becomes:\n\t// <a>fo[]</a><b><a>{}</a></b>\n\t// So we can remove <a> and <b>.\n\twhile ( endPos.parent.isEmpty ) {\n\t\tconst parentToRemove = endPos.parent;\n\n\t\tendPos = Position.createBefore( parentToRemove );\n\n\t\twriter.remove( parentToRemove );\n\t}\n\n\t// Continue merging next level.\n\tmergeBranches( writer, startPos, endPos );\n}\n\nfunction shouldAutoparagraph( schema, position ) {\n\tconst isTextAllowed = schema.checkChild( position, '$text' );\n\tconst isParagraphAllowed = schema.checkChild( position, 'paragraph' );\n\n\treturn !isTextAllowed && isParagraphAllowed;\n}\n\n// Check if parents of two positions can be merged by checking if there are no limit/object\n// boundaries between those two positions.\n//\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n// we'll check <p>, <bQ>, <widget> and <caption>.\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\nfunction checkCanBeMerged( leftPos, rightPos, schema ) {\n\tconst rangeToCheck = new Range( leftPos, rightPos );\n\n\tfor ( const value of rangeToCheck.getWalker() ) {\n\t\tif ( schema.isObject( value.item ) || schema.isLimit( value.item ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction insertParagraph( writer, position, selection ) {\n\tconst paragraph = writer.createElement( 'paragraph' );\n\n\twriter.insert( paragraph, position );\n\n\tif ( selection instanceof DocumentSelection ) {\n\t\twriter.setSelection( paragraph );\n\t} else {\n\t\tselection.setTo( paragraph );\n\t}\n}\n\nfunction replaceEntireContentWithParagraph( writer, selection ) {\n\tconst limitElement = writer.model.schema.getLimitElement( selection );\n\n\twriter.remove( Range.createIn( limitElement ) );\n\tinsertParagraph( writer, Position.createAt( limitElement ), selection );\n}\n\n// We want to replace the entire content with a paragraph when:\n// * the entire content is selected,\n// * selection contains at least two elements,\n// * whether the paragraph is allowed in schema in the common ancestor.\nfunction shouldEntireContentBeReplacedWithParagraph( schema, selection ) {\n\tconst limitElement = schema.getLimitElement( selection );\n\n\tif ( !selection.containsEntireContent( limitElement ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\n\tif ( range.start.parent == range.end.parent ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( limitElement, 'paragraph' );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/modifyselection\n */\n\nimport Position from '../position';\nimport TreeWalker from '../treewalker';\nimport Range from '../range';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport DocumentSelection from '../documentselection';\n\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection} selection The selection to modify.\n * @param {Object} [options]\n * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n */\nexport default function modifySelection( model, selection, options = {} ) {\n\tconst schema = model.schema;\n\tconst isForward = options.direction != 'backward';\n\tconst unit = options.unit ? options.unit : 'character';\n\n\tconst focus = selection.focus;\n\tconst walker = new TreeWalker( {\n\t\tboundaries: getSearchRange( focus, isForward ),\n\t\tsingleCharacters: true,\n\t\tdirection: isForward ? 'forward' : 'backward'\n\t} );\n\n\tconst data = { walker, schema, isForward, unit };\n\n\tlet next;\n\n\twhile ( ( next = walker.next() ) ) {\n\t\tif ( next.done ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = tryExtendingTo( data, next.value );\n\n\t\tif ( position ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelectionFocus( position );\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tselection.setFocus( position );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Checks whether the selection can be extended to the the walker's next value (next position).\n// @param {{ walker, unit, isForward, schema }} data\n// @param {module:engine/view/treewalker~TreeWalkerValue} value\nfunction tryExtendingTo( data, value ) {\n\t// If found text, we can certainly put the focus in it. Let's just find a correct position\n\t// based on the unit.\n\tif ( value.type == 'text' ) {\n\t\tif ( data.unit === 'word' ) {\n\t\t\treturn getCorrectWordBreakPosition( data.walker, data.isForward );\n\t\t}\n\n\t\treturn getCorrectPosition( data.walker, data.unit, data.isForward );\n\t}\n\n\t// Entering an element.\n\tif ( value.type == ( data.isForward ? 'elementStart' : 'elementEnd' ) ) {\n\t\t// If it's an object, we can select it now.\n\t\tif ( data.schema.isObject( value.item ) ) {\n\t\t\treturn Position.createAt( value.item, data.isForward ? 'after' : 'before' );\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n\t// Leaving an element.\n\telse {\n\t\t// If leaving a limit element, stop.\n\t\tif ( data.schema.isLimit( value.item ) ) {\n\t\t\t// NOTE: Fast-forward the walker until the end.\n\t\t\tdata.walker.skip( () => true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n}\n\n// Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {String} unit The unit by which selection should be modified.\nfunction getCorrectPosition( walker, unit ) {\n\tconst textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( isInsideSurrogatePair( data, offset ) || ( unit == 'character' && isInsideCombinedSymbol( data, offset ) ) ) {\n\t\t\twalker.next();\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\n// Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction getCorrectWordBreakPosition( walker, isForward ) {\n\tlet textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( !isAtWordBoundary( textNode.data, offset, isForward ) && !isAtNodeBoundary( textNode, offset, isForward ) ) {\n\t\t\twalker.next();\n\n\t\t\t// Check of adjacent text nodes with different attributes (like BOLD).\n\t\t\t// Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n\t\t\t// should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n\t\t\tconst nextNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n\n\t\t\tif ( nextNode ) {\n\t\t\t\t// Check boundary char of an adjacent text node.\n\t\t\t\tconst boundaryChar = nextNode.data.charAt( isForward ? 0 : nextNode.data.length - 1 );\n\n\t\t\t\t// Go to the next node if the character at the boundary of that node belongs to the same word.\n\t\t\t\tif ( !wordBoundaryCharacters.includes( boundaryChar ) ) {\n\t\t\t\t\t// If adjacent text node belongs to the same word go to it & reset values.\n\t\t\t\t\twalker.next();\n\n\t\t\t\t\ttextNode = walker.position.textNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\nfunction getSearchRange( start, isForward ) {\n\tconst root = start.root;\n\tconst searchEnd = Position.createAt( root, isForward ? 'end' : 0 );\n\n\tif ( isForward ) {\n\t\treturn new Range( start, searchEnd );\n\t} else {\n\t\treturn new Range( searchEnd, start );\n\t}\n}\n\n// Checks if selection is on word boundary.\n//\n// @param {String} data The text node value to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtWordBoundary( data, offset, isForward ) {\n\t// The offset to check depends on direction.\n\tconst offsetToCheck = offset + ( isForward ? 0 : -1 );\n\n\treturn wordBoundaryCharacters.includes( data.charAt( offsetToCheck ) );\n}\n\n// Checks if selection is on node boundary.\n//\n// @param {module:engine/model/text~Text} textNode The text node to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtNodeBoundary( textNode, offset, isForward ) {\n\treturn offset === ( isForward ? textNode.endOffset : 0 );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/getselectedcontent\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n *\t\t<p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n *\n * It will return a document fragment with such a content:\n *\n *\t\t<quote><h>st</h></quote><p>se</p>\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection} selection The selection of which content will be returned.\n * @returns {module:engine/model/documentfragment~DocumentFragment}\n */\nexport default function getSelectedContent( model, selection ) {\n\treturn model.change( writer => {\n\t\tconst frag = writer.createDocumentFragment();\n\t\tconst range = selection.getFirstRange();\n\n\t\tif ( !range || range.isCollapsed ) {\n\t\t\treturn frag;\n\t\t}\n\n\t\tconst root = range.start.root;\n\t\tconst commonPath = range.start.getCommonPath( range.end );\n\t\tconst commonParent = root.getNodeByPath( commonPath );\n\n\t\t// ## 1st step\n\t\t//\n\t\t// First, we'll clone a fragment represented by a minimal flat range\n\t\t// containing the original range to be cloned.\n\t\t// E.g. let's consider such a range:\n\t\t//\n\t\t// <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n\t\t//\n\t\t// A minimal flat range containing this one is:\n\t\t//\n\t\t// <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n\t\t//\n\t\t// We can easily clone this structure, preserving e.g. the <quote> element.\n\t\tlet flatSubtreeRange;\n\n\t\tif ( range.start.parent == range.end.parent ) {\n\t\t\t// The original range is flat, so take it.\n\t\t\tflatSubtreeRange = range;\n\t\t} else {\n\t\t\tflatSubtreeRange = Range.createFromParentsAndOffsets(\n\t\t\t\tcommonParent, range.start.path[ commonPath.length ],\n\t\t\t\tcommonParent, range.end.path[ commonPath.length ] + 1\n\t\t\t);\n\t\t}\n\n\t\tconst howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\n\n\t\t// Clone the whole contents.\n\t\tfor ( const item of flatSubtreeRange.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\twriter.appendText( item.data, item.getAttributes(), frag );\n\t\t\t} else {\n\t\t\t\twriter.append( item.clone( true ), frag );\n\t\t\t}\n\t\t}\n\n\t\t// ## 2nd step\n\t\t//\n\t\t// If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n\t\t//\n\t\t// For example, for the range shown in the 1st step comment, we need to remove these pieces:\n\t\t//\n\t\t// <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n\t\t//\n\t\t// So this will be the final copied content:\n\t\t//\n\t\t// <quote><h>st</h></quote><p>se</p>\n\t\t//\n\t\t// In order to do that, we remove content from these two ranges:\n\t\t//\n\t\t// [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n\t\tif ( flatSubtreeRange != range ) {\n\t\t\t// Find the position of the original range in the cloned fragment.\n\t\t\tconst newRange = range._getTransformedByMove( flatSubtreeRange.start, Position.createAt( frag, 0 ), howMany )[ 0 ];\n\n\t\t\tconst leftExcessRange = new Range( Position.createAt( frag ), newRange.start );\n\t\t\tconst rightExcessRange = new Range( newRange.end, Position.createAt( frag, 'end' ) );\n\n\t\t\tremoveRangeContent( rightExcessRange, writer );\n\t\t\tremoveRangeContent( leftExcessRange, writer );\n\t\t}\n\n\t\treturn frag;\n\t} );\n}\n\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\nfunction removeRangeContent( range, writer ) {\n\tconst parentsToCheck = [];\n\n\tArray.from( range.getItems( { direction: 'backward' } ) )\n\t\t// We should better store ranges because text proxies will lose integrity\n\t\t// with the text nodes when we'll start removing content.\n\t\t.map( item => Range.createOn( item ) )\n\t\t// Filter only these items which are fully contained in the passed range.\n\t\t//\n\t\t// E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n\t\t// the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n\t\t.filter( itemRange => {\n\t\t\t// We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n\t\t\tconst contained =\n\t\t\t\t( itemRange.start.isAfter( range.start ) || itemRange.start.isEqual( range.start ) ) &&\n\t\t\t\t( itemRange.end.isBefore( range.end ) || itemRange.end.isEqual( range.end ) );\n\n\t\t\treturn contained;\n\t\t} )\n\t\t.forEach( itemRange => {\n\t\t\tparentsToCheck.push( itemRange.start.parent );\n\n\t\t\twriter.remove( itemRange );\n\t\t} );\n\n\t// Remove ancestors of the removed items if they turned to be empty now\n\t// (their whole content was contained in the range).\n\tparentsToCheck.forEach( parentToCheck => {\n\t\tlet parent = parentToCheck;\n\n\t\twhile ( parent.parent && parent.isEmpty ) {\n\t\t\tconst removeRange = Range.createOn( parent );\n\n\t\t\tparent = parent.parent;\n\n\t\t\twriter.remove( removeRange );\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/model\n */\n\n// Load all basic deltas and transformations, they register themselves.\nimport './delta/basic-deltas';\nimport './delta/basic-transformations';\n\nimport Batch from './batch';\nimport Writer from './writer';\nimport Schema from './schema';\nimport Document from './document';\nimport MarkerCollection from './markercollection';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport deltaTransform from './delta/transform';\nimport ModelElement from './element';\nimport ModelRange from './range';\n\nimport insertContent from './utils/insertcontent';\nimport deleteContent from './utils/deletecontent';\nimport modifySelection from './utils/modifyselection';\nimport getSelectedContent from './utils/getselectedcontent';\n\n/**\n * Editor's data model class. Model defines all the data: both nodes that are attached to the roots of the\n * {@link module:engine/model/model~Model#document model document}, and also all detached nodes which has not been yet\n * added to the document.\n *\n * All those nodes are created and modified by the {@link module:engine/model/writer~Writer model writer}, which can be\n * accessed by using {@link module:engine/model/model~Model#change} or {@link module:engine/model/model~Model#enqueueChange} methods.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\tconstructor() {\n\t\t/**\n\t\t * All callbacks added by {@link module:engine/model/model~Model#change} or\n\t\t * {@link module:engine/model/model~Model#enqueueChange} methods waiting to be executed.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Function>}\n\t\t */\n\t\tthis._pendingChanges = [];\n\n\t\t/**\n\t\t * Models markers' collection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis.markers = new MarkerCollection();\n\n\t\t/**\n\t\t * Editors document model.\n\t\t *\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis.document = new Document( this );\n\n\t\t/**\n\t\t * The last created and currently used writer instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/writer~Writer}\n\t\t */\n\t\tthis._currentWriter = null;\n\n\t\t/**\n\t\t * Schema for editors model.\n\t\t *\n\t\t * @member {module:engine/model/schema~Schema}\n\t\t */\n\t\tthis.schema = new Schema();\n\n\t\t[ 'insertContent', 'deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation' ]\n\t\t\t.forEach( methodName => this.decorate( methodName ) );\n\n\t\t// Adding operation validation with `highest` priority, so it is called before any other feature would like\n\t\t// to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n\t\tthis.on( 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\toperation._validate();\n\t\t}, { priority: 'highest' } );\n\n\t\t// Register some default abstract entities.\n\t\tthis.schema.register( '$root', {\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.register( '$block', {\n\t\t\tallowIn: '$root',\n\t\t\tisBlock: true\n\t\t} );\n\t\tthis.schema.register( '$text', {\n\t\t\tallowIn: '$block'\n\t\t} );\n\t\tthis.schema.register( '$clipboardHolder', {\n\t\t\tallowContentOf: '$root',\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.extend( '$text', { allowIn: '$clipboardHolder' } );\n\n\t\t// Element needed by `upcastElementToMarker` converter.\n\t\t// This element temporarily represents marker bound during conversion process and is removed\n\t\t// at the end of conversion. `UpcastDispatcher` or at least `Conversion` class looks like a better for this\n\t\t// registration but both know nothing about Schema.\n\t\tthis.schema.register( '$marker', {\n\t\t\tallowIn: [ '$root', '$block' ]\n\t\t} );\n\t}\n\n\t/**\n\t * Change method is the primary way of changing the model. You should use it to modify any node, including detached\n\t * nodes (not added to the {@link module:engine/model/model~Model#document model document}).\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they share the same\n\t * undo step.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n\t *\n\t *\t\t\tmodel.change( writer => {\n\t *\t\t\t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n\t *\t\t} );\n\t *\n\t * Change block is executed immediately.\n\t *\n\t * You can also return a value from the change block.\n\t *\n\t *\t\tconst img = model.change( writer => {\n\t *\t\t\treturn writer.createElement( 'img' );\n\t *\t\t} );\n\t *\n\t * When the outermost block is done the {@link #event:_change} event is fired.\n\t *\n\t * @see #enqueueChange\n\t * @param {Function} callback Callback function which may modify the model.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this._pendingChanges.length === 0 ) {\n\t\t\t// If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n\t\t\tthis._pendingChanges.push( { batch: new Batch(), callback } );\n\n\t\t\treturn this._runPendingChanges()[ 0 ];\n\t\t} else {\n\t\t\t// If this is not the outermost block, just execute the callback.\n\t\t\treturn callback( this._currentWriter );\n\t\t}\n\t}\n\n\t/**\n\t * `enqueueChange` method performs similar task as the {@link #change change method}, with two major differences.\n\t *\n\t * First, the callback of the `enqueueChange` is executed when all other changes are done. It might be executed\n\t * immediately if it is not nested in any other change block, but if it is nested in another (enqueue)change block,\n\t * it will be delayed and executed after the outermost block.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconsole.log( 1 );\n\t *\n\t *\t\t\tmodel.enqueueChange( writer => {\n\t *\t\t\t\tconsole.log( 2 );\n\t *\t\t\t} );\n\t *\n\t * \t\t\tconsole.log( 3 );\n\t *\t\t} ); // Will log: 1, 3, 2.\n\t *\n\t * Second, it lets you define the {@link module:engine/model/batch~Batch} into which you want to add your changes.\n\t * By default, a new batch is created. In the sample above, `change` and `enqueueChange` blocks use a different\n\t * batch (and different {@link module:engine/model/writer~Writer} since each of them operates on the separate batch).\n\t *\n\t * Using `enqueueChange` block you can also add some changes to the batch you used before.\n\t *\n\t *\t\tmodel.enqueueChange( batch, writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * `Batch` instance can be obtained from {@link module:engine/model/writer~Writer#batch the writer}.\n\t *\n\t * @param {module:engine/model/batch~Batch|String} batchOrType Batch or batch type should be used in the callback.\n\t * If not defined, a new batch will be created.\n\t * @param {Function} callback Callback function which may modify the model.\n\t */\n\tenqueueChange( batchOrType, callback ) {\n\t\tif ( typeof batchOrType === 'string' ) {\n\t\t\tbatchOrType = new Batch( batchOrType );\n\t\t} else if ( typeof batchOrType == 'function' ) {\n\t\t\tcallback = batchOrType;\n\t\t\tbatchOrType = new Batch();\n\t\t}\n\n\t\tthis._pendingChanges.push( { batch: batchOrType, callback } );\n\n\t\tif ( this._pendingChanges.length == 1 ) {\n\t\t\tthis._runPendingChanges();\n\t\t}\n\t}\n\n\t/**\n\t * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n\t * which calls callbacks and returns array of values returned by these callbacks.\n\t *\n\t * @private\n\t * @returns {Array.<*>} Array of values returned by callbacks.\n\t */\n\t_runPendingChanges() {\n\t\tconst ret = [];\n\n\t\twhile ( this._pendingChanges.length ) {\n\t\t\t// Create a new writer using batch instance created for this chain of changes.\n\t\t\tconst currentBatch = this._pendingChanges[ 0 ].batch;\n\t\t\tthis._currentWriter = new Writer( this, currentBatch );\n\n\t\t\t// Execute changes callback and gather the returned value.\n\t\t\tconst callbackReturnValue = this._pendingChanges[ 0 ].callback( this._currentWriter );\n\t\t\tret.push( callbackReturnValue );\n\n\t\t\t// Fire internal `_change` event.\n\t\t\tthis.fire( '_change', this._currentWriter );\n\n\t\t\tthis._pendingChanges.shift();\n\t\t\tthis._currentWriter = null;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * {@link module:utils/observablemixin~ObservableMixin#decorate Decorated} function to apply\n\t * {@link module:engine/model/operation/operation~Operation operations} on the model.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to apply\n\t */\n\tapplyOperation( operation ) {\n\t\toperation._execute();\n\t}\n\n\t/**\n\t * Transforms two sets of deltas by themselves. Returns both transformed sets.\n\t *\n\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasA Array with the first set of deltas to transform. These\n\t * deltas are considered more important (than `deltasB`) when resolving conflicts.\n\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasB Array with the second set of deltas to transform. These\n\t * deltas are considered less important (than `deltasA`) when resolving conflicts.\n\t * @param {Boolean} [useContext=false] When set to `true`, transformation will store and use additional context\n\t * information to guarantee more expected results. Should be used whenever deltas related to already applied\n\t * deltas are transformed (for example when undoing changes).\n\t * @returns {Object}\n\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasA The first set of deltas transformed\n\t * by the second set of deltas.\n\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasB The second set of deltas transformed\n\t * by the first set of deltas.\n\t */\n\ttransformDeltas( deltasA, deltasB, useContext = false ) {\n\t\treturn deltaTransform.transformDeltaSets( deltasA, deltasB, useContext ? this.document : null );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/utils/insertcontent~insertContent}.\n\t *\n\t * @fires insertContent\n\t * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n\t * @param {module:engine/model/selection~Selection} selection Selection into which the content should be inserted.\n\t */\n\tinsertContent( content, selection ) {\n\t\tinsertContent( this, content, selection );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/utils/deletecontent.deleteContent}.\n\t *\n\t * Note: For the sake of predictability, the resulting selection should always be collapsed.\n\t * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n\t * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n\t * then that behavior should be implemented in the view's listener. At the same time, the table feature\n\t * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n\t * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n\t * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n\t *\n\t * @fires deleteContent\n\t * @param {module:engine/model/selection~Selection} selection Selection of which the content should be deleted.\n\t * @param {Object} options See {@link module:engine/model/utils/deletecontent~deleteContent}'s options.\n\t */\n\tdeleteContent( selection, options ) {\n\t\tdeleteContent( this, selection, options );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/utils/modifyselection~modifySelection}.\n\t *\n\t * @fires modifySelection\n\t * @param {module:engine/model/selection~Selection} selection The selection to modify.\n\t * @param {Object} options See {@link module:engine/model/utils/modifyselection.modifySelection}'s options.\n\t */\n\tmodifySelection( selection, options ) {\n\t\tmodifySelection( this, selection, options );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/utils/getselectedcontent~getSelectedContent}.\n\t *\n\t * @fires getSelectedContent\n\t * @param {module:engine/model/selection~Selection} selection The selection of which content will be retrieved.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Document fragment holding the clone of the selected content.\n\t */\n\tgetSelectedContent( selection ) {\n\t\treturn getSelectedContent( this, selection );\n\t}\n\n\t/**\n\t * Checks whether given {@link module:engine/model/range~Range range} or {@link module:engine/model/element~Element element}\n\t * has any content.\n\t *\n\t * Content is any text node or element which is registered in {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * @param {module:engine/model/range~Range|module:engine/model/element~Element} rangeOrElement Range or element to check.\n\t * @returns {Boolean}\n\t */\n\thasContent( rangeOrElement ) {\n\t\tif ( rangeOrElement instanceof ModelElement ) {\n\t\t\trangeOrElement = ModelRange.createIn( rangeOrElement );\n\t\t}\n\n\t\tif ( rangeOrElement.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const item of rangeOrElement.getItems() ) {\n\t\t\t// Remember, `TreeWalker` returns always `textProxy` nodes.\n\t\t\tif ( item.is( 'textProxy' ) || this.schema.isObject( item ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n\t */\n\tdestroy() {\n\t\tthis.document.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Fired after leaving each {@link module:engine/model/model~Model#enqueueChange} block or outermost\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * **Note:** This is an internal event! Use {@link module:engine/model/document~Document#event:change} instead.\n\t *\n\t * @protected\n\t * @event _change\n\t * @param {module:engine/model/writer~Writer} writer `Writer` instance that has been used in the change block.\n\t */\n\n\t/**\n\t * Fired every time any {@link module:engine/model/operation/operation~Operation operation} is applied on the model\n\t * using {@link #applyOperation}.\n\t *\n\t * Note that this event is suitable only for very specific use-cases. Use it if you need to listen to every single operation\n\t * applied on the document. However, in most cases {@link module:engine/model/document~Document#event:change} should\n\t * be used.\n\t *\n\t * A few callbacks are already added to this event by engine internal classes:\n\t *\n\t * * with `highest` priority operation is validated,\n\t * * with `normal` priority operation is executed,\n\t * * with `low` priority the {@link module:engine/model/document~Document} updates its version,\n\t * * with `low` priority {@link module:engine/model/liveposition~LivePosition} and {@link module:engine/model/liverange~LiveRange}\n\t * update themselves.\n\t *\n\t * @event applyOperation\n\t * @param {Array} args Arguments of the `applyOperation` which is an array with a single element - applied\n\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t */\n\n\t/**\n\t * Event fired when {@link #insertContent} method is called.\n\t *\n\t * The {@link #insertContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event insertContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #deleteContent} method is called.\n\t *\n\t * The {@link #deleteContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event deleteContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #modifySelection} method is called.\n\t *\n\t * The {@link #modifySelection default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event modifySelection\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #getSelectedContent} method is called.\n\t *\n\t * The {@link #getSelectedContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event getSelectedContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/keystrokehandler\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n\n/**\n * Keystroke handler registers keystrokes so the callbacks associated\n * with these keystrokes will be executed if the matching `keydown` is fired\n * by a defined emitter.\n *\n *\t\tconst handler = new KeystrokeHandler();\n *\n *\t\thandler.listenTo( emitter );\n *\n *\t\thandler.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n */\nexport default class KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Listener used to listen to events for easier keystroke handler destruction.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/emittermixin~Emitter}\n\t\t */\n\t\tthis._listener = Object.create( DomEmitterMixin );\n\t}\n\n\t/**\n\t * Starts listening for `keydown` events from a given emitter.\n\t *\n\t * @param {module:utils/emittermixin~Emitter} emitter\n\t */\n\tlistenTo( emitter ) {\n\t\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n\t\t// keystroke so the listeners can be attached to them with different priorities.\n\t\t//\n\t\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n\t\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n\t\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n\t\t// only with other listeners of this particular event, thus making it possible to prioritize\n\t\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n\t\t// the KeystrokeHandler re–uses it to do its job.\n\t\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\n\t\t\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function} callback A function called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a helper to both `preventDefault` and `stopPropagation` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tconst keyCode = parseKeystroke( keystroke );\n\t\tconst priority = options.priority;\n\n\t\t// Execute the passed callback on KeystrokeHandler#_keydown.\n\t\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\t\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\n\t\t\tcallback( keyEvtData, () => {\n\t\t\t\t// Stop the event in the DOM: no listener in the web page\n\t\t\t\t// will be triggered by this event.\n\t\t\t\tkeyEvtData.preventDefault();\n\t\t\t\tkeyEvtData.stopPropagation();\n\n\t\t\t\t// Stop the event in the KeystrokeHandler: no more callbacks\n\t\t\t\t// will be executed for this keystroke.\n\t\t\t\tevt.stop();\n\t\t\t} );\n\n\t\t\t// Mark this keystroke as handled by the callback. See: #press.\n\t\t\tevt.return = true;\n\t\t}, { priority } );\n\t}\n\n\t/**\n\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n\t *\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n\t * @returns {Boolean} Whether the keystroke was handled.\n\t */\n\tpress( keyEvtData ) {\n\t\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t}\n\n\t/**\n\t * Destroys the keystroke handler.\n\t */\n\tdestroy() {\n\t\tthis._listener.stopListening();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends utils/keystrokehandler~KeystrokeHandler\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function|String} callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tif ( typeof callback == 'string' ) {\n\t\t\tconst commandName = callback;\n\n\t\t\tcallback = ( evtData, cancel ) => {\n\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\tcancel();\n\t\t\t};\n\t\t}\n\n\t\tsuper.set( keystroke, callback, options );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/editor/editor\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class representing the base of the editor. It is the API all plugins can expect to get when using `editor` property.\n * It should be enough to implement editing part of feature (schema definition, conversion, commands, keystrokes, etc.).\n * However it does not define editor UI, which is defined in {@link module:core/editor/editorwithui~EditorWithUI}.\n *\n * All editors implementation (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Editor {\n\t/**\n\t * Creates a new instance of the Editor class.\n\t *\n\t * @param {Object} config The editor config.\n\t */\n\tconstructor( config ) {\n\t\tconst availablePlugins = this.constructor.build && this.constructor.build.plugins;\n\n\t\t/**\n\t\t * Holds all configurations specific to this editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.build && this.constructor.build.config );\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\t/**\n\t\t * Commands registered to the editor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/commandcollection~CommandCollection}\n\t\t */\n\t\tthis.commands = new CommandCollection();\n\n\t\t/**\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( this.config.get( 'language' ) );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * Defines whether this editor is in read-only mode.\n\t\t *\n\t\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n\t\t * to modify document using them.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The editor's model.\n\t\t *\n\t\t * The center of the editor's abstract data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = new Model();\n\n\t\t/**\n\t\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\n\t\t * Used e.g. for setting or retrieving editor data.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/datacontroller~DataController}\n\t\t */\n\t\tthis.data = new DataController( this.model );\n\n\t\t/**\n\t\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n\t\t * Controls user input and rendering the content for editing.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController}\n\t\t */\n\t\tthis.editing = new EditingController( this.model );\n\t\tthis.editing.view.document.bind( 'isReadOnly' ).to( this );\n\n\t\t/**\n\t\t * Conversion manager to which conversion dispatchers are registered. Used to add converters to the editor.\n\t\t *\n\t\t * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to use conversion helpers in order to\n\t\t * add converters to the editor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/conversion~Conversion}\n\t\t */\n\t\tthis.conversion = new Conversion();\n\n\t\tthis.conversion.register( 'downcast', [ this.editing.downcastDispatcher, this.data.downcastDispatcher ] );\n\t\tthis.conversion.register( 'editingDowncast', [ this.editing.downcastDispatcher ] );\n\t\tthis.conversion.register( 'dataDowncast', [ this.data.downcastDispatcher ] );\n\n\t\tthis.conversion.register( 'upcast', [ this.data.upcastDispatcher ] );\n\n\t\t/**\n\t\t * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new EditingKeystrokeHandler( this );\n\t\tthis.keystrokes.listenTo( this.editing.view.document );\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the config.\n\t *\n\t * @returns {Promise} A promise which resolves once the initialization is completed.\n\t */\n\tinitPlugins() {\n\t\tconst that = this;\n\t\tconst config = this.config;\n\n\t\treturn loadPlugins()\n\t\t\t.then( loadedPlugins => {\n\t\t\t\treturn initPlugins( loadedPlugins, 'init' )\n\t\t\t\t\t.then( () => initPlugins( loadedPlugins, 'afterInit' ) );\n\t\t\t} )\n\t\t\t.then( () => this.fire( 'pluginsReady' ) );\n\n\t\tfunction loadPlugins() {\n\t\t\tconst plugins = config.get( 'plugins' ) || [];\n\t\t\tconst removePlugins = config.get( 'removePlugins' ) || [];\n\n\t\t\treturn that.plugins.load( plugins, removePlugins );\n\t\t}\n\n\t\tfunction initPlugins( loadedPlugins, method ) {\n\t\t\treturn loadedPlugins.reduce( ( promise, plugin ) => {\n\t\t\t\tif ( !plugin[ method ] ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\treturn promise.then( plugin[ method ].bind( plugin ) );\n\t\t\t}, Promise.resolve() );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * @fires destroy\n\t * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\tthis.fire( 'destroy' );\n\n\t\tthis.stopListening();\n\n\t\tthis.commands.destroy();\n\n\t\treturn this.plugins.destroy()\n\t\t\t.then( () => {\n\t\t\t\tthis.model.destroy();\n\t\t\t\tthis.data.destroy();\n\t\t\t\tthis.editing.destroy();\n\t\t\t\tthis.keystrokes.destroy();\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes specified command with given parameters.\n\t *\n\t * Shorthand for:\n\t *\n\t *\t\teditor.commands.get( commandName ).execute( ... );\n\t *\n\t * @param {String} commandName Name of command to execute.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( ...args ) {\n\t\tthis.commands.execute( ...args );\n\t}\n\n\t/**\n\t * Creates a basic editor instance.\n\t *\n\t * @param {Object} config The editor config. You can find the list of config options in\n\t * {@link module:core/editor/editorconfig~EditorConfig}.\n\t * @returns {Promise} Promise resolved once editor is ready.\n\t * @returns {module:core/editor/editor~Editor} return.editor The editor instance.\n\t */\n\tstatic create( config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor.fire( 'dataReady' );\n\t\t\t\t\t\teditor.fire( 'ready' );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( Editor, ObservableMixin );\n\n/**\n * Fired after {@link #initPlugins plugins are initialized}.\n *\n * @event pluginsReady\n */\n\n/**\n * Fired when the data loaded to the editor is ready. If a specific editor doesn't load\n * any data initially, this event will be fired right before {@link #event:ready}.\n *\n * @event dataReady\n */\n\n/**\n * Fired when {@link #event:pluginsReady plugins}, and {@link #event:dataReady data} and all additional\n * editor components are ready.\n *\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\n * you cannot even add a listener to the `editor#ready` event.\n *\n * @event ready\n */\n\n/**\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\n * perform the clean-up in any plugin.\n *\n * @event destroy\n */\n\n/**\n * Additional data built into the editor class. It's used while bundling the editor in order to provide\n * the default set of plugins and config options which are later used during editor initialization.\n *\n * Two properties are supported:\n *\n * * `plugins` – an array of plugin constructors. They will be automatically initialized by the editor, unless listed\n * in `config.removePlugins` or unless `config.plugins` is passed.\n * * `config` – the defalt config options.\n *\n * @static\n * @member {Object} module:core/editor/editor~Editor.build\n */\n","/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/editor/utils/dataapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n *\n * @mixin DataApiMixin\n * @implements module:core/editor/utils/dataapimixin~DataApi\n */\nconst DataApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tsetData( data ) {\n\t\tthis.data.set( data );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetData() {\n\t\treturn this.data.get();\n\t}\n};\n\nexport default DataApiMixin;\n\n/**\n * Mixin provides methods for setting and getting data to/from editor main root element of the model tree\n * using {@link module:core/editor/editor~Editor#data data pipeline}.\n *\n * @interface DataApi\n */\n\n/**\n * Sets the data in the editor's main root.\n *\n * @method #setData\n * @param {String} data Input data.\n */\n\n/**\n * Gets the data from the editor's main root.\n *\n * @method #getData\n * @returns {String} Output data.\n */\n","/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\n\n/**\n * @module core/editor/utils/elementapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n *\n * @mixin ElementApiMixin\n * @implements module:core/editor/utils/elementapimixin~ElementApi\n */\nconst ElementApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tupdateElement() {\n\t\tsetDataInElement( this.element, this.data.get() );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tloadDataFromElement() {\n\t\tthis.data.set( getDataFromElement( this.element ) );\n\t}\n};\n\nexport default ElementApiMixin;\n\n/**\n * Mixin provides method for setting and getting data from/to element on which editor has been initialized.\n *\n * @interface ElementApi\n */\n\n/**\n * The element on which the editor has been initialized.\n *\n * @readonly\n * @member {HTMLElement} #element\n */\n\n/**\n * Updates the {@link #element editor element}'s content with the data.\n *\n * @method #updateElement\n */\n\n/**\n * Loads the data from the {@link #element editor element} to the main root.\n *\n * @method #loadDataFromElement\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/setdatainelement\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * Sets data in a given element.\n *\n * @param {HTMLElement} el The element in which the data will be set.\n * @param {String} data The data string.\n */\nexport default function setDataInElement( el, data ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\tel.value = data;\n\t}\n\n\tel.innerHTML = data;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * @module utils/dom/getdatafromelement\n */\n\n/**\n * Gets data from a given source element.\n *\n * @param {HTMLElement} el The element from which the data will be retrieved.\n * @returns {String} The data string.\n */\nexport default function getDataFromElement( el ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\treturn el.value;\n\t}\n\n\treturn el.innerHTML;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/dataprocessor/basichtmlwriter\n */\n\n/* globals document */\n\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n *\n * @implements module:engine/dataprocessor/htmlwriter~HtmlWriter\n */\nexport default class BasicHtmlWriter {\n\t/**\n\t * Returns an HTML string created from the document fragment.\n\t *\n\t * @param {DocumentFragment} fragment\n\t * @returns {String}\n\t */\n\tgetHtml( fragment ) {\n\t\tconst doc = document.implementation.createHTMLDocument( '' );\n\t\tconst container = doc.createElement( 'div' );\n\t\tcontainer.appendChild( fragment );\n\n\t\treturn container.innerHTML;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\nimport { NBSP_FILLER } from '../view/filler';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member\n\t\t */\n\t\tthis._domConverter = new DomConverter( { blockFiller: NBSP_FILLER } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/componentfactory\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n\t/**\n\t * Creates an instance of the factory.\n\t *\n\t * @constructor\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance that the factory belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * Registered component factories.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._components = new Map();\n\t}\n\n\t/**\n\t * Returns an iterator of registered component names. Names are returned in lower case.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tyield* this._components.keys();\n\t}\n\n\t/**\n\t * Registers a component factory function that will be used by the\n\t * {@link #create create} method and called with the\n\t * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n\t * allowing localization of the {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @param {Function} callback The callback that returns the component.\n\t */\n\tadd( name, callback ) {\n\t\tif ( this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The item already exists in the component factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-exists\n\t\t\t * @param {String} name The name of the component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-exists: The item already exists in the component factory.', { name }\n\t\t\t);\n\t\t}\n\n\t\tthis._components.set( getNormalized( name ), callback );\n\t}\n\n\t/**\n\t * Creates an instance of a component registered in the factory under a specific name.\n\t *\n\t * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n\t * the previously {@link #add added} factory function, allowing localization of the\n\t * {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {module:ui/view~View} The instantiated component view.\n\t */\n\tcreate( name ) {\n\t\tif ( !this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The required component is not registered in the component factory. Please make sure\n\t\t\t * the provided name is correct and the component has been correctly\n\t\t\t * {@link #add added} to the factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-missing\n\t\t\t * @param {String} name The name of the missing component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-missing: The required component is not registered in the factory.', { name }\n\t\t\t);\n\t\t}\n\n\t\treturn this._components.get( getNormalized( name ) )( this.editor.locale );\n\t}\n\n\t/**\n\t * Checks if a component of a given name is registered in the factory.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\treturn this._components.has( getNormalized( name ) );\n\t}\n}\n\n//\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\nfunction getNormalized( name ) {\n\treturn String( name ).toLowerCase();\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* global setTimeout, clearTimeout */\n\n/**\n * @module utils/focustracker\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport ObservableMixin from './observablemixin';\nimport CKEditorError from './ckeditorerror';\nimport mix from './mix';\n\n/**\n * Allows observing a group of `HTMLElement`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `HTMLElement`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FocusTracker {\n\tconstructor() {\n\t\t/**\n\t\t * True when one of the registered elements is focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * Currently focused element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis.focusedElement = null;\n\n\t\t/**\n\t\t * List of registered elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<HTMLElement>}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Event loop timeout.\n\t\t *\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._nextEventLoopTimeout = null;\n\t}\n\n\t/**\n\t * Starts tracking the specified element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tadd( element ) {\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthrow new CKEditorError( 'focusTracker-add-element-already-exist' );\n\t\t}\n\n\t\tthis.listenTo( element, 'focus', () => this._focus( element ), { useCapture: true } );\n\t\tthis.listenTo( element, 'blur', () => this._blur(), { useCapture: true } );\n\t\tthis._elements.add( element );\n\t}\n\n\t/**\n\t * Stops tracking the specified element and stops listening on this element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tremove( element ) {\n\t\tif ( element === this.focusedElement ) {\n\t\t\tthis._blur( element );\n\t\t}\n\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthis.stopListening( element );\n\t\t\tthis._elements.delete( element );\n\t\t}\n\t}\n\n\t/**\n\t * Stores currently focused element and set {#isFocused} as `true`.\n\t *\n\t * @private\n\t * @param {HTMLElement} element Element which has been focused.\n\t */\n\t_focus( element ) {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis.focusedElement = element;\n\t\tthis.isFocused = true;\n\t}\n\n\t/**\n\t * Clears currently focused element and set {@link #isFocused} as `false`.\n\t * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n\t *\n\t * @private\n\t * @fires blur\n\t */\n\t_blur() {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis._nextEventLoopTimeout = setTimeout( () => {\n\t\t\tthis.focusedElement = null;\n\t\t\tthis.isFocused = false;\n\t\t}, 0 );\n\t}\n\n\t/**\n\t * @event focus\n\t */\n\n\t/**\n\t * @event blur\n\t */\n}\n\nmix( FocusTracker, DomEmitterMixin );\nmix( FocusTracker, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module editor-classic/classiceditorui\n */\n\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport enableToolbarKeyboardFocus from '@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus';\nimport normalizeToolbarConfig from '@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig';\n\n/**\n * The classic editor UI class.\n *\n * @implements module:core/editor/editorui~EditorUI\n */\nexport default class ClassicEditorUI {\n\t/**\n\t * Creates an instance of the editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t */\n\tconstructor( editor, view ) {\n\t\t/**\n\t\t * @inheritDoc\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t */\n\t\tthis.componentFactory = new ComponentFactory( editor );\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * A normalized `config.toolbar` object.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._toolbarConfig = normalizeToolbarConfig( editor.config.get( 'toolbar' ) );\n\t}\n\n\t/**\n\t * Initializes the UI.\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\n\t\tview.render();\n\n\t\t// Set–up the sticky panel with toolbar.\n\t\tview.stickyPanel.bind( 'isActive' ).to( this.focusTracker, 'isFocused' );\n\t\tview.stickyPanel.limiterElement = view.element;\n\n\t\tif ( this._toolbarConfig.viewportTopOffset ) {\n\t\t\tview.stickyPanel.viewportTopOffset = this._toolbarConfig.viewportTopOffset;\n\t\t}\n\n\t\t// Setup the editable.\n\t\tconst editingRoot = editor.editing.view.document.getRoot();\n\t\tview.editable.bind( 'isReadOnly' ).to( editingRoot );\n\t\tview.editable.bind( 'isFocused' ).to( editor.editing.view.document );\n\t\tview.editable.name = editingRoot.rootName;\n\n\t\tthis.focusTracker.add( this.view.editableElement );\n\n\t\tthis.view.toolbar.fillFromConfig( this._toolbarConfig.items, this.componentFactory );\n\n\t\tenableToolbarKeyboardFocus( {\n\t\t\torigin: editor.editing.view,\n\t\t\toriginFocusTracker: this.focusTracker,\n\t\t\toriginKeystrokeHandler: editor.keystrokes,\n\t\t\ttoolbar: this.view.toolbar\n\t\t} );\n\t}\n\n\t/**\n\t * Destroys the UI.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * \t\ttoolbar: [ 'headings', 'bold', 'italic', 'link', ... ]\n *\n * * or an `Object`:\n *\n *\t\ttoolbar: {\n *\t\t\titems: [ 'headings', 'bold', 'italic', 'link', ... ],\n *\t\t\t...\n *\t\t}\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param {Array|Object|undefined} config The value of `config.toolbar`.\n * @returns {Object} A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig( config ) {\n\tif ( Array.isArray( config ) ) {\n\t\treturn {\n\t\t\titems: config\n\t\t};\n\t}\n\n\tif ( !config ) {\n\t\treturn {\n\t\t\titems: []\n\t\t};\n\t}\n\n\treturn Object.assign( {\n\t\titems: []\n\t}, config );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/enabletoolbarkeyboardfocus\n */\n\n/**\n * Enables focus/blur toolbar navigation using `Alt+F10` and `Esc` keystrokes.\n *\n * @param {Object} options Options of the utility.\n * @param {*} options.origin A view to which the focus will return when `Esc` is pressed and\n * `options.toolbar` is focused.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.originKeystrokeHandler A keystroke\n * handler to register `Alt+F10` keystroke.\n * @param {module:utils/focustracker~FocusTracker} options.originFocusTracker A focus tracker\n * for `options.origin`.\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar A toolbar which is to gain\n * focus when `Alt+F10` is pressed.\n * @param {Function} [options.beforeFocus] A callback executed before the `options.toolbar` gains focus\n * upon the `Alt+F10` keystroke.\n * @param {Function} [options.afterBlur] A callback executed after `options.toolbar` loses focus upon\n * `Esc` keystroke but before the focus goes back to `options.origin`.\n */\nexport default function enableToolbarKeyboardFocus( {\n\torigin,\n\toriginKeystrokeHandler,\n\toriginFocusTracker,\n\ttoolbar,\n\tbeforeFocus,\n\tafterBlur\n} ) {\n\t// Because toolbar items can get focus, the overall state of the toolbar must\n\t// also be tracked.\n\toriginFocusTracker.add( toolbar.element );\n\n\t// Focus the toolbar on the keystroke, if not already focused.\n\toriginKeystrokeHandler.set( 'Alt+F10', ( data, cancel ) => {\n\t\tif ( originFocusTracker.isFocused && !toolbar.focusTracker.isFocused ) {\n\t\t\tif ( beforeFocus ) {\n\t\t\t\tbeforeFocus();\n\t\t\t}\n\n\t\t\ttoolbar.focus();\n\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// Blur the toolbar and bring the focus back to origin.\n\ttoolbar.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\tif ( toolbar.focusTracker.isFocused ) {\n\t\t\torigin.focus();\n\n\t\t\tif ( afterBlur ) {\n\t\t\t\tafterBlur();\n\t\t\t}\n\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/viewcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ViewCollection extends Collection {\n\t/**\n\t * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( {\n\t\t\t// An #id Number attribute should be legal and not break the `ViewCollection` instance.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/93\n\t\t\tidProperty: 'viewUid'\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\t\tthis.on( 'add', ( evt, view, index ) => {\n\t\t\tif ( !view.isRendered ) {\n\t\t\t\tview.render();\n\t\t\t}\n\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tthis._parentElement.insertBefore( view.element, this._parentElement.children[ index ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tview.element.remove();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\n\t\t * See the view {@link module:ui/view~View#locale locale} property.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * A parent element within which child views are rendered and managed in DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis._parentElement = null;\n\t}\n\n\t/**\n\t * Destroys the view collection along with child views.\n\t * See the view {@link module:ui/view~View#destroy} method.\n\t */\n\tdestroy() {\n\t\tthis.map( view => view.destroy() );\n\t}\n\n\t/**\n\t * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n\t * {@link #remove removing} views in the collection synchronizes their\n\t * {@link module:ui/view~View#element elements} in the parent element.\n\t *\n\t * @param {HTMLElement} element A new parent element.\n\t */\n\tsetParent( elementOrDocFragment ) {\n\t\tthis._parentElement = elementOrDocFragment;\n\t}\n\n\t/**\n\t * Delegates selected events coming from within views in the collection to any\n\t * {@link module:utils/emittermixin~Emitter}.\n\t *\n\t * For the following views and collection:\n\t *\n\t *\t\tconst viewA = new View();\n\t *\t\tconst viewB = new View();\n\t *\t\tconst viewC = new View();\n\t *\n\t *\t\tconst views = parentView.createCollection();\n\t *\n\t *\t\tviews.delegate( 'eventX' ).to( viewB );\n\t *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n\t *\n\t *\t\tviews.add( viewA );\n\t *\n\t * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventX', customData );\n\t *\n\t * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventY', customData );\n\t *\n\t * See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t *\n\t * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n\t * {@link module:utils/emittermixin~Emitter}.\n\t * @returns {Object}\n\t * @returns {Function} return.to A function which accepts the destination of\n\t * {@link module:utils/emittermixin~EmitterMixin#delegate delegated} events.\n\t */\n\tdelegate( ...events ) {\n\t\tif ( !events.length || !isStringArray( events ) ) {\n\t\t\t/**\n\t\t\t * All event names must be strings.\n\t\t\t *\n\t\t\t * @error ui-viewcollection-delegate-wrong-events\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'ui-viewcollection-delegate-wrong-events: All event names must be strings.' );\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n\t\t\t *\n\t\t\t * @memberOf module:ui/viewcollection~ViewCollection#delegate\n\t\t\t * @function module:ui/viewcollection~ViewCollection#delegate.to\n\t\t\t * @param {module:utils/emittermixin~EmitterMixin} dest An `EmitterMixin` instance which is\n\t\t\t * the destination for delegated events.\n\t\t\t */\n\t\t\tto: dest => {\n\t\t\t\t// Activate delegating on existing views in this collection.\n\t\t\t\tfor ( const view of this ) {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activate delegating on future views in this collection.\n\t\t\t\tthis.on( 'add', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\t// Deactivate delegating when view is removed from this collection.\n\t\t\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.stopDelegating( evtName, dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Removes a child view from the collection. If the {@link #setParent parent element} of the\n\t * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n\t * in DOM, reflecting the order of the collection.\n\t *\n\t * See the {@link #add} method.\n\t *\n\t * @method #remove\n\t * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n\t * @returns {Object} The removed view.\n\t */\n}\n\nmix( Collection, ObservableMixin );\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n","import baseClone from './_baseClone';\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  return baseClone(value, true, true, customizer);\n}\n\nexport default cloneDeepWith;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport cloneDeepWith from '@ckeditor/ckeditor5-utils/src/lib/lodash/cloneDeepWith';\nimport isObject from '@ckeditor/ckeditor5-utils/src/lib/lodash/isObject';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t}\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Template {\n\t/**\n\t * Creates an instance of the {@link ~Template} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, normalize( clone( def ) ) );\n\n\t\t/**\n\t\t * Indicates whether this particular Template instance has been\n\t\t * {@link #render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isRendered = false;\n\n\t\t/**\n\t\t * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n\t\t * renders to an HTML element.\n\t\t *\n\t\t * @member {String} #tag\n\t\t */\n\n\t\t/**\n\t\t * The text of the template. It also indicates that the template renders to a DOM text node.\n\t\t *\n\t\t * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n\t\t */\n\n\t\t/**\n\t\t * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n\t\t * the attributes of an HTML element.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Object} #attributes\n\t\t */\n\n\t\t/**\n\t\t * The children of the template. They can be either:\n\t\t * * independent instances of {@link ~Template} (sub–templates),\n\t\t * * native DOM Nodes.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Array.<module:ui/template~Template|Node>} #children\n\t\t */\n\n\t\t/**\n\t\t * The DOM event listeners of the template.\n\t\t *\n\t\t * @member {Object} #eventListeners\n\t\t */\n\n\t\t/**\n\t\t * The data used by the {@link #revert} method to restore a node to its original state.\n\t\t *\n\t\t * See: {@link #apply}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/template~RenderData}\n\t\t */\n\t\tthis._revertData = null;\n\t}\n\n\t/**\n\t * Renders a DOM Node (an HTML element or text) out of the template.\n\t *\n\t *\t\tconst domNode = new Template( { ... } ).render();\n\t *\n\t * See: {@link #apply}.\n\t *\n\t * @returns {HTMLElement|Text}\n\t */\n\trender() {\n\t\tconst node = this._renderNode( {\n\t\t\tintoFragment: true\n\t\t} );\n\n\t\tthis._isRendered = true;\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Applies the template to an existing DOM Node, either HTML element or text.\n\t *\n\t * **Note:** No new DOM nodes will be created. Applying extends\n\t * {@link module:ui/template~TemplateDefinition attributes} and\n\t * {@link module:ui/template~TemplateDefinition event listeners} only.\n\t *\n\t * **Note:** Existing `class` and `style` attributes are extended when a template\n\t * is applied to an HTML element, while other attributes and `textContent` are overridden.\n\t *\n\t * **Note:** The process of applying a template can be easily reverted using the\n\t * {@link module:ui/template~Template#revert} method.\n\t *\n\t *\t\tconst element = document.createElement( 'div' );\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattrs: {\n\t *\t\t\t\tid: 'first-div',\n\t *\t\t\t\tclass: bind.to( 'divClass' )\n\t *\t\t\t},\n\t *\t\t\ton: {\n\t *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n\t *\t\t\t}\n\t *\t\t\tchildren: [\n\t *\t\t\t\t'Div text.'\n\t *\t\t\t]\n\t *\t\t} ).apply( element );\n\t *\n\t *\t\telement.outerHTML == \"<div id=\"first-div\" class=\"my-div\">Div text.</div>\"\n\t *\n\t * @see module:ui/template~Template#render\n\t * @see module:ui/template~Template#revert\n\t * @param {Node} node Root node for the template to apply.\n\t */\n\tapply( node ) {\n\t\tthis._revertData = getEmptyRevertData();\n\n\t\tthis._renderNode( {\n\t\t\tnode,\n\t\t\tisApplying: true,\n\t\t\trevertData: this._revertData\n\t\t} );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n\t *\n\t * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n\t * same node used by {@link module:ui/template~Template#apply}.\n\t */\n\trevert( node ) {\n\t\tif ( !this._revertData ) {\n\t\t\t/**\n\t\t\t * Attempting to revert a template which has not been applied yet.\n\t\t\t *\n\t\t\t * @error ui-template-revert-not-applied\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.' );\n\t\t}\n\n\t\tthis._revertTemplateFromNode( node, this._revertData );\n\t}\n\n\t/**\n\t * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n\t * instances and returns them one by one.\n\t *\n\t *\t\tconst viewFoo = new View();\n\t *\t\tconst viewBar = new View();\n\t *\t\tconst viewBaz = new View();\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'div',\n\t *\t\t\tchildren: [\n\t *\t\t\t\tviewFoo,\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'div',\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\tviewBar\n\t *\t\t\t\t\t]\n\t *\t\t\t\t},\n\t *\t\t\t\tviewBaz\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Logs: viewFoo, viewBar, viewBaz\n\t *\t\tfor ( const view of template.getViews() ) {\n\t *\t\t\tconsole.log( view );\n\t *\t\t}\n\t *\n\t * @returns {Iterable.<module:ui/view~View>}\n\t */\n\t* getViews() {\n\t\tfunction* search( def ) {\n\t\t\tif ( def.children ) {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isView( child ) ) {\n\t\t\t\t\t\tyield child;\n\t\t\t\t\t} else if ( isTemplate( child ) ) {\n\t\t\t\t\t\tyield* search( child );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tyield* search( this );\n\t}\n\n\t/**\n\t * An entry point to the interface which binds DOM nodes to\n\t * {@link module:utils/observablemixin~Observable observables}.\n\t * There are two types of bindings:\n\t *\n\t * * HTML element attributes or text `textContent` synchronized with attributes of an\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n\t * and {@link module:ui/template~BindChain#if}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattrs: {\n\t *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n\t *\t\t\t\tclass: bind.to( 'classAttribute' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * * DOM events fired on HTML element propagated through\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\ton: {\n\t *\t\t\t\t// Will be fired by the observable.\n\t *\t\t\t\tclick: bind( 'elementClicked' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * Also see {@link module:ui/view~View#bindTemplate}.\n\t *\n\t * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n\t * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n\t * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n\t * @returns {module:ui/template~BindChain}\n\t */\n\tstatic bind( observable, emitter ) {\n\t\treturn {\n\t\t\tto( eventNameOrFunctionOrAttribute, callback ) {\n\t\t\t\treturn new TemplateToBinding( {\n\t\t\t\t\teventNameOrFunction: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tattribute: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tobservable, emitter, callback\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\tif( attribute, valueIfTrue, callback ) {\n\t\t\t\treturn new TemplateIfBinding( {\n\t\t\t\t\tobservable, emitter, attribute, valueIfTrue, callback\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Extends an existing {@link module:ui/template~Template} instance with some additional content\n\t * from another {@link module:ui/template~TemplateDefinition}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'p',\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'a',\n\t *\t\t\t\tdata-x: bind.to( 'foo' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'span',\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'b'\n\t *\t\t\t\t\t},\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\t'Span'\n\t *\t\t\t\t\t]\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t } );\n\t *\n\t *\t\t// Instance-level extension.\n\t *\t\tTemplate.extend( template, {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'b',\n\t *\t\t\t\tdata-x: bind.to( 'bar' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'c'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Child extension.\n\t *\t\tTemplate.extend( template.children[ 0 ], {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'd'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * the `outerHTML` of `template.render()` is:\n\t *\n\t *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n\t *\t\t\t<span class=\"b c d\">Span</span>\n\t *\t\t</p>\n\t *\n\t * @param {module:ui/template~Template} template An existing template instance to be extended.\n\t * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n\t */\n\tstatic extend( template, def ) {\n\t\tif ( template._isRendered ) {\n\t\t\t/**\n\t\t\t * Extending a template after rendering may not work as expected. To make sure\n\t\t\t * the {@link module:ui/template~Template.extend extending} works for an element,\n\t\t\t * make sure it happens before {@link #render} is called.\n\t\t\t *\n\t\t\t * @error template-extend-render\n\t\t\t */\n\t\t\tlog.warn( 'template-extend-render: Attempting to extend a template which has already been rendered.' );\n\t\t}\n\n\t\textendTemplate( template, normalize( clone( def ) ) );\n\t}\n\n\t/**\n\t * Renders a DOM Node (either an HTML element or text) out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderNode( data ) {\n\t\tlet isInvalid;\n\n\t\tif ( data.node ) {\n\t\t\t// When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n\t\t\tisInvalid = this.tag && this.text;\n\t\t} else {\n\t\t\t// When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n\t\t\tisInvalid = this.tag ? this.text : !this.text;\n\t\t}\n\n\t\tif ( isInvalid ) {\n\t\t\t/**\n\t\t\t * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n\t\t\t * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n\t\t\t *\n\t\t\t * @error ui-template-wrong-syntax\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-wrong-syntax: Node definition must have either \"tag\" or \"text\" when rendering a new Node.'\n\t\t\t);\n\t\t}\n\n\t\tif ( this.text ) {\n\t\t\treturn this._renderText( data );\n\t\t} else {\n\t\t\treturn this._renderElement( data );\n\t\t}\n\t}\n\n\t/**\n\t * Renders an HTML element out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElement( data ) {\n\t\tlet node = data.node;\n\n\t\tif ( !node ) {\n\t\t\tnode = data.node = document.createElementNS( this.ns || xhtmlNs, this.tag );\n\t\t}\n\n\t\tthis._renderAttributes( data );\n\t\tthis._renderElementChildren( data );\n\t\tthis._setUpListeners( data );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders a text node out of {@link module:ui/template~Template#text}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderText( data ) {\n\t\tlet node = data.node;\n\n\t\t// Save the original textContent to revert it in #revert().\n\t\tif ( node ) {\n\t\t\tdata.revertData.text = node.textContent;\n\t\t} else {\n\t\t\tnode = data.node = document.createTextNode( '' );\n\t\t}\n\n\t\t// Check if this Text Node is bound to Observable. Cases:\n\t\t//\n\t\t//\t\ttext: [ Template.bind( ... ).to( ... ) ]\n\t\t//\n\t\t//\t\ttext: [\n\t\t//\t\t\t'foo',\n\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t//\t\t\t...\n\t\t//\t\t]\n\t\t//\n\t\tif ( hasTemplateBinding( this.text ) ) {\n\t\t\tthis._bindToObservable( {\n\t\t\t\tschema: this.text,\n\t\t\t\tupdater: getTextUpdater( node ),\n\t\t\t\tdata\n\t\t\t} );\n\t\t}\n\t\t// Simply set text. Cases:\n\t\t//\n\t\t//\t\ttext: [ 'all', 'are', 'static' ]\n\t\t//\n\t\t//\t\ttext: [ 'foo' ]\n\t\t//\n\t\telse {\n\t\t\tnode.textContent = this.text.join( '' );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderAttributes( data ) {\n\t\tlet attrName, attrValue, domAttrValue, attrNs;\n\n\t\tif ( !this.attributes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = data.node;\n\t\tconst revertData = data.revertData;\n\n\t\tfor ( attrName in this.attributes ) {\n\t\t\t// Current attribute value in DOM.\n\t\t\tdomAttrValue = node.getAttribute( attrName );\n\n\t\t\t// The value to be set.\n\t\t\tattrValue = this.attributes[ attrName ];\n\n\t\t\t// Save revert data.\n\t\t\tif ( revertData ) {\n\t\t\t\trevertData.attributes[ attrName ] = domAttrValue;\n\t\t\t}\n\n\t\t\t// Detect custom namespace:\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tattrNs = ( isObject( attrValue[ 0 ] ) && attrValue[ 0 ].ns ) ? attrValue[ 0 ].ns : null;\n\n\t\t\t// Activate binding if one is found. Cases:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'bar',\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t\t//\t\t\t'baz'\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( attrValue ) ) {\n\t\t\t\t// Normalize attributes with additional data like namespace:\n\t\t\t\t//\n\t\t\t\t//\t\tclass: {\n\t\t\t\t//\t\t\tns: 'abc',\n\t\t\t\t//\t\t\tvalue: [ ... ]\n\t\t\t\t//\t\t}\n\t\t\t\t//\n\t\t\t\tconst valueToBind = attrNs ? attrValue[ 0 ].value : attrValue;\n\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && shouldExtend( attrName ) ) {\n\t\t\t\t\tvalueToBind.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: valueToBind,\n\t\t\t\t\tupdater: getAttributeUpdater( node, attrName, attrNs ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Style attribute could be an Object so it needs to be parsed in a specific way.\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\twidth: '100px',\n\t\t\t//\t\t\theight: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse if ( attrName == 'style' && typeof attrValue[ 0 ] !== 'string' ) {\n\t\t\t\tthis._renderStyleAttribute( attrValue[ 0 ], data );\n\t\t\t}\n\n\t\t\t// Otherwise simply set the static attribute:\n\t\t\t//\n\t\t\t//\t\tclass: [ 'foo' ]\n\t\t\t//\n\t\t\t//\t\tclass: [ 'all', 'are', 'static' ]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t{\n\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t//\t\t\t\tvalue: [ 'foo' ]\n\t\t\t//\t\t\t}\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\telse {\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && domAttrValue && shouldExtend( attrName ) ) {\n\t\t\t\t\tattrValue.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tattrValue = attrValue\n\t\t\t\t\t// Retrieve \"values\" from:\n\t\t\t\t\t//\n\t\t\t\t\t//\t\tclass: [\n\t\t\t\t\t//\t\t\t{\n\t\t\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t\t\t//\t\t\t\tvalue: [ ... ]\n\t\t\t\t\t//\t\t\t}\n\t\t\t\t\t//\t\t]\n\t\t\t\t\t//\n\t\t\t\t\t.map( val => val ? ( val.value || val ) : val )\n\t\t\t\t\t// Flatten the array.\n\t\t\t\t\t.reduce( ( prev, next ) => prev.concat( next ), [] )\n\t\t\t\t\t// Convert into string.\n\t\t\t\t\t.reduce( arrayValueReducer, '' );\n\n\t\t\t\tif ( !isFalsy( attrValue ) ) {\n\t\t\t\t\tnode.setAttributeNS( attrNs, attrName, attrValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders the `style` attribute of an HTML element based on\n\t * {@link module:ui/template~Template#attributes}.\n\t *\n\t * A style attribute is an {Object} with static values:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: 'red'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * or values bound to {@link module:ui/model~Model} properties:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: bind.to( ... )\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n\t * needed.\n\t *\n\t * @private\n\t * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderStyleAttribute( styles, data ) {\n\t\tconst node = data.node;\n\n\t\tfor ( const styleName in styles ) {\n\t\t\tconst styleValue = styles[ styleName ];\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: bind.to( 'attribute' )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( styleValue ) ) {\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: [ styleValue ],\n\t\t\t\t\tupdater: getStyleUpdater( node, styleName ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: 'red'\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse {\n\t\t\t\tnode.style[ styleName ] = styleValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElementChildren( data ) {\n\t\tconst node = data.node;\n\t\tconst container = data.intoFragment ? document.createDocumentFragment() : node;\n\t\tconst isApplying = data.isApplying;\n\t\tlet childIndex = 0;\n\n\t\tfor ( const child of this.children ) {\n\t\t\tif ( isViewCollection( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tchild.setParent( node );\n\n\t\t\t\t\t// Note: ViewCollection renders its children.\n\t\t\t\t\tfor ( const view of child ) {\n\t\t\t\t\t\tcontainer.appendChild( view.element );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isView( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tif ( !child.isRendered ) {\n\t\t\t\t\t\tchild.render();\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer.appendChild( child.element );\n\t\t\t\t}\n\t\t\t} else if ( isNode( child ) ) {\n\t\t\t\tcontainer.appendChild( child );\n\t\t\t} else {\n\t\t\t\tif ( isApplying ) {\n\t\t\t\t\tconst revertData = data.revertData;\n\t\t\t\t\tconst childRevertData = getEmptyRevertData();\n\n\t\t\t\t\trevertData.children.push( childRevertData );\n\n\t\t\t\t\tchild._renderNode( {\n\t\t\t\t\t\tnode: container.childNodes[ childIndex++ ],\n\t\t\t\t\t\tisApplying: true,\n\t\t\t\t\t\trevertData: childRevertData\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tcontainer.appendChild( child.render() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( data.intoFragment ) {\n\t\t\tnode.appendChild( container );\n\t\t}\n\t}\n\n\t/**\n\t * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n\t * on an HTML element.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_setUpListeners( data ) {\n\t\tif ( !this.eventListeners ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const key in this.eventListeners ) {\n\t\t\tconst revertBindings = this.eventListeners[ key ].map( schemaItem => {\n\t\t\t\tconst [ domEvtName, domSelector ] = key.split( '@' );\n\n\t\t\t\treturn schemaItem.activateDomEventListener( domEvtName, domSelector, data );\n\t\t\t} );\n\n\t\t\tif ( data.revertData ) {\n\t\t\t\tdata.revertData.bindings.push( revertBindings );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n\t * activates the binding and sets its initial value.\n\t *\n\t * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n\t * text node `textContent`.\n\t *\n\t * @protected\n\t * @param {Object} options Binding options.\n\t * @param {module:ui/template~TemplateValueSchema} options.schema\n\t * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n\t * @param {module:ui/template~RenderData} options.data Rendering data.\n\t */\n\t_bindToObservable( { schema, updater, data } ) {\n\t\tconst revertData = data.revertData;\n\n\t\t// Set initial values.\n\t\tsyncValueSchemaValue( schema, updater, data );\n\n\t\tconst revertBindings = schema\n\t\t\t// Filter \"falsy\" (false, undefined, null, '') value schema components out.\n\t\t\t.filter( item => !isFalsy( item ) )\n\t\t\t// Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n\t\t\t.filter( item => item.observable )\n\t\t\t// Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n\t\t\t// TODO: Reduce the number of listeners attached as many bindings may listen\n\t\t\t// to the same observable attribute.\n\t\t\t.map( templateBinding => templateBinding.activateAttributeListener( schema, updater, data ) );\n\n\t\tif ( revertData ) {\n\t\t\trevertData.bindings.push( revertBindings );\n\t\t}\n\t}\n\n\t/**\n\t * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n\t * return it to the original state.\n\t *\n\t * @protected\n\t * @param {HTMLElement|Text} node A node to be reverted.\n\t * @param {module:ui/template~RenderData#revertData} revertData Stores information about\n\t * what changes have been made by {@link #apply} to the node.\n\t */\n\t_revertTemplateFromNode( node, revertData ) {\n\t\tfor ( const binding of revertData.bindings ) {\n\t\t\t// Each binding may consist of several observable+observable#attribute.\n\t\t\t// like the following has 2:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'x',\n\t\t\t//\t\t\tbind.to( 'foo' ),\n\t\t\t//\t\t\t'y',\n\t\t\t//\t\t\tbind.to( 'bar' )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\tfor ( const revertBinding of binding ) {\n\t\t\t\trevertBinding();\n\t\t\t}\n\t\t}\n\n\t\tif ( revertData.text ) {\n\t\t\tnode.textContent = revertData.text;\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const attrName in revertData.attributes ) {\n\t\t\tconst attrValue = revertData.attributes[ attrName ];\n\n\t\t\t// When the attribute has **not** been set before #apply().\n\t\t\tif ( attrValue === null ) {\n\t\t\t\tnode.removeAttribute( attrName );\n\t\t\t} else {\n\t\t\t\tnode.setAttribute( attrName, attrValue );\n\t\t\t}\n\t\t}\n\n\t\tfor ( let i = 0; i < revertData.children.length; ++i ) {\n\t\t\tthis._revertTemplateFromNode( node.childNodes[ i ], revertData.children[ i ] );\n\t\t}\n\t}\n}\n\nmix( Template, EmitterMixin );\n\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\nexport class TemplateBinding {\n\t/**\n\t * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, def );\n\n\t\t/**\n\t\t * An observable instance of the binding. It either:\n\t\t *\n\t\t * * provides the attribute with the value,\n\t\t * * or passes the event when a corresponding DOM event is fired.\n\t\t *\n\t\t * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n\t\t */\n\n\t\t/**\n\t\t * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n\t\t *\n\t\t * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n\t\t * * or listen to the event in the DOM.\n\t\t *\n\t\t * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n\t\t */\n\n\t\t/**\n\t\t * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n\t\t *\n\t\t * @member {String} module:ui/template~TemplateBinding#attribute\n\t\t */\n\n\t\t/**\n\t\t * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n\t\t *\n\t\t * @member {Function} [module:ui/template~TemplateBinding#callback]\n\t\t */\n\t}\n\n\t/**\n\t * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n\t * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n\t *\n\t * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n\t * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}.\n\t */\n\tgetValue( node ) {\n\t\tconst value = this.observable[ this.attribute ];\n\n\t\treturn this.callback ? this.callback( value, node ) : value;\n\t}\n\n\t/**\n\t * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n\t * value of {@link module:ui/template~TemplateValueSchema}.\n\t *\n\t * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n\t * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateAttributeListener( schema, updater, data ) {\n\t\tconst callback = () => syncValueSchemaValue( schema, updater, data );\n\n\t\tthis.emitter.listenTo( this.observable, 'change:' + this.attribute, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( this.observable, 'change:' + this.attribute, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\nexport class TemplateToBinding extends TemplateBinding {\n\t/**\n\t * Activates the listener for the native DOM event, which when fired, is propagated by\n\t * the {@link module:ui/template~TemplateBinding#emitter}.\n\t *\n\t * @param {String} domEvtName The name of the native DOM event.\n\t * @param {String} domSelector The selector in the DOM to filter delegated events.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateDomEventListener( domEvtName, domSelector, data ) {\n\t\tconst callback = ( evt, domEvt ) => {\n\t\t\tif ( !domSelector || domEvt.target.matches( domSelector ) ) {\n\t\t\t\tif ( typeof this.eventNameOrFunction == 'function' ) {\n\t\t\t\t\tthis.eventNameOrFunction( domEvt );\n\t\t\t\t} else {\n\t\t\t\t\tthis.observable.fire( this.eventNameOrFunction, domEvt );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.emitter.listenTo( data.node, domEvtName, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( data.node, domEvtName, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\nexport class TemplateIfBinding extends TemplateBinding {\n\t/**\n\t * @inheritDoc\n\t */\n\tgetValue( node ) {\n\t\tconst value = super.getValue( node );\n\n\t\treturn isFalsy( value ) ? false : ( this.valueIfTrue || true );\n\t}\n\n\t/**\n\t * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable} is `true`.\n\t *\n\t * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n\t */\n}\n\n// Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\nfunction hasTemplateBinding( schema ) {\n\tif ( !schema ) {\n\t\treturn false;\n\t}\n\n\t// Normalize attributes with additional data like namespace:\n\t//\n\t//\t\tclass: {\n\t//\t\t\tns: 'abc',\n\t//\t\t\tvalue: [ ... ]\n\t//\t\t}\n\t//\n\tif ( schema.value ) {\n\t\tschema = schema.value;\n\t}\n\n\tif ( Array.isArray( schema ) ) {\n\t\treturn schema.some( hasTemplateBinding );\n\t} else if ( schema instanceof TemplateBinding ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @return {Array}\nfunction getValueSchemaValue( schema, node ) {\n\treturn schema.map( schemaItem => {\n\t\t// Process {@link module:ui/template~TemplateBinding} bindings.\n\t\tif ( schemaItem instanceof TemplateBinding ) {\n\t\t\treturn schemaItem.getValue( node );\n\t\t}\n\n\t\t// All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\t\treturn schemaItem;\n\t} );\n}\n\n// A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\nfunction syncValueSchemaValue( schema, updater, { node } ) {\n\tlet value = getValueSchemaValue( schema, node );\n\n\t// Check if schema is a single Template.bind.if, like:\n\t//\n\t//\t\tclass: Template.bind.if( 'foo' )\n\t//\n\tif ( schema.length == 1 && schema[ 0 ] instanceof TemplateIfBinding ) {\n\t\tvalue = value[ 0 ];\n\t} else {\n\t\tvalue = value.reduce( arrayValueReducer, '' );\n\t}\n\n\tif ( isFalsy( value ) ) {\n\t\tupdater.remove();\n\t} else {\n\t\tupdater.set( value );\n\t}\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\nfunction getTextUpdater( node ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tnode.textContent = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tnode.textContent = '';\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\nfunction getAttributeUpdater( el, attrName, ns ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.setAttributeNS( ns, attrName, value );\n\t\t},\n\n\t\tremove() {\n\t\t\tel.removeAttributeNS( ns, attrName );\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\nfunction getStyleUpdater( el, styleName ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.style[ styleName ] = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tel.style[ styleName ] = null;\n\t\t}\n\t};\n}\n\n// Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\nfunction clone( def ) {\n\tconst clone = cloneDeepWith( def, value => {\n\t\t// Don't clone the `Template.bind`* bindings because of the references to Observable\n\t\t// and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n\t\t// cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n\t\t// along with the definition.\n\t\t//\n\t\t// Don't clone Template instances if provided as a child. They're simply #render()ed\n\t\t// and nothing should interfere.\n\t\t//\n\t\t// Also don't clone View instances if provided as a child of the Template. The template\n\t\t// instance will be extracted from the View during the normalization and there's no need\n\t\t// to clone it.\n\t\tif ( value && ( value instanceof TemplateBinding || isTemplate( value ) || isView( value ) || isViewCollection( value ) ) ) {\n\t\t\treturn value;\n\t\t}\n\t} );\n\n\treturn clone;\n}\n\n// Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\nfunction normalize( def ) {\n\tif ( typeof def == 'string' ) {\n\t\tdef = normalizePlainTextDefinition( def );\n\t} else if ( def.text ) {\n\t\tnormalizeTextDefinition( def );\n\t}\n\n\tif ( def.on ) {\n\t\tdef.eventListeners = normalizeListeners( def.on );\n\n\t\t// Template mixes EmitterMixin, so delete #on to avoid collision.\n\t\tdelete def.on;\n\t}\n\n\tif ( !def.text ) {\n\t\tif ( def.attributes ) {\n\t\t\tnormalizeAttributes( def.attributes );\n\t\t}\n\n\t\tconst children = [];\n\n\t\tif ( def.children ) {\n\t\t\tif ( isViewCollection( def.children ) ) {\n\t\t\t\tchildren.push( def.children );\n\t\t\t} else {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isTemplate( child ) || isView( child ) || isNode( child ) ) {\n\t\t\t\t\t\tchildren.push( child );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchildren.push( new Template( child ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdef.children = children;\n\t}\n\n\treturn def;\n}\n\n// Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attrs\nfunction normalizeAttributes( attrs ) {\n\tfor ( const a in attrs ) {\n\t\tif ( attrs[ a ].value ) {\n\t\t\tattrs[ a ].value = [].concat( attrs[ a ].value );\n\t\t}\n\n\t\tarrayify( attrs, a );\n\t}\n}\n\n// Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\nfunction normalizeListeners( listeners ) {\n\tfor ( const l in listeners ) {\n\t\tarrayify( listeners, l );\n\t}\n\n\treturn listeners;\n}\n\n// Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\nfunction normalizePlainTextDefinition( def ) {\n\treturn {\n\t\ttext: [ def ]\n\t};\n}\n\n// Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\nfunction normalizeTextDefinition( def ) {\n\tif ( !Array.isArray( def.text ) ) {\n\t\tdef.text = [ def.text ];\n\t}\n}\n\n// Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\nfunction arrayify( obj, key ) {\n\tif ( !Array.isArray( obj[ key ] ) ) {\n\t\tobj[ key ] = [ obj[ key ] ];\n\t}\n}\n\n// A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\nfunction arrayValueReducer( prev, cur ) {\n\tif ( isFalsy( cur ) ) {\n\t\treturn prev;\n\t} else if ( isFalsy( prev ) ) {\n\t\treturn cur;\n\t} else {\n\t\treturn `${ prev } ${ cur }`;\n\t}\n}\n\n// Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\nfunction extendObjectValueArray( obj, ext ) {\n\tfor ( const a in ext ) {\n\t\tif ( obj[ a ] ) {\n\t\t\tobj[ a ].push( ...ext[ a ] );\n\t\t} else {\n\t\t\tobj[ a ] = ext[ a ];\n\t\t}\n\t}\n}\n\n// A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\nfunction extendTemplate( template, def ) {\n\tif ( def.attributes ) {\n\t\tif ( !template.attributes ) {\n\t\t\ttemplate.attributes = {};\n\t\t}\n\n\t\textendObjectValueArray( template.attributes, def.attributes );\n\t}\n\n\tif ( def.eventListeners ) {\n\t\tif ( !template.eventListeners ) {\n\t\t\ttemplate.eventListeners = {};\n\t\t}\n\n\t\textendObjectValueArray( template.eventListeners, def.eventListeners );\n\t}\n\n\tif ( def.text ) {\n\t\ttemplate.text.push( ...def.text );\n\t}\n\n\tif ( def.children && def.children.length ) {\n\t\tif ( template.children.length != def.children.length ) {\n\t\t\t/**\n\t\t\t * The number of children in extended definition does not match.\n\t\t\t *\n\t\t\t * @error ui-template-extend-children-mismatch\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-extend-children-mismatch: The number of children in extended definition does not match.'\n\t\t\t);\n\t\t}\n\n\t\tlet childIndex = 0;\n\n\t\tfor ( const childDef of def.children ) {\n\t\t\textendTemplate( template.children[ childIndex++ ], childDef );\n\t\t}\n\t}\n}\n\n// Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isFalsy( value ) {\n\treturn !value && value !== 0;\n}\n\n// Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isView( item ) {\n\treturn item instanceof View;\n}\n\n// Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isTemplate( item ) {\n\treturn item instanceof Template;\n}\n\n// Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isViewCollection( item ) {\n\treturn item instanceof ViewCollection;\n}\n\n// Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\nfunction getEmptyRevertData() {\n\treturn {\n\t\tchildren: [],\n\t\tbindings: [],\n\t\tattributes: {}\n\t};\n}\n\n// Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\nfunction shouldExtend( attrName ) {\n\treturn attrName == 'class' || attrName == 'style';\n}\n\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'static–text'\n *\t\t\t\t},\n *\t\t\t\t'also-static–text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @return {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @return {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/view\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\nimport '../theme/globals/globals.css';\n\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChildren aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n *\t\tclass SampleView extends View {\n *\t\t\tconstructor( locale ) {\n *\t\t\t\tsuper( locale );\n *\n *\t\t\t\tconst bind = this.bindTemplate;\n *\n *\t\t\t\t// Views define their interface (state) using observable attributes.\n *\t\t\t\tthis.set( 'elementClass', 'bar' );\n *\n *\t\t\t\tthis.setTemplate( {\n *\t\t\t\t\ttag: 'p',\n *\n *\t\t\t\t\t// The element of the view can be defined with its children.\n *\t\t\t\t\tchildren: [\n *\t\t\t\t\t\t'Hello',\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\ttag: 'b',\n *\t\t\t\t\t\t\tchildren: [ 'world!' ]\n *\t\t\t\t\t\t}\n *\t\t\t\t\t],\n *\t\t\t\t\tattributes: {\n *\t\t\t\t\t\tclass: [\n *\t\t\t\t\t\t\t'foo',\n *\n *\t\t\t\t\t\t\t// Observable attributes control the state of the view in DOM.\n *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n *\t\t\t\t\t\t]\n *\t\t\t\t\t},\n *\t\t\t\t\ton: {\n *\t\t\t\t\t\t// Views listen to DOM events and propagate them.\n *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t\t\t}\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst view = new SampleView( locale );\n *\n *\t\tview.render();\n *\n *\t\t// Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n *\t\tdocument.body.appendChild( view.element );\n *\n *\t\t// Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n *\t\tview.elementClass = 'baz';\n *\n *\t\t// Respond to the \"click\" event in DOM by executing a custom action.\n *\t\tview.on( 'clicked', () => {\n *\t\t\tconsole.log( 'The view has been clicked!' );\n *\t\t} );\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\t/**\n\t * Creates an instance of the {@link module:ui/view~View} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n\tconstructor( locale ) {\n\t\t/**\n\t\t * An HTML element of the view. `null` until {@link #render rendered}\n\t\t * from the {@link #template}.\n\t\t *\n\t\t *\t\tclass SampleView extends View {\n\t\t *\t\t\tconstructor() {\n\t\t *\t\t\t\tsuper();\n\t\t *\n\t\t *\t\t\t\t// A template instance the #element will be created from.\n\t\t *\t\t\t\tthis.setTemplate( {\n\t\t *\t\t\t\t\ttag: 'p'\n\t\t *\n\t\t *\t\t\t\t\t// ...\n\t\t *\t\t\t\t} );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\tconst view = new SampleView();\n\t\t *\n\t\t *\t\t// Renders the #template.\n\t\t *\t\tview.render();\n\t\t *\n\t\t *\t\t// Append the HTML element of the view to <body>.\n\t\t *\t\tdocument.body.appendChild( view.element );\n\t\t *\n\t\t * **Note**: The element of the view can also be assigned directly:\n\t\t *\n\t\t *\t\tview.element = document.querySelector( '#my-container' );\n\t\t *\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Set `true` when the view has already been {@link module:ui/view~View#render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRendered\n\t\t */\n\t\tthis.isRendered = false;\n\n\t\t/**\n\t\t * A set of tools to localize the user interface.\n\t\t *\n\t\t * Also see {@link module:core/editor/editor~Editor#locale}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * Note: If {@link #locale} instance hasn't been passed to the view this method may not\n\t\t * be available.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method\n\t\t */\n\t\tthis.t = locale && locale.t;\n\n\t\t/**\n\t\t * Collections registered with {@link #createCollection}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:ui/viewcollection~ViewCollection>}\n\t\t */\n\t\tthis._viewCollections = new Collection();\n\n\t\t/**\n\t\t * A collection of view instances, which have been added directly\n\t\t * into the {@link module:ui/template~Template#children}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._unboundChildren = this.createCollection();\n\n\t\t// Pass parent locale to its children.\n\t\tthis._viewCollections.on( 'add', ( evt, collection ) => {\n\t\t\tcollection.locale = locale;\n\t\t} );\n\n\t\t/**\n\t\t * Template of this view. It provides the {@link #element} representing\n\t\t * the view in DOM, which is {@link #render rendered}.\n\t\t *\n\t\t * @member {module:ui/template~Template} #template\n\t\t */\n\n\t\t/**\n\t\t * Cached {@link module:ui/template~BindChain bind chain} object created by the\n\t\t * {@link #template}. See {@link #bindTemplate}.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_bindTemplate\n\t\t */\n\n\t\tthis.decorate( 'render' );\n\t}\n\n\t/**\n\t * Shorthand for {@link module:ui/template~Template.bind}, a binding\n\t * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n\t *\n\t * It provides {@link module:ui/template~BindChain#to `to()`} and\n\t * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n\t * observable attributes and attach DOM listeners.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tconst bind = this.bindTemplate;\n\t *\n\t *\t\t\t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n\t *\t\t\t\t// the state of the view in DOM.\n\t *\t\t\t\tthis.set( {\n\t *\t\t\t\t\telementClass: 'foo',\n\t *\t\t\t\t \tisEnabled: true\n\t *\t\t\t\t } );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\t// The class HTML attribute will follow elementClass\n\t *\t\t\t\t\t\t// and isEnabled view attributes.\n\t *\t\t\t\t\t\tclass: [\n\t *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n\t *\t\t\t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n\t *\t\t\t\t\t\t]\n\t *\t\t\t\t\t},\n\t *\n\t *\t\t\t\t\ton: {\n\t *\t\t\t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n\t *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @method #bindTemplate\n\t */\n\tget bindTemplate() {\n\t\tif ( this._bindTemplate ) {\n\t\t\treturn this._bindTemplate;\n\t\t}\n\n\t\treturn ( this._bindTemplate = Template.bind( this, this ) );\n\t}\n\n\t/**\n\t * Creates a new collection of views, which can be used as\n\t * {@link module:ui/template~Template#children} of this view.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.items = this.createCollection();\n \t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\t// `items` collection will render here.\n\t *\t\t\t\t\tchildren: this.items\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\t\tconst child = new ChildView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// It will append <p></p> to the <body>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t *\t\t// From now on the child is nested under its parent, which is also reflected in DOM.\n\t *\t\t// <p><child#element></p>\n\t *\t\tview.items.add( child );\n\t *\n\t * @returns {module:ui/viewcollection~ViewCollection} A new collection of view instances.\n\t */\n\tcreateCollection() {\n\t\tconst collection = new ViewCollection();\n\n\t\tthis._viewCollections.add( collection );\n\n\t\treturn collection;\n\t}\n\n\t/**\n\t * Registers a new child view under the view instance. Once registered, a child\n\t * view is managed by its parent, including {@link #render rendering}\n\t * and {@link #destroy destruction}.\n\t *\n\t * To revert this, use {@link #deregisterChildren}.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( { tag: 'p' } );\n\t *\n\t *\t\t\t\t// Register the children.\n\t *\t\t\t\tthis.registerChildren( [ this.childA, this.childB ] );\n\t *\t\t\t}\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\tthis.element.appendChild( this.childA.element );\n\t *\t\t\t\tthis.element.appendChild( this.childB.element );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// Will append <p><childA#element><b></b><childB#element></p>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t * **Note**: There's no need to add child views if they're already referenced in the\n\t * {@link #template}:\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n \t *\t\t\t\t\t// These children will be added automatically. There's no\n \t *\t\t\t\t\t// need to call {@link #registerChildren} for any of them.\n\t *\t\t\t\t\tchildren: [ this.childA, this.childB ]\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Children views to be registered.\n\t */\n\tregisterChildren( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.add( child );\n\t\t}\n\t}\n\n\t/**\n\t * The opposite of {@link #registerChildren}. Removes a child view from this view instance.\n\t * Once removed, the child is no longer managed by its parent, e.g. it can safely\n\t * become a child of another parent view.\n\t *\n\t * @see #registerChildren\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Child views to be removed.\n\t */\n\tderegisterChildren( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.remove( child );\n\t\t}\n\t}\n\n\t/**\n\t * Sets the {@link #template} of the view with with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tview.setTemplate( definition );\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition of view's template.\n\t */\n\tsetTemplate( definition ) {\n\t\tthis.template = new Template( definition );\n\t}\n\n\t/**\n\t * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n\t * with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tTemplate.extend( view.template, definition );\n\t *\n\t * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition which\n\t * extends the {@link #template}.\n\t */\n\textendTemplate( definition ) {\n\t\tTemplate.extend( this.template, definition );\n\t}\n\n\t/**\n\t * Recursively renders the view.\n\t *\n\t * Once the view is rendered:\n\t * * the {@link #element} becomes an HTML element out of {@link #template},\n\t * * the {@link #isRendered} flag is set `true`.\n\t *\n\t * **Note**: The children of the view:\n\t * * defined directly in the {@link #template}\n\t * * residing in collections created by the {@link #createCollection} method,\n\t * * and added by {@link #registerChildren}\n\t * are also rendered in the process.\n\t *\n\t * In general, `render()` method is the right place to keep the code which refers to the\n\t * {@link #element} and should be executed at the very beginning of the view's life cycle.\n\t *\n\t * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n\t * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n\t * such references should be done in `render()`.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor() {\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\t// ...\n\t *\t\t\t\t} );\n\t *\t\t\t},\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\t// View#element becomes available.\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\t// The \"scroll\" listener depends on #element.\n\t *\t\t\t\tthis.listenTo( window, 'scroll', () => {\n\t *\t\t\t\t\t// A reference to #element would render the #template and make it non-extendable.\n\t *\t\t\t\t\tif ( window.scrollY > 0 ) {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 100;\n\t *\t\t\t\t\t} else {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 0;\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView();\n\t *\n\t *\t\t// Let's customize the view before it gets rendered.\n\t *\t\tview.extendTemplate( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: [\n\t *\t\t\t\t\t'additional-class'\n\t *\t\t\t\t]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Late rendering allows customization of the view.\n\t *\t\tview.render();\n\t */\n\trender() {\n\t\tif ( this.isRendered ) {\n\t\t\t/**\n\t\t\t * This View has already been rendered.\n\t\t\t *\n\t\t\t * @error ui-view-render-rendered\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'ui-view-render-already-rendered: This View has already been rendered.' );\n\t\t}\n\n\t\t// Render #element of the view.\n\t\tif ( this.template ) {\n\t\t\tthis.element = this.template.render();\n\n\t\t\t// Auto–register view children from #template.\n\t\t\tthis.registerChildren( this.template.getViews() );\n\t\t}\n\n\t\tthis.isRendered = true;\n\t}\n\n\t/**\n\t * Recursively destroys the view instance and child views added by {@link #registerChildren} and\n\t * residing in collections created by the {@link #createCollection}.\n\t *\n\t * Destruction disables all event listeners:\n\t * * created on the view, e.g. `view.on( 'event', () => {} )`,\n\t * * defined in the {@link #template} for DOM events.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis._viewCollections.map( c => c.destroy() );\n\t}\n\n\t/**\n\t * Event fired by the {@link #render} method. Actual rendering is executed as a listener to\n\t * this event with the default priority.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\n\t *\n\t * @event render\n\t */\n}\n\nmix( View, DomEmitterMixin );\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/editorui/editoruiview\n */\n\n/* globals document */\n\nimport View from '../view';\nimport Template from '../template';\n\nimport '../../theme/components/editorui/editorui.css';\n\n/**\n * The editor UI view class. Base class for the editor main views.\n *\n * @extends module:ui/view~View\n */\nexport default class EditorUIView extends View {\n\t/**\n\t * Creates an instance of the editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views, detached from the DOM\n\t\t * structure of the editor, like panels, icons etc.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection} #body\n\t\t */\n\t\tthis.body = this.createCollection();\n\n\t\t/**\n\t\t * The element holding elements of the 'body' region.\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_bodyCollectionContainer\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._renderBodyCollection();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._bodyCollectionContainer.remove();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates and appends to `<body>` the {@link #body} collection container.\n\t *\n\t * @private\n\t */\n\t_renderBodyCollection() {\n\t\tconst bodyElement = this._bodyCollectionContainer = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-body',\n\t\t\t\t\t'ck-rounded-corners',\n\t\t\t\t\t'ck-reset_all'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.body\n\t\t} ).render();\n\n\t\tdocument.body.appendChild( bodyElement );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/label/labelview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/label/label.css';\n\n/**\n * The label view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text' );\n\n\t\t/**\n\t\t * The `for` attribute of the label (i.e. to pair with an `<input>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #for\n\t\t */\n\t\tthis.set( 'for' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'label',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-label'\n\t\t\t\t],\n\t\t\t\tfor: bind.to( 'for' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( 'text' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module ui/editorui/boxed/boxededitoruiview\n */\nimport EditorUIView from '../../editorui/editoruiview';\nimport LabelView from '../../label/labelview';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n/**\n * The boxed editor UI view class. This class represents an editor interface\n * consisting of a toolbar and an editable area, enclosed within a box.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\nexport default class BoxedEditorUIView extends EditorUIView {\n    /**\n\t * Creates an instance of the boxed editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance..\n\t */\n    constructor(locale) {\n        super(locale);\n        const ariaLabelUid = uid();\n        /**\n\t\t * Collection of the child views located in the top (`.ck-editor__top`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.top = this.createCollection();\n        /**\n\t\t * Collection of the child views located in the main (`.ck-editor__main`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.main = this.createCollection();\n        /**\n\t\t * Voice label of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #_voiceLabelView\n\t\t */\n        this._voiceLabelView = this._createVoiceLabel(ariaLabelUid);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-reset',\n                    'ck-editor',\n                    'ck-rounded-corners'\n                ],\n                role: 'application',\n                dir: 'ltr',\n                lang: locale.language,\n                'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`\n            },\n            children: [\n                this._voiceLabelView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: 'ck-editor__top ck-reset_all',\n                        role: 'presentation'\n                    },\n                    children: this.top\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: 'ck-editor__main',\n                        role: 'presentation'\n                    },\n                    children: this.main\n                }\n            ]\n        });\n    }\n    /**\n\t * Creates a voice label view instance.\n\t *\n\t * @private\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n    _createVoiceLabel(ariaLabelUid) {\n        const t = this.t;\n        const voiceLabel = new LabelView();\n        voiceLabel.text = t('ab');\n        voiceLabel.extendTemplate({\n            attributes: {\n                id: `ck-editor__aria-label_${ ariaLabelUid }`,\n                class: 'ck-voice-label'\n            }\n        });\n        return voiceLabel;\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\n\nimport View from '../view';\n\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\nexport default class EditableUIView extends View {\n\t/**\n\t * Creates an instance of EditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n\t * should create it. Otherwise, the existing element should be used.\n\t */\n\tconstructor( locale, editableElement ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tif ( editableElement ) {\n\t\t\tthis.element = this.editableElement = editableElement;\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\tbind.to( 'isFocused', value => value ? 'ck-focused' : 'ck-blurred' ),\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-editor__editable',\n\t\t\t\t\t'ck-content',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tcontenteditable: bind.to( 'isReadOnly', value => !value ),\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Controls whether the editable is writable or not.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Controls whether the editable is focused, i.e. the user is typing in it.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * An external {@link #editableElement} passed into the constructor, which also means\n\t\t * the view will not render its {@link #template}.\n\t\t *\n\t\t * @member {HTMLElement} #externalElement\n\t\t */\n\t\tthis.externalElement = editableElement;\n\n\t\t/**\n\t\t * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #editableElement\n\t\t */\n\t}\n\n\t/**\n\t * Renders the view by either applying the {@link #template} to the existing\n\t * {@link #editableElement} or assigning {@link #element} as {@link #editableElement}.\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.externalElement ) {\n\t\t\tthis.template.apply( this.element = this.externalElement );\n\t\t} else {\n\t\t\tthis.editableElement = this.element;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this.externalElement ) {\n\t\t\tthis.template.revert( this.externalElement );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../../editableui/editableuiview';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n *\n * @extends module:ui/editableui/editableuiview~EditableUIView\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n\t * Creates an instance of the InlineEditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}\n\t * should create it. Otherwise, the existing element should be used.\n\t */\n    constructor(locale, editableElement) {\n        super(locale, editableElement);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        /**\n\t\t * The name of the editable UI view.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #name\n\t\t */\n        this.set('name', null);\n        const getLabel = value => {\n            return t('ac', [value]);\n        };\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                'aria-label': bind.to('name', getLabel),\n                class: 'ck-editor__editable_inline'\n            }\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/tounit\n */\n\n/**\n * Returns a helper function, which adds a desired trailing\n * `unit` to the passed value.\n *\n * @param {String} unit An unit like \"px\" or \"em\".\n * @returns {module:utils/dom/tounit~helper}\n */\nexport default function toUnit( unit ) {\n\t/**\n\t * A function, which adds a pre–defined trailing `unit`\n\t * to the passed `value`.\n\t *\n\t * @function helper\n \t * @param {*} value A value to be given the unit.\n \t * @returns {String} A value with the trailing unit.\n\t */\n\treturn value => value + unit;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/sticky/stickypanelview\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport View from '../../view';\nimport Template from '../../template';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\n\nimport '../../../theme/components/panel/stickypanel.css';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The sticky panel view class.\n */\nexport default class StickyPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the sticky panel should be active.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isActive\n\t\t */\n\t\tthis.set( 'isActive', false );\n\n\t\t/**\n\t\t * Controls whether the sticky panel is in the \"sticky\" state.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isSticky\n\t\t */\n\t\tthis.set( 'isSticky', false );\n\n\t\t/**\n\t\t * The limiter element for the sticky panel instance. Its bounding rect limits\n\t\t * the \"stickyness\" of the panel, i.e. when the panel reaches the bottom\n\t\t * edge of the limiter, it becomes sticky to that edge and does not float\n\t\t * off the limiter. It is mandatory for the panel to work properly and once\n\t\t * set, it cannot be changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {HTMLElement} #limiterElement\n\t\t */\n\t\tthis.set( 'limiterElement', null );\n\n\t\t/**\n\t\t * The offset from the bottom edge of {@link #limiterElement}\n\t\t * which stops the panel from stickying any further to prevent limiter's content\n\t\t * from being completely covered.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 50\n\t\t * @member {Number} #limiterBottomOffset\n\t\t */\n\t\tthis.set( 'limiterBottomOffset', 50 );\n\n\t\t/**\n\t\t * The offset from the top edge of the web browser's viewport which makes the\n\t\t * panel become sticky. The default value is `0`, which means the panel becomes\n\t\t * sticky when it's upper edge touches the top of the page viewport.\n\t\t *\n\t\t * This attribute is useful when the web page has UI elements positioned to the top\n\t\t * either using `position: fixed` or `position: sticky`, which would cover the\n\t\t * sticky panel or vice–versa (depending on the `z-index` hierarchy).\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #viewportTopOffset\n\t\t */\n\t\tthis.set( 'viewportTopOffset', 0 );\n\n\t\t/**\n\t\t * Controls the `margin-left` CSS style of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #_marginLeft\n\t\t */\n\t\tthis.set( '_marginLeft', null );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel reached the bottom edge of the\n\t\t * {@link #limiterElement}.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_isStickyToTheLimiter\n\t\t */\n\t\tthis.set( '_isStickyToTheLimiter', false );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel uses the {@link #viewportTopOffset},\n\t\t * i.e. not {@link #_isStickyToTheLimiter} and the {@link #viewportTopOffset}\n\t\t * is not `0`.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_hasViewportTopOffset\n\t\t */\n\t\tthis.set( '_hasViewportTopOffset', false );\n\n\t\t/**\n\t\t * Collection of the child views which creates balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link module:ui/view~View#element} of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_panelRect\n\t\t */\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link #limiterElement}\n\t\t * of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_limiterRect\n\t\t */\n\n\t\t/**\n\t\t * A dummy element which visually fills the space as long as the\n\t\t * actual panel is sticky. It prevents flickering of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanelPlaceholder = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-sticky-panel__placeholder'\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.to( 'isSticky', isSticky => isSticky ? 'block' : 'none' ),\n\t\t\t\t\theight: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._panelRect.height ) : null;\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t}\n\t\t} ).render();\n\n\t\t/**\n\t\t * The panel which accepts children into {@link #content} collection.\n\t\t * Also an element which is positioned when {@link #isSticky}.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanel = new Template( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-sticky-panel__content',\n\t\t\t\t\t// Toggle class of the panel when \"sticky\" state changes in the view.\n\t\t\t\t\tbind.if( 'isSticky', 'ck-sticky-panel__content_sticky' ),\n\t\t\t\t\tbind.if( '_isStickyToTheLimiter', 'ck-sticky-panel__content_sticky_bottom-limit' ),\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._contentPanelPlaceholder.getBoundingClientRect().width ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\ttop: bind.to( '_hasViewportTopOffset', _hasViewportTopOffset => {\n\t\t\t\t\t\treturn _hasViewportTopOffset ? toPx( this.viewportTopOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tbottom: bind.to( '_isStickyToTheLimiter', _isStickyToTheLimiter => {\n\t\t\t\t\t\treturn _isStickyToTheLimiter ? toPx( this.limiterBottomOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tmarginLeft: bind.to( '_marginLeft' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} ).render();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-sticky-panel'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis._contentPanelPlaceholder,\n\t\t\t\tthis._contentPanel\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Check if the panel should go into the sticky state immediately.\n\t\tthis._checkIfShouldBeSticky();\n\n\t\t// Update sticky state of the panel as the window is being scrolled.\n\t\tthis.listenTo( global.window, 'scroll', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\n\t\t// Synchronize with `model.isActive` because sticking an inactive panel is pointless.\n\t\tthis.listenTo( this, 'change:isActive', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\t}\n\n\t/**\n\t * Analyzes the environment to decide whether the panel should\n\t * be sticky or not.\n\t *\n\t * @protected\n\t */\n\t_checkIfShouldBeSticky() {\n\t\tconst panelRect = this._panelRect = this._contentPanel.getBoundingClientRect();\n\t\tlet limiterRect;\n\n\t\tif ( !this.limiterElement ) {\n\t\t\tthis.isSticky = false;\n\t\t} else {\n\t\t\tlimiterRect = this._limiterRect = this.limiterElement.getBoundingClientRect();\n\n\t\t\t// The panel must be active to become sticky.\n\t\t\tthis.isSticky = this.isActive &&\n\t\t\t\t// The limiter's top edge must be beyond the upper edge of the visible viewport (+the viewportTopOffset).\n\t\t\t\tlimiterRect.top < this.viewportTopOffset &&\n\t\t\t\t// The model#limiterElement's height mustn't be smaller than the panel's height and model#limiterBottomOffset.\n\t\t\t\t// There's no point in entering the sticky mode if the model#limiterElement is very, very small, because\n\t\t\t\t// it would immediately set model#_isStickyToTheLimiter true and, given model#limiterBottomOffset, the panel\n\t\t\t\t// would be positioned before the model#limiterElement.\n\t\t\t\tthis._panelRect.height + this.limiterBottomOffset < limiterRect.height;\n\t\t}\n\n\t\t// Stick the panel to the top edge of the viewport simulating CSS position:sticky.\n\t\t// TODO: Possibly replaced by CSS in the future http://caniuse.com/#feat=css-sticky\n\t\tif ( this.isSticky ) {\n\t\t\tthis._isStickyToTheLimiter =\n\t\t\t\tlimiterRect.bottom < panelRect.height + this.limiterBottomOffset + this.viewportTopOffset;\n\t\t\tthis._hasViewportTopOffset = !this._isStickyToTheLimiter && !!this.viewportTopOffset;\n\t\t\tthis._marginLeft = this._isStickyToTheLimiter ? null : toPx( -global.window.scrollX );\n\t\t}\n\t\t// Detach the panel from the top edge of the viewport.\n\t\telse {\n\t\t\tthis._isStickyToTheLimiter = false;\n\t\t\tthis._hasViewportTopOffset = false;\n\t\t\tthis._marginLeft = null;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/focuscycler\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n */\nexport default class FocusCycler {\n\t/**\n\t * Creates an instance of the focus cycler utility.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {module:utils/collection~Collection|Object} options.focusables\n\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n\t * @param {Object} [options.actions]\n\t */\n\tconstructor( options ) {\n\t\tObject.assign( this, options );\n\n\t\t/**\n\t\t * A {@link module:ui/view~View view} collection that the cycler operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} #focusables\n\t\t */\n\n\t\t/**\n\t\t * A focus tracker instance that the cycler uses to determine the current focus\n\t\t * state in {@link #focusables}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * which can respond to certain keystrokes and cycle the focus.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n\t\t */\n\n\t\t/**\n\t\t * Actions that the cycler can take when a keystroke is pressed. Requires\n\t\t * `options.keystrokeHandler` to be passed and working. When an action is\n\t\t * performed, `preventDefault` and `stopPropagation` will be called on the event\n\t\t * the keystroke fired in the DOM.\n\t\t *\n\t\t *\t\tactions: {\n\t\t *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n\t\t *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\t\t *\n\t\t *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n\t\t *\t\t\tfocusNext: 'arrowdown'\n\t\t *\t\t}\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object} #actions\n\t\t */\n\n\t\tif ( options.actions && options.keystrokeHandler ) {\n\t\t\tfor ( const methodName in options.actions ) {\n\t\t\t\tlet actions = options.actions[ methodName ];\n\n\t\t\t\tif ( typeof actions == 'string' ) {\n\t\t\t\t\tactions = [ actions ];\n\t\t\t\t}\n\n\t\t\t\tfor ( const keystroke of actions ) {\n\t\t\t\t\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\n\t\t\t\t\t\tthis[ methodName ]();\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the first focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #first\n\t */\n\tget first() {\n\t\treturn this.focusables.find( isFocusable ) || null;\n\t}\n\n\t/**\n\t * Returns the last focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #last\n\t */\n\tget last() {\n\t\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #next\n\t */\n\tget next() {\n\t\treturn this._getFocusableItem( 1 );\n\t}\n\n\t/**\n\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #previous\n\t */\n\tget previous() {\n\t\treturn this._getFocusableItem( -1 );\n\t}\n\n\t/**\n\t * An index of the view in the {@link #focusables} which is focused according\n\t * to {@link #focusTracker}. Returns `null` when there is no such view.\n\t *\n\t * @readonly\n\t * @member {Number|null} #current\n\t */\n\tget current() {\n\t\tlet index = null;\n\n\t\t// There's no focused view in the focusables.\n\t\tif ( this.focusTracker.focusedElement === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.focusables.find( ( view, viewIndex ) => {\n\t\t\tconst focused = view.element === this.focusTracker.focusedElement;\n\n\t\t\tif ( focused ) {\n\t\t\t\tindex = viewIndex;\n\t\t\t}\n\n\t\t\treturn focused;\n\t\t} );\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Focuses the {@link #first} item in {@link #focusables}.\n\t */\n\tfocusFirst() {\n\t\tthis._focus( this.first );\n\t}\n\n\t/**\n\t * Focuses the {@link #last} item in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focus( this.last );\n\t}\n\n\t/**\n\t * Focuses the {@link #next} item in {@link #focusables}.\n\t */\n\tfocusNext() {\n\t\tthis._focus( this.next );\n\t}\n\n\t/**\n\t * Focuses the {@link #previous} item in {@link #focusables}.\n\t */\n\tfocusPrevious() {\n\t\tthis._focus( this.previous );\n\t}\n\n\t/**\n\t * Focuses the given view if it exists.\n\t *\n\t * @protected\n\t * @param {module:ui/view~View} view\n\t */\n\t_focus( view ) {\n\t\tif ( view ) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the next or previous focusable view in {@link #focusables} with respect\n\t * to {@link #current}.\n\t *\n\t * @protected\n\t * @param {Number} step Either `1` for checking forward from {@link #current} or\n\t * `-1` for checking backwards.\n\t * @returns {module:ui/view~View|null}\n\t */\n\t_getFocusableItem( step ) {\n\t\t// Cache for speed.\n\t\tconst current = this.current;\n\t\tconst collectionLength = this.focusables.length;\n\n\t\tif ( !collectionLength ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Start from the beginning if no view is focused.\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\tif ( current === null ) {\n\t\t\treturn this[ step === 1 ? 'first' : 'last' ];\n\t\t}\n\n\t\t// Cycle in both directions.\n\t\tlet index = ( current + collectionLength + step ) % collectionLength;\n\n\t\tdo {\n\t\t\tconst view = this.focusables.get( index );\n\n\t\t\t// TODO: Check if view is visible.\n\t\t\tif ( isFocusable( view ) ) {\n\t\t\t\treturn view;\n\t\t\t}\n\n\t\t\t// Cycle in both directions.\n\t\t\tindex = ( index + collectionLength + step ) % collectionLength;\n\t\t} while ( index !== current );\n\n\t\treturn null;\n\t}\n}\n\n// Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\nfunction isFocusable( view ) {\n\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The toolbar separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ToolbarSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-toolbar__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport preventDefault from '../bindings/preventdefault.js';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nimport '../../theme/components/toolbar/toolbar.css';\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Collection of the toolbar items (like buttons).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\t\tthis.set( 'isVertical', false );\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #className\n\t\t */\n\t\tthis.set( 'className' );\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-toolbar',\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' ),\n\t\t\t\t\tbind.to( 'className' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.items,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility which expands a plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items config.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n\tfillFromConfig( config, factory ) {\n\t\tconfig.map( name => {\n\t\t\tif ( name == '|' ) {\n\t\t\t\tthis.items.add( new ToolbarSeparatorView() );\n\t\t\t} else if ( factory.has( name ) ) {\n\t\t\t\tthis.items.add( factory.create( name ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n\t\t\t\tlog.warn(\n\t\t\t\t\t'toolbarview-item-unavailable: The requested toolbar item is unavailable.',\n\t\t\t\t\t{ name }\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\t}\n}\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/bindings/preventdefault\n */\n\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n *\t\t// In a class extending View.\n *\t\timport preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n *\t\t// ...\n *\n *\t\tthis.setTemplate( {\n *\t\t\ttag: 'div',\n *\n *\t\t\ton: {\n *\t\t\t\t// Prevent the default mousedown action on this view.\n *\t\t\t\tmousedown: preventDefault( this )\n *\t\t\t}\n *\t\t} );\n *\n * @param {module:ui/view~View} view View instance that defines the template.\n * @returns {module:ui/template~TemplateToBinding}\n */\nexport default function preventDefault( view ) {\n\treturn view.bindTemplate.to( evt => {\n\t\tif ( evt.target === view.element ) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module editor-classic/classiceditoruiview\n */\n\nimport BoxedEditorUIView from '@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview';\nimport InlineEditableUIView from '@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview';\nimport StickyPanelView from '@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\n\nimport '../theme/classiceditor.css';\n\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n *\n * @extends module:ui/editorui/boxed/boxededitoruiview~BoxedEditorUIView\n */\nexport default class ClassicEditorUIView extends BoxedEditorUIView {\n\t/**\n\t * Creates an instance of the classic editor UI view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Sticky panel view instance. This is a parent view of a {@link #toolbar}\n\t\t * that makes toolbar sticky.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/sticky/stickypanelview~StickyPanelView}\n\t\t */\n\t\tthis.stickyPanel = new StickyPanelView( locale );\n\n\t\t/**\n\t\t * Toolbar view instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbar = new ToolbarView( locale );\n\n\t\t/**\n\t\t * Editable UI view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n\t\t */\n\t\tthis.editable = new InlineEditableUIView( locale );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n\t\tthis.stickyPanel.content.add( this.toolbar );\n\n\t\tthis.top.add( this.stickyPanel );\n\t\tthis.main.add( this.editable );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget editableElement() {\n\t\treturn this.editable.element;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/elementreplacer\n */\n\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n\tconstructor() {\n\t\t/**\n\t\t * The elements replaced by {@link #replace} and their replacements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis._replacedElements = [];\n\t}\n\n\t/**\n\t * Hides the `element` and, if specified, inserts the the given element next to it.\n\t *\n\t * The effect of this method can be reverted by {@link #restore}.\n\t *\n\t * @param {HTMLElement} element The element to replace.\n\t * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n\t */\n\treplace( element, newElement ) {\n\t\tthis._replacedElements.push( { element, newElement } );\n\n\t\telement.style.display = 'none';\n\n\t\tif ( newElement ) {\n\t\t\telement.parentNode.insertBefore( newElement, element.nextSibling );\n\t\t}\n\t}\n\n\t/**\n\t * Restores what {@link #replace} did.\n\t */\n\trestore() {\n\t\tthis._replacedElements.forEach( ( { element, newElement } ) => {\n\t\t\telement.style.display = '';\n\n\t\t\tif ( newElement ) {\n\t\t\t\tnewElement.remove();\n\t\t\t}\n\t\t} );\n\n\t\tthis._replacedElements = [];\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module editor-classic/classiceditor\n */\n\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport ClassicEditorUI from './classiceditorui';\nimport ClassicEditorUIView from './classiceditoruiview';\nimport ElementReplacer from '@ckeditor/ckeditor5-utils/src/elementreplacer';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The {@glink builds/guides/overview#classic-editor classic editor} implementation.\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n *\n * # Classic editor and classic build\n *\n * The classic editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\n * but it is also available in the {@glink builds/guides/overview#classic-editor classic build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class ClassicEditor extends Editor {\n\t/**\n\t * Creates an instance of the classic editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement} element The DOM element that will be the source for the created editor.\n\t * The data will be loaded from it and loaded back to it once the editor is destroyed.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( element, config ) {\n\t\tsuper( config );\n\n\t\t/**\n\t\t * The element replacer instance used to hide the editor element.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/elementreplacer~ElementReplacer}\n\t\t */\n\t\tthis._elementReplacer = new ElementReplacer();\n\n\t\tthis.element = element;\n\n\t\tthis.data.processor = new HtmlDataProcessor();\n\n\t\tthis.model.document.createRoot();\n\n\t\tthis.ui = new ClassicEditorUI( this, new ClassicEditorUIView( this.locale ) );\n\n\t\tattachToForm( this );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tthis.updateElement();\n\t\tthis._elementReplacer.restore();\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates a classic editor instance.\n\t *\n\t * Creating instance when using {@glink builds/index CKEditor build}:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * Creating instance when using CKEditor from source (make sure to specify the list of plugins to load and the toolbar):\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\t\timport ...\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tplugins: [ Essentials, Bold, Italic, ... ],\n\t *\t\t\t\ttoolbar: [ 'bold', 'italic', ... ]\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * @param {HTMLElement} element The DOM element that will be the source for the created editor.\n\t * The data will be loaded from it and loaded back to it once the editor is destroyed.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready.\n\t * The promise returns the created {@link module:editor-classic/classiceditor~ClassicEditor} instance.\n\t */\n\tstatic create( element, config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( element, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => editor.ui.init() )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor._elementReplacer.replace( element, editor.ui.view.element );\n\t\t\t\t\t\teditor.fire( 'uiReady' );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor.editing.view.attachDomRoot( editor.ui.view.editableElement ) )\n\t\t\t\t\t.then( () => editor.loadDataFromElement() )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor.fire( 'dataReady' );\n\t\t\t\t\t\teditor.fire( 'ready' );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( ClassicEditor, DataApiMixin );\nmix( ClassicEditor, ElementApiMixin );\n","/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport isFunction from '@ckeditor/ckeditor5-utils/src/lib/lodash/isFunction';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * @module core/editor/utils/attachtoform\n */\n\n/**\n * Checks if editor is initialized on textarea element that belongs to a form. If yes - updates editor's element\n * contents before submitting the form.\n *\n * This helper requires {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\nexport default function attachToForm( editor ) {\n\tif ( !isFunction( editor.updateElement ) ) {\n\t\t/**\n\t\t * {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface} is required.\n\t\t *\n\t\t * @error attachtoform-missing-elementapi-interface\n\t\t */\n\t\tthrow new CKEditorError( 'attachtoform-missing-elementapi-interface: ElementApi interface is required.' );\n\t}\n\n\tconst element = editor.element;\n\n\t// Only when replacing a textarea which is inside of a form element.\n\tif ( element && element.tagName.toLowerCase() === 'textarea' && element.form ) {\n\t\tlet originalSubmit;\n\t\tconst form = element.form;\n\t\tconst onSubmit = () => editor.updateElement();\n\n\t\t// Replace the original form#submit() to call a custom submit function first.\n\t\t// Check if #submit is a function because the form might have an input named \"submit\".\n\t\tif ( isFunction( form.submit ) ) {\n\t\t\toriginalSubmit = form.submit;\n\n\t\t\tform.submit = () => {\n\t\t\t\tonSubmit();\n\t\t\t\toriginalSubmit.apply( form );\n\t\t\t};\n\t\t}\n\n\t\t// Update the replaced textarea with data before each form#submit event.\n\t\tform.addEventListener( 'submit', onSubmit );\n\n\t\t// Remove the submit listener and revert the original submit method on\n\t\t// editor#destroy.\n\t\teditor.on( 'destroy', () => {\n\t\t\tform.removeEventListener( 'submit', onSubmit );\n\n\t\t\tif ( originalSubmit ) {\n\t\t\t\tform.submit = originalSubmit;\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/plugin\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * Note that most editors implements {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n\t\t * to the base {@link module:core/editor/editor~Editor} interface. However, editors with external UI\n\t\t * (i.e. Bootstrap based) or headless editor may not implement {@link module:core/editor/editorwithui~EditorWithUI}\n\t\t * interface.\n\t\t *\n\t\t * Because of above, to make plugins more universal, it is recommended to split features into:\n\t\t *  - \"Editing\" part which use only {@link module:core/editor/editor~Editor} interface,\n\t\t *  - \"UI\" part which use both {@link module:core/editor/editor~Editor} interface and\n\t\t *  {@link module:core/editor/editorwithui~EditorWithUI} interface.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n}\n\nmix( Plugin, ObservableMixin );\n\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form it can be a simple function (it will be used as a constructor) which accepts\n * {@link module:core/editor/editor~Editor the editor} as a parm.\n * It can also implement a few methods which, when present, will be used to properly initialize and destroy the plugin.\n *\n *\t\t// A simple plugin which enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases, however, you'll want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you'll ensure that the listener will be removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor, 'dataReady', () => {\n *\t\t\t\t\t// Do something when data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of a plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you'll want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} servers for the special \"after init\" scenarios (e.g. code which depends on other\n * plugins, but which doesn't {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep a plugin class definition tight it's recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * Optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep a plugin class definition tight it's recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n\tconstructor( nativeDataTransfer ) {\n\t\t/**\n\t\t * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<File>} #files\n\t\t */\n\t\tthis.files = getFiles( nativeDataTransfer );\n\n\t\t/**\n\t\t * The native DataTransfer object.\n\t\t *\n\t\t * @private\n\t\t * @member {DataTransfer} #_native\n\t\t */\n\t\tthis._native = nativeDataTransfer;\n\t}\n\n\t/**\n\t * Returns an array of available native content types.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tget types() {\n\t\treturn this._native.types;\n\t}\n\n\t/**\n\t * Gets data from the data transfer by its mime type.\n\t *\n\t *\t\tdataTransfer.getData( 'text/plain' );\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @returns {String}\n\t */\n\tgetData( type ) {\n\t\treturn this._native.getData( type );\n\t}\n\n\t/**\n\t * Sets data in the data transfer.\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @param {String} data\n\t */\n\tsetData( type, data ) {\n\t\tthis._native.setData( type, data );\n\t}\n}\n\nfunction getFiles( nativeDataTransfer ) {\n\t// DataTransfer.files and items are Array-like and might not have an iterable interface.\n\tconst files = nativeDataTransfer.files ? Array.from( nativeDataTransfer.files ) : [];\n\tconst items = nativeDataTransfer.items ? Array.from( nativeDataTransfer.items ) : [];\n\n\tif ( files.length ) {\n\t\treturn files;\n\t}\n\t// Chrome have empty DataTransfer.files, but let get files through the items interface.\n\treturn items\n\t\t.filter( item => item.kind === 'file' )\n\t\t.map( item => item.getAsFile() );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/clipboardobserver\n */\n\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport DataTransfer from './datatransfer';\n\n/**\n * {@link module:engine/view/document~Document#event:paste Paste} event observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClipboardObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst viewDocument = this.document;\n\n\t\tthis.domEventType = [ 'paste', 'copy', 'cut', 'drop', 'dragover' ];\n\n\t\tthis.listenTo( viewDocument, 'paste', handleInput, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'drop', handleInput, { priority: 'low' } );\n\n\t\tfunction handleInput( evt, data ) {\n\t\t\tdata.preventDefault();\n\n\t\t\tconst targetRanges = data.dropRange ? [ data.dropRange ] : Array.from( viewDocument.selection.getRanges() );\n\n\t\t\tviewDocument.fire( 'clipboardInput', {\n\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\ttargetRanges\n\t\t\t} );\n\t\t}\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tconst evtData = {\n\t\t\tdataTransfer: new DataTransfer( domEvent.clipboardData ? domEvent.clipboardData : domEvent.dataTransfer )\n\t\t};\n\n\t\tif ( domEvent.type == 'drop' ) {\n\t\t\tevtData.dropRange = getDropViewRange( this.view, domEvent );\n\t\t}\n\n\t\tthis.fire( domEvent.type, domEvent, evtData );\n\t}\n}\n\nfunction getDropViewRange( view, domEvent ) {\n\tconst domDoc = domEvent.target.ownerDocument;\n\tconst x = domEvent.clientX;\n\tconst y = domEvent.clientY;\n\tlet domRange;\n\n\t// Webkit & Blink.\n\tif ( domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint( x, y ) ) {\n\t\tdomRange = domDoc.caretRangeFromPoint( x, y );\n\t}\n\t// FF.\n\telse if ( domEvent.rangeParent ) {\n\t\tdomRange = domDoc.createRange();\n\t\tdomRange.setStart( domEvent.rangeParent, domEvent.rangeOffset );\n\t\tdomRange.collapse( true );\n\t}\n\n\tif ( domRange ) {\n\t\treturn view.domConverter.domRangeToView( domRange );\n\t} else {\n\t\treturn view.document.selection.getFirstRange();\n\t}\n}\n\n/**\n * Fired as a continuation of {@link #event:paste} and {@link #event:drop} events.\n * It's part of the {@link module:clipboard/clipboard~Clipboard \"clipboard pipeline\"}.\n *\n * Fired with a `dataTransfer` which comes from the clipboard and which content should be processed\n * and inserted into the editor.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardInput\n * @param {Object} data Event data.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges Ranges which are the target of the operation\n * (usually – into which the content should be inserted).\n * If clipboard input was triggered by a paste operation, then these are the selection ranges. If by a drop operation,\n * then it's the drop position (which can be different than the selection at the moment of drop).\n */\n\n/**\n * Fired when user drags content over one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:dragover\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user dropped content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:drop\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n * @param {module:engine/view/range~Range} dropRange The position into which the content is dropped.\n */\n\n/**\n * Fired when user pasted content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:paste\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user copied content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:copy\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user cut content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:cut\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:paste},\n * {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut} events.\n *\n * In order to access clipboard data use `dataTransfer` property.\n *\n * @class module:clipboard/clipboardobserver~ClipboardEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardobserver~ClipboardEventData#dataTransfer\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = [ 'figcaption', 'li' ];\n\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\nexport default function viewToPlainText( viewItem ) {\n\tlet text = '';\n\n\tif ( viewItem.is( 'text' ) || viewItem.is( 'textProxy' ) ) {\n\t\t// If item is `Text` or `TextProxy` simple take its text data.\n\t\ttext = viewItem.data;\n\t} else if ( viewItem.is( 'img' ) && viewItem.hasAttribute( 'alt' ) ) {\n\t\t// Special case for images - use alt attribute if it is provided.\n\t\ttext = viewItem.getAttribute( 'alt' );\n\t} else {\n\t\t// Other elements are document fragments, attribute elements or container elements.\n\t\t// They don't have their own text value, so convert their children.\n\t\tlet prev = null;\n\n\t\tfor ( const child of viewItem.getChildren() ) {\n\t\t\tconst childText = viewToPlainText( child );\n\n\t\t\t// Separate container element children with one or more new-line characters.\n\t\t\tif ( prev && ( prev.is( 'containerElement' ) || child.is( 'containerElement' ) ) ) {\n\t\t\t\tif ( smallPaddingElements.includes( prev.name ) || smallPaddingElements.includes( child.name ) ) {\n\t\t\t\t\ttext += '\\n';\n\t\t\t\t} else {\n\t\t\t\t\ttext += '\\n\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext += childText;\n\t\t\tprev = child;\n\t\t}\n\t}\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\n/**\n * The clipboard feature. Currently, it's responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline.\n *\n * # Clipboard input pipeline\n *\n * The feature creates the clipboard input pipeline which allows processing clipboard content\n * before it gets inserted into the editor. The pipeline consists of two events on which\n * the features can listen in order to modify or totally override the default behavior.\n *\n * ## On {@link module:engine/view/document~Document#event:paste} and {@link module:engine/view/document~Document#event:drop}\n *\n * The default action is to:\n *\n * 1. get HTML or plain text from the clipboard,\n * 2. prevent the default action of the native `paste` or `drop` event,\n * 3. fire {@link module:engine/view/document~Document#event:clipboardInput} with a\n * {@link module:clipboard/datatransfer~DataTransfer `dataTransfer`} property.\n * 4. fire {@link module:clipboard/clipboard~Clipboard#event:inputTransformation} with a `data` containing the clipboard data parsed to\n * a {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n *\n * These action are performed by a low priority listeners, so they can be overridden by a normal ones\n * when a deeper change in pasting behavior is needed. For example, a feature which wants to differently read\n * data from the clipboard (the {@link module:clipboard/datatransfer~DataTransfer `DataTransfer`}).\n * should plug a listener at this stage.\n *\n * ## On {@link module:engine/view/document~Document#event:clipboardInput}\n *\n * This action is performed by a low priority listener, so it can be overridden by a normal one.\n *\n * At this stage the dataTransfer object can be processed by the features, which want to transform the original dataTransform.\n *\n *\t\tthis.listenTo( editor.editing.view, 'clipboardInput', ( evt, data ) => {\n *\t\t\tconst content = customTransform( data.dataTransfer.get( 'text/html' ) );\n *\t\t\tconst transformedContent = transform( content );\n *\t\t\tdata.dataTransfer.set( 'text/html', transformedContent );\n *\t\t} );\n *\n * ## On {@link module:clipboard/clipboard~Clipboard#event:inputTransformation}\n *\n * The default action is to insert the content (`data.content`, represented by a\n * {@link module:engine/view/documentfragment~DocumentFragment}) to an editor if the data is not empty.\n *\n * This action is performed by a low priority listener, so it can be overridden by a normal one.\n *\n * At this stage the pasted content can be processed by the features. E.g. a feature which wants to transform\n * a pasted text into a link can be implemented in this way:\n *\n *\t\tthis.listenTo( editor.plugins.get( 'Clipboard' ), 'inputTransformation', ( evt, data ) => {\n *\t\t\tif ( data.content.childCount == 1 && isUrlText( data.content.getChild( 0 ) ) ) {\n *\t\t\t\tconst linkUrl = data.content.getChild( 0 ).data;\n *\n *\t\t\t\tdata.content = new ViewDocumentFragment( [\n *\t\t\t\t\tViewElement(\n *\t\t\t\t\t\t'a',\n *\t\t\t\t\t\t{ href: linkUrl },\n *\t\t\t\t\t\t[ new ViewText( linkUrl ) ]\n *\t\t\t\t\t)\n *\t\t\t\t] );\n *\t\t\t}\n *\t\t} );\n *\n * # Clipboard output pipeline\n *\n * The output pipeline is the equivalent of the input pipeline but for the copy and cut operations.\n * It allows to process the content which will be then put into the clipboard or to override the whole process.\n *\n * ## On {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n *\n * The default action is to:\n *\n * 1. {@link module:engine/model/model~Model#getSelectedContent get selected content} from the editor,\n * 2. prevent the default action of the native `copy` or `cut` event,\n * 3. fire {@link module:engine/view/document~Document#event:clipboardOutput} with a clone of the selected content\n * converted to a {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n *\n * ## On {@link module:engine/view/document~Document#event:clipboardOutput}\n *\n * The default action is to put the content (`data.content`, represented by a\n * {@link module:engine/view/documentfragment~DocumentFragment}) to the clipboard as HTML. In case of the cut operation,\n * the selected content is also deleted from the editor.\n *\n * This action is performed by a low priority listener, so it can be overridden by a normal one.\n *\n * At this stage the copied/cut content can be processed by the features.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Data processor used to convert pasted HTML to a view structure.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n\t\t */\n\t\tthis._htmlDataProcessor = new HtmlDataProcessor();\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this._htmlDataProcessor.toView( content );\n\n\t\t\tthis.fire( 'inputTransformation', { content } );\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n\t\t\t\t// we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.insertContent( modelFragment, modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content`, which comes from the clipboard (was pasted or dropped) and\n * should be processed in order to be inserted into the editor.\n * It's part of the {@link module:clipboard/clipboard~Clipboard \"clipboard pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in {@link module:clipboard/clipboard~Clipboard}\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n * It's part of the {@link module:clipboard/clipboard~Clipboard \"clipboard pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@link module:clipboard/clipboard~Clipboard}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/utils/plaintexttohtml\n */\n\n/**\n * Converts plain text to its HTML-ized version.\n *\n * @param {String} text The plain text to convert.\n * @returns {String} HTML generated from the plain text.\n */\nexport default function plainTextToHtml( text ) {\n\ttext = text\n\t\t// Encode <>.\n\t\t.replace( /</g, '&lt;' )\n\t\t.replace( />/g, '&gt;' )\n\t\t// Creates paragraphs for double line breaks and change single line breaks to spaces.\n\t\t// In the future single line breaks may be converted into <br>s.\n\t\t.replace( /\\n\\n/g, '</p><p>' )\n\t\t.replace( /\\n/g, ' ' )\n\t\t// Preserve trailing spaces (only the first and last one – the rest is handled below).\n\t\t.replace( /^\\s/, '&nbsp;' )\n\t\t.replace( /\\s$/, '&nbsp;' )\n\t\t// Preserve other subsequent spaces now.\n\t\t.replace( /\\s\\s/g, ' &nbsp;' );\n\n\tif ( text.indexOf( '</p><p>' ) > -1 ) {\n\t\t// If we created paragraphs above, add the trailing ones.\n\t\ttext = `<p>${ text }</p>`;\n\t}\n\n\t// TODO:\n\t// * What about '\\nfoo' vs ' foo'?\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/utils/normalizeclipboarddata\n */\n\n/**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n *\n * @param {String} data The HTML data to normalize.\n * @returns {String} Normalized HTML.\n */\nexport default function normalizeClipboardData( data ) {\n\treturn data\n\t\t.replace( /<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, ( fullMatch, spaces ) => {\n\t\t\t// Handle the most popular and problematic case when even a single space becomes an nbsp;.\n\t\t\t// Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n\t\t\tif ( spaces.length == 1 ) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\n\t\t\treturn spaces;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/command\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute}.\n *\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Command {\n\t/**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor on which this command will be used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The value of a command. Concrete command class should define what it represents.\n\t\t *\n\t\t * For example, the `bold` command's value is whether the selection starts in a bolded text.\n\t\t * And the value of the `link` command may be an object with links details.\n\t\t *\n\t\t * It's possible for a command to have no value (e.g. for stateless actions such as `uploadImage`).\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member #value\n\t\t */\n\t\tthis.set( 'value', undefined );\n\n\t\t/**\n\t\t * Flag indicating whether a command is enabled or disabled.\n\t\t * A disabled command should do nothing when executed.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', false );\n\n\t\tthis.decorate( 'execute' );\n\n\t\t// By default every command is refreshed when changes are applied to the model.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => {\n\t\t\tthis.refresh();\n\t\t} );\n\n\t\tthis.on( 'execute', evt => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// By default commands are disabled when the editor is in read-only mode.\n\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\n\t\t\tif ( value ) {\n\t\t\t\t// See a ticket about overriding observable properties\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-utils/issues/171.\n\t\t\t\tthis.on( 'change:isEnabled', forceDisable, { priority: 'lowest' } );\n\t\t\t\tthis.isEnabled = false;\n\t\t\t} else {\n\t\t\t\tthis.off( 'change:isEnabled', forceDisable );\n\t\t\t\tthis.refresh();\n\t\t\t}\n\t\t} );\n\n\t\tfunction forceDisable() {\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} property\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */\n\trefresh() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * @fires execute\n\t */\n\texecute() {}\n\n\t/**\n\t * Destroys the command.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n\t * possible to change/cancel the behavior of the command by listening to this event.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\n\t *\n\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n\t * by a high priority listener in order to prevent command execution.\n\t *\n\t * @event execute\n\t */\n}\n\nmix( Command, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module enter/entercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * Enter command. It is used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> key.\n *\n * @extends module:core/command~Command\n */\nexport default class EnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tenterBlock( this.editor.model, writer, doc.selection, model.schema );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n}\n\n// Creates a new block in the way that the <kbd>Enter</kbd> key is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection} selection Selection on which the action should be performed.\n// @param {module:engine/model/schema~Schema} schema\nfunction enterBlock( model, writer, selection, schema ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Don't touch the roots and other limit elements.\n\tif ( schema.isLimit( startElement ) || schema.isLimit( endElement ) ) {\n\t\t// Delete the selected content but only if inside a single limit element.\n\t\t// Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n\t\t// This is an edge case and it's hard to tell what should actually happen because such a selection\n\t\t// is not entirely valid.\n\t\tif ( !isSelectionEmpty && startElement == endElement ) {\n\t\t\tmodel.deleteContent( selection );\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif ( isSelectionEmpty ) {\n\t\tsplitBlock( writer, selection, range.start );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\tif ( leaveUnmerged ) {\n\t\t\t// Partially selected elements.\n\t\t\t//\n\t\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n\t\t\tif ( isContainedWithinOneElement ) {\n\t\t\t\tsplitBlock( writer, selection, selection.focus );\n\t\t\t}\n\t\t\t// Selection over multiple elements.\n\t\t\t//\n\t\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t\telse {\n\t\t\t\twriter.setSelection( endElement );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction splitBlock( writer, selection, splitPos ) {\n\tconst oldElement = splitPos.parent;\n\tconst newElement = new oldElement.constructor( oldElement.name, oldElement.getAttributes() );\n\n\tif ( splitPos.isAtEnd ) {\n\t\t// If the split is at the end of element, instead of splitting, just create a clone of position's parent\n\t\t// element and insert it after split element. The result is the same but less operations are done\n\t\t// and it's more semantically correct (when it comes to operational transformation).\n\t\twriter.insert( newElement, splitPos.parent, 'after' );\n\t} else if ( splitPos.isAtStart ) {\n\t\t// If the split is at the start of element, instead of splitting, just create a clone of position's parent\n\t\t// element and insert it before split element. The result is the same but less operations are done\n\t\t// and it's more semantically correct (when it comes to operational transformation).\n\t\twriter.insert( newElement, splitPos.parent, 'before' );\n\t} else {\n\t\twriter.split( splitPos );\n\t}\n\n\twriter.setSelection( splitPos.parent.nextSibling );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\n\t\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\t\tlet event;\n\t\t\t\tdocument.once( 'enter', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\t\tdocument.fire( 'enter', new DomEventData( document, data.domEvent ) );\n\n\t\t\t\t// Stop `keydown` event if `enter` event was stopped.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\t\tif ( event && event.stop.called ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module enter/enter\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n\n/**\n * The Enter feature. Handles the <kbd>Enter</kbd> and <kbd>Shift + Enter</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Enter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Enter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'enter', new EnterCommand( editor ) );\n\n\t\t// TODO We may use the keystroke handler for that.\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\teditor.execute( 'enter' );\n\t\t\tdata.preventDefault();\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/changebuffer\n */\n\nimport Batch from '@ckeditor/ckeditor5-engine/src/model/batch';\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n\t/**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n\t */\n\tconstructor( model, limit = 20 ) {\n\t\t/**\n\t\t * The model instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t\t * the {@link #batch batch} is set to a new one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #size\n\t\t */\n\t\tthis.size = 0;\n\n\t\t/**\n\t\t * The maximum number of atomic changes which can be contained in one batch.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #limit\n\t\t */\n\t\tthis.limit = limit;\n\n\t\t/**\n\t\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isLocked\n\t\t */\n\t\tthis.isLocked = false;\n\n\t\t// The function to be called in order to notify the buffer about batches which appeared in the document.\n\t\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\n\t\t//\n\t\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n\t\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n\t\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\t\tthis._changeCallback = ( evt, batch ) => {\n\t\t\tif ( batch.type != 'transparent' && batch !== this._batch ) {\n\t\t\t\tthis._reset( true );\n\t\t\t}\n\t\t};\n\n\t\tthis._selectionChangeCallback = () => {\n\t\t\tthis._reset();\n\t\t};\n\n\t\tthis.model.document.on( 'change', this._changeCallback );\n\n\t\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\n\n\t\t/**\n\t\t * The current batch instance.\n\t\t *\n\t\t * @private\n\t\t * @member #_batch\n\t\t */\n\n\t\t/**\n\t\t * The callback to document the change event which later needs to be removed.\n\t\t *\n\t\t * @private\n\t\t * @member #_changeCallback\n\t\t */\n\n\t\t/**\n\t\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t\t *\n\t\t * @private\n\t\t * @member #_selectionChangeCallback\n\t\t */\n\t}\n\n\t/**\n\t * The current batch to which a feature should add its deltas. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @type {module:engine/model/batch~Batch}\n\t */\n\tget batch() {\n\t\tif ( !this._batch ) {\n\t\t\tthis._batch = new Batch();\n\t\t}\n\n\t\treturn this._batch;\n\t}\n\n\t/**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param {Number} changeCount The number of atomic changes to input.\n\t */\n\tinput( changeCount ) {\n\t\tthis.size += changeCount;\n\n\t\tif ( this.size >= this.limit ) {\n\t\t\tthis._reset( true );\n\t\t}\n\t}\n\n\t/**\n\t * Locks the buffer.\n\t */\n\tlock() {\n\t\tthis.isLocked = true;\n\t}\n\n\t/**\n\t * Unlocks the buffer.\n\t */\n\tunlock() {\n\t\tthis.isLocked = false;\n\t}\n\n\t/**\n\t * Destroys the buffer.\n\t */\n\tdestroy() {\n\t\tthis.model.document.off( 'change', this._changeCallback );\n\t\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\n\t}\n\n\t/**\n\t * Resets the change buffer.\n\t *\n\t * @private\n\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n\t */\n\t_reset( ignoreLock ) {\n\t\tif ( !this.isLocked || ignoreLock ) {\n\t\t\tthis._batch = null;\n\t\t\tthis.size = 0;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/inputcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport ChangeBuffer from './changebuffer';\n\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\nexport default class InputCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Number} undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */\n\tconstructor( editor, undoStepSize ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Typing's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {module:typing/changebuffer~ChangeBuffer} #_buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._buffer.destroy();\n\t}\n\n\t/**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {String} [options.text=''] The text to be inserted.\n\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n\t * to the first range in the current selection.\n\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n\t * should be placed after the insertion. If not specified, the selection will be placed right after\n\t * the inserted text.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst text = options.text || '';\n\t\tconst textInsertions = text.length;\n\t\tconst range = options.range || doc.selection.getFirstRange();\n\t\tconst resultRange = options.resultRange;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tconst isCollapsedRange = range.isCollapsed;\n\n\t\t\tthis._buffer.lock();\n\n\t\t\tif ( !isCollapsedRange ) {\n\t\t\t\twriter.remove( range );\n\t\t\t}\n\n\t\t\tif ( text ) {\n\t\t\t\twriter.insertText( text, doc.selection.getAttributes(), range.start );\n\t\t\t}\n\n\t\t\tif ( resultRange ) {\n\t\t\t\twriter.setSelection( resultRange );\n\t\t\t} else if ( isCollapsedRange ) {\n\t\t\t\t// If range was collapsed just shift the selection by the number of inserted characters.\n\t\t\t\twriter.setSelection( range.start.getShiftedBy( textInsertions ) );\n\t\t\t}\n\n\t\t\tthis._buffer.unlock();\n\n\t\t\tthis._buffer.input( textInsertions );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/input\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\nimport ViewText from '@ckeditor/ckeditor5-engine/src/view/text';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\nimport InputCommand from './inputcommand';\n\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Input extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Input';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst inputCommand = new InputCommand( editor, editor.config.get( 'typing.undoStep' ) || 20 );\n\n\t\t// TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\n\t\teditor.commands.add( 'input', inputCommand );\n\n\t\tthis.listenTo( editingView.document, 'keydown', ( evt, data ) => {\n\t\t\tthis._handleKeydown( data, inputCommand );\n\t\t}, { priority: 'lowest' } );\n\n\t\tthis.listenTo( editingView.document, 'mutations', ( evt, mutations, viewSelection ) => {\n\t\t\tthis._handleMutations( mutations, viewSelection );\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the keydown event. We need to guess whether such keystroke is going to result\n\t * in typing. If so, then before character insertion happens, any selected content needs\n\t * to be deleted. Otherwise the default browser deletion mechanism would be\n\t * triggered, resulting in:\n\t *\n\t * * Hundreds of mutations which could not be handled.\n\t * * But most importantly, loss of control over how the content is being deleted.\n\t *\n\t * The method is used in a low-priority listener, hence allowing other listeners (e.g. delete or enter features)\n\t * to handle the event.\n\t *\n\t * @private\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} evtData\n\t * @param {module:typing/inputcommand~InputCommand} inputCommand\n\t */\n\t_handleKeydown( evtData, inputCommand ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst buffer = inputCommand.buffer;\n\n\t\t// By relying on the state of the input command we allow disabling the entire input easily\n\t\t// by just disabling the input command. We could’ve used here the delete command but that\n\t\t// would mean requiring the delete feature which would block loading one without the other.\n\t\t// We could also check the editor.isReadOnly property, but that wouldn't allow to block\n\t\t// the input without blocking other features.\n\t\tif ( !inputCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isSafeKeystroke( evtData ) || doc.selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tbuffer.lock();\n\n\t\tmodel.enqueueChange( buffer.batch, () => {\n\t\t\tthis.editor.model.deleteContent( doc.selection );\n\t\t} );\n\n\t\tbuffer.unlock();\n\t}\n\n\t/**\n\t * Handles DOM mutations.\n\t *\n\t * @private\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\t_handleMutations( mutations, viewSelection ) {\n\t\tnew MutationHandler( this.editor ).handle( mutations, viewSelection );\n\t}\n}\n\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\nclass MutationHandler {\n\t/**\n\t * Creates an instance of the mutation handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * Editor instance for which mutations are handled.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The editing controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController} #editing\n\t\t */\n\t\tthis.editing = this.editor.editing;\n\t}\n\n\t/**\n\t * Handles given mutations.\n\t *\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\thandle( mutations, viewSelection ) {\n\t\tif ( containerChildrenMutated( mutations ) ) {\n\t\t\tthis._handleContainerChildrenMutations( mutations, viewSelection );\n\t\t} else {\n\t\t\tfor ( const mutation of mutations ) {\n\t\t\t\t// Fortunately it will never be both.\n\t\t\t\tthis._handleTextMutation( mutation, viewSelection );\n\t\t\t\tthis._handleTextNodeInsertion( mutation );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles situations when container's children mutated during input. This can happen when\n\t * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n\t * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n\t * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n\t * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n\t *\n\t * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n\t * and then compared with the current model to calculate the proper text change.\n\t *\n\t * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n\t * in {@link #_handleTextMutation}).\n\t *\n\t * @private\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\t_handleContainerChildrenMutations( mutations, viewSelection ) {\n\t\t// Get common ancestor of all mutations.\n\t\tconst mutationsCommonAncestor = getMutationsContainer( mutations );\n\n\t\t// Quit if there is no common ancestor.\n\t\tif ( !mutationsCommonAncestor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.editor.editing.view.domConverter;\n\n\t\t// Get common ancestor in DOM.\n\t\tconst domMutationCommonAncestor = domConverter.mapViewToDom( mutationsCommonAncestor );\n\n\t\t// Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n\t\t// This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\t\tconst freshDomConverter = new DomConverter();\n\t\tconst modelFromCurrentDom = this.editor.data.toModel(\n\t\t\tfreshDomConverter.domToView( domMutationCommonAncestor )\n\t\t).getChild( 0 );\n\n\t\t// Current model.\n\t\tconst currentModel = this.editor.editing.mapper.toModelElement( mutationsCommonAncestor );\n\n\t\t// If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n\t\t// That means that we would need to diff model elements (see `if` below). Better return early instead of\n\t\t// trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n\t\t// This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n\t\t// because `<ul>` is not mapped (`<li>`s are).\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/718.\n\t\tif ( !currentModel ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get children from both ancestors.\n\t\tconst modelFromDomChildren = Array.from( modelFromCurrentDom.getChildren() );\n\t\tconst currentModelChildren = Array.from( currentModel.getChildren() );\n\n\t\t// Skip situations when common ancestor has any elements (cause they are too hard).\n\t\tif ( !hasOnlyTextNodes( modelFromDomChildren ) || !hasOnlyTextNodes( currentModelChildren ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t// See comment in `_handleTextMutation`.\n\t\tconst newText = modelFromDomChildren.map( item => item.data ).join( '' ).replace( /\\u00A0/g, ' ' );\n\t\tconst oldText = currentModelChildren.map( item => item.data ).join( '' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\t\tconst removeRange = ModelRange.createFromParentsAndOffsets(\n\t\t\tcurrentModel,\n\t\t\tfirstChangeAt,\n\t\t\tcurrentModel,\n\t\t\tfirstChangeAt + deletions\n\t\t);\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextMutation( mutation, viewSelection ) {\n\t\tif ( mutation.type != 'text' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t// We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n\t\t// for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n\t\t// Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n\t\t// However then it will be handled outside of mutations, like enter key is.\n\t\t// The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n\t\t// take `newText` and compare it to (cleaned up) view.\n\t\t// It could also be done in mutation observer too, however if any outside plugin would like to\n\t\t// introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\t\tconst newText = mutation.newText.replace( /\\u00A0/g, ' ' );\n\t\t// To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\t\tconst oldText = mutation.oldText.replace( /\\u00A0/g, ' ' );\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\t// Get the position in view and model where the changes will happen.\n\t\tconst viewPos = new ViewPosition( mutation.node, firstChangeAt );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst removeRange = ModelRange.createFromPositionAndShift( modelPos, deletions );\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextNodeInsertion( mutation ) {\n\t\tif ( mutation.type != 'children' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst change = getSingleTextNodeChange( mutation );\n\t\tconst viewPos = new ViewPosition( mutation.node, change.index );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst insertedText = change.values[ 0 ].data;\n\n\t\tthis.editor.execute( 'input', {\n\t\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t\t// See comment in `_handleTextMutation`.\n\t\t\t// In this case we don't need to do this before `diff` because we diff whole nodes.\n\t\t\t// Just change &nbsp; in case there are some.\n\t\t\ttext: insertedText.replace( /\\u00A0/g, ' ' ),\n\t\t\trange: new ModelRange( modelPos )\n\t\t} );\n\t}\n}\n\nconst safeKeycodes = [\n\tgetCode( 'arrowUp' ),\n\tgetCode( 'arrowRight' ),\n\tgetCode( 'arrowDown' ),\n\tgetCode( 'arrowLeft' ),\n\t9, // Tab\n\t16, // Shift\n\t17, // Ctrl\n\t18, // Alt\n\t20, // CapsLock\n\t27, // Escape\n\t33, // PageUp\n\t34, // PageDown\n\t35, // Home\n\t36, // End\n\t229 // Composition start key\n];\n\n// Function keys.\nfor ( let code = 112; code <= 135; code++ ) {\n\tsafeKeycodes.push( code );\n}\n\n// Returns `true` if a keystroke should not cause any content change caused by \"typing\".\n//\n// Note: This implementation is very simple and will need to be refined with time.\n//\n// @private\n// @param {engine.view.observer.keyObserver.KeyEventData} keyData\n// @returns {Boolean}\nfunction isSafeKeystroke( keyData ) {\n\t// Keystrokes which contain Ctrl don't represent typing.\n\tif ( keyData.ctrlKey ) {\n\t\treturn true;\n\t}\n\n\treturn safeKeycodes.includes( keyData.keyCode );\n}\n\n// Helper function that compares whether two given view nodes are same. It is used in `diff` when it's passed an array\n// with child nodes.\nfunction compareChildNodes( oldChild, newChild ) {\n\tif ( oldChild instanceof ViewText && newChild instanceof ViewText ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n\n// Returns change made to a single text node. Returns `undefined` if more than a single text node was changed.\n//\n// @private\n// @param mutation\nfunction getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( change.values[ 0 ] instanceof ViewText ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n// Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\nfunction getMutationsContainer( mutations ) {\n\tconst lca = mutations\n\t\t.map( mutation => mutation.node )\n\t\t.reduce( ( commonAncestor, node ) => {\n\t\t\treturn commonAncestor.getCommonAncestor( node, { includeSelf: true } );\n\t\t} );\n\n\tif ( !lca ) {\n\t\treturn;\n\t}\n\n\t// We need to look for container and root elements only, so check all LCA's\n\t// ancestors (starting from itself).\n\treturn lca.getAncestors( { includeSelf: true, parentFirst: true } )\n\t\t.find( element => element.is( 'containerElement' ) || element.is( 'rootElement' ) );\n}\n\n// Returns true if container children have mutated or more than a single text node was changed.\n//\n// Single text node child insertion is handled in {@link module:typing/input~MutationHandler#_handleTextNodeInsertion}\n// while text mutation is handled in {@link module:typing/input~MutationHandler#_handleTextMutation}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {Boolean}\nfunction containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n// Returns true if provided array contains only {@link module:engine/model/text~Text model text nodes}.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @returns {Boolean}\nfunction hasOnlyTextNodes( children ) {\n\treturn children.every( child => child.is( 'text' ) );\n}\n\n// Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @return {{insertions: number, deletions: number, firstChangeAt: *}}\nfunction calculateChanges( diffResult ) {\n\t// Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n\tlet firstChangeAt = null;\n\t// Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\tlet lastChangeAt = null;\n\n\t// Get `firstChangeAt` and `lastChangeAt`.\n\tfor ( let i = 0; i < diffResult.length; i++ ) {\n\t\tconst change = diffResult[ i ];\n\n\t\tif ( change != 'equal' ) {\n\t\t\tfirstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n\t\t\tlastChangeAt = i;\n\t\t}\n\t}\n\n\t// How many characters, starting from `firstChangeAt`, should be removed.\n\tlet deletions = 0;\n\t// How many characters, starting from `firstChangeAt`, should be inserted.\n\tlet insertions = 0;\n\n\tfor ( let i = firstChangeAt; i <= lastChangeAt; i++ ) {\n\t\t// If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n\t\tif ( diffResult[ i ] != 'insert' ) {\n\t\t\tdeletions++;\n\t\t}\n\n\t\t// If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\t\tif ( diffResult[ i ] != 'delete' ) {\n\t\t\tinsertions++;\n\t\t}\n\t}\n\n\treturn { insertions, deletions, firstChangeAt };\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges( diff, output ) {\n\tconst changes = [];\n\tlet index = 0;\n\tlet lastOperation;\n\n\tdiff.forEach( change => {\n\t\tif ( change == 'equal' ) {\n\t\t\tpushLast();\n\n\t\t\tindex++;\n\t\t} else if ( change == 'insert' ) {\n\t\t\tif ( isContinuationOf( 'insert' ) ) {\n\t\t\t\tlastOperation.values.push( output[ index ] );\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'insert',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalues: [ output[ index ] ]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tindex++;\n\t\t} else /* if ( change == 'delete' ) */ {\n\t\t\tif ( isContinuationOf( 'delete' ) ) {\n\t\t\t\tlastOperation.howMany++;\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'delete',\n\t\t\t\t\tindex,\n\t\t\t\t\thowMany: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n\n\tpushLast();\n\n\treturn changes;\n\n\tfunction pushLast() {\n\t\tif ( lastOperation ) {\n\t\t\tchanges.push( lastOperation );\n\t\t\tlastOperation = null;\n\t\t}\n\t}\n\n\tfunction isContinuationOf( expected ) {\n\t\treturn lastOperation && lastOperation.type == expected;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/deletecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport Selection from '@ckeditor/ckeditor5-engine/src/model/selection';\nimport Element from '@ckeditor/ckeditor5-engine/src/model/element';\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\nimport ChangeBuffer from './changebuffer';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\n\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n *\n * @extends module:core/command~Command\n */\nexport default class DeleteCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\n\t * should consume the content when the selection is collapsed.\n\t */\n\tconstructor( editor, direction ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The directionality of the delete describing in what direction it should\n\t\t * consume the content when the selection is collapsed.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'forward'|'backward'} #direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Delete's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {typing.ChangeBuffer} #buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, editor.config.get( 'typing.undoStep' ) );\n\t}\n\n\t/**\n\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n\t * or a piece of content in the {@link #direction defined direction}.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n\t * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\n\t * See the {@link module:engine/view/document~Document#event:delete} event data.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\tconst selection = new Selection( doc.selection );\n\n\t\t\t// Do not replace the whole selected content if selection was collapsed.\n\t\t\t// This prevents such situation:\n\t\t\t//\n\t\t\t// <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n\t\t\t// starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n\t\t\tconst doNotResetEntireContent = selection.isCollapsed;\n\n\t\t\t// Try to extend the selection in the specified direction.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tmodel.modifySelection( selection, { direction: this.direction, unit: options.unit } );\n\t\t\t}\n\n\t\t\t// Check if deleting in an empty editor. See #61.\n\t\t\tif ( this._shouldEntireContentBeReplacedWithParagraph( options.sequence || 1 ) ) {\n\t\t\t\tthis._replaceEntireContentWithParagraph( writer );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If selection is still collapsed, then there's nothing to delete.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet changeCount = 0;\n\n\t\t\tselection.getFirstRange().getMinimalFlatRanges().forEach( range => {\n\t\t\t\tchangeCount += count(\n\t\t\t\t\trange.getWalker( { singleCharacters: true, ignoreElementEnd: true, shallow: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\tmodel.deleteContent( selection, { doNotResetEntireContent } );\n\t\t\tthis._buffer.input( changeCount );\n\n\t\t\twriter.setSelection( selection );\n\n\t\t\tthis._buffer.unlock();\n\t\t} );\n\t}\n\n\t/**\n\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n\t *\n\t * But, if the user pressed the key in an empty editable for the first time,\n\t * we want to replace the entire content with a paragraph if:\n\t *\n\t * * the current limit element is empty,\n\t * * the paragraph is allowed in the limit element,\n\t * * the limit doesn't already have a paragraph inside.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n\t *\n\t * @private\n\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n\t * @returns {Boolean}\n\t */\n\t_shouldEntireContentBeReplacedWithParagraph( sequence ) {\n\t\t// Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n\t\tif ( sequence > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\n\t\t// If a collapsed selection contains the whole content it means that the content is empty\n\t\t// (from the user perspective).\n\t\tconst limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent( limitElement );\n\n\t\tif ( !limitElementIsEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst limitElementFirstChild = limitElement.getChild( 0 );\n\n\t\t// Does nothing if the limit element already contains only a paragraph.\n\t\t// We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n\t\t// because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n\t\tif ( limitElementFirstChild && limitElementFirstChild.name === 'paragraph' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n\t *\n\t * @private\n\t */\n\t_replaceEntireContentWithParagraph( writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\t\tconst paragraph = new Element( 'paragraph' );\n\n\t\twriter.remove( Range.createIn( limitElement ) );\n\t\twriter.insert( paragraph, limitElement );\n\n\t\twriter.setSelection( paragraph );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/deleteobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DeleteObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst document = view.document;\n\t\tlet sequence = 0;\n\n\t\tdocument.on( 'keyup', ( evt, data ) => {\n\t\t\tif ( data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace ) {\n\t\t\t\tsequence = 0;\n\t\t\t}\n\t\t} );\n\n\t\tdocument.on( 'keydown', ( evt, data ) => {\n\t\t\tconst deleteData = {};\n\n\t\t\tif ( data.keyCode == keyCodes.delete ) {\n\t\t\t\tdeleteData.direction = 'forward';\n\t\t\t\tdeleteData.unit = 'character';\n\t\t\t} else if ( data.keyCode == keyCodes.backspace ) {\n\t\t\t\tdeleteData.direction = 'backward';\n\t\t\t\tdeleteData.unit = 'codePoint';\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n\t\t\tdeleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n\t\t\tdeleteData.sequence = ++sequence;\n\n\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\tlet event;\n\t\t\tdocument.once( 'delete', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\tdocument.fire( 'delete', new DomEventData( document, data.domEvent, deleteData ) );\n\n\t\t\t// Stop `keydown` event if `delete` event was stopped.\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\tif ( event && event.stop.called ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Delete';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( DeleteObserver );\n\n\t\teditor.commands.add( 'forwardDelete', new DeleteCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\n\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\teditor.execute( data.direction == 'forward' ? 'forwardDelete' : 'delete', { unit: data.unit, sequence: data.sequence } );\n\t\t\tdata.preventDefault();\n\t\t\tview.scrollToTheSelection();\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/typing\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Input from './input';\nimport Delete from './delete';\n\n/**\n * The typing feature. It handles typing.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Typing extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Input, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Typing';\n\t}\n}\n\n/**\n * The configuration of the typing features. Used by the features from the `@ckeditor/ckeditor5-typing` package.\n *\n * Read more in {@link module:typing/typing~TypingConfig}.\n *\n * @member {module:typing/typing~TypingConfig} module:core/editor/editorconfig~EditorConfig#typing\n */\n\n/**\n * The configuration of the typing features. Used by the typing features in `@ckeditor/ckeditor5-typing` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttyping: ... // Typing feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TypingConfig\n */\n\n/**\n * The granularity of undo/redo for typing and deleting. The value `20` means (more or less) that a new undo step\n * is created every 20 characters are inserted or deleted.\n *\n * @member {Number} [module:typing/typing~TypingConfig#undoStep=20]\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/basecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport Batch from '@ckeditor/ckeditor5-engine/src/model/batch';\n\n/**\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n *\n * @protected\n * @extends module:core/command~Command\n */\nexport default class BaseCommand extends Command {\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Stack of items stored by the command. These are pairs of:\n\t\t *\n\t\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array} #_stack\n\t\t */\n\t\tthis._stack = [];\n\n\t\t/**\n\t\t * Stores all batches that were created by this command.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\n\t\t */\n\t\tthis._createdBatches = new WeakSet();\n\n\t\t// Refresh state, so the command is inactive right after initialization.\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._stack.length > 0;\n\t}\n\n\t/**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch The batch to add.\n\t */\n\taddBatch( batch ) {\n\t\tconst docSelection = this.editor.model.document.selection;\n\n\t\tconst selection = {\n\t\t\tranges: docSelection.hasOwnRange ? Array.from( docSelection.getRanges() ) : [],\n\t\t\tisBackward: docSelection.isBackward\n\t\t};\n\n\t\tthis._stack.push( { batch, selection } );\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Removes all items from the stack.\n\t */\n\tclearStack() {\n\t\tthis._stack = [];\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @protected\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\n\t * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltas Deltas which has been applied since selection has been stored.\n\t */\n\t_restoreSelection( ranges, isBackward, deltas ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// This will keep the transformed selection ranges.\n\t\tconst selectionRanges = [];\n\n\t\t// Transform all ranges from the restored selection.\n\t\tfor ( const range of ranges ) {\n\t\t\tconst transformedRanges = transformSelectionRange( range, deltas );\n\n\t\t\t// For each `range` from `ranges`, we take only one transformed range.\n\t\t\t// This is because we want to prevent situation where single-range selection\n\t\t\t// got transformed to multi-range selection. We will take the first range that\n\t\t\t// is not in the graveyard.\n\t\t\tconst transformedRange = transformedRanges.find(\n\t\t\t\trange => range.start.root != document.graveyard\n\t\t\t);\n\n\t\t\t// `transformedRange` might be `undefined` if transformed range ended up in graveyard.\n\t\t\tif ( transformedRange ) {\n\t\t\t\tselectionRanges.push( transformedRange );\n\t\t\t}\n\t\t}\n\n\t\t// `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n\t\tif ( selectionRanges.length ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectionRanges, isBackward );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @protected\n\t * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\n\t */\n\t_undo( batchToUndo ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// All changes done by the command execution will be saved as one batch.\n\t\tconst undoingBatch = new Batch();\n\t\tthis._createdBatches.add( undoingBatch );\n\n\t\tconst deltasToUndo = batchToUndo.deltas.slice();\n\t\tdeltasToUndo.reverse();\n\n\t\t// We will process each delta from `batchToUndo`, in reverse order. If there were deltas A, B and C in undone batch,\n\t\t// we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n\t\tfor ( const deltaToUndo of deltasToUndo ) {\n\t\t\t// For now let's skip deltas with operation applied on detached document.\n\t\t\t// We assumed that there is no deltas with mixed (document and document fragment) operations\n\t\t\t// so we can skip entire delta.\n\t\t\tif ( deltaToUndo.operations.some( op => op.isDocumentOperation ) ) {\n\t\t\t\t// Keep in mind that transformation algorithms return arrays. That's because the transformation might result in multiple\n\t\t\t\t// deltas, so we need arrays to handle them. To simplify algorithms, it is better to always operate on arrays.\n\t\t\t\tconst nextBaseVersion = deltaToUndo.baseVersion + deltaToUndo.operations.length;\n\n\t\t\t\t// Reverse delta from the history.\n\t\t\t\tconst historyDeltas = Array.from( document.history.getDeltas( nextBaseVersion ) );\n\t\t\t\tconst transformedSets = model.transformDeltas( [ deltaToUndo.getReversed() ], historyDeltas, true );\n\t\t\t\tconst reversedDeltas = transformedSets.deltasA;\n\n\t\t\t\t// After reversed delta has been transformed by all history deltas, apply it.\n\t\t\t\tfor ( const delta of reversedDeltas ) {\n\t\t\t\t\t// Fix base version.\n\t\t\t\t\tdelta.baseVersion = document.version;\n\n\t\t\t\t\t// Before applying, add the delta to the `undoingBatch`.\n\t\t\t\t\tundoingBatch.addDelta( delta );\n\n\t\t\t\t\t// Now, apply all operations of the delta.\n\t\t\t\t\tfor ( const operation of delta.operations ) {\n\t\t\t\t\t\tmodel.applyOperation( operation );\n\t\t\t\t\t}\n\n\t\t\t\t\tdocument.history.setDeltaAsUndone( deltaToUndo, delta );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undoingBatch;\n\t}\n}\n\n// Transforms given range `range` by given `deltas`.\n// Returns an array containing one or more ranges, which are result of the transformation.\nfunction transformSelectionRange( range, deltas ) {\n\tconst transformed = transformRangesByDeltas( [ range ], deltas );\n\n\t// After `range` got transformed, we have an array of ranges. Some of those\n\t// ranges may be \"touching\" -- they can be next to each other and could be merged.\n\t// First, we have to sort those ranges to assure that they are in order.\n\ttransformed.sort( ( a, b ) => a.start.isBefore( b.start ) ? -1 : 1 );\n\n\t// Then, we check if two consecutive ranges are touching.\n\tfor ( let i = 1; i < transformed.length; i++ ) {\n\t\tconst a = transformed[ i - 1 ];\n\t\tconst b = transformed[ i ];\n\n\t\tif ( a.end.isTouching( b.start ) ) {\n\t\t\t// And join them together if they are.\n\t\t\ta.end = b.end;\n\t\t\ttransformed.splice( i, 1 );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn transformed;\n}\n\n// Transforms given set of `ranges` by given set of `deltas`. Returns transformed `ranges`.\nexport function transformRangesByDeltas( ranges, deltas ) {\n\tfor ( const delta of deltas ) {\n\t\tfor ( const operation of delta.operations ) {\n\t\t\t// We look through all operations from all deltas.\n\n\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\t// We transform every range by every operation.\n\t\t\t\tlet result;\n\n\t\t\t\tswitch ( operation.type ) {\n\t\t\t\t\tcase 'insert':\n\t\t\t\t\t\tresult = ranges[ i ]._getTransformedByInsertion(\n\t\t\t\t\t\t\toperation.position,\n\t\t\t\t\t\t\toperation.nodes.maxOffset,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'move':\n\t\t\t\t\tcase 'remove':\n\t\t\t\t\tcase 'reinsert':\n\t\t\t\t\t\tresult = ranges[ i ]._getTransformedByMove(\n\t\t\t\t\t\t\toperation.sourcePosition,\n\t\t\t\t\t\t\toperation.targetPosition,\n\t\t\t\t\t\t\toperation.howMany,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// If we have a transformation result, we substitute transformed range with it in `transformed` array.\n\t\t\t\t// Keep in mind that the result is an array and may contain multiple ranges.\n\t\t\t\tif ( result ) {\n\t\t\t\t\tranges.splice( i, 1, ...result );\n\n\t\t\t\t\t// Fix iterator.\n\t\t\t\t\ti = i + result.length - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ranges;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/undocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class UndoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n\t */\n\texecute( batch = null ) {\n\t\t// If batch is not given, set `batchIndex` to the last index in command stack.\n\t\tconst batchIndex = batch ? this._stack.findIndex( a => a.batch == batch ) : this._stack.length - 1;\n\n\t\tconst item = this._stack.splice( batchIndex, 1 )[ 0 ];\n\n\t\t// All changes has to be done in one `enqueueChange` callback so other listeners will not\n\t\t// step between consecutive deltas, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( () => {\n\t\t\tconst undoingBatch = this._undo( item.batch );\n\n\t\t\tconst deltas = this.editor.model.document.history.getDeltas( item.batch.baseVersion );\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, deltas );\n\n\t\t\tthis.fire( 'revert', item.batch, undoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/redocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class RedoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst item = this._stack.pop();\n\n\t\t// All changes have to be done in one `enqueueChange` callback so other listeners will not\n\t\t// step between consecutive deltas, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( () => {\n\t\t\tconst lastDelta = item.batch.deltas[ item.batch.deltas.length - 1 ];\n\t\t\tconst nextBaseVersion = lastDelta.baseVersion + lastDelta.operations.length;\n\t\t\tconst deltas = this.editor.model.document.history.getDeltas( nextBaseVersion );\n\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, deltas );\n\t\t\tthis._undo( item.batch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/undoediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n\n/**\n * The undo engine feature.\n *\n * Undo brings in possibility to undo and redo changes done in the model by deltas through\n * the {@link module:engine/model/writer~Writer Writer API}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n\t\t */\n\n\t\t/**\n\t\t * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n\t\t */\n\n\t\t/**\n\t\t * Keeps track of which batches were registered in undo.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>}\n\t\t */\n\t\tthis._batchRegistry = new WeakSet();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Create commands.\n\t\tthis._undoCommand = new UndoCommand( editor );\n\t\tthis._redoCommand = new RedoCommand( editor );\n\n\t\t// Register command to the editor.\n\t\teditor.commands.add( 'undo', this._undoCommand );\n\t\teditor.commands.add( 'redo', this._redoCommand );\n\n\t\tthis.listenTo( editor.model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\t// Do not register batch if the operation is not a document operation.\n\t\t\t// This prevents from creating empty undo steps, where all operations where non-document operations.\n\t\t\t// Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n\t\t\t// Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n\t\t\t// Such operations should not be reversed.\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst batch = operation.delta.batch;\n\n\t\t\t// If changes are not a part of a batch or this is not a new batch, omit those changes.\n\t\t\tif ( this._batchRegistry.has( batch ) || batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif ( this._redoCommand._createdBatches.has( batch ) ) {\n\t\t\t\t\t// If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t} else if ( !this._undoCommand._createdBatches.has( batch ) ) {\n\t\t\t\t\t// A default batch - these are new changes in the document, not introduced by undo feature.\n\t\t\t\t\t// Add them to `undoCommand` stack and clear `redoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t\tthis._redoCommand.clearStack();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the batch to the registry so it will not be processed again.\n\t\t\tthis._batchRegistry.add( batch );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this._undoCommand, 'revert', ( evt, undoneBatch, undoingBatch ) => {\n\t\t\tthis._redoCommand.addBatch( undoingBatch );\n\t\t} );\n\n\t\teditor.keystrokes.set( 'CTRL+Z', 'undo' );\n\t\teditor.keystrokes.set( 'CTRL+Y', 'redo' );\n\t\teditor.keystrokes.set( 'CTRL+SHIFT+Z', 'redo' );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/icon/icon.css';\n\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\nexport default class IconView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The SVG source of the icon.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #content\n\t\t */\n\t\tthis.set( 'content', '' );\n\n\t\t/**\n\t\t * This attribute specifies the boundaries to which the\n\t\t * icon content should stretch.\n\t\t *\n\t\t * @observable\n\t\t * @default '0 0 20 20'\n\t\t * @member {String} #viewBox\n\t\t */\n\t\tthis.set( 'viewBox', '0 0 20 20' );\n\n\t\t/**\n\t\t * The fill color of the child `path.ck-icon__fill`.\n\t\t *\n\t\t * @observable\n\t\t * @default ''\n\t\t * @member {String} #fillColor\n\t\t */\n\t\tthis.set( 'fillColor', '' );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'svg',\n\t\t\tns: 'http://www.w3.org/2000/svg',\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-icon',\n\t\t\t\tviewBox: bind.to( 'viewBox' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._updateXMLContent();\n\t\tthis._colorFillPaths();\n\n\t\t// This is a hack for lack of innerHTML binding.\n\t\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\t\tthis.on( 'change:content', () => {\n\t\t\tthis._updateXMLContent();\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\n\t\tthis.on( 'change:fillColor', () => {\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the {@link #element} with the value of {@link #content}.\n\t *\n\t * @private\n\t */\n\t_updateXMLContent() {\n\t\tif ( this.content ) {\n\t\t\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\n\t\t\tconst svg = parsed.querySelector( 'svg' );\n\t\t\tconst viewBox = svg.getAttribute( 'viewBox' );\n\n\t\t\tif ( viewBox ) {\n\t\t\t\tthis.viewBox = viewBox;\n\t\t\t}\n\n\t\t\tthis.element.innerHTML = '';\n\n\t\t\twhile ( svg.childNodes.length > 0 ) {\n\t\t\t\tthis.element.appendChild( svg.childNodes[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n\t *\n\t * @private\n\t */\n\t_colorFillPaths() {\n\t\tif ( this.fillColor ) {\n\t\t\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\n\t\t\t\tpath.style.fill = this.fillColor;\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/tooltip/tooltipview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/tooltip/tooltip.css';\n\n/**\n * The tooltip view class.\n *\n * @extends module:ui/view~View\n */\nexport default class TooltipView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the tooltip visible to the user.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text', '' );\n\n\t\t/**\n\t\t * The position of the tooltip (south or north).\n\t\t *\n\t\t *\t\t+-----------+\n\t\t *\t\t|   north   |\n\t\t *\t\t+-----------+\n\t\t *\t\t      V\n\t\t *\t\t  [element]\n\t\t *\n\t\t *\t\t  [element]\n\t\t *\t\t      ^\n\t\t *\t\t+-----------+\n\t\t *\t\t|   south   |\n\t\t *\t\t+-----------+\n\t\t *\n\t\t * @observable\n\t\t * @default 's'\n\t\t * @member {'s'|'n'} #position\n\t\t */\n\t\tthis.set( 'position', 's' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-tooltip',\n\t\t\t\t\tbind.to( 'position', position => 'ck-tooltip_' + position ),\n\t\t\t\t\tbind.if( 'text', 'ck-hidden', value => !value.trim() )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck-tooltip__text'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'text' ),\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/button/buttonview\n */\n\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\n\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../../theme/components/button/button.css';\n\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\nexport default class ButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t// Implement the Button interface.\n\t\tthis.set( 'icon' );\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isOn', false );\n\t\tthis.set( 'isVisible', true );\n\t\tthis.set( 'keystroke' );\n\t\tthis.set( 'label' );\n\t\tthis.set( 'tabindex', -1 );\n\t\tthis.set( 'tooltip' );\n\t\tthis.set( 'tooltipPosition', 's' );\n\t\tthis.set( 'type', 'button' );\n\t\tthis.set( 'withText', false );\n\n\t\t/**\n\t\t * Collection of the child views inside of the button {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n\t\t */\n\t\tthis.tooltipView = this._createTooltipView();\n\n\t\t/**\n\t\t * Label of the button view. It is configurable using the {@link #label label attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView();\n\n\t\t/**\n\t\t * The icon view of the button. Will be added to {@link #children} when the\n\t\t * {@link #icon icon attribute} is defined.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView} #iconView\n\t\t */\n\t\tthis.iconView = new IconView();\n\n\t\tthis.iconView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-button__icon'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Tooltip of the button bound to the template.\n\t\t *\n\t\t * @see #tooltip\n\t\t * @see #_getTooltipString\n\t\t * @private\n\t\t * @observable\n\t\t * @member {Boolean} #_tooltipString\n\t\t */\n\t\tthis.bind( '_tooltipString' ).to(\n\t\t\tthis, 'tooltip',\n\t\t\tthis, 'label',\n\t\t\tthis, 'keystroke',\n\t\t\tthis._getTooltipString.bind( this )\n\t\t);\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'button',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-button',\n\t\t\t\t\tbind.to( 'isEnabled', value => value ? 'ck-enabled' : 'ck-disabled' ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\n\t\t\t\t\tbind.to( 'isOn', value => value ? 'ck-on' : 'ck-off' ),\n\t\t\t\t\tbind.if( 'withText', 'ck-button_with-text' )\n\t\t\t\t],\n\t\t\t\ttype: bind.to( 'type', value => value ? value : 'button' ),\n\t\t\t\ttabindex: bind.to( 'tabindex' )\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( evt => {\n\t\t\t\t\t// We can't make the button disabled using the disabled attribute, because it won't be focusable.\n\t\t\t\t\t// Though, shouldn't this condition be moved to the button controller?\n\t\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prevent the default when button is disabled, to block e.g.\n\t\t\t\t\t\t// automatic form submitting. See ckeditor/ckeditor5-link#74.\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.icon ) {\n\t\t\tthis.iconView.bind( 'content' ).to( this, 'icon' );\n\t\t\tthis.children.add( this.iconView );\n\t\t}\n\n\t\tthis.children.add( this.tooltipView );\n\t\tthis.children.add( this.labelView );\n\t}\n\n\t/**\n\t * Focuses the {@link #element} of the button.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/tooltip/tooltipview~TooltipView}\n\t */\n\t_createTooltipView() {\n\t\tconst tooltipView = new TooltipView();\n\n\t\ttooltipView.bind( 'text' ).to( this, '_tooltipString' );\n\t\ttooltipView.bind( 'position' ).to( this, 'tooltipPosition' );\n\n\t\treturn tooltipView;\n\t}\n\n\t/**\n\t * Creates a label view instance and binds it with button attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createLabelView() {\n\t\tconst labelView = new View();\n\n\t\tlabelView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck-button__label' ]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: this.bindTemplate.to( 'label' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Gets the text for the {@link #tooltipView} from the combination of\n\t * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n\t *\n\t * @private\n\t * @see #tooltip\n\t * @see #_tooltipString\n\t * @param {Boolean|String|Function} tooltip Button tooltip.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Button keystroke.\n\t * @returns {String}\n\t */\n\t_getTooltipString( tooltip, label, keystroke ) {\n\t\tif ( tooltip ) {\n\t\t\tif ( typeof tooltip == 'string' ) {\n\t\t\t\treturn tooltip;\n\t\t\t} else {\n\t\t\t\tif ( keystroke ) {\n\t\t\t\t\tkeystroke = getEnvKeystrokeText( keystroke );\n\t\t\t\t}\n\n\t\t\t\tif ( tooltip instanceof Function ) {\n\t\t\t\t\treturn tooltip( label, keystroke );\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ label }${ keystroke ? ` (${ keystroke })` : '' }`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module undo/undoui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the Undo and Redo buttons to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._addButton('undo', t('ag'), 'CTRL+Z', undoIcon);\n        this._addButton('redo', t('ah'), 'CTRL+Y', redoIcon);\n    }\n    /**\n\t * Creates a button for the specified command.\n\t *\n\t * @private\n\t * @param {String} name Command name.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Command keystroke.\n\t * @param {String} Icon Source of the icon.\n\t */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(name));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/undo\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n\n/**\n * The undo feature.\n *\n * It loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is the explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever a {@link module:engine/model/delta/delta~Delta delta} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that delta is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * delta was applied. A batch is saved instead of the delta because changes are undone batch-by-batch, not delta-by-delta\n * and a batch is seen as one undo step.\n *\n * After some changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n *\t\t  History                           Undo stack\n *\t\t===========             ==================================\n *\t\t[delta A1]                          [batch A]\n *\t\t[delta B1]                          [batch B]\n *\t\t[delta B2]                          [batch C]\n *\t\t[delta C1]\n *\t\t[delta C2]\n *\t\t[delta B3]\n *\t\t[delta C3]\n *\n * Where deltas starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of deltas which will reverse the effects of that batch needs to be generated. For example, if a batch\n * added several letters, undoing the batch should remove them. It is important to apply undoing deltas in the reversed order,\n * so if a batch has delta `X`, `Y`, `Z`, reversed deltas `Zr`, `Yr` and `Xr` need to be applied. Otherwise reversed delta\n * `Xr` would operate on a wrong document state, because delta `X` does not know that deltas `Y` and `Z` happened.\n *\n * After deltas from an undone batch got {@link module:engine/model/delta/delta~Delta#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, delta `C3` is the last delta and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n *\t\t  History                           Undo stack\n *\t\t=============             ==================================\n *\t\t[ delta A1  ]                      [  batch A  ]\n *\t\t[ delta B1  ]                      [  batch B  ]\n *\t\t[ delta B2  ]             [   processing undoing batch C   ]\n *\t\t[ delta C1  ]\n *\t\t[ delta C2  ]\n *\t\t[ delta B3  ]\n *\t\t[ delta C3  ]\n *\t\t[ delta C3r ]\n *\n * Next is delta `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by deltas from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of deltas from that batch are processed in the same fashion.\n *\n *\t\t  History                           Undo stack                                     Redo stack\n *\t\t=============             ==================================             ==================================\n *\t\t[ delta A1  ]                      [  batch A  ]                                  [ batch Cr ]\n *\t\t[ delta B1  ]                      [  batch B  ]\n *\t\t[ delta B2  ]\n *\t\t[ delta C1  ]\n *\t\t[ delta C2  ]\n *\t\t[ delta B3  ]\n *\t\t[ delta C3  ]\n *\t\t[ delta C3r ]\n *\t\t[ delta C2' ]\n *\t\t[ delta C1' ]\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: deltas from a batch (i.e. `A1`) are reversed and then transformed by deltas stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Deltas from\n * batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n *\t\t  History                           Undo stack                                     Redo stack\n *\t\t=============             ==================================             ==================================\n *\t\t[ delta A1  ]                      [  batch A  ]\n *\t\t[ delta B1  ]                      [  batch B  ]\n *\t\t[ delta B2  ]                      [ batch Crr ]\n *\t\t[ delta C1  ]\n *\t\t[ delta C2  ]\n *\t\t[ delta B3  ]\n *\t\t[ delta C3  ]\n *\t\t[ delta C3r ]\n *\t\t[ delta C2' ]\n *\t\t[ delta C1' ]\n *\t\t[ delta C1'r]\n *\t\t[ delta C2'r]\n *\t\t[ delta C3rr]\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Undo extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ UndoEditing, UndoUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Undo';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module upload/filereader\n */\n\n/* globals window */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * FileReader class - wrapper over native FileReader.\n */\nexport default class FileReader {\n\t/**\n\t * Creates an instance of the FileReader.\n\t */\n\tconstructor() {\n\t\tconst reader = new window.FileReader();\n\n\t\t/**\n\t\t * Instance of native FileReader.\n\t\t *\n\t\t * @private\n\t\t * @member {FileReader} #_reader\n\t\t */\n\t\tthis._reader = reader;\n\n\t\t/**\n\t\t * Number of bytes loaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #loaded\n\t\t */\n\t\tthis.set( 'loaded', 0 );\n\n\t\treader.onprogress = evt => {\n\t\t\tthis.loaded = evt.loaded;\n\t\t};\n\t}\n\n\t/**\n\t * Returns error that occurred during file reading.\n\t *\n\t * @returns {Error}\n\t */\n\tget error() {\n\t\treturn this._reader.error;\n\t}\n\n\t/**\n\t * Reads provided file.\n\t *\n\t * @param {File} file Native File object.\n\t * @returns {Promise} Returns a promise that will resolve with file's contents. Promise can be rejected in case of\n\t * error or when reading process is aborted.\n\t */\n\tread( file ) {\n\t\tconst reader = this._reader;\n\t\tthis.total = file.size;\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\treader.onload = () => {\n\t\t\t\tresolve( reader.result );\n\t\t\t};\n\n\t\t\treader.onerror = () => {\n\t\t\t\treject( 'error' );\n\t\t\t};\n\n\t\t\treader.onabort = () => {\n\t\t\t\treject( 'aborted' );\n\t\t\t};\n\n\t\t\tthis._reader.readAsDataURL( file );\n\t\t} );\n\t}\n\n\t/**\n\t * Aborts file reader.\n\t */\n\tabort() {\n\t\tthis._reader.abort();\n\t}\n}\n\nmix( FileReader, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module upload/filerepository\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nimport FileReader from './filereader.js';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid.js';\n\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one\n * (which boils down to setting the {@link ~FileRepository#createUploadAdapter} factory function – see\n * {@link module:upload/filerepository~UploadAdapter `UploadAdapter` interface} documentation).\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FileRepository extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FileRepository';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * Collection of loaders associated with this repository.\n\t\t *\n\t\t * @member {module:utils/collection~Collection} #loaders\n\t\t */\n\t\tthis.loaders = new Collection();\n\n\t\t/**\n\t\t * A factory function which should be defined before using `FileRepository`.\n\t\t *\n\t\t * It should return a new instance of {@link module:upload/filerepository~UploadAdapter} that will be used to upload files.\n\t\t * {@link module:upload/filerepository~FileLoader} instance associated with the adapter\n\t\t * will be passed to that function.\n\t\t *\n\t\t * For more information and example see {@link module:upload/filerepository~UploadAdapter}.\n\t\t *\n\t\t * @member {Function} #createUploadAdapter\n\t\t */\n\n\t\t/**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n\t\tthis.set( 'uploaded', 0 );\n\n\t\t/**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * It might be different than the file size because of headers and additional data.\n\t\t * It contains `null` if value is not available yet, so it's better to use {@link #uploadedPercent} to monitor\n\t\t * the progress.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n\t\tthis.set( 'uploadTotal', null );\n\n\t\t/**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n\t\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\n\t\t\treturn total ? ( uploaded / total * 100 ) : 0;\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the loader associated with specified file.\n\t *\n\t * To get loader by id use `fileRepository.loaders.get( id )`.\n\t *\n\t * @param {File} file Native file handle.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n\tgetLoader( file ) {\n\t\tfor ( const loader of this.loaders ) {\n\t\t\tif ( loader.file == file ) {\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a loader instance for the given file.\n\t *\n\t * Requires {@link #createUploadAdapter} factory to be defined.\n\t *\n\t * @param {File} file Native File object.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n\tcreateLoader( file ) {\n\t\tif ( !this.createUploadAdapter ) {\n\t\t\t/**\n\t\t\t * You need to enable an upload adapter in order to be able to upload files.\n\t\t\t *\n\t\t\t * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n\t\t\t * without {@link #createUploadAdapter definining an upload adapter}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**\n\t\t\t * it means that you did not configure any of the upload adapters available by default in those builds.\n\t\t\t * See:\n\t\t\t *\n\t\t\t * * {@link module:core/editor/editorconfig~EditorConfig#cloudServices `config.cloudServices`} for\n\t\t\t * Easy Image with Cloud Services integration,\n\t\t\t * * {@link module:core/editor/editorconfig~EditorConfig#ckfinder `config.ckfinder`} for CKFinder\n\t\t\t * file upload integration.\n\t\t\t *\n\t\t\t * **If you see this warning when using a custom build** there is a chance that you enabled\n\t\t\t * a feature like {@link module:image/imageupload~ImageUpload},\n\t\t\t * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n\t\t\t * You can choose one of the existing upload adapters:\n\t\t\t *\n\t\t\t * * {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter}\n\t\t\t * (remember to {@link module:core/editor/editorconfig~EditorConfig#cloudServices configure it})\n\t\t\t * * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}\n\t\t\t * (remember to {@link module:core/editor/editorconfig~EditorConfig#ckfinder configure it})\n\t\t\t *\n\t\t\t * You can also implement your own upload adapter (in which case, please refer\n\t\t\t * to the {@link module:upload/filerepository~UploadAdapter `UploadAdapter` interface} documentation).\n\t\t\t *\n\t\t\t * @error filerepository-no-upload-adapter\n\t\t\t */\n\t\t\tlog.error( 'filerepository-no-upload-adapter: Upload adapter is not defined.' );\n\n\t\t\treturn null;\n\t\t}\n\n\t\tconst loader = new FileLoader( file );\n\t\tloader._adapter = this.createUploadAdapter( loader );\n\n\t\tthis.loaders.add( loader );\n\n\t\tloader.on( 'change:uploaded', () => {\n\t\t\tlet aggregatedUploaded = 0;\n\n\t\t\tfor ( const loader of this.loaders ) {\n\t\t\t\taggregatedUploaded += loader.uploaded;\n\t\t\t}\n\n\t\t\tthis.uploaded = aggregatedUploaded;\n\t\t} );\n\n\t\tloader.on( 'change:uploadTotal', () => {\n\t\t\tlet aggregatedTotal = 0;\n\n\t\t\tfor ( const loader of this.loaders ) {\n\t\t\t\tif ( loader.uploadTotal ) {\n\t\t\t\t\taggregatedTotal += loader.uploadTotal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.uploadTotal = aggregatedTotal;\n\t\t} );\n\n\t\treturn loader;\n\t}\n\n\t/**\n\t * Destroys the given loader.\n\t *\n\t * @param {File|module:upload/filerepository~FileLoader} fileOrLoader File associated with that loader or loader\n\t * itself.\n\t */\n\tdestroyLoader( fileOrLoader ) {\n\t\tconst loader = fileOrLoader instanceof FileLoader ? fileOrLoader : this.getLoader( fileOrLoader );\n\n\t\tloader._destroy();\n\n\t\tthis.loaders.remove( loader );\n\t}\n}\n\nmix( FileRepository, ObservableMixin );\n\n/**\n * File loader class.\n * It is used to control the process of file reading and uploading using specified adapter.\n */\nclass FileLoader {\n\t/**\n\t * Creates a new instance of `FileLoader`.\n\t *\n\t * @param {File} file A native file instance.\n\t * @param {module:upload/filerepository~UploadAdapter} adapter\n\t */\n\tconstructor( file, adapter ) {\n\t\t/**\n\t\t * Unique id of FileLoader instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.id = uid();\n\n\t\t/**\n\t\t * A `File` instance associated with this file loader.\n\t\t *\n\t\t * @readonly\n\t\t * @member {File}\n\t\t */\n\t\tthis.file = file;\n\n\t\t/**\n\t\t * Adapter instance associated with this file loader.\n\t\t *\n\t\t * @private\n\t\t * @member {module:upload/filerepository~UploadAdapter}\n\t\t */\n\t\tthis._adapter = adapter;\n\n\t\t/**\n\t\t * FileReader used by FileLoader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filereader~FileReader}\n\t\t */\n\t\tthis._reader = new FileReader();\n\n\t\t/**\n\t\t * Current status of FileLoader. It can be one of the following:\n\t\t *\n\t\t * * 'idle',\n\t\t * * 'reading',\n\t\t * * 'uploading',\n\t\t * * 'aborted',\n\t\t * * 'error'.\n\t\t *\n\t\t * When reading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `reading` -> `idle`\n\t\t * `idle` -> `reading -> `aborted`\n\t\t * `idle` -> `reading -> `error`\n\t\t *\n\t\t * When uploading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `uploading` -> `idle`\n\t\t * `idle` -> `uploading` -> `aborted`\n\t\t * `idle` -> `uploading` -> `error`\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #status\n\t\t */\n\t\tthis.set( 'status', 'idle' );\n\n\t\t/**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n\t\tthis.set( 'uploaded', 0 );\n\n\t\t/**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n\t\tthis.set( 'uploadTotal', null );\n\n\t\t/**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n\t\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\n\t\t\treturn total ? ( uploaded / total * 100 ) : 0;\n\t\t} );\n\n\t\t/**\n\t\t * Response of the upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Object|null} #uploadResponse\n\t\t */\n\t\tthis.set( 'uploadResponse', null );\n\t}\n\n\t/**\n\t * Reads file using {@link module:upload/filereader~FileReader}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n\t * is different than `idle`.\n\t *\n\t * Example usage:\n\t *\n\t *\tfileLoader.read()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( err => {\n\t *\t\t\tif ( err === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Reading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Reading error.', err );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise} Returns promise that will be resolved with read data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n\tread() {\n\t\tif ( this.status != 'idle' ) {\n\t\t\tthrow new CKEditorError( 'filerepository-read-wrong-status: You cannot call read if the status is different than idle.' );\n\t\t}\n\n\t\tthis.status = 'reading';\n\n\t\treturn this._reader.read( this.file )\n\t\t\t.then( data => {\n\t\t\t\tthis.status = 'idle';\n\n\t\t\t\treturn data;\n\t\t\t} )\n\t\t\t.catch( err => {\n\t\t\t\tif ( err === 'aborted' ) {\n\t\t\t\t\tthis.status = 'aborted';\n\t\t\t\t\tthrow 'aborted';\n\t\t\t\t}\n\n\t\t\t\tthis.status = 'error';\n\t\t\t\tthrow this._reader.error;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n\t * is different than `idle`.\n\t * Example usage:\n\t *\n\t *\tfileLoader.upload()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( e => {\n\t *\t\t\tif ( e === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Uploading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Uploading error.', e );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise} Returns promise that will be resolved with response data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n\tupload() {\n\t\tif ( this.status != 'idle' ) {\n\t\t\tthrow new CKEditorError( 'filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.' );\n\t\t}\n\n\t\tthis.status = 'uploading';\n\n\t\treturn this._adapter.upload()\n\t\t\t.then( data => {\n\t\t\t\tthis.uploadResponse = data;\n\t\t\t\tthis.status = 'idle';\n\n\t\t\t\treturn data;\n\t\t\t} )\n\t\t\t.catch( err => {\n\t\t\t\tif ( this.status === 'aborted' ) {\n\t\t\t\t\tthrow 'aborted';\n\t\t\t\t}\n\n\t\t\t\tthis.status = 'error';\n\t\t\t\tthrow err;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Aborts loading process.\n\t */\n\tabort() {\n\t\tconst status = this.status;\n\t\tthis.status = 'aborted';\n\n\t\tif ( status == 'reading' ) {\n\t\t\tthis._reader.abort();\n\t\t}\n\n\t\tif ( status == 'uploading' && this._adapter.abort ) {\n\t\t\tthis._adapter.abort();\n\t\t}\n\n\t\tthis._destroy();\n\t}\n\n\t/**\n\t * Performs cleanup.\n\t *\n\t * @private\n\t */\n\t_destroy() {\n\t\tthis._reader = undefined;\n\t\tthis._adapter = undefined;\n\t\tthis.data = undefined;\n\t\tthis.uploadResponse = undefined;\n\t\tthis.file = undefined;\n\t}\n}\n\nmix( FileLoader, ObservableMixin );\n\n/**\n * Upload adapter interface used by FileRepository to handle file upload. Upload adapter is a bridge between the editor and server that\n * handles file uploads. It should contain logic necessary to initiate upload process and monitor its progress.\n *\n * It should implement two methods:\n *\n * * {@link module:upload/filerepository~UploadAdapter#upload `upload()`},\n * * {@link module:upload/filerepository~UploadAdapter#abort `abort()`}.\n *\n * Example upload adapter implementation:\n *\n *\t\tclass UploadAdapter {\n *\t\t\tconstructor( loader ) {\n *\t\t\t\t// Save Loader instance to update upload progress.\n *\t\t\t\tthis.loader = loader;\n *\t\t\t}\n *\n *\t\t\tupload() {\n *\t\t\t\t// Update loader's progress.\n *\t\t\t\tserver.onUploadProgress( data => {\n *\t\t\t\t\tloader.uploadTotal = data.total;\n *\t\t\t\t\tloader.uploaded = data.uploaded;\n *\t\t\t\t} ):\n *\n *\t\t\t\t// Return promise that will be resolved when file is uploaded.\n *\t\t\t\treturn server.upload( loader.file );\n *\t\t\t}\n *\n *\t\t\tabort() {\n *\t\t\t\t// Reject promise returned from upload() method.\n *\t\t\t\tserver.abortUpload();\n *\t\t\t}\n *\t\t}\n *\n * Then upload adapter can be set to be used by {@link module:upload/filerepository~FileRepository FileRepository}:\n *\n *\t\teditor.plugins.get( 'FileRepository' ).createUploadAdapter = function( loader ) {\n *\t\t\treturn new UploadAdapter( loader );\n *\t\t};\n *\n * @interface UploadAdapter\n */\n\n/**\n * Executes the upload process.\n * This method should return a promise that will resolve when data will be uploaded to server. Promise should be\n * resolved with an object containing information about uploaded file:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png'\n *\t\t}\n *\n * Additionally, other image sizes can be provided:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png',\n *\t\t\t'160': 'http://server/size-160.image.png',\n *\t\t\t'500': 'http://server/size-500.image.png',\n *\t\t\t'1000': 'http://server/size-1000.image.png',\n *\t\t\t'1052': 'http://server/default-size.image.png'\n *\t\t}\n *\n * NOTE: When returning multiple images, the widest returned one should equal the default one. It is essential to\n * correctly set `width` attribute of the image. See this discussion:\n * https://github.com/ckeditor/ckeditor5-easy-image/issues/4 for more information.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#upload\n * @returns {Promise} Promise that should be resolved when data is uploaded.\n */\n\n/**\n * Aborts the upload process.\n * After aborting it should reject promise returned from {@link #upload upload()}.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#abort\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window, document */\n\n/**\n * @module adapter-ckfinder/utils\n */\n\nconst TOKEN_COOKIE_NAME = 'ckCsrfToken';\nconst TOKEN_LENGTH = 40;\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\n/**\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\n * between the web browser and the CKFinder server.\n *\n * @returns {String}\n */\nexport function getCsrfToken() {\n\tlet token = getCookie( TOKEN_COOKIE_NAME );\n\n\tif ( !token || token.length != TOKEN_LENGTH ) {\n\t\ttoken = generateToken( TOKEN_LENGTH );\n\t\tsetCookie( TOKEN_COOKIE_NAME, token );\n\t}\n\n\treturn token;\n}\n\n/**\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\n *\n * @param {String} name\n * @returns {String|null}\n */\nexport function getCookie( name ) {\n\tname = name.toLowerCase();\n\tconst parts = document.cookie.split( ';' );\n\n\tfor ( const part of parts ) {\n\t\tconst pair = part.split( '=' );\n\t\tconst key = decodeURIComponent( pair[ 0 ].trim().toLowerCase() );\n\n\t\tif ( key === name ) {\n\t\t\treturn decodeURIComponent( pair[ 1 ] );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets the value of the cookie with a given name.\n *\n * @param {String} name\n * @param {String} value\n */\nexport function setCookie( name, value ) {\n\tdocument.cookie = encodeURIComponent( name ) + '=' + encodeURIComponent( value ) + ';path=/';\n}\n\n// Generates the CSRF token with the given length.\n//\n// @private\n// @param {Number} length\n// @returns {string}\nfunction generateToken( length ) {\n\tlet result = '';\n\tconst randValues = new Uint8Array( length );\n\n\twindow.crypto.getRandomValues( randValues );\n\n\tfor ( let j = 0; j < randValues.length; j++ ) {\n\t\tconst character = tokenCharset.charAt( randValues[ j ] % tokenCharset.length );\n\t\tresult += Math.random() > 0.5 ? character.toUpperCase() : character;\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/* globals XMLHttpRequest, FormData */\n/**\n * @module adapter-ckfinder/uploadadapter\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport { getCsrfToken } from './utils';\n/**\n * A plugin that enables CKFinder uploads in CKEditor 5.\n *\n * Configure the upload URL in\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig#uploadUrl `ckfinder.uploadUrl`}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUploadAdapter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [FileRepository];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'CKFinderUploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const url = this.editor.config.get('ckfinder.uploadUrl');\n        if (!url) {\n            return;\n        }\n        // Register CKFinderAdapter\n        this.editor.plugins.get(FileRepository).createUploadAdapter = loader => new UploadAdapter(loader, url, this.editor.t);\n    }\n}\n/**\n * Upload adapter for CKFinder.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\nclass UploadAdapter {\n    /**\n\t * Creates a new adapter instance.\n\t *\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {String} url\n\t * @param {module:utils/locale~Locale#t} t\n\t */\n    constructor(loader, url, t) {\n        /**\n\t\t * FileLoader instance to use during the upload.\n\t\t *\n\t\t * @member {module:upload/filerepository~FileLoader} #loader\n\t\t */\n        this.loader = loader;\n        /**\n\t\t * Upload URL.\n\t\t *\n\t\t * @member {String} #url\n\t\t */\n        this.url = url;\n        /**\n\t\t * Locale translation method.\n\t\t *\n\t\t * @member {module:utils/locale~Locale#t} #t\n\t\t */\n        this.t = t;\n    }\n    /**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t * @returns {Promise}\n\t */\n    upload() {\n        return new Promise((resolve, reject) => {\n            this._initRequest();\n            this._initListeners(resolve, reject);\n            this._sendRequest();\n        });\n    }\n    /**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t * @returns {Promise}\n\t */\n    abort() {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n    /**\n\t * Initializes the XMLHttpRequest object.\n\t *\n\t * @private\n\t */\n    _initRequest() {\n        const xhr = this.xhr = new XMLHttpRequest();\n        xhr.open('POST', this.url, true);\n        xhr.responseType = 'json';\n    }\n    /**\n\t * Initializes XMLHttpRequest listeners.\n\t *\n\t * @private\n\t * @param {Function} resolve Callback function to be called when the request is successful.\n\t * @param {Function} reject Callback function to be called when the request cannot be completed.\n\t */\n    _initListeners(resolve, reject) {\n        const xhr = this.xhr;\n        const loader = this.loader;\n        const t = this.t;\n        const genericError = t('a') + ` ${ loader.file.name }.`;\n        xhr.addEventListener('error', () => reject(genericError));\n        xhr.addEventListener('abort', () => reject());\n        xhr.addEventListener('load', () => {\n            const response = xhr.response;\n            if (!response || !response.uploaded) {\n                return reject(response && response.error && response.error.message ? response.error.message : genericError);\n            }\n            resolve({ default: response.url });\n        });\n        // Upload progress when it's supported.\n        /* istanbul ignore else */\n        if (xhr.upload) {\n            xhr.upload.addEventListener('progress', evt => {\n                if (evt.lengthComputable) {\n                    loader.uploadTotal = evt.total;\n                    loader.uploaded = evt.loaded;\n                }\n            });\n        }\n    }\n    /**\n\t * Prepares the data and sends the request.\n\t *\n\t * @private\n\t */\n    _sendRequest() {\n        // Prepare form data.\n        const data = new FormData();\n        data.append('upload', this.loader.file);\n        data.append('ckCsrfToken', getCsrfToken());\n        // Send request.\n        this.xhr.send(data);\n    }\n}    /**\n * The configuration of the {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter CKFinder upload adapter}.\n *\n * Read more in {@link module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig}.\n *\n * @member {module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig} module:core/editor/editorconfig~EditorConfig#ckfinder\n */\n     /**\n * The configuration of the {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter CKFinder upload adapter}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tckfinder: {\n *\t\t\t\t\tuploadUrl: '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files&responseType=json'\n * \t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface CKFinderAdapterConfig\n */\n     /**\n * The URL to which files should be uploaded.\n *\n * @member {String} module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig#uploadUrl\n */","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module autoformat/blockautoformatediting\n */\n\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\n\n/**\n * The block autoformatting engine. It allows to format various block patterns. For example,\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class BlockAutoformatEditing {\n\t/**\n\t * Creates a listener triggered on `change` event in the document.\n\t * Calls the callback when inserted text matches the regular expression or the command name\n\t * if provided instead of the callback.\n\t *\n\t * Examples of usage:\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the commmand name:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, 'heading1' );\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the callback:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, ( context ) => {\n\t *\t\t\tconst { match } = context;\n\t *\t\t\tconst headingLevel = match[ 1 ].length;\n\t *\n\t *\t\t\teditor.execute( 'heading', {\n\t *\t\t\t\tformatId: `heading${ headingLevel }`\n\t *\t\t\t} );\n\t * \t\t} );\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {RegExp} pattern The regular expression to execute on just inserted text.\n\t * @param {Function|String} callbackOrCommand The callback to execute or the command to run when the text is matched.\n\t * In case of providing the callback, it receives the following parameter:\n\t * * {Object} match RegExp.exec() result of matching the pattern to inserted text.\n\t */\n\tconstructor( editor, pattern, callbackOrCommand ) {\n\t\tlet callback;\n\n\t\tif ( typeof callbackOrCommand == 'function' ) {\n\t\t\tcallback = callbackOrCommand;\n\t\t} else {\n\t\t\t// We assume that the actual command name was provided.\n\t\t\tconst command = callbackOrCommand;\n\n\t\t\tcallback = () => {\n\t\t\t\teditor.execute( command );\n\t\t\t};\n\t\t}\n\n\t\teditor.model.document.on( 'change', () => {\n\t\t\tconst changes = editor.model.document.differ.getChanges();\n\n\t\t\tfor ( const entry of changes ) {\n\t\t\t\tif ( entry.type == 'insert' && entry.name == '$text' ) {\n\t\t\t\t\tconst item = entry.position.textNode || entry.position.nodeAfter;\n\n\t\t\t\t\tif ( !item.parent.is( 'paragraph' ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst match = pattern.exec( item.data );\n\n\t\t\t\t\tif ( !match ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\t\t\teditor.model.enqueueChange( writer => {\n\t\t\t\t\t\t// Matched range.\n\t\t\t\t\t\tconst range = Range.createFromParentsAndOffsets( item.parent, 0, item.parent, match[ 0 ].length );\n\n\t\t\t\t\t\t// Remove matched text.\n\t\t\t\t\t\twriter.remove( range );\n\n\t\t\t\t\t\tcallback( { match } );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module autoformat/inlineautoformatediting\n */\n\nimport LiveRange from '@ckeditor/ckeditor5-engine/src/model/liverange';\n\n/**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class InlineAutoformatEditing {\n\t/**\n\t * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n\t *\n\t * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n\t * On every change applied to the model the autoformatting engine checks the text on the left of the selection\n\t * and executes the provided action if the text matches given criteria (regular expression or callback).\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Function|RegExp} testRegexpOrCallback The regular expression or callback to execute on text.\n\t * Provided regular expression *must* have three capture groups. The first and the third capture group\n\t * should match opening and closing delimiters. The second capture group should match the text to format.\n\t *\n\t *\t\t// Matches the `**bold text**` pattern.\n\t *\t\t// There are three capturing groups:\n\t *\t\t// - The first to match the starting `**` delimiter.\n\t *\t\t// - The second to match the text to format.\n\t *\t\t// - The third to match the ending `**` delimiter.\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n\t * The function should return proper \"ranges\" to delete and format.\n\t *\n\t *\t\t{\n\t *\t\t\tremove: [\n\t *\t\t\t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n\t *\t\t\t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n\t *\t\t\t],\n\t *\t\t\tformat: [\n\t *\t\t\t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n\t *\t\t\t]\n\t *\t\t}\n\t *\n\t * @param {Function|String} attributeOrCallback The name of attribute to apply on matching text or a callback for manual\n\t * formatting.\n\t *\n\t *\t\t// Use attribute name:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t *\t\t// Use formatting callback:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, validRanges ) => {\n\t *\t\t\tfor ( let range of validRanges ) {\n\t *\t\t\t\twriter.setAttribute( command, true, range );\n\t *\t\t\t}\n\t *\t\t} );\n\t */\n\tconstructor( editor, testRegexpOrCallback, attributeOrCallback ) {\n\t\tlet regExp;\n\t\tlet command;\n\t\tlet testCallback;\n\t\tlet formatCallback;\n\n\t\tif ( testRegexpOrCallback instanceof RegExp ) {\n\t\t\tregExp = testRegexpOrCallback;\n\t\t} else {\n\t\t\ttestCallback = testRegexpOrCallback;\n\t\t}\n\n\t\tif ( typeof attributeOrCallback == 'string' ) {\n\t\t\tcommand = attributeOrCallback;\n\t\t} else {\n\t\t\tformatCallback = attributeOrCallback;\n\t\t}\n\n\t\t// A test callback run on changed text.\n\t\ttestCallback = testCallback || ( text => {\n\t\t\tlet result;\n\t\t\tconst remove = [];\n\t\t\tconst format = [];\n\n\t\t\twhile ( ( result = regExp.exec( text ) ) !== null ) {\n\t\t\t\t// There should be full match and 3 capture groups.\n\t\t\t\tif ( result && result.length < 4 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet {\n\t\t\t\t\tindex,\n\t\t\t\t\t'1': leftDel,\n\t\t\t\t\t'2': content,\n\t\t\t\t\t'3': rightDel\n\t\t\t\t} = result;\n\n\t\t\t\t// Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n\t\t\t\tconst found = leftDel + content + rightDel;\n\t\t\t\tindex += result[ 0 ].length - found.length;\n\n\t\t\t\t// Start and End offsets of delimiters to remove.\n\t\t\t\tconst delStart = [\n\t\t\t\t\tindex,\n\t\t\t\t\tindex + leftDel.length\n\t\t\t\t];\n\t\t\t\tconst delEnd = [\n\t\t\t\t\tindex + leftDel.length + content.length,\n\t\t\t\t\tindex + leftDel.length + content.length + rightDel.length\n\t\t\t\t];\n\n\t\t\t\tremove.push( delStart );\n\t\t\t\tremove.push( delEnd );\n\n\t\t\t\tformat.push( [ index + leftDel.length, index + leftDel.length + content.length ] );\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tremove,\n\t\t\t\tformat\n\t\t\t};\n\t\t} );\n\n\t\t// A format callback run on matched text.\n\t\tformatCallback = formatCallback || ( ( writer, validRanges ) => {\n\t\t\tfor ( const range of validRanges ) {\n\t\t\t\twriter.setAttribute( command, true, range );\n\t\t\t}\n\t\t} );\n\n\t\teditor.model.document.on( 'change', () => {\n\t\t\tconst changes = editor.model.document.differ.getChanges();\n\n\t\t\tfor ( const entry of changes ) {\n\t\t\t\tif ( entry.type != 'insert' || entry.name != '$text' ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\t\tif ( !selection.isCollapsed || !selection.focus || !selection.focus.parent ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst block = selection.focus.parent;\n\t\t\t\tconst text = getText( block ).slice( 0, selection.focus.offset );\n\t\t\t\tconst ranges = testCallback( text );\n\t\t\t\tconst rangesToFormat = [];\n\n\t\t\t\t// Apply format before deleting text.\n\t\t\t\tranges.format.forEach( range => {\n\t\t\t\t\tif ( range[ 0 ] === undefined || range[ 1 ] === undefined ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\trangesToFormat.push( LiveRange.createFromParentsAndOffsets(\n\t\t\t\t\t\tblock, range[ 0 ],\n\t\t\t\t\t\tblock, range[ 1 ]\n\t\t\t\t\t) );\n\t\t\t\t} );\n\n\t\t\t\tconst rangesToRemove = [];\n\n\t\t\t\t// Reverse order to not mix the offsets while removing.\n\t\t\t\tranges.remove.slice().reverse().forEach( range => {\n\t\t\t\t\tif ( range[ 0 ] === undefined || range[ 1 ] === undefined ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\trangesToRemove.push( LiveRange.createFromParentsAndOffsets(\n\t\t\t\t\t\tblock, range[ 0 ],\n\t\t\t\t\t\tblock, range[ 1 ]\n\t\t\t\t\t) );\n\t\t\t\t} );\n\n\t\t\t\tif ( !( rangesToFormat.length && rangesToRemove.length ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\t\teditor.model.enqueueChange( writer => {\n\t\t\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, command );\n\n\t\t\t\t\t// Apply format.\n\t\t\t\t\tformatCallback( writer, validRanges );\n\n\t\t\t\t\t// Detach ranges used to apply Autoformat. Prevents memory leaks. #39\n\t\t\t\t\trangesToFormat.forEach( range => range.detach() );\n\n\t\t\t\t\t// Remove delimiters.\n\t\t\t\t\tfor ( const range of rangesToRemove ) {\n\t\t\t\t\t\twriter.remove( range );\n\n\t\t\t\t\t\t// Prevents memory leaks.\n\t\t\t\t\t\t// https://github.com/ckeditor/ckeditor5-autoformat/issues/39\n\t\t\t\t\t\trange.detach();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Returns whole text from parent element by adding all data from text nodes together.\n//\n// @private\n// @param {module:engine/model/element~Element} element\n// @returns {String}\nfunction getText( element ) {\n\treturn Array.from( element.getChildren() ).reduce( ( a, b ) => a + b.data, '' );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/attributecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\nexport default class AttributeCommand extends Command {\n\t/**\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {String} attributeKey Attribute that will be set by the command.\n\t */\n\tconstructor( editor, attributeKey ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeKey = attributeKey;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n\t\t *\n\t\t * * If the selection is not empty &ndash; That it starts in a text (or another node) which has the attribute set.\n\t\t * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n\t\t * text will have this attribute, too).\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = doc.selection.hasAttribute( this.attributeKey );\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\n\t}\n\n\t/**\n\t * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n\t * otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( this.attributeKey, true );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( this.attributeKey, value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( this.attributeKey, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/bold/boldediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst BOLD = 'bold';\n\n/**\n * The bold editing feature.\n *\n * It registers the `bold` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\t// Allow bold attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: BOLD } );\n\n\t\t// Build converter from model to view for data and editing pipelines.\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: BOLD,\n\t\t\tview: 'strong',\n\t\t\tupcastAlso: [\n\t\t\t\t'b',\n\t\t\t\t{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\t'font-weight': 'bold'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create bold command.\n\t\teditor.commands.add( BOLD, new AttributeCommand( editor, BOLD ) );\n\n\t\t// Set the Ctrl+B keystroke.\n\t\teditor.keystrokes.set( 'CTRL+B', BOLD );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module basic-styles/bold/boldui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport boldIcon from '../../theme/icons/bold.svg';\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, locale => {\n            const command = editor.commands.get(BOLD);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('b'),\n                icon: boldIcon,\n                keystroke: 'CTRL+B',\n                tooltip: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(BOLD));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/italic/italicediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst ITALIC = 'italic';\n\n/**\n * The italic editing feature.\n *\n * It registers the `italic` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<em>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow italic attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: ITALIC } );\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: ITALIC,\n\t\t\tview: 'i',\n\t\t\tupcastAlso: [\n\t\t\t\t'em',\n\t\t\t\t{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\t'font-style': 'italic'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create italic command.\n\t\teditor.commands.add( ITALIC, new AttributeCommand( editor, ITALIC ) );\n\n\t\t// Set the Ctrl+I keystroke.\n\t\teditor.keystrokes.set( 'CTRL+I', ITALIC );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('c'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(ITALIC));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/first\n */\n\n/**\n * Returns first item of the given `iterable`.\n *\n * @param {Iterable.<*>} iterable\n * @returns {*}\n */\nexport default function first( iterable ) {\n\tconst iteratorItem = iterable.next();\n\n\tif ( iteratorItem.done ) {\n\t\treturn null;\n\t}\n\n\treturn iteratorItem.value;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module block-quote/blockquotecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport Position from '@ckeditor/ckeditor5-engine/src/model/position';\nimport Element from '@ckeditor/ckeditor5-engine/src/model/element';\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The block quote command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class BlockQuoteCommand extends Command {\n\t/**\n\t * Whether the selection starts in a block quote.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #value is on}, all block quotes within\n\t * the selection will be removed. If it is off, all selected blocks will be wrapped with\n\t * a block quote.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst schema = model.schema;\n\t\tconst blocks = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tif ( this.value ) {\n\t\t\t\tthis._removeQuote( writer, blocks.filter( findQuote ) );\n\t\t\t} else {\n\t\t\t\tconst blocksToQuote = blocks.filter( block => {\n\t\t\t\t\t// Already quoted blocks needs to be considered while quoting too\n\t\t\t\t\t// in order to reuse their <bQ> elements.\n\t\t\t\t\treturn findQuote( block ) || checkCanBeQuoted( schema, block );\n\t\t\t\t} );\n\n\t\t\t\tthis._applyQuote( writer, blocksToQuote );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\tconst firstBlock = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// In the current implementation, the block quote must be an immediate parent of a block element.\n\t\treturn !!( firstBlock && findQuote( firstBlock ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn checkCanBeQuoted( schema, firstBlock );\n\t}\n\n\t/**\n\t * Removes the quote from given blocks.\n\t *\n\t * If blocks which are supposed to be \"unquoted\" are in the middle of a quote,\n\t * start it or end it, then the quote will be split (if needed) and the blocks\n\t * will be moved out of it, so other quoted blocks remained quoted.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t */\n\t_removeQuote( writer, blocks ) {\n\t\t// Unquote all groups of block. Iterate in the reverse order to not break following ranges.\n\t\tgetRangesOfBlockGroups( blocks ).reverse().forEach( groupRange => {\n\t\t\tif ( groupRange.start.isAtStart && groupRange.end.isAtEnd ) {\n\t\t\t\twriter.unwrap( groupRange.start.parent );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The group of blocks are at the beginning of an <bQ> so let's move them left (out of the <bQ>).\n\t\t\tif ( groupRange.start.isAtStart ) {\n\t\t\t\tconst positionBefore = Position.createBefore( groupRange.start.parent );\n\n\t\t\t\twriter.move( groupRange, positionBefore );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The blocks are in the middle of an <bQ> so we need to split the <bQ> after the last block\n\t\t\t// so we move the items there.\n\t\t\tif ( !groupRange.end.isAtEnd ) {\n\t\t\t\twriter.split( groupRange.end );\n\t\t\t}\n\n\t\t\t// Now we are sure that groupRange.end.isAtEnd is true, so let's move the blocks right.\n\n\t\t\tconst positionAfter = Position.createAfter( groupRange.end.parent );\n\n\t\t\twriter.move( groupRange, positionAfter );\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the quote to given blocks.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t */\n\t_applyQuote( writer, blocks ) {\n\t\tconst quotesToMerge = [];\n\n\t\t// Quote all groups of block. Iterate in the reverse order to not break following ranges.\n\t\tgetRangesOfBlockGroups( blocks ).reverse().forEach( groupRange => {\n\t\t\tlet quote = findQuote( groupRange.start );\n\n\t\t\tif ( !quote ) {\n\t\t\t\tquote = new Element( 'blockQuote' );\n\n\t\t\t\twriter.wrap( groupRange, quote );\n\t\t\t}\n\n\t\t\tquotesToMerge.push( quote );\n\t\t} );\n\n\t\t// Merge subsequent <bQ> elements. Reverse the order again because this time we want to go through\n\t\t// the <bQ> elements in the source order (due to how merge works – it moves the right element's content\n\t\t// to the first element and removes the right one. Since we may need to merge a couple of subsequent `<bQ>` elements\n\t\t// we want to keep the reference to the first (furthest left) one.\n\t\tquotesToMerge.reverse().reduce( ( currentQuote, nextQuote ) => {\n\t\t\tif ( currentQuote.nextSibling == nextQuote ) {\n\t\t\t\twriter.merge( Position.createAfter( currentQuote ) );\n\n\t\t\t\treturn currentQuote;\n\t\t\t}\n\n\t\t\treturn nextQuote;\n\t\t} );\n\t}\n}\n\nfunction findQuote( elementOrPosition ) {\n\treturn elementOrPosition.parent.name == 'blockQuote' ? elementOrPosition.parent : null;\n}\n\n// Returns a minimal array of ranges containing groups of subsequent blocks.\n//\n// content:         abcdefgh\n// blocks:          [ a, b, d , f, g, h ]\n// output ranges:   [ab]c[d]e[fgh]\n//\n// @param {Array.<module:engine/model/element~Element>} blocks\n// @returns {Array.<module:engine/model/range~Range>}\nfunction getRangesOfBlockGroups( blocks ) {\n\tlet startPosition;\n\tlet i = 0;\n\tconst ranges = [];\n\n\twhile ( i < blocks.length ) {\n\t\tconst block = blocks[ i ];\n\t\tconst nextBlock = blocks[ i + 1 ];\n\n\t\tif ( !startPosition ) {\n\t\t\tstartPosition = Position.createBefore( block );\n\t\t}\n\n\t\tif ( !nextBlock || block.nextSibling != nextBlock ) {\n\t\t\tranges.push( new Range( startPosition, Position.createAfter( block ) ) );\n\t\t\tstartPosition = null;\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn ranges;\n}\n\n// Checks whether <bQ> can wrap the block.\nfunction checkCanBeQuoted( schema, block ) {\n\t// TMP will be replaced with schema.checkWrap().\n\tconst isBQAllowed = schema.checkChild( block.parent, 'blockQuote' );\n\tconst isBlockAllowedInBQ = schema.checkChild( [ '$root', 'blockQuote' ], block );\n\n\treturn isBQAllowed && isBlockAllowedInBQ;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module block-quote/blockquoteediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BlockQuoteCommand from './blockquotecommand';\n\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\n\t\teditor.commands.add( 'blockQuote', new BlockQuoteCommand( editor ) );\n\n\t\tschema.register( 'blockQuote', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowContentOf: '$root'\n\t\t} );\n\n\t\t// Disallow blockQuote in blockQuote.\n\t\tschema.addChildCheck( ( ctx, childDef ) => {\n\t\t\tif ( ctx.endsWith( 'blockQuote' ) && childDef.name == 'blockQuote' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.elementToElement( { model: 'blockQuote', view: 'blockquote' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'blockQuote' );\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n\t\t// This listener is added in afterInit in order to register it after list's feature listener.\n\t\t// We can't use a priority for this, because 'low' is already used by the enter feature, unless\n\t\t// we'd use numeric priority in this case.\n\t\tthis.listenTo( this.editor.editing.view.document, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.isEmpty && command.value ) {\n\t\t\t\tthis.editor.execute( 'blockQuote' );\n\t\t\t\tthis.editor.editing.view.scrollToTheSelection();\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module block-quote/blockquoteui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport quoteIcon from '@ckeditor/ckeditor5-core/theme/icons/quote.svg';\nimport '../theme/blockquote.css';\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('blockQuote', locale => {\n            const command = editor.commands.get('blockQuote');\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: t('d'),\n                icon: quoteIcon,\n                tooltip: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => editor.execute('blockQuote'));\n            return buttonView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* eslint-env browser */\n\n'use strict';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nconst BASE64_HEADER_REG_EXP = /^data:(\\S*?);base64,/;\n\n/**\n * FileUploader class used to upload single file.\n */\nclass FileUploader {\n\t/**\n\t * Creates `FileUploader` instance.\n\t *\n\t * @param {Blob|String} fileOrData A blob object or a data string encoded with Base64.\n\t * @param {Token} token Token used for authentication.\n\t * @param {String} apiAddress API address.\n\t */\n\tconstructor( fileOrData, token, apiAddress ) {\n\t\tif ( !fileOrData ) {\n\t\t\tthrow new Error( 'File must be provided' );\n\t\t}\n\n\t\tif ( !token ) {\n\t\t\tthrow new Error( 'Token must be provided' );\n\t\t}\n\n\t\tif ( !apiAddress ) {\n\t\t\tthrow new Error( 'Api address must be provided' );\n\t\t}\n\n\t\t/**\n\t\t * A file that is being uploaded.\n\t\t *\n\t\t * @type {Blob}\n\t\t */\n\t\tthis.file = _isBase64( fileOrData ) ? _base64ToBlob( fileOrData ) : fileOrData;\n\n\t\t/**\n\t\t * CKEditor Cloud Services access token.\n\t\t *\n\t\t * @type {Token}\n\t\t * @private\n\t\t */\n\t\tthis._token = token;\n\n\t\t/**\n\t\t * CKEditor Cloud Services API address.\n\t\t *\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._apiAddress = apiAddress;\n\t}\n\n\t/**\n\t * Registers callback on `progress` event.\n\t *\n\t * @chainable\n\t * @param {Function} callback\n\t * @returns {FileUploader}\n\t */\n\tonProgress( callback ) {\n\t\tthis.on( 'progress', ( event, data ) => callback( data ) );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Registers callback on `error` event. Event is called once when error occurs.\n\t *\n\t * @chainable\n\t * @param {Function} callback\n\t * @returns {FileUploader}\n\t */\n\tonError( callback ) {\n\t\tthis.once( 'error', ( event, data ) => callback( data ) );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Aborts upload process.\n\t */\n\tabort() {\n\t\tthis.xhr.abort();\n\t}\n\n\t/**\n\t * Sends XHR request to API.\n\t *\n\t * @chainable\n\t * @returns {Promise.<Object>}\n\t */\n\tsend() {\n\t\tthis._prepareRequest();\n\t\tthis._attachXHRListeners();\n\n\t\treturn this._sendRequest();\n\t}\n\n\t/**\n\t * Prepares XHR request.\n\t *\n\t * @private\n\t */\n\t_prepareRequest() {\n\t\tconst xhr = new XMLHttpRequest();\n\n\t\txhr.open( 'POST', this._apiAddress );\n\t\txhr.setRequestHeader( 'Authorization', this._token.value );\n\t\txhr.responseType = 'json';\n\n\t\tthis.xhr = xhr;\n\t}\n\n\t/**\n\t * Attaches listeners to the XHR.\n\t *\n\t * @private\n\t */\n\t_attachXHRListeners() {\n\t\tconst that = this;\n\t\tconst xhr = this.xhr;\n\n\t\txhr.addEventListener( 'error', onError( 'Network Error' ) );\n\t\txhr.addEventListener( 'abort', onError( 'Abort' ) );\n\n\t\t/* istanbul ignore else */\n\t\tif ( xhr.upload ) {\n\t\t\txhr.upload.addEventListener( 'progress', event => {\n\t\t\t\tif ( event.lengthComputable ) {\n\t\t\t\t\tthis.fire( 'progress', {\n\t\t\t\t\t\ttotal: event.total,\n\t\t\t\t\t\tuploaded: event.loaded\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst statusCode = xhr.status;\n\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\treturn this.fire( 'error', xhrResponse.message || xhrResponse.error );\n\t\t\t}\n\t\t} );\n\n\t\tfunction onError( message ) {\n\t\t\treturn () => that.fire( 'error', message );\n\t\t}\n\t}\n\n\t/**\n\t * Sends XHR request.\n\t *\n\t * @private\n\t */\n\t_sendRequest() {\n\t\tconst formData = new FormData();\n\t\tconst xhr = this.xhr;\n\n\t\tformData.append( 'file', this.file );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\txhr.addEventListener( 'load', () => {\n\t\t\t\tconst statusCode = xhr.status;\n\t\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\t\treturn reject( xhrResponse.message || xhrResponse.error );\n\t\t\t\t}\n\n\t\t\t\treturn resolve( xhrResponse );\n\t\t\t} );\n\n\t\t\txhr.addEventListener( 'error', () => reject( 'Network Error' ) );\n\t\t\txhr.addEventListener( 'abort', () => reject( 'Abort' ) );\n\n\t\t\txhr.send( formData );\n\t\t} );\n\t}\n\n\t/**\n\t * Fired when error occurs.\n\t *\n\t * @event error\n\t * @param {String} error Error message\n\t */\n\n\t/**\n\t * Fired on upload progress.\n\t *\n\t * @event progress\n\t * @param {Object} status Total and uploaded status\n\t */\n}\n\nmix( FileUploader, EmitterMixin );\n\n/**\n * Transforms Base64 string data into file.\n *\n * @param {String} base64 String data.\n * @param {Number} [sliceSize=512]\n * @returns {Blob}\n * @private\n */\nfunction _base64ToBlob( base64, sliceSize = 512 ) {\n\ttry {\n\t\tconst contentType = base64.match( BASE64_HEADER_REG_EXP )[ 1 ];\n\t\tconst base64Data = atob( base64.replace( BASE64_HEADER_REG_EXP, '' ) );\n\n\t\tconst byteArrays = [];\n\n\t\tfor ( let offset = 0; offset < base64Data.length; offset += sliceSize ) {\n\t\t\tconst slice = base64Data.slice( offset, offset + sliceSize );\n\t\t\tconst byteNumbers = new Array( slice.length );\n\n\t\t\tfor ( let i = 0; i < slice.length; i++ ) {\n\t\t\t\tbyteNumbers[ i ] = slice.charCodeAt( i );\n\t\t\t}\n\n\t\t\tbyteArrays.push( new Uint8Array( byteNumbers ) );\n\t\t}\n\n\t\treturn new Blob( byteArrays, { type: contentType } );\n\t} catch ( error ) {\n\t\tthrow new Error( 'Problem with decoding Base64 image data.' );\n\t}\n}\n\n/**\n * Checks that string is Base64.\n *\n * @param {String} string\n * @returns {Boolean}\n * @private\n */\nfunction _isBase64( string ) {\n\tif ( typeof string !== 'string' ) {\n\t\treturn false;\n\t}\n\n\tconst match = string.match( BASE64_HEADER_REG_EXP );\n\treturn !!( match && match.length );\n}\n\nexport default FileUploader;\n","/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* eslint-env browser */\n\n'use strict';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\nconst DEFAULT_OPTIONS = { refreshInterval: 3600000, autoRefresh: true };\n\n/**\n * Class representing the token used for communication with CKEditor Cloud Services.\n * Value of the token is retrieving from the specified URL and is refreshed every 1 hour by default.\n *\n * @mixes ObservableMixin\n */\nclass Token {\n\t/**\n\t * Creates `Token` instance.\n\t * Method `init` should be called after using the constructor or use `create` method instead.\n\t *\n\t * @param {String} tokenUrl Endpoint address to download the token.\n\t * @param {Object} options\n\t * @param {String} [options.initValue] Initial value of the token.\n\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\n\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\n\t */\n\tconstructor( tokenUrl, options = DEFAULT_OPTIONS ) {\n\t\tif ( !tokenUrl ) {\n\t\t\tthrow new Error( '`tokenUrl` must be provided' );\n\t\t}\n\n\t\t/**\n\t\t * Value of the token.\n\t\t * The value of the token is null if `initValue` is not provided or `init` method was not called.\n\t\t * `create` method creates token with initialized value from url.\n\t\t *\n\t\t * @name value\n\t\t * @type {String}\n\t\t * @observable\n\t\t * @readonly\n\t\t * @memberOf Token#\n\t\t */\n\t\tthis.set( 'value', options.initValue );\n\n\t\t/**\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._tokenUrl = tokenUrl;\n\n\t\t/**\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._options = Object.assign( {}, DEFAULT_OPTIONS, options );\n\t}\n\n\t/**\n\t * Initializes the token.\n\t *\n\t * @returns {Promise.<Token>}\n\t */\n\tinit() {\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\tif ( this._options.autoRefresh ) {\n\t\t\t\tthis._startRefreshing();\n\t\t\t}\n\n\t\t\tif ( !this.value ) {\n\t\t\t\tthis._refreshToken()\n\t\t\t\t\t.then( resolve )\n\t\t\t\t\t.catch( reject );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve( this );\n\t\t} );\n\t}\n\n\t/**\n\t * Gets the new token.\n\t *\n\t * @protected\n\t * @returns {Promise.<Token>}\n\t */\n\t_refreshToken() {\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\tconst xhr = new XMLHttpRequest();\n\n\t\t\txhr.open( 'GET', this._tokenUrl );\n\n\t\t\txhr.addEventListener( 'load', () => {\n\t\t\t\tconst statusCode = xhr.status;\n\t\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\t\treturn reject( 'Cannot download new token!' );\n\t\t\t\t}\n\n\t\t\t\tthis.set( 'value', xhrResponse );\n\n\t\t\t\treturn resolve( this );\n\t\t\t} );\n\n\t\t\txhr.addEventListener( 'error', () => reject( 'Network Error' ) );\n\t\t\txhr.addEventListener( 'abort', () => reject( 'Abort' ) );\n\n\t\t\txhr.send();\n\t\t} );\n\t}\n\n\t/**\n\t * Starts value refreshing every `refreshInterval` time.\n\t *\n\t * @protected\n\t */\n\t_startRefreshing() {\n\t\tthis._refreshInterval = setInterval( this._refreshToken.bind( this ), this._options.refreshInterval );\n\t}\n\n\t/**\n\t * Stops value refreshing.\n\t *\n\t * @protected\n\t */\n\t_stopRefreshing() {\n\t\tclearInterval( this._refreshInterval );\n\t}\n\n\t/**\n\t * Creates a initialized {@link Token} instance.\n\t *\n\t * @param {String} tokenUrl Endpoint address to download the token.\n\t * @param {Object} options\n\t * @param {String} [options.initValue] Initial value of the token.\n\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\n\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\n\t * @returns {Promise.<Token>}\n\t */\n\tstatic create( tokenUrl, options = DEFAULT_OPTIONS ) {\n\t\tconst token = new Token( tokenUrl, options );\n\n\t\treturn token.init();\n\t}\n}\n\nmix( Token, ObservableMixin );\n\nexport default Token;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module cloudservices/cloudservices\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Token from '@ckeditor/ckeditor-cloudservices-core/src/token/token';\n\n/**\n * Plugin introducing CKEditor 5's Cloud Services integration.\n * It takes care of the {@link module:cloudservices/cloudservices~CloudServicesConfig `config.cloudService`}\n * configuration options and initializes the token provider.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CloudServices extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst config = editor.config;\n\n\t\tconst options = config.get( 'cloudServices' ) || {};\n\n\t\tfor ( const optionName in options ) {\n\t\t\tthis[ optionName ] = options[ optionName ];\n\t\t}\n\n\t\t/**\n\t\t * The authentication token URL for CKEditor Cloud Services.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String|undefined} #tokenUrl\n\t\t */\n\n\t\t/**\n\t\t * The URL to which the files should be uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @default 'https://files.cke-cs.com/upload/'\n\t\t * @member {String} #uploadUrl\n\t\t */\n\n\t\tif ( !this.uploadUrl ) {\n\t\t\tthis.uploadUrl = 'https://files.cke-cs.com/upload/';\n\t\t}\n\n\t\t/**\n\t\t * Other plugins use this token for the authorization process. It handles token requesting and refreshing.\n\t\t * Its value is `null` when {@link module:cloudservices/cloudservices~CloudServicesConfig#tokenUrl} is not provided.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object|null} #token\n\t\t */\n\n\t\tif ( !this.tokenUrl ) {\n\t\t\tthis.token = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.token = new CloudServices.Token( this.tokenUrl );\n\n\t\treturn this.token.init();\n\t}\n}\n\nCloudServices.Token = Token;\n\n/**\n * The configuration of CKEditor Cloud Services. Introduced by the {@link module:cloudservices/cloudservices~CloudServices} plugin.\n *\n * Read more in {@link module:cloudservices/cloudservices~CloudServicesConfig}.\n *\n * @member {module:cloudservices/cloudservices~CloudServicesConfig} module:core/editor/editorconfig~EditorConfig#cloudServices\n */\n\n/**\n * The configuration for all plugins using CKEditor Cloud Services.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n * \t\t\t\tcloudServices: ... // CloudServices config.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface CloudServicesConfig\n */\n\n/**\n * The authentication token endpoint URL for CKEditor Cloud Services.\n * The token endpoint is used to authenticate all plugins using Cloud Services (for instance – Easy Image).\n * The token URL has to point to the service where the token is generated.\n *\n * You can read about creating token endpoints in the\n * {@glink @cs guides/token-endpoints/tokenendpoint Creating token endpoint} guide\n * in {@glink @cs index Cloud Services documentation}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tcloudServices: {\n *\t\t\t\t\ttokenUrl: TOKEN_URL\n *\t\t\t\t},\n * \t\t\t\tplugins: [ ArticlePluginSet, EasyImage ],\n *\t\t\t\ttoolbar: [ 'headings', '|', 'undo', 'redo', 'uploadImage' ],\n *\t\t\t\timage: {\n *\t\t\t\t\ttoolbar: [ 'imageStyleFull', 'imageStyleSide', '|', 'imageTextAlternative' ]\n *\t\t\t\t}\n *\t\t\t} );\n *\n * @member {String} module:cloudservices/cloudservices~CloudServicesConfig#tokenUrl\n */\n\n/**\n * The URL to which the files should be uploaded.\n *\n * @member {String} [module:cloudservices/cloudservices~CloudServicesConfig#uploadUrl='https://files.cke-cs.com/upload/']\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n* @module easy-image/cloudservicesuploadadapter\n*/\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport UploadGateway from '@ckeditor/ckeditor-cloudservices-core/src/uploadgateway/uploadgateway';\nimport CloudServices from '@ckeditor/ckeditor5-cloudservices/src/cloudservices';\n\n/**\n * A plugin which enables upload to Cloud Services.\n *\n * It is mainly used by the {@link module:easy-image/easyimage~EasyImage} feature.\n *\n * After enabling this adapter you need to configure the Cloud Services integration through\n * {@link module:cloudservices/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CloudServicesUploadAdapter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ FileRepository, CloudServices ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\tconst cloudServices = editor.plugins.get( CloudServices );\n\n\t\tconst token = cloudServices.token;\n\t\tconst uploadUrl = cloudServices.uploadUrl;\n\n\t\tif ( !token ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._uploadGateway = new CloudServicesUploadAdapter._UploadGateway( token, uploadUrl );\n\n\t\teditor.plugins.get( FileRepository ).createUploadAdapter = loader => {\n\t\t\treturn new Adapter( this._uploadGateway, loader );\n\t\t};\n\t}\n}\n\n/**\n * @private\n */\nclass Adapter {\n\tconstructor( uploadGateway, loader ) {\n\t\tthis.uploadGateway = uploadGateway;\n\n\t\tthis.loader = loader;\n\t}\n\n\tupload() {\n\t\tthis.fileUploader = this.uploadGateway.upload( this.loader.file );\n\n\t\tthis.fileUploader.on( 'progress', ( evt, data ) => {\n\t\t\tthis.loader.uploadTotal = data.total;\n\t\t\tthis.loader.uploaded = data.uploaded;\n\t\t} );\n\n\t\treturn this.fileUploader.send();\n\t}\n\n\tabort() {\n\t\tthis.fileUploader.abort();\n\t}\n}\n\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\nCloudServicesUploadAdapter._UploadGateway = UploadGateway;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/image/converters\n */\n\nimport ModelPosition from '@ckeditor/ckeditor5-engine/src/model/position';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<figure class=\"image\"><img src=\"...\" alt=\"...\"></img></figure>\n *\n * to the model representation:\n *\n *\t\t<image src=\"...\" alt=\"...\"></image>\n *\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\n * of the `<image>` model element.\n *\n * @returns {Function}\n */\nexport function viewFigureToModel() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element:figure', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\t// Do not convert if this is not an \"image figure\".\n\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: true, class: 'image' } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find an image element inside the figure element.\n\t\tconst viewImage = Array.from( data.viewItem.getChildren() ).find( viewChild => viewChild.is( 'img' ) );\n\n\t\t// Do not convert if image element is absent, is missing src attribute or was already converted.\n\t\tif ( !viewImage || !viewImage.hasAttribute( 'src' ) || !conversionApi.consumable.test( viewImage, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert view image to model image.\n\t\tconst conversionResult = conversionApi.convertItem( viewImage, data.modelCursor );\n\n\t\t// Get image element from conversion result.\n\t\tconst modelImage = first( conversionResult.modelRange.getItems() );\n\n\t\t// When image wasn't successfully converted then finish conversion.\n\t\tif ( !modelImage ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert rest of the figure element's children as an image children.\n\t\tconversionApi.convertChildren( data.viewItem, ModelPosition.createAt( modelImage ) );\n\n\t\t// Set image range as conversion result.\n\t\tdata.modelRange = conversionResult.modelRange;\n\n\t\t// Continue conversion where image conversion ends.\n\t\tdata.modelCursor = conversionResult.modelCursor;\n\t}\n}\n\n/**\n * Converter used to convert `srcset` model image's attribute to `srcset`, `sizes` and `width` attributes in the view.\n *\n * @return {Function}\n */\nexport function srcsetAttributeConverter() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'attribute:srcset:image', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst writer = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue === null ) {\n\t\t\tconst srcset = data.attributeOldValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.removeAttribute( 'srcset', img );\n\t\t\t\twriter.removeAttribute( 'sizes', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.removeAttribute( 'width', img );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst srcset = data.attributeNewValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.setAttribute( 'srcset', srcset.data, img );\n\t\t\t\t// Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\n\t\t\t\twriter.setAttribute( 'sizes', '100vw', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.setAttribute( 'width', srcset.width, img );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function modelToViewAttributeConverter( attributeKey ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( `attribute:${ attributeKey }:image`, converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue !== null ) {\n\t\t\tviewWriter.setAttribute( data.attributeKey, data.attributeNewValue, img );\n\t\t} else {\n\t\t\tviewWriter.removeAttribute( data.attributeKey, img );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n'use strict';\n\nimport FileUploader from './fileuploader';\n\n/**\n * UploadGateway abstracts file uploads to CKEditor Cloud Services.\n */\nexport default class UploadGateway {\n\t/**\n\t * Creates `UploadGateway` instance.\n\t *\n\t * @param {Token} token Token used for authentication.\n\t * @param {String} apiAddress API address.\n\t */\n\tconstructor( token, apiAddress ) {\n\t\tif ( !token ) {\n\t\t\tthrow new Error( 'Token must be provided' );\n\t\t}\n\n\t\tif ( !apiAddress ) {\n\t\t\tthrow new Error( 'Api address must be provided' );\n\t\t}\n\n\t\t/**\n\t\t * CKEditor Cloud Services access token.\n\t\t *\n\t\t * @type {Token}\n\t\t * @private\n\t\t */\n\t\tthis._token = token;\n\n\t\t/**\n\t\t * CKEditor Cloud Services API address.\n\t\t *\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._apiAddress = apiAddress;\n\t}\n\n\t/**\n\t * Creates a {@link FileUploader} instance that wraps file upload process.\n\t * The file is being sent at a time when the method {@link FileUploader#then then} is called\n\t * or when {@link FileUploader#send send} method is called.\n\t *\n\t *     const token = await Token.create( 'https://token-endpoint' );\n\t *     new UploadGateway( token, 'https://example.org' )\n\t *        .upload( 'FILE' )\n\t *        .onProgress( ( data ) => console.log( data ) )\n\t *        .send()\n\t *        .then( ( response ) => console.log( response ) );\n\t *\n\t *     // OR\n\t *\n\t *     const token = await Token.create( 'https://token-endpoint' );\n\t *     new UploadGateway( token, 'https://example.org' )\n\t *         .upload( 'FILE' )\n\t *         .onProgress( ( data ) => console.log( data ) )\n\t *         .send()\n\t *         .then( ( response ) => console.log( response ) );\n\t *\n\t * @param {Blob/String} fileOrData A blob object or a data string encoded with Base64.\n\t * @returns {FileUploader} Returns `FileUploader` instance.\n\t */\n\tupload( fileOrData ) {\n\t\treturn new FileUploader( fileOrData, this._token, this._apiAddress );\n\t}\n}\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcast-converters~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n\t/**\n\t * Creates class instance.\n\t */\n\tconstructor() {\n\t\tthis._stack = [];\n\t}\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\n\t * @param {module:engine/view/writer~Writer} writer\n\t */\n\tadd( descriptor, writer ) {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param {String} id Id of the descriptor to remove.\n\t * @param {module:engine/view/writer~Writer} writer\n\t */\n\tremove( id, writer ) {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n\t * descriptor with same id is already present.\n\t *\n\t * @private\n\t * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\n\t */\n\t_insertDescriptor( descriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It have different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @private\n\t * @param {String} id Descriptor's id.\n\t */\n\t_removeDescriptor( id ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\nmix( HighlightStack, EmitterMixin );\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} a\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors( a, b ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.class ) == classesToString( b.class );\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} a\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB( a, b ) {\n\tif ( a.priority > b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority < b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.class ) > classesToString( b.class );\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcast-converters~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString( classes ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/writer~Writer} writer View writer that can be used to modify element.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module widget/utils\n */\n\nimport HighlightStack from './highlightstack';\n\nconst widgetSymbol = Symbol( 'isWidget' );\nconst labelSymbol = Symbol( 'label' );\n\n/**\n * CSS class added to each widget element.\n *\n * @const {String}\n */\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n\n/**\n * CSS class added to currently selected widget element.\n *\n * @const {String}\n */\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n\n/**\n * Returns `true` if given {@link module:engine/view/element~Element} is a widget.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean}\n */\nexport function isWidget( element ) {\n\treturn !!element.getCustomProperty( widgetSymbol );\n}\n\n/**\n * Converts given {@link module:engine/view/element~Element} to widget in following way:\n * * sets `contenteditable` attribute to `\"true\"`,\n * * adds custom `getFillerOffset` method returning `null`,\n * * adds `ck-widget` CSS class,\n * * adds custom property allowing to recognize widget elements by using {@link ~isWidget},\n * * implements `addHighlight` and `removeHighlight` custom properties to handle view highlight on widgets.\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/writer~Writer} writer\n * @param {Object} [options={}]\n * @param {String|Function} [options.label] Element's label provided to {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string.\n * @returns {module:engine/view/element~Element} Returns same element.\n */\nexport function toWidget( element, writer, options = {} ) {\n\twriter.setAttribute( 'contenteditable', 'false', element );\n\twriter.addClass( WIDGET_CLASS_NAME, element );\n\twriter.setCustomProperty( widgetSymbol, true, element );\n\telement.getFillerOffset = getFillerOffset;\n\n\tif ( options.label ) {\n\t\tsetLabel( element, options.label, writer );\n\t}\n\n\tsetHighlightHandling(\n\t\telement,\n\t\twriter,\n\t\t( element, descriptor, writer ) => writer.addClass( normalizeToArray( descriptor.class ), element ),\n\t\t( element, descriptor, writer ) => writer.removeClass( normalizeToArray( descriptor.class ), element )\n\t);\n\n\treturn element;\n\n\t// Normalizes CSS class in descriptor that can be provided in form of an array or a string.\n\tfunction normalizeToArray( classes ) {\n\t\treturn Array.isArray( classes ) ? classes : [ classes ];\n\t}\n}\n\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/writer~Writer} writer\n * @param {Function} add\n * @param {Function} remove\n */\nexport function setHighlightHandling( element, writer, add, remove ) {\n\tconst stack = new HighlightStack();\n\n\tstack.on( 'change:top', ( evt, data ) => {\n\t\tif ( data.oldDescriptor ) {\n\t\t\tremove( element, data.oldDescriptor, data.writer );\n\t\t}\n\n\t\tif ( data.newDescriptor ) {\n\t\t\tadd( element, data.newDescriptor, data.writer );\n\t\t}\n\t} );\n\n\twriter.setCustomProperty( 'addHighlight', ( element, descriptor, writer ) => stack.add( descriptor, writer ), element );\n\twriter.setCustomProperty( 'removeHighlight', ( element, id, writer ) => stack.remove( id, writer ), element );\n}\n\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel}.\n *\n * @param {module:engine/view/element~Element} element\n * @param {String|Function} labelOrCreator\n *  * @param {module:engine/view/writer~Writer} writer\n */\nexport function setLabel( element, labelOrCreator, writer ) {\n\twriter.setCustomProperty( labelSymbol, labelOrCreator, element );\n}\n\n/**\n * Returns label for provided element.\n *\n * @param {module:engine/view/element~Element} element\n * @return {String}\n */\nexport function getLabel( element ) {\n\tconst labelCreator = element.getCustomProperty( labelSymbol );\n\n\tif ( !labelCreator ) {\n\t\treturn '';\n\t}\n\n\treturn typeof labelCreator == 'function' ? labelCreator() : labelCreator;\n}\n\n/**\n * Adds functionality to provided {module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n * * adds `ck-editable` CSS class,\n * * sets `contenteditable` as `true` when {module:engine/view/editableelement~EditableElement#isReadOnly} is `false`\n * otherwise set `false`,\n * * adds `ck-editable_focused` CSS class when editable is focused and removes it when it's blurred.\n *\n * @param {module:engine/view/editableelement~EditableElement} editable\n * @returns {module:engine/view/editableelement~EditableElement} Returns same element that was provided in `editable` param.\n */\nexport function toWidgetEditable( editable, writer ) {\n\twriter.addClass( 'ck-editable', editable );\n\n\t// Set initial contenteditable value.\n\twriter.setAttribute( 'contenteditable', editable.isReadOnly ? 'false' : 'true', editable );\n\n\t// Bind contenteditable property to element#isReadOnly.\n\teditable.on( 'change:isReadOnly', ( evt, property, is ) => {\n\t\twriter.setAttribute( 'contenteditable', is ? 'false' : 'true', editable );\n\t} );\n\n\teditable.on( 'change:isFocused', ( evt, property, is ) => {\n\t\tif ( is ) {\n\t\t\twriter.addClass( 'ck-editable_focused', editable );\n\t\t} else {\n\t\t\twriter.removeClass( 'ck-editable_focused', editable );\n\t\t}\n\t} );\n\n\treturn editable;\n}\n\n// Default filler offset function applied to all widget elements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/image/utils\n */\n\nimport { toWidget, isWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\n\nconst imageSymbol = Symbol( 'isImage' );\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to an image widget:\n * * adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget element,\n * * calls the {@link module:widget/utils~toWidget toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/writer~Writer} writer Instance of view writer.\n * @param {String} label Element's label. It will be concatenated with the image `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toImageWidget( viewElement, writer, label ) {\n\twriter.setCustomProperty( imageSymbol, true, viewElement );\n\n\treturn toWidget( viewElement, writer, { label: labelCreator } );\n\n\tfunction labelCreator() {\n\t\tconst imgElement = viewElement.getChild( 0 );\n\t\tconst altText = imgElement.getAttribute( 'alt' );\n\n\t\treturn altText ? `${ altText } ${ label }` : label;\n\t}\n}\n\n/**\n * Checks if a given view element is an image widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isImageWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( imageSymbol ) && isWidget( viewElement );\n}\n\n/**\n * Checks if an image widget is the only selected element.\n *\n * @param {module:engine/view/selection~Selection} viewSelection\n * @returns {Boolean}\n */\nexport function isImageWidgetSelected( viewSelection ) {\n\tconst viewElement = viewSelection.getSelectedElement();\n\n\treturn !!( viewElement && isImageWidget( viewElement ) );\n}\n\n/**\n * Checks if the provided model element is an instance of {@link module:engine/model/element~Element Element} and its name\n * is `image`.\n *\n * @param {module:engine/model/element~Element} modelElement\n * @returns {Boolean}\n */\nexport function isImage( modelElement ) {\n\treturn modelElement instanceof ModelElement && modelElement.name == 'image';\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module image/image/imageediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    viewFigureToModel,\n    modelToViewAttributeConverter,\n    srcsetAttributeConverter\n} from './converters';\nimport { toImageWidget } from './utils';\nimport { downcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\nimport {\n    upcastElementToElement,\n    upcastAttributeToAttribute\n} from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\n/**\n * The image engine plugin.\n * Registers `<image>` as a block element in the document schema, and allows `alt`, `src` and `srcset` attributes.\n * Registers converters for editing and data pipelines.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        // Configure schema.\n        schema.register('image', {\n            isObject: true,\n            isBlock: true,\n            allowWhere: '$block',\n            allowAttributes: [\n                'alt',\n                'src',\n                'srcset'\n            ]\n        });\n        conversion.for('dataDowncast').add(downcastElementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => createImageViewElement(viewWriter)\n        }));\n        conversion.for('editingDowncast').add(downcastElementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => toImageWidget(createImageViewElement(viewWriter), viewWriter, t('k'))\n        }));\n        conversion.for('downcast').add(modelToViewAttributeConverter('src')).add(modelToViewAttributeConverter('alt')).add(srcsetAttributeConverter());\n        conversion.for('upcast').add(upcastElementToElement({\n            view: {\n                name: 'img',\n                attribute: { src: true }\n            },\n            model: (viewImage, modelWriter) => modelWriter.createElement('image', { src: viewImage.getAttribute('src') })\n        })).add(upcastAttributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'alt'\n            },\n            model: 'alt'\n        })).add(upcastAttributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'srcset'\n            },\n            model: {\n                key: 'srcset',\n                value: viewImage => {\n                    const value = { data: viewImage.getAttribute('srcset') };\n                    if (viewImage.hasAttribute('width')) {\n                        value.width = viewImage.getAttribute('width');\n                    }\n                    return value;\n                }\n            }\n        })).add(viewFigureToModel());\n    }\n}\n// Creates a view element representing the image.\n//\n//\t\t<figure class=\"image\"><img></img></figure>\n//\n// Note that `alt` and `src` attributes are converted separately, so they are not included.\n//\n// @private\n// @param {module:engine/view/writer~Writer} writer\n// @return {module:engine/view/containerelement~ContainerElement}\nexport function createImageViewElement(writer) {\n    const emptyElement = writer.createEmptyElement('img');\n    const figure = writer.createContainerElement('figure', { class: 'image' });\n    writer.insert(ViewPosition.createAt(figure), emptyElement);\n    return figure;\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/mouseobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * Mouse events observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class MouseObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'mousedown';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when mouse button is pressed down on one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/mouseobserver~MouseObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:engine/view/observer/mouseobserver~MouseObserver}\n * needs to be added to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/mouseobserver~MouseObserver\n * @event module:engine/view/document~Document#event:mousedown\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module widget/widget\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\nimport ModelSelection from '@ckeditor/ckeditor5-engine/src/model/selection';\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\nimport ViewEditableElement from '@ckeditor/ckeditor5-engine/src/view/editableelement';\nimport RootEditableElement from '@ckeditor/ckeditor5-engine/src/view/rooteditableelement';\nimport { isWidget, WIDGET_SELECTED_CLASS_NAME, getLabel } from './utils';\nimport { keyCodes, getCode, parseKeystroke } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../theme/widget.css';\n\nconst selectAllKeystrokeCode = parseKeystroke( 'Ctrl+A' );\n\n/**\n * The widget plugin.\n * Registers model to view selection converter for editing pipeline. It is hooked after default selection conversion.\n * If converted selection is placed around widget element, selection is marked as fake. Additionally, proper CSS class\n * is added to indicate that widget has been selected.\n * Adds default {@link module:engine/view/document~Document#event:mousedown mousedown} handling on widget elements.\n *\n * @extends module:core/plugin~Plugin.\n */\nexport default class Widget extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Widget';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Holds previously selected widgets.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<module:engine/view/element~Element>}\n\t\t */\n\t\tthis._previouslySelected = new Set();\n\n\t\t// Model to view selection converter.\n\t\t// Converts selection placed over widget element to fake selection\n\t\tthis.editor.editing.downcastDispatcher.on( 'selection', ( evt, data, conversionApi ) => {\n\t\t\t// Remove selected class from previously selected widgets.\n\t\t\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\n\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst viewSelection = viewWriter.document.selection;\n\t\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tconst node = value.item;\n\n\t\t\t\t\tif ( node.is( 'element' ) && isWidget( node ) ) {\n\t\t\t\t\t\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\n\t\t\t\t\t\tthis._previouslySelected.add( node );\n\n\t\t\t\t\t\t// Check if widget is a single element selected.\n\t\t\t\t\t\tif ( node == selectedElement ) {\n\t\t\t\t\t\t\tviewWriter.setFakeSelection( true, { label: getLabel( selectedElement ) } );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// If mouse down is pressed on widget - create selection over whole widget.\n\t\tview.addObserver( MouseObserver );\n\t\tthis.listenTo( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\n\n\t\t// Handle custom keydown behaviour.\n\t\tthis.listenTo( viewDocument, 'keydown', ( ...args ) => this._onKeydown( ...args ), { priority: 'high' } );\n\n\t\t// Handle custom delete behaviour.\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( this._handleDelete( data.direction == 'forward' ) ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onMousedown( eventInfo, domEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet element = domEventData.target;\n\n\t\t// Do nothing if inside nested editable.\n\t\tif ( isInsideNestedEditable( element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If target is not a widget element - check if one of the ancestors is.\n\t\tif ( !isWidget( element ) ) {\n\t\t\telement = element.findAncestor( isWidget );\n\n\t\t\tif ( !element ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\n\t\t// Focus editor if is not focused already.\n\t\tif ( !viewDocument.isFocused ) {\n\t\t\tview.focus();\n\t\t}\n\n\t\t// Create model selection over widget.\n\t\tconst modelElement = editor.editing.mapper.toModelElement( element );\n\n\t\teditor.model.change( () => {\n\t\t\tthis._setSelectionOverElement( modelElement );\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onKeydown( eventInfo, domEventData ) {\n\t\tconst keyCode = domEventData.keyCode;\n\t\tconst isForward = keyCode == keyCodes.delete || keyCode == keyCodes.arrowdown || keyCode == keyCodes.arrowright;\n\t\tlet wasHandled = false;\n\n\t\t// Checks if the keys were handled and then prevents the default event behaviour and stops\n\t\t// the propagation.\n\t\tif ( isArrowKeyCode( keyCode ) ) {\n\t\t\twasHandled = this._handleArrowKeys( isForward );\n\t\t} else if ( isSelectAllKeyCode( domEventData ) ) {\n\t\t\twasHandled = this._selectAllNestedEditableContent() || this._selectAllContent();\n\t\t}\n\n\t\tif ( wasHandled ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleDelete( isForward ) {\n\t\t// Do nothing when the read only mode is enabled.\n\t\tif ( this.editor.isReadOnly ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelDocument = this.editor.model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\n\t\t// Do nothing on non-collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tlet previousNode = modelSelection.anchor.parent;\n\n\t\t\t\t// Remove previous element if empty.\n\t\t\t\twhile ( previousNode.isEmpty ) {\n\t\t\t\t\tconst nodeToRemove = previousNode;\n\t\t\t\t\tpreviousNode = nodeToRemove.parent;\n\n\t\t\t\t\twriter.remove( nodeToRemove );\n\t\t\t\t}\n\n\t\t\t\tthis._setSelectionOverElement( objectElement );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles arrow keys.\n\t *\n\t * @param {Boolean} isForward Set to true if arrow key should be handled in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleArrowKeys( isForward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelDocument = model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n\t\t\tconst newRange = schema.getNearestSelectionRange( position, isForward ? 'forward' : 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// If selection is next to object element.\n\t\t// Return if not collapsed.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement2 = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement2 instanceof ModelElement && schema.isObject( objectElement2 ) ) {\n\t\t\tmodel.change( () => {\n\t\t\t\tthis._setSelectionOverElement( objectElement2 );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Extends the {@link module:engine/model/selection~Selection document's selection} to span the entire\n\t * content of the nested editable if already anchored in one.\n\t *\n\t * See: {@link module:engine/model/schema~Schema#getLimitElement}.\n\t *\n\t * @private\n\t */\n\t_selectAllNestedEditableContent() {\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\t\tconst limitElement = model.schema.getLimitElement( documentSelection );\n\n\t\tif ( documentSelection.getFirstRange().root == limitElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( ModelRange.createIn( limitElement ) );\n\t\t} );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Handles <kbd>CTRL + A</kbd> when widget is selected.\n\t *\n\t * @private\n\t * @returns {Boolean} Returns true if widget was selected and selecting all was handled by this method.\n\t */\n\t_selectAllContent() {\n\t\tconst model = this.editor.model;\n\t\tconst editing = this.editor.editing;\n\t\tconst view = editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst viewSelection = viewDocument.selection;\n\n\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t// Only widget is selected.\n\t\t// https://github.com/ckeditor/ckeditor5-widget/issues/23\n\t\tif ( selectedElement && isWidget( selectedElement ) ) {\n\t\t\tconst widgetParent = editing.mapper.toModelElement( selectedElement.parent );\n\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( ModelRange.createIn( widgetParent ) );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_setSelectionOverElement( element ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection( ModelRange.createOn( element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @private\n\t * @param {Boolean} forward Direction of checking.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getObjectElementNextToSelection( forward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n\t\t// to its current state after undo.\n\t\tconst probe = new ModelSelection( modelSelection );\n\t\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\n\t\tconst objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n\t\tif ( objectElement instanceof ModelElement && schema.isObject( objectElement ) ) {\n\t\t\treturn objectElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes CSS class from previously selected widgets.\n\t *\n\t * @private\n\t * @param {module:engine/view/writer~Writer} writer\n\t */\n\t_clearPreviouslySelectedWidgets( writer ) {\n\t\tfor ( const widget of this._previouslySelected ) {\n\t\t\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\n\t\t}\n\n\t\tthis._previouslySelected.clear();\n\t}\n}\n\n// Returns 'true' if provided key code represents one of the arrow keys.\n//\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n// Returns 'true' if provided (DOM) key event data corresponds with the Ctrl+A keystroke.\n//\n// @param {module:engine/view/observer/keyobserver~KeyEventData} domEventData\n// @returns {Boolean}\nfunction isSelectAllKeyCode( domEventData ) {\n\treturn getCode( domEventData ) == selectAllKeystrokeCode;\n}\n\n// Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\nfunction isInsideNestedEditable( element ) {\n\twhile ( element ) {\n\t\tif ( element instanceof ViewEditableElement && !( element instanceof RootEditableElement ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image text alternative command. It is used to change the `alt` attribute on `<image>` elements.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageTextAlternativeCommand extends Command {\n\t/**\n\t * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {String|Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( isImage( element ) && element.hasAttribute( 'alt' ) ) {\n\t\t\tthis.value = element.getAttribute( 'alt' );\n\t\t} else {\n\t\t\tthis.value = false;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {String} options.newValue The new value of the `alt` attribute to set.\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setAttribute( 'alt', options.newValue, imageElement );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativeediting\n */\n\nimport ImageTextAlternativeCommand from './imagetextalternativecommand';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The image text alternative engine plugin.\n * Registers the `imageTextAlternative` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.editor.commands.add( 'imageTextAlternative', new ImageTextAlternativeCommand( this.editor ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\n\temitter.listenTo( document, 'mousedown', ( evt, { target } ) => {\n\t\tif ( !activator() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const contextElement of contextElements ) {\n\t\t\tif ( contextElement.contains( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tcallback();\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/labeledinput/labeledinputview\n */\n\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nimport LabelView from '../label/labelview';\n\n/**\n * The labeled input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabeledInputView extends View {\n\t/**\n\t * Creates an instance of the labeled input view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance.\n\t * @param {Function} InputView Constructor of the input view.\n\t */\n\tconstructor( locale, InputView ) {\n\t\tsuper( locale );\n\n\t\tconst id = `ck-input-${ uid() }`;\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.set( 'label' );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * Controls whether the component is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The label view.\n\t\t *\n\t\t * @member {module:ui/label/labelview~LabelView} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( id );\n\n\t\t/**\n\t\t * The input view.\n\t\t *\n\t\t * @member {module:ui/view~View} #inputView\n\t\t */\n\t\tthis.inputView = this._createInputView( InputView, id );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-labeled-input',\n\t\t\t\t\tbind.if( 'isReadOnly', 'ck-disabled' )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.labelView,\n\t\t\t\tthis.inputView\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Creates label view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {String} id Unique id to set as labelView#for attribute.\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n\t_createLabelView( id ) {\n\t\tconst labelView = new LabelView( this.locale );\n\n\t\tlabelView.for = id;\n\t\tlabelView.bind( 'text' ).to( this, 'label' );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Creates input view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {Function} InputView Input view constructor.\n\t * @param {String} id Unique id to set as inputView#id attribute.\n\t * @returns {module:ui/inputtext/inputtextview~InputTextView}\n\t */\n\t_createInputView( InputView, id ) {\n\t\tconst inputView = new InputView( this.locale );\n\n\t\tinputView.id = id;\n\t\tinputView.bind( 'value' ).to( this );\n\t\tinputView.bind( 'isReadOnly' ).to( this );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.inputView.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.inputView.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/inputtext/inputtext.css';\n\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputTextView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * The `placeholder` attribute of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\t\t\tattributes: {\n\t\t\t\ttype: 'text',\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-input',\n\t\t\t\t\t'ck-input-text'\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\tplaceholder: bind.to( 'placeholder' ),\n\t\t\t\treadonly: bind.to( 'isReadOnly' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tconst setValue = value => {\n\t\t\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\n\t\t};\n\n\t\tsetValue( this.value );\n\n\t\t// Bind `this.value` to the DOM element's value.\n\t\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\t\tthis.on( 'change:value', ( evt, name, value ) => {\n\t\t\tsetValue( value );\n\t\t} );\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.element.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/bindings/submithandler\n */\n\n/**\n * A handler useful for {@link module:ui/view~View views} working as HTML forms. It intercepts a native DOM\n * `submit` event, prevents the default web browser behavior (navigation and page reload) and\n * fires the `submit` event on a view instead. Such a custom event can be then used by any\n * {@link module:utils/dom/emittermixin~Emitter emitter}, e.g. to serialize the form data.\n *\n *\t\timport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\n *\n *\t\t// ...\n *\n *\t\tclass AnyFormView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tsuper();\n *\n *\t\t\t\t// ...\n *\n *\t\t\t\tsubmitHandler( {\n *\t\t\t\t\tview: this\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tconst view = new AnyFormView();\n *\n *\t\t// A sample listener attached by an emitter working with the view.\n *\t\tthis.listenTo( view, 'submit', () => {\n *\t\t\tsaveTheFormData();\n *\t\t\thideTheForm();\n *\t\t} );\n *\n * @param {Object} [options] Configuration options.\n * @param {module:ui/view~View} options.view The view which DOM `submit` events should be handled.\n */\nexport default function submitHandler( { view } ) {\n\tview.listenTo( view.element, 'submit', ( evt, domEvt ) => {\n\t\tdomEvt.preventDefault();\n\t\tview.fire( 'submit' );\n\t}, { useCapture: true } );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../../theme/textalternativeform.css';\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\nexport default class TextAlternativeFormView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = this.locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * A textarea with a label.\n\t\t *\n\t\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView} #labeledTextarea\n\t\t */\n        this.labeledInput = this._createLabeledInputView();\n        /**\n\t\t * A button used to submit the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n\t\t */\n        this.saveButtonView = this._createButton(t('ad'), checkIcon);\n        this.saveButtonView.type = 'submit';\n        /**\n\t\t * A button used to cancel the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n\t\t */\n        this.cancelButtonView = this._createButton(t('ae'), cancelIcon, 'cancel');\n        /**\n\t\t * A collection of views which can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.saveButtonView.extendTemplate({ attributes: { class: ['ck-button-action'] } });\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: ['ck-text-alternative-form'],\n                // https://github.com/ckeditor/ckeditor5-image/issues/40\n                tabindex: '-1'\n            },\n            children: [\n                this.labeledInput,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        this.keystrokes.listenTo(this.element);\n        submitHandler({ view: this });\n        [\n            this.labeledInput,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n    }\n    /**\n\t * Creates the button view.\n\t *\n\t * @private\n\t * @param {String} label The button label\n\t * @param {String} icon The button's icon.\n\t * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n\t * Creates an input with a label.\n\t *\n\t * @private\n\t * @return {module:ui/labeledinput/labeledinputview~LabeledInputView}\n\t */\n    _createLabeledInputView() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('ai');\n        labeledInput.inputView.placeholder = t('ai');\n        return labeledInput;\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/position\n */\n\nimport global from './global';\nimport Rect from './rect';\nimport getPositionedAncestor from './getpositionedancestor';\nimport getBorderWidths from './getborderwidths';\nimport isFunction from '../lib/lodash/isFunction';\n\n/**\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\n * into consideration.\n *\n *\t\t// The element which is to be positioned.\n *\t\tconst element = document.body.querySelector( '#toolbar' );\n *\n *\t\t// A target to which the element is positioned relatively.\n *\t\tconst target = document.body.querySelector( '#container' );\n *\n *\t\t// Finding the optimal coordinates for the positioning.\n *\t\tconst { left, top, name } = getOptimalPosition( {\n *\t\t\telement: element,\n *\t\t\ttarget: target,\n *\n * \t\t\t// The algorithm will chose among these positions to meet the requirements such\n * \t\t\t// as \"limiter\" element or \"fitInViewport\", set below. The positions are considered\n * \t\t\t// in the order of the array.\n *\t\t\tpositions: [\n *\t\t\t\t//\n *\t\t\t \t//\t[ Target ]\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\n *\t\t\t\ttargetRect => ( {\n *\t\t\t\t\ttop: targetRect.bottom,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'mySouthEastPosition'\n *\t\t\t\t} ),\n *\n *\t\t\t\t//\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t[ Target ]\n *\t\t\t\t//\n *\t\t\t\t( targetRect, elementRect ) => ( {\n *\t\t\t\t\ttop: targetRect.top - elementRect.height,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'myNorthEastPosition'\n *\t\t\t\t} )\n *\t\t\t],\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of <body>.\n *\t\t\tlimiter: document.body,\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\n *\t\t\tfitInViewport: true\n *\t\t} );\n *\n *\t\t// The best position which fits into document.body and the viewport. May be useful\n *\t\t// to set proper class on the `element`.\n *\t\tconsole.log( name ); -> \"myNorthEastPosition\"\n *\n *\t\t// Using the absolute coordinates which has been found to position the element\n *\t\t// as in the diagram depicting the \"myNorthEastPosition\" position.\n *\t\telement.style.top = top;\n *\t\telement.style.left = left;\n *\n * @param {module:utils/dom/position~Options} options Positioning options object.\n * @returns {module:utils/dom/position~Position}\n */\nexport function getOptimalPosition( { element, target, positions, limiter, fitInViewport } ) {\n\t// If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-utils/issues/157\n\tif ( isFunction( target ) ) {\n\t\ttarget = target();\n\t}\n\n\t// If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-ui/issues/260\n\tif ( isFunction( limiter ) ) {\n\t\tlimiter = limiter();\n\t}\n\n\tconst positionedElementAncestor = getPositionedAncestor( element.parentElement );\n\tconst elementRect = new Rect( element );\n\tconst targetRect = new Rect( target );\n\n\tlet bestPosition;\n\tlet name;\n\n\t// If there are no limits, just grab the very first position and be done with that drama.\n\tif ( !limiter && !fitInViewport ) {\n\t\t[ name, bestPosition ] = getPosition( positions[ 0 ], targetRect, elementRect );\n\t} else {\n\t\tconst limiterRect = limiter && new Rect( limiter ).getVisible();\n\t\tconst viewportRect = fitInViewport && new Rect( global.window );\n\n\t\t[ name, bestPosition ] =\n\t\t\tgetBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) ||\n\t\t\t// If there's no best position found, i.e. when all intersections have no area because\n\t\t\t// rects have no width or height, then just use the first available position.\n\t\t\tgetPosition( positions[ 0 ], targetRect, elementRect );\n\t}\n\n\tlet { left, top } = getAbsoluteRectCoordinates( bestPosition );\n\n\tif ( positionedElementAncestor ) {\n\t\tconst ancestorPosition = getAbsoluteRectCoordinates( new Rect( positionedElementAncestor ) );\n\t\tconst ancestorBorderWidths = getBorderWidths( positionedElementAncestor );\n\n\t\t// (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` must be taken into\n\t\t// consideration. `Rect` is always relative to the viewport while `position: absolute` works\n\t\t// with respect to that positioned ancestor.\n\t\tleft -= ancestorPosition.left;\n\t\ttop -= ancestorPosition.top;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, not only its position must be taken into\n\t\t// consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\n\t\t// is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\n\t\t// must compensate that scrolling.\n\t\tleft += positionedElementAncestor.scrollLeft;\n\t\ttop += positionedElementAncestor.scrollTop;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\n\t\t// while `position: absolute` positioning does not consider it.\n\t\t// E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\n\t\t// not upper-left corner of its border.\n\t\tleft -= ancestorBorderWidths.left;\n\t\ttop -= ancestorBorderWidths.top;\n\t}\n\n\treturn { left, top, name };\n}\n\n// For given position function, returns a corresponding `Rect` instance.\n//\n// @private\n// @param {Function} position A function returning {@link module:utils/dom/position~Position}.\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned element.\n// @returns {Array} An array containing position name and its Rect.\nfunction getPosition( position, targetRect, elementRect ) {\n\tconst { left, top, name } = position( targetRect, elementRect );\n\n\treturn [ name, elementRect.clone().moveTo( left, top ) ];\n}\n\n// For a given array of positioning functions, returns such that provides the best\n// fit of the `elementRect` into the `limiterRect` and `viewportRect`.\n//\n// @private\n// @param {module:utils/dom/position~Options#positions} positions Functions returning\n// {@link module:utils/dom/position~Position} to be checked, in the order of preference.\n// @param {utils/dom/rect~Rect} targetRect A rect of the {@link module:utils/dom/position~Options#target}.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned {@link module:utils/dom/position~Options#element}.\n// @param {utils/dom/rect~Rect} limiterRect A rect of the {@link module:utils/dom/position~Options#limiter}.\n// @param {utils/dom/rect~Rect} viewportRect A rect of the viewport.\n// @returns {Array} An array containing the name of the position and it's rect.\nfunction getBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) {\n\tlet maxLimiterIntersectArea = 0;\n\tlet maxViewportIntersectArea = 0;\n\tlet bestPositionRect;\n\tlet bestPositionName;\n\n\t// This is when element is fully visible.\n\tconst elementRectArea = elementRect.getArea();\n\n\tpositions.some( position => {\n\t\tconst [ positionName, positionRect ] = getPosition( position, targetRect, elementRect );\n\t\tlet limiterIntersectArea;\n\t\tlet viewportIntersectArea;\n\n\t\tif ( limiterRect ) {\n\t\t\tif ( viewportRect ) {\n\t\t\t\t// Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\n\t\t\t\tconst limiterViewportIntersectRect = limiterRect.getIntersection( viewportRect );\n\n\t\t\t\tif ( limiterViewportIntersectRect ) {\n\t\t\t\t\t// If the limiter is within the viewport, then check the intersection between that part of the\n\t\t\t\t\t// limiter and actual position.\n\t\t\t\t\tlimiterIntersectArea = limiterViewportIntersectRect.getIntersectionArea( positionRect );\n\t\t\t\t} else {\n\t\t\t\t\tlimiterIntersectArea = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlimiterIntersectArea = limiterRect.getIntersectionArea( positionRect );\n\t\t\t}\n\t\t}\n\n\t\tif ( viewportRect ) {\n\t\t\tviewportIntersectArea = viewportRect.getIntersectionArea( positionRect );\n\t\t}\n\n\t\t// The only criterion: intersection with the viewport.\n\t\tif ( viewportRect && !limiterRect ) {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// The only criterion: intersection with the limiter.\n\t\telse if ( !viewportRect && limiterRect ) {\n\t\t\tif ( limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// Two criteria: intersection with the viewport and the limiter visible in the viewport.\n\t\telse {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea && limiterIntersectArea >= maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t} else if ( viewportIntersectArea >= maxViewportIntersectArea && limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\n\t\tfunction setBestPosition() {\n\t\t\tmaxViewportIntersectArea = viewportIntersectArea;\n\t\t\tmaxLimiterIntersectArea = limiterIntersectArea;\n\t\t\tbestPositionRect = positionRect;\n\t\t\tbestPositionName = positionName;\n\t\t}\n\n\t\t// If a such position is found that element is fully container by the limiter then, obviously,\n\t\t// there will be no better one, so finishing.\n\t\treturn limiterIntersectArea === elementRectArea;\n\t} );\n\n\treturn bestPositionRect ? [ bestPositionName, bestPositionRect ] : null;\n}\n\n// DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\n// This function converts Rect to `position: absolute` coordinates.\n//\n// @private\n// @param {utils/dom/rect~Rect} rect A rect to be converted.\n// @returns {Object} Object containing `left` and `top` properties, in absolute coordinates.\nfunction getAbsoluteRectCoordinates( { left, top } ) {\n\tconst { scrollX, scrollY } = global.window;\n\n\treturn {\n\t\tleft: left + scrollX,\n\t\ttop: top + scrollY,\n\t};\n}\n\n/**\n * The `getOptimalPosition` helper options.\n *\n * @interface module:utils/dom/position~Options\n */\n\n/**\n * Element that is to be positioned.\n *\n * @member {HTMLElement} #element\n */\n\n/**\n * Target with respect to which the `element` is to be positioned.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #target\n */\n\n/**\n * An array of functions which return {@link module:utils/dom/position~Position} relative\n * to the `target`, in the order of preference.\n *\n * @member {Array.<Function>} #positions\n */\n\n/**\n * When set, the algorithm will chose position which fits the most in the\n * limiter's bounding rect.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #limiter\n */\n\n/**\n * When set, the algorithm will chose such a position which fits `element`\n * the most inside visible viewport.\n *\n * @member {Boolean} #fitInViewport\n */\n\n/**\n * An object describing a position in `position: absolute` coordinate\n * system, along with position name.\n *\n * @typedef {Object} module:utils/dom/position~Position\n *\n * @property {Number} top Top position offset.\n * @property {Number} left Left position offset.\n * @property {String} name Name of the position.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/getpositionedancestor\n */\n\nimport global from './global';\n\n/**\n * For a given element, returns the nearest ancestor element which CSS position is not \"static\".\n *\n * @param {HTMLElement} element Native DOM element to be checked.\n * @returns {HTMLElement|null}\n */\nexport default function getPositionedAncestor( element ) {\n\twhile ( element && element.tagName.toLowerCase() != 'html' ) {\n\t\tif ( global.window.getComputedStyle( element ).position != 'static' ) {\n\t\t\treturn element;\n\t\t}\n\n\t\telement = element.parentElement;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\n\nimport View from '../../view';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport isRange from '@ckeditor/ckeditor5-utils/src/dom/isrange';\nimport isElement from '@ckeditor/ckeditor5-utils/src/lib/lodash/isElement';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\nimport '../../../theme/components/panel/balloonpanel.css';\n\nconst toPx = toUnit( 'px' );\nconst defaultLimiterElement = global.document.body;\n\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n *\t\tconst panel = new BalloonPanelView( locale );\n *\t\tconst childView = new ChildView();\n *\t\tconst positions = BalloonPanelView.defaultPositions;\n *\n *\t\tpanel.render();\n *\n *\t\t// Add a child view to the panel's content collection.\n *\t\tpanel.content.add( childView );\n *\n *\t\t// Start pinning the panel to an element with the \"target\" id DOM.\n *\t\t// The balloon will remain pinned until unpin() is called.\n *\t\tpanel.pin( {\n *\t\t\ttarget: document.querySelector( '#target' ),\n *\t\t\tpositions: [\n *\t\t\t\tpositions.northArrowSouth,\n *\t\t\t\tpositions.southArrowNorth\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class BalloonPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The absolute top position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #top\n\t\t */\n\t\tthis.set( 'top', 0 );\n\n\t\t/**\n\t\t * The absolute left position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #left\n\t\t */\n\t\tthis.set( 'left', 0 );\n\n\t\t/**\n\t\t * Balloon panel's current position. The position name is reflected in the CSS class set\n\t\t * to the balloon, i.e. `.ck-balloon-panel_arrow_nw` for \"arrow_nw\" position. The class\n\t\t * controls the minor aspects of the balloon's visual appearance like placement\n\t\t * of an {@link #withArrow arrow}. To support a new position, an additional CSS must be created.\n\t\t *\n\t\t * Default position names correspond with\n\t\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t\t *\n\t\t * See the {@link #attachTo} and {@link #pin} methods to learn about custom balloon positions.\n\t\t *\n\t\t * @observable\n\t\t * @default 'arrow_nw'\n\t\t * @member {'arrow_nw'|'arrow_ne'|'arrow_sw'|'arrow_se'} #position\n\t\t */\n\t\tthis.set( 'position', 'arrow_nw' );\n\n\t\t/**\n\t\t * Controls whether the balloon panel is visible or not.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * Controls whether the balloon panel has an arrow. The presence of the arrow\n\t\t * is reflected in `ck-balloon-panel_with-arrow` CSS class.\n\t\t *\n\t\t * @observable\n\t\t * @default true\n\t\t * @member {Boolean} #withArrow\n\t\t */\n\t\tthis.set( 'withArrow', true );\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #className\n\t\t */\n\t\tthis.set( 'className' );\n\n\t\t/**\n\t\t * A callback that starts pining the panel when {@link #isVisible} gets\n\t\t * `true`. Used by {@link #pin}.\n\t\t *\n\t\t * @private\n\t\t * @member {Function} #_pinWhenIsVisibleCallback\n\t\t */\n\n\t\t/**\n\t\t * Collection of the child views which creates balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-balloon-panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-balloon-panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-balloon-panel_visible' ),\n\t\t\t\t\tbind.if( 'withArrow', 'ck-balloon-panel_with-arrow' ),\n\t\t\t\t\tbind.to( 'className' )\n\t\t\t\t],\n\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: bind.to( 'top', toPx ),\n\t\t\t\t\tleft: bind.to( 'left', toPx )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\tshow() {\n\t\tthis.isVisible = true;\n\t}\n\n\t/**\n\t * Hides the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\thide() {\n\t\tthis.isVisible = false;\n\t}\n\n\t/**\n\t * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n\t * smart positioning heuristics that choses from available positions to make sure the panel\n\t * is visible to the user i.e. within the limits of the viewport.\n\t *\n\t * This method accepts configuration {@link module:utils/dom/position~Options options}\n\t * to set the `target`, optional `limiter` and `positions` the balloon should chose from.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Attach the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.attachTo( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * **Note**: Attaching the panel will also automatically {@link #show} it.\n\t *\n\t * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n\t * See the {@link #pin} method for more permanent positioning strategy.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tattachTo( options ) {\n\t\tthis.show();\n\n\t\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\t\tconst positionOptions = Object.assign( {}, {\n\t\t\telement: this.element,\n\t\t\tpositions: [\n\t\t\t\tdefaultPositions.southArrowNorth,\n\t\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\t\tdefaultPositions.northArrowSouth,\n\t\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\t\tdefaultPositions.northArrowSouthEast\n\t\t\t],\n\t\t\tlimiter: defaultLimiterElement,\n\t\t\tfitInViewport: true\n\t\t}, options );\n\n\t\tconst { top, left, name: position } = getOptimalPosition( positionOptions );\n\n\t\tObject.assign( this, { top, left, position } );\n\t}\n\n\t/**\n\t * Works the same way as the {@link #attachTo} method except that the position of the panel is\n\t * continuously updated when:\n\t *\n\t * * any ancestor of the {@link module:utils/dom/position~Options#target}\n\t * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n\t * * the browser window gets resized or scrolled.\n\t *\n\t * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target},\n\t * immune to the changing environment.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Pin the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.pin( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * To leave the pinned state, use the {@link #unpin} method.\n\t *\n\t * **Note**: Pinning the panel will also automatically {@link #show} it.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tpin( options ) {\n\t\tthis.unpin();\n\n\t\tthis._pinWhenIsVisibleCallback = () => {\n\t\t\tif ( this.isVisible ) {\n\t\t\t\tthis._startPinning( options );\n\t\t\t} else {\n\t\t\t\tthis._stopPinning();\n\t\t\t}\n\t\t};\n\n\t\tthis._startPinning( options );\n\n\t\t// Control the state of the listeners depending on whether the panel is visible\n\t\t// or not.\n\t\t// TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\tthis.listenTo( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\t}\n\n\t/**\n\t * Stops pinning the panel, as set up by {@link #pin}.\n\t */\n\tunpin() {\n\t\tif ( this._pinWhenIsVisibleCallback ) {\n\t\t\t// Deactivate listeners attached by pin().\n\t\t\tthis._stopPinning();\n\n\t\t\t// Deactivate the panel pin() control logic.\n\t\t\t// TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\t\tthis.stopListening( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\n\t\t\tthis._pinWhenIsVisibleCallback = null;\n\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\t/**\n\t * Starts managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}.\n\t */\n\t_startPinning( options ) {\n\t\tthis.attachTo( options );\n\n\t\tconst targetElement = getDomElement( options.target );\n\t\tconst limiterElement = options.limiter ? getDomElement( options.limiter ) : defaultLimiterElement;\n\n\t\t// Then we need to listen on scroll event of eny element in the document.\n\t\tthis.listenTo( global.document, 'scroll', ( evt, domEvt ) => {\n\t\t\tconst scrollTarget = domEvt.target;\n\n\t\t\t// The position needs to be updated if the positioning target is within the scrolled element.\n\t\t\tconst isWithinScrollTarget = targetElement && scrollTarget.contains( targetElement );\n\n\t\t\t// The position needs to be updated if the positioning limiter is within the scrolled element.\n\t\t\tconst isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains( limiterElement );\n\n\t\t\t// The positioning target and/or limiter can be a Rect, object etc..\n\t\t\t// There's no way to optimize the listener then.\n\t\t\tif ( isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement ) {\n\t\t\t\tthis.attachTo( options );\n\t\t\t}\n\t\t}, { useCapture: true } );\n\n\t\t// We need to listen on window resize event and update position.\n\t\tthis.listenTo( global.window, 'resize', () => {\n\t\t\tthis.attachTo( options );\n\t\t} );\n\t}\n\n\t/**\n\t * Stops managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t */\n\t_stopPinning() {\n\t\tthis.stopListening( global.document, 'scroll' );\n\t\tthis.stopListening( global.window, 'resize' );\n\t}\n}\n\n// Returns the DOM element for given object or null, if there's none,\n// e.g. when passed object is a Rect instance or so.\n//\n// @private\n// @param {*} object\n// @returns {HTMLElement|null}\nfunction getDomElement( object ) {\n\tif ( isElement( object ) ) {\n\t\treturn object;\n\t}\n\n\tif ( isRange( object ) ) {\n\t\treturn object.commonAncestorContainer;\n\t}\n\n\tif ( typeof object == 'function' ) {\n\t\treturn getDomElement( object() );\n\t}\n\n\treturn null;\n}\n\n/**\n * A horizontal offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-----|---------...\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t +--+  |  +------...\n *\t\t     \\ | /\n *\t\t      \\|/\n *\t    >|-----|<---------------- horizontal offset\n *\n * @default 30\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset\n */\nBalloonPanelView.arrowHorizontalOffset = 25;\n\n/**\n * A vertical offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-------------...\n *\t\t |\n *\t\t |\n *\t\t |                      /-- vertical offset\n *\t\t |                     V\n *\t\t +--+    +-----...    ---------\n *\t\t     \\  /              |\n *\t\t      \\/               |\n *\t\t-------------------------------\n *\t\t                       ^\n *\n * @default 15\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset\n */\nBalloonPanelView.arrowVerticalOffset = 10;\n\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follow:\n *\n * **North**\n *\n * * `northArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t    [ Target ]\n *\n * * `northArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t          [ Target ]\n *\n * * `northArrowSouthWest`\n *\n * \t\t  +-----------------+\n * \t\t  |     Balloon     |\n * \t\t  +-----------------+\n * \t\t     V\n * \t\t[ Target ]\n *\n * **North west**\n *\n * * `northWestArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t         [ Target ]\n *\n * * `northWestArrowSouthWest`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t   V\n * \t\t   [ Target ]\n *\n * * `northWestArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t               [ Target ]\n *\n * **North east**\n *\n * * `northEastArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * * `northEastArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t      [ Target ]\n *\n * * `northEastArrowSouthWest`\n *\n * \t\t      +-----------------+\n * \t\t      |     Balloon     |\n * \t\t      +-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * **South**\n *\n * * `southArrowNorth`\n *\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthEast`\n *\n *\t\t          [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n *\n * **South west**\n *\n * * `southWestArrowNorth`\n *\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthWest`\n *\n *\t\t  [ Target ]\n *\t\t  ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthEast`\n *\n *\t\t               [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * **South east**\n *\n * * `southEastArrowNorth`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthEast`\n *\n *\t\t       [ Target ]\n *\t\t                ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t       +-----------------+\n *\t\t       |     Balloon     |\n *\t\t       +-----------------+\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n *\n * @member {Object} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions\n */\nBalloonPanelView.defaultPositions = {\n\t// ------- North\n\n\tnorthArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- North west\n\n\tnorthWestArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthWestArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\tnorthWestArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\t// ------- North east\n\n\tnorthEastArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthEastArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthEastArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- South\n\n\tsouthArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\t// ------- South west\n\n\tsouthWestArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthWestArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\tsouthWestArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\t// ------- South east\n\n\tsouthEastArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthEastArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthEastArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n};\n\n// Returns the top coordinate for positions starting with `north*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getNorthTop( targetRect, balloonRect ) {\n\treturn targetRect.top - balloonRect.height - BalloonPanelView.arrowVerticalOffset;\n}\n\n// Returns the top coordinate for positions starting with `south*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getSouthTop( targetRect ) {\n\treturn targetRect.bottom + BalloonPanelView.arrowVerticalOffset;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/balloon/contextualballoon\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * Provides the common contextual balloon panel for the editor.\n *\n * This plugin allows reusing a single {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance\n * to display multiple contextual balloon panels in the editor.\n *\n * Child views of such a panel are stored in the stack and the last one in the stack is visible. When the\n * visible view is removed from the stack, the previous view becomes visible, etc. If there are no more\n * views in the stack, the balloon panel will hide.\n *\n * It simplifies managing the views and helps\n * avoid the unnecessary complexity of handling multiple {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ContextualBalloon';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * The common balloon panel view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n\t\t */\n\t\tthis.view = new BalloonPanelView();\n\n\t\t/**\n\t\t * The {@link module:utils/dom/position~Options#limiter position limiter}\n\t\t * for the {@link #view}, used when no `limiter` has been passed into {@link #add}\n\t\t * or {@link #updatePosition}.\n\t\t *\n\t\t * By default, a function, which obtains the farthest DOM\n\t\t * {@link module:engine/view/rooteditableelement~RootEditableElement}\n\t\t * of the {@link module:engine/view/document~Document#selection}.\n\t\t *\n\t\t * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n\t\t */\n\t\tthis.positionLimiter = () => {\n\t\t\tconst view = this.editor.editing.view;\n\t\t\tconst viewDocument = view.document;\n\t\t\tconst editableElement = viewDocument.selection.editableElement;\n\n\t\t\tif ( editableElement ) {\n\t\t\t\treturn view.domConverter.mapViewToDom( editableElement.root );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Stack of the views injected into the balloon. Last one in the stack is displayed\n\t\t * as a content of {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#view}.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_stack\n\t\t */\n\t\tthis._stack = new Map();\n\n\t\t// Add balloon panel view to editor `body` collection and wait until view will be ready.\n\t\tthis.editor.ui.view.body.add( this.view );\n\n\t\t// Editor should be focused when contextual balloon is focused.\n\t\tthis.editor.ui.focusTracker.add( this.view.element );\n\t}\n\n\t/**\n\t * Returns the currently visible view or `null` when there are no\n\t * views in the stack.\n\t *\n\t * @returns {module:ui/view~View|null}\n\t */\n\tget visibleView() {\n\t\tconst item = this._stack.get( this.view.content.get( 0 ) );\n\n\t\treturn item ? item.view : null;\n\t}\n\n\t/**\n\t * Returns `true` when the given view is in the stack. Otherwise returns `false`.\n\t *\n\t * @param {module:ui/view~View} view\n\t * @returns {Boolean}\n\t */\n\thasView( view ) {\n\t\treturn this._stack.has( view );\n\t}\n\n\t/**\n\t * Adds a new view to the stack and makes it visible.\n\t *\n\t * @param {Object} data Configuration of the view.\n\t * @param {module:ui/view~View} [data.view] Content of the balloon.\n\t * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n\t * @param {String} [data.balloonClassName] Additional css class for {@link #view} added when given view is visible.\n\t */\n\tadd( data ) {\n\t\tif ( this.hasView( data.view ) ) {\n\t\t\t/**\n\t\t\t * Trying to add configuration of the same view more than once.\n\t\t\t *\n\t\t\t * @error contextualballoon-add-view-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'contextualballoon-add-view-exist: Cannot add configuration of the same view twice.' );\n\t\t}\n\n\t\t// When adding view to the not empty balloon.\n\t\tif ( this.visibleView ) {\n\t\t\t// Remove displayed content from the view.\n\t\t\tthis.view.content.remove( this.visibleView );\n\t\t}\n\n\t\t// Add new view to the stack.\n\t\tthis._stack.set( data.view, data );\n\n\t\t// And display it.\n\t\tthis._show( data );\n\t}\n\n\t/**\n\t * Removes the given view from the stack. If the removed view was visible,\n\t * then the view preceding it in the stack will become visible instead.\n\t * When there is no view in the stack then balloon will hide.\n\t *\n\t * @param {module:ui/view~View} view A view to be removed from the balloon.\n\t */\n\tremove( view ) {\n\t\tif ( !this.hasView( view ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove configuration of the view not defined in the stack.\n\t\t\t *\n\t\t\t * @error contextualballoon-remove-view-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'contextualballoon-remove-view-not-exist: Cannot remove configuration of not existing view.' );\n\t\t}\n\n\t\t// When visible view is being removed.\n\t\tif ( this.visibleView === view ) {\n\t\t\t// We need to remove it from the view content.\n\t\t\tthis.view.content.remove( view );\n\n\t\t\t// And then remove from the stack.\n\t\t\tthis._stack.delete( view );\n\n\t\t\t// Next we need to check if there is other view in stack to show.\n\t\t\tconst last = Array.from( this._stack.values() ).pop();\n\n\t\t\t// If it is some other view.\n\t\t\tif ( last ) {\n\t\t\t\t// Just show it.\n\t\t\t\tthis._show( last );\n\t\t\t} else {\n\t\t\t\t// Hide the balloon panel.\n\t\t\t\tthis.view.hide();\n\t\t\t}\n\t\t} else {\n\t\t\t// Just remove given view from the stack.\n\t\t\tthis._stack.delete( view );\n\t\t}\n\t}\n\n\t/**\n\t * Updates the position of the balloon using position data of the first visible view in the stack.\n\t * When new position data is given then position data of currently visible panel will be updated.\n\t *\n\t * @param {module:utils/dom/position~Options} [position] position options.\n\t */\n\tupdatePosition( position ) {\n\t\tif ( position ) {\n\t\t\tthis._stack.get( this.visibleView ).position = position;\n\t\t}\n\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t}\n\n\t/**\n\t * Sets the view as a content of the balloon and attaches balloon using position\n\t * options of the first view.\n\t *\n\t * @private\n\t * @param {Object} data Configuration.\n\t * @param {module:ui/view~View} [data.view] View to show in the balloon.\n\t * @param {String} [data.balloonClassName=''] Additional class name which will added to the {#_balloon} view.\n\t */\n\t_show( { view, balloonClassName = '' } ) {\n\t\tthis.view.className = balloonClassName;\n\n\t\tthis.view.content.add( view );\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t}\n\n\t/**\n\t * Returns position options of the first view in the stack.\n\t * This keeps the balloon in the same position when view is changed.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPosition() {\n\t\tlet position = first( this._stack.values() ).position;\n\n\t\t// Use the default limiter if none has been specified.\n\t\tif ( position && !position.limiter ) {\n\t\t\t// Don't modify the original options object.\n\t\t\tposition = Object.assign( {}, position, {\n\t\t\t\tlimiter: this.positionLimiter\n\t\t\t} );\n\t\t}\n\n\t\treturn position;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/image/ui/utils\n */\n\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { isImageWidgetSelected } from '../utils';\n\n/**\n * A helper utility which positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon} instance\n * with respect to the image in the editor content, if one is selected.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport function repositionContextualBalloon( editor ) {\n\tconst balloon = editor.plugins.get( 'ContextualBalloon' );\n\n\tif ( isImageWidgetSelected( editor.editing.view.document.selection ) ) {\n\t\tconst position = getBalloonPositionData( editor );\n\n\t\tballoon.updatePosition( position );\n\t}\n}\n\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}, with respect\n * to the selected element in the editor content.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n * @returns {module:utils/dom/position~Options}\n */\nexport function getBalloonPositionData( editor ) {\n\tconst editingView = editor.editing.view;\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn {\n\t\ttarget: editingView.domConverter.viewToDom( editingView.document.selection.getSelectedElement() ),\n\t\tpositions: [\n\t\t\tdefaultPositions.northArrowSouth,\n\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\tdefaultPositions.northArrowSouthEast,\n\t\t\tdefaultPositions.southArrowNorth,\n\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\tdefaultPositions.southArrowNorthEast\n\t\t]\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module image/imagetextalternative/imagetextalternativeui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport TextAlternativeFormView from './ui/textalternativeformview';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport textAlternativeIcon from '@ckeditor/ckeditor5-core/theme/icons/low-vision.svg';\nimport {\n    repositionContextualBalloon,\n    getBalloonPositionData\n} from '../image/ui/utils';\nimport { isImageWidgetSelected } from '../image/utils';\n/**\n * The image text alternative UI plugin.\n *\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        this._createButton();\n        this._createForm();\n    }\n    /**\n\t * Creates a button showing the balloon panel for changing the image text alternative and\n\t * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t */\n    _createButton() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('imageTextAlternative', locale => {\n            const command = editor.commands.get('imageTextAlternative');\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('w'),\n                icon: textAlternativeIcon,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => this._showForm());\n            return view;\n        });\n    }\n    /**\n\t * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t * form.\n\t *\n\t * @private\n\t */\n    _createForm() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        /**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        /**\n\t\t * A form containing a textarea and buttons, used to change the `alt` text value.\n\t\t *\n\t\t * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t\t */\n        this._form = new TextAlternativeFormView(editor.locale);\n        // Render the form so its #element is available for clickOutsideHandler.\n        this._form.render();\n        this.listenTo(this._form, 'submit', () => {\n            editor.execute('imageTextAlternative', { newValue: this._form.labeledInput.inputView.element.value });\n            this._hideForm(true);\n        });\n        this.listenTo(this._form, 'cancel', () => {\n            this._hideForm(true);\n        });\n        // Close the form on Esc key press.\n        this._form.keystrokes.set('Esc', (data, cancel) => {\n            this._hideForm(true);\n            cancel();\n        });\n        // Reposition the balloon or hide the form if an image widget is no longer selected.\n        this.listenTo(view, 'render', () => {\n            if (!isImageWidgetSelected(viewDocument.selection)) {\n                this._hideForm(true);\n            } else if (this._isVisible) {\n                repositionContextualBalloon(editor);\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this._form,\n            activator: () => this._isVisible,\n            contextElements: [this._form.element],\n            callback: () => this._hideForm()\n        });\n    }\n    /**\n\t * Shows the {@link #_form} in the {@link #_balloon}.\n\t *\n\t * @private\n\t */\n    _showForm() {\n        if (this._isVisible) {\n            return;\n        }\n        const editor = this.editor;\n        const command = editor.commands.get('imageTextAlternative');\n        const labeledInput = this._form.labeledInput;\n        if (!this._balloon.hasView(this._form)) {\n            this._balloon.add({\n                view: this._form,\n                position: getBalloonPositionData(editor)\n            });\n        }\n        // Make sure that each time the panel shows up, the field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\n        // stays unaltered) and re-opened it without changing the value of the command, they would see the\n        // old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-image/issues/114\n        labeledInput.value = labeledInput.inputView.element.value = command.value || '';\n        this._form.labeledInput.select();\n    }\n    /**\n\t * Removes the {@link #_form} from the {@link #_balloon}.\n\t *\n\t * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\n\t * @private\n\t */\n    _hideForm(focusEditable) {\n        if (!this._isVisible) {\n            return;\n        }\n        this._balloon.remove(this._form);\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n\t * Returns `true` when the {@link #_form} is the visible view\n\t * in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n    get _isVisible() {\n        return this._balloon.visibleView == this._form;\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagetextalternative\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageTextAlternativeEditing from './imagetextalternative/imagetextalternativeediting';\nimport ImageTextAlternativeUI from './imagetextalternative/imagetextalternativeui';\n\n/**\n * The image text alternative plugin.\n *\n * It loads the {@link module:image/imagetextalternative/imagetextalternativeediting~ImageTextAlternativeEditing}\n * and {@link module:image/imagetextalternative/imagetextalternativeui~ImageTextAlternativeUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternative extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageTextAlternativeEditing, ImageTextAlternativeUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageTextAlternative';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/image\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageEditing from '../src/image/imageediting';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\nimport ImageTextAlternative from './imagetextalternative';\n\nimport '../theme/image.css';\n\n/**\n * The image plugin.\n *\n * Uses the {@link module:image/image/imageediting~ImageEditing}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Image extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageEditing, Widget, ImageTextAlternative ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Image';\n\t}\n}\n\n/**\n * The configuration of the image features. Used by the image features in `@ckeditor/ckeditor5-image` package.\n *\n * Read more in {@link module:image/image~ImageConfig}.\n *\n * @member {module:image/image~ImageConfig} module:core/editor/editorconfig~EditorConfig#image\n */\n\n/**\n * The configuration of the image features. Used by the image features in `@ckeditor/ckeditor5-image` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\timage: ... // Image feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface ImageConfig\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module upload/ui/filedialogbuttonview\n */\n\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n *\t\tconst view = new FileDialogButtonView( locale );\n *\n *\t\tview.set( {\n *\t\t\tacceptedType: 'image/*',\n *\t\t\tallowMultipleFiles: true\n *\t\t} );\n *\n *\t\tview.buttonView.set( {\n *\t\t\tlabel: t( 'Insert image' ),\n *\t\t\ticon: imageIcon,\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.on( 'done', ( evt, files ) => {\n *\t\t\tfor ( const file of Array.from( files ) ) {\n *\t\t\t\tconsole.log( 'Selected file', file );\n *\t\t\t}\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class FileDialogButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The button view of the component.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonView = new ButtonView( locale );\n\n\t\t/**\n\t\t * A hidden `<input>` view used to execute file dialog.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/ui/filedialogbuttonview~FileInputView}\n\t\t */\n\t\tthis._fileInputView = new FileInputView( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis._fileInputView.bind( 'acceptedType' ).to( this );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `true`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis._fileInputView.bind( 'allowMultipleFiles' ).to( this );\n\n\t\t/**\n\t\t * Fired when file dialog is closed with file selected.\n\t\t *\n\t\t *\t\tview.on( 'done', ( evt, files ) => {\n\t\t *\t\t\tfor ( const file of files ) {\n\t\t *\t\t\t\tconsole.log( 'Selected file', file );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t * @event done\n\t\t * @param {Array.<File>} files Array of selected files.\n\t\t */\n\t\tthis._fileInputView.delegate( 'done' ).to( this );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-file-dialog-button',\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.buttonView,\n\t\t\t\tthis._fileInputView\n\t\t\t]\n\t\t} );\n\n\t\tthis.buttonView.on( 'execute', () => {\n\t\t\tthis._fileInputView.open();\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n}\n\n/**\n * The hidden file input view class.\n *\n * @private\n * @extends {module:ui/view~View}\n */\nclass FileInputView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis.set( 'acceptedType' );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `false`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis.set( 'allowMultipleFiles', false );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-hidden'\n\t\t\t\t],\n\t\t\t\ttype: 'file',\n\t\t\t\ttabindex: '-1',\n\t\t\t\taccept: bind.to( 'acceptedType' ),\n\t\t\t\tmultiple: bind.to( 'allowMultipleFiles' )\n\t\t\t},\n\n\t\t\ton: {\n\t\t\t\t// Removing from code coverage since we cannot programmatically set input element files.\n\t\t\t\tchange: bind.to( /* istanbul ignore next */ () => {\n\t\t\t\t\tif ( this.element && this.element.files && this.element.files.length ) {\n\t\t\t\t\t\tthis.fire( 'done', this.element.files );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.element.value = '';\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Opens file dialog.\n\t */\n\topen() {\n\t\tthis.element.click();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module upload/utils\n */\n\nimport ModelPosition from '@ckeditor/ckeditor5-engine/src/model/position';\n\n/**\n * Checks if given file is an image.\n *\n * @param {File} file\n * @returns {Boolean}\n */\nexport function isImageType( file ) {\n\tconst types = /^image\\/(jpeg|png|gif|bmp)$/;\n\n\treturn types.test( file.type );\n}\n\n/**\n * Returns a model position which is optimal (in terms of UX) for inserting an image.\n *\n * For instance, if a selection is in a middle of a paragraph, position before this paragraph\n * will be returned, so that it's not split. If the selection is at the end of a paragraph,\n * position after this paragraph will be returned.\n *\n * Note: If selection is placed in an empty block, that block will be returned. If that position\n * is then passed to {@link module:engine/model/model~Model#insertContent}\n * that block will be fully replaced by the image.\n *\n * @param {module:engine/model/selection~Selection} selection Selection based on which the\n * insertion position should be calculated.\n * @returns {module:engine/model/position~Position} The optimal position.\n */\nexport function findOptimalInsertionPosition( selection ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement ) {\n\t\treturn ModelPosition.createAfter( selectedElement );\n\t}\n\n\tconst firstBlock = selection.getSelectedBlocks().next().value;\n\n\tif ( firstBlock ) {\n\t\t// If inserting into an empty block – return position in that block. It will get\n\t\t// replaced with the image by insertContent(). #42.\n\t\tif ( firstBlock.isEmpty ) {\n\t\t\treturn ModelPosition.createAt( firstBlock );\n\t\t}\n\n\t\tconst positionAfter = ModelPosition.createAfter( firstBlock );\n\n\t\t// If selection is at the end of the block - return position after the block.\n\t\tif ( selection.focus.isTouching( positionAfter ) ) {\n\t\t\treturn positionAfter;\n\t\t}\n\n\t\t// Otherwise return position before the block.\n\t\treturn ModelPosition.createBefore( firstBlock );\n\t}\n\n\treturn selection.focus;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module image/imageupload/imageuploadui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileDialogButtonView from '@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview';\nimport imageIcon from '@ckeditor/ckeditor5-core/theme/icons/image.svg';\nimport {\n    isImageType,\n    findOptimalInsertionPosition\n} from './utils';\n/**\n * Image upload button plugin.\n * Adds `uploadImage` button to UI component factory.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Setup `uploadImage` button.\n        editor.ui.componentFactory.add('uploadImage', locale => {\n            const view = new FileDialogButtonView(locale);\n            const command = editor.commands.get('imageUpload');\n            view.set({\n                acceptedType: 'image/*',\n                allowMultipleFiles: true\n            });\n            view.buttonView.set({\n                label: t('q'),\n                icon: imageIcon,\n                tooltip: true\n            });\n            view.buttonView.bind('isEnabled').to(command);\n            view.on('done', (evt, files) => {\n                for (const file of Array.from(files)) {\n                    const insertAt = findOptimalInsertionPosition(editor.model.document.selection);\n                    if (isImageType(file)) {\n                        editor.execute('imageUpload', {\n                            file,\n                            insertAt\n                        });\n                    }\n                }\n            });\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imageupload/imageuploadprogress\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport uploadingPlaceholder from '../../theme/icons/image_placeholder.svg';\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\nimport ViewRange from '@ckeditor/ckeditor5-engine/src/view/range';\n\nimport '../../theme/imageuploadprogress.css';\n\n/**\n * Image upload progress plugin.\n * Shows placeholder when image is read from disk and progress bar while image is uploading.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadProgress extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Image's placeholder that is displayed before real image data can be accessed.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.placeholder = 'data:image/svg+xml;utf8,' + encodeURIComponent( uploadingPlaceholder );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Upload status change - update image's view according to that status.\n\t\teditor.editing.downcastDispatcher.on( 'attribute:uploadStatus:image', ( ...args ) => this.uploadStatusChange( ...args ) );\n\t}\n\n\t/**\n\t * This ethod is called each time image's `uploadStatus` attribute is changed.\n\t *\n\t * @param {module:utils/eventinfo~EventInfo} evt Object containing information about the fired event.\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\n\t * @param {Object} conversionApi\n\t */\n\tuploadStatusChange( evt, data, conversionApi ) {\n\t\tconst editor = this.editor;\n\t\tconst modelImage = data.item;\n\t\tconst uploadId = modelImage.getAttribute( 'uploadId' );\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) || !uploadId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\t\tconst placeholder = this.placeholder;\n\t\tconst status = data.attributeNewValue;\n\t\tconst viewFigure = editor.editing.mapper.toViewElement( modelImage );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// Show placeholder with infinite progress bar on the top while image is read from disk.\n\t\tif ( status == 'reading' ) {\n\t\t\tviewWriter.addClass( [ 'ck-appear', 'ck-infinite-progress', 'ck-image-upload-placeholder' ], viewFigure );\n\t\t\tconst viewImg = viewFigure.getChild( 0 );\n\t\t\tviewWriter.setAttribute( 'src', placeholder, viewImg );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Show progress bar on the top of the image when image is uploading.\n\t\tif ( status == 'uploading' ) {\n\t\t\tconst loader = fileRepository.loaders.get( uploadId );\n\n\t\t\tif ( loader ) {\n\t\t\t\tconst progressBar = createProgressBar( viewWriter );\n\n\t\t\t\tviewWriter.removeClass( [ 'ck-infinite-progress', 'ck-image-upload-placeholder' ], viewFigure );\n\t\t\t\tviewWriter.insert( ViewPosition.createAt( viewFigure, 'end' ), progressBar );\n\n\t\t\t\t// Update progress bar width when uploadedPercent is changed.\n\t\t\t\tloader.on( 'change:uploadedPercent', ( evt, name, value ) => {\n\t\t\t\t\teditor.editing.view.change( writer => {\n\t\t\t\t\t\twriter.setStyle( 'width', value + '%', progressBar );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Hide progress bar and clean up classes.\n\t\tconst progressBar = getProgressBar( viewFigure );\n\n\t\tif ( progressBar ) {\n\t\t\tviewWriter.remove( ViewRange.createOn( progressBar ) );\n\t\t} else {\n\t\t\tviewWriter.removeClass( 'ck-infinite-progress', viewFigure );\n\t\t}\n\n\t\tviewWriter.removeClass( [ 'ck-appear', 'ck-image-upload-placeholder' ], viewFigure );\n\t}\n}\n\n// Symbol added to progress bar UIElement to distinguish it from other elements.\nconst progressBarSymbol = Symbol( 'progress-bar' );\n\n// Create progress bar element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/writer~Writer} writer\n// @returns {module:engine/view/uielement~UIElement}\nfunction createProgressBar( writer ) {\n\tconst progressBar = writer.createUIElement( 'div', { class: 'ck-progress-bar' } );\n\twriter.setCustomProperty( progressBarSymbol, true, progressBar );\n\n\treturn progressBar;\n}\n\n// Returns progress bar {@link module:engine/view/uielement~UIElement} from image figure element. Returns `undefined` if\n// progress bar element is not found.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @returns {module:engine/view/uielement~UIElement|undefined}\nfunction getProgressBar( imageFigure ) {\n\tfor ( const child of imageFigure.getChildren() ) {\n\t\tif ( child.getCustomProperty( progressBarSymbol ) ) {\n\t\t\treturn child;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\nimport ModelSelection from '@ckeditor/ckeditor5-engine/src/model/selection';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * @module image/imageupload/imageuploadcommand\n */\n\n/**\n * Image upload command.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageUploadCommand extends Command {\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for executed command.\n\t * @param {File} options.file Image file to upload.\n\t * @param {module:engine/model/position~Position} [options.insertAt] Position at which the image should be inserted.\n\t * If the position is not specified the image will be inserted into the current selection.\n\t * Note: You can use the {@link module:upload/utils~findOptimalInsertionPosition} function to calculate\n\t * (e.g. based on the current selection) a position which is more optimal from UX perspective.\n\t */\n\texecute( options ) {\n\t\tconst editor = this.editor;\n\t\tconst doc = editor.model.document;\n\t\tconst file = options.file;\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\n\t\teditor.model.change( writer => {\n\t\t\tconst loader = fileRepository.createLoader( file );\n\n\t\t\t// Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\t\t\tif ( !loader ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst imageElement = new ModelElement( 'image', {\n\t\t\t\tuploadId: loader.id\n\t\t\t} );\n\n\t\t\tlet insertAtSelection;\n\n\t\t\tif ( options.insertAt ) {\n\t\t\t\tinsertAtSelection = new ModelSelection( [ new ModelRange( options.insertAt ) ] );\n\t\t\t} else {\n\t\t\t\tinsertAtSelection = doc.selection;\n\t\t\t}\n\n\t\t\teditor.model.insertContent( imageElement, insertAtSelection );\n\n\t\t\t// Inserting an image might've failed due to schema regulations.\n\t\t\tif ( imageElement.parent ) {\n\t\t\t\twriter.setSelection( ModelRange.createOn( imageElement ) );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/notification/notification\n */\n\n/* globals window */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The Notification plugin.\n *\n * This plugin sends few base types of notifications: `success`, `info` and `warning`. This notifications need to be\n * handled and displayed by plugin responsible for showing UI of the notifications. Using this plugin for dispatching\n * notifications makes possible to switch the notifications UI.\n *\n * Note that every unhandled and not stopped `warning` notification will be displayed as system alert.\n * See {@link module:ui/notification/notification~Notification#showWarning}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Notification extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Notification';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Each unhandled and not stopped `show:warning` event is displayed as system alert.\n\t\tthis.on( 'show:warning', ( evt, data ) => {\n\t\t\twindow.alert( data.message ); // eslint-disable-line no-alert\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Shows success notification.\n\t *\n\t * At default it fires `show:success` event with given data but event namespace can be extended\n\t * by `data.namespace` option e.g.\n\t *\n\t * \t\tshowSuccess( 'Image is uploaded.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire `show:success:upload:image` event.\n\t * Title of the notification can be provided:\n\t *\n\t *\t\tshowSuccess( 'Image is uploaded.', {\n\t *\t\t\ttitle: 'Image upload success'\n\t *\t\t});\n\t *\n\t * @param {String} message Content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] Title of the notification.\n\t */\n\tshowSuccess( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'success',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows info notification.\n\t *\n\t * At default it fires `show:info` event with given data but event namespace can be extended\n\t * by `data.namespace` option e.g.\n\t *\n\t * \t\tshowInfo( 'Editor is offline.', {\n\t * \t\t\tnamespace: 'editor:status'\n\t * \t\t} );\n\t *\n\t * will fire `show:info:editor:status` event.\n\t * Title of the notification can be provided:\n\t *\n\t *\t\tshowInfo( 'Editor is offline.', {\n\t *\t\t\ttitle: 'Network information'\n\t *\t\t});\n\t *\n\t * @param {String} message Content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] Title of the notification.\n\t */\n\tshowInfo( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'info',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows warning notification.\n\t *\n\t * At default it fires `show:warning` event with given data but event namespace can be extended\n\t * by `data.namespace` option e.g.\n\t *\n\t * \t\tshowWarning( 'Image upload error.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire `show:warning:upload:image` event.\n\t * Title of the notification can be provided:\n\t *\n\t *\t\tshowWarning( 'Image upload error.', {\n\t *\t\t\ttitle: 'Upload failed'\n\t *\t\t});\n\t *\n\t * Note that each unhandled and not stopped `warning` notification will be displayed as system alert.\n\t * Plugin responsible for displaying warnings should `stop()` the event to prevent of displaying it as alert:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Do something with data.\n\t *\n\t * \t\t\t// Stop this event to prevent of displaying as alert.\n\t * \t\t\tevt.stop();\n\t * \t\t} );\n\t *\n\t * You can attach many listeners to the same event and `stop()` this event in the listener with the low priority:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Show warning in the UI, but not stop it.\n\t * \t\t} );\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Log warning to some error tracker.\n\t *\n\t * \t\t\t// Stop this event to prevent of displaying as alert.\n\t * \t\t\tevt.stop();\n\t * \t\t}, { priority: 'low' } );\n\t *\n\t * @param {String} message Content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] Title of the notification.\n\t */\n\tshowWarning( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'warning',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Fires `show` event with specified type, namespace and message.\n\t *\n\t * @private\n\t * @param {Object} data Message data.\n\t * @param {String} data.message Content of the notification.\n\t * @param {'success'|'info'|'warning'} data.type Type of message.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title=''] Title of the notification.\n\t */\n\t_showNotification( data ) {\n\t\tconst event = `show:${ data.type }` + ( data.namespace ? `:${ data.namespace }` : '' );\n\n\t\tthis.fire( event, {\n\t\t\tmessage: data.message,\n\t\t\ttype: data.type,\n\t\t\ttitle: data.title || ''\n\t\t} );\n\t}\n\n\t/**\n\t * Fired when one of `showSuccess`, `showInfo`, `showWarning` methods is called.\n\t *\n\t * @event show\n\t * @param {Object} data Notification data.\n\t * @param {String} data.message Content of the notification.\n\t * @param {String} data.title Title of the notification.\n\t * @param {'success'|'info'|'warning'} data.type Type of notification.\n\t */\n\n\t/**\n\t * Fired when `showSuccess` method is called.\n\t *\n\t * @event show:success\n\t * @param {Object} data Notification data.\n\t * @param {String} data.message Content of the notification.\n\t * @param {String} data.title Title of the notification.\n\t * @param {'success'} data.type Type of notification.\n\t */\n\n\t/**\n\t * Fired when `showInfo` method is called.\n\t *\n\t * @event show:info\n\t * @param {Object} data Notification data.\n\t * @param {String} data.message Content of the notification.\n\t * @param {String} data.title Title of the notification.\n\t * @param {'info'} data.type Type of notification.\n\t */\n\n\t/**\n\t * Fired when `showWarning` method is called.\n\t *\n\t * When this event won't be handled and stopped by `event.stop()` then data.message of this event will\n\t * be automatically displayed as system alert.\n\t *\n\t * @event show:warning\n\t * @param {Object} data Notification data.\n\t * @param {String} data.message Content of the notification.\n\t * @param {String} data.title Title of the notification.\n\t * @param {'warning'} data.type Type of notification.\n\t */\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module image/imageupload/imageuploadediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport ImageUploadCommand from '../../src/imageupload/imageuploadcommand';\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\nimport ModelSelection from '@ckeditor/ckeditor5-engine/src/model/selection';\nimport {\n    isImageType,\n    findOptimalInsertionPosition\n} from '../../src/imageupload/utils';\n/**\n * Image upload editing plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [\n            FileRepository,\n            Notification\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const doc = editor.model.document;\n        const schema = editor.model.schema;\n        const fileRepository = editor.plugins.get(FileRepository);\n        // Setup schema to allow uploadId and uploadStatus for images.\n        schema.extend('image', {\n            allowAttributes: [\n                'uploadId',\n                'uploadStatus'\n            ]\n        });\n        // Register imageUpload command.\n        editor.commands.add('imageUpload', new ImageUploadCommand(editor));\n        // Execute imageUpload command when image is dropped or pasted.\n        editor.editing.view.document.on('clipboardInput', (evt, data) => {\n            // Skip if non empty HTML data is included.\n            // https://github.com/ckeditor/ckeditor5-upload/issues/68\n            if (isHtmlIncluded(data.dataTransfer)) {\n                return;\n            }\n            let targetModelSelection = new ModelSelection(data.targetRanges.map(viewRange => editor.editing.mapper.toModelRange(viewRange)));\n            for (const file of data.dataTransfer.files) {\n                const insertAt = findOptimalInsertionPosition(targetModelSelection);\n                if (isImageType(file)) {\n                    editor.execute('imageUpload', {\n                        file,\n                        insertAt\n                    });\n                    evt.stop();\n                }\n                // Use target ranges only for the first image. Then, use that image position\n                // so we keep adding the next ones after the previous one.\n                targetModelSelection = doc.selection;\n            }\n        });\n        // Prevents from browser redirecting to the dropped image.\n        editor.editing.view.document.on('dragover', (evt, data) => {\n            data.preventDefault();\n        });\n        doc.on('change', () => {\n            const changes = doc.differ.getChanges({ includeChangesInGraveyard: true });\n            for (const entry of changes) {\n                if (entry.type == 'insert' && entry.name == 'image') {\n                    const item = entry.position.nodeAfter;\n                    const isInGraveyard = entry.position.root.rootName == '$graveyard';\n                    // Check if the image element still has upload id.\n                    const uploadId = item.getAttribute('uploadId');\n                    if (!uploadId) {\n                        continue;\n                    }\n                    // Check if the image is loaded on this client.\n                    const loader = fileRepository.loaders.get(uploadId);\n                    if (!loader) {\n                        continue;\n                    }\n                    if (isInGraveyard) {\n                        // If the image was inserted to the graveyard - abort the loading process.\n                        loader.abort();\n                    } else if (loader.status == 'idle') {\n                        // If the image was inserted into content and has not been loaded, start loading it.\n                        this._load(loader, item);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Performs image loading. Image is read from the disk and temporary data is displayed, after uploading process\n\t * is complete we replace temporary data with target image from the server.\n\t *\n\t * @private\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {module:engine/model/element~Element} imageElement\n\t */\n    _load(loader, imageElement) {\n        const editor = this.editor;\n        const model = editor.model;\n        const t = editor.locale.t;\n        const fileRepository = editor.plugins.get(FileRepository);\n        const notification = editor.plugins.get(Notification);\n        model.enqueueChange('transparent', writer => {\n            writer.setAttribute('uploadStatus', 'reading', imageElement);\n        });\n        loader.read().then(data => {\n            const viewFigure = editor.editing.mapper.toViewElement(imageElement);\n            const viewImg = viewFigure.getChild(0);\n            const promise = loader.upload();\n            editor.editing.view.change(writer => {\n                writer.setAttribute('src', data, viewImg);\n            });\n            model.enqueueChange('transparent', writer => {\n                writer.setAttribute('uploadStatus', 'uploading', imageElement);\n            });\n            return promise;\n        }).then(data => {\n            model.enqueueChange('transparent', writer => {\n                writer.setAttributes({\n                    uploadStatus: 'complete',\n                    src: data.default\n                }, imageElement);\n                // Srcset attribute for responsive images support.\n                let maxWidth = 0;\n                const srcsetAttribute = Object.keys(data)    // Filter out keys that are not integers.\n.filter(key => {\n                    const width = parseInt(key, 10);\n                    if (!isNaN(width)) {\n                        maxWidth = Math.max(maxWidth, width);\n                        return true;\n                    }\n                })    // Convert each key to srcset entry.\n.map(key => `${ data[key] } ${ key }w`)    // Join all entries.\n.join(', ');\n                if (srcsetAttribute != '') {\n                    writer.setAttribute('srcset', {\n                        data: srcsetAttribute,\n                        width: maxWidth\n                    }, imageElement);\n                }\n            });\n            clean();\n        }).catch(msg => {\n            // Might be 'aborted'.\n            if (loader.status == 'error') {\n                notification.showWarning(msg, {\n                    title: t('s'),\n                    namespace: 'upload'\n                });\n            }\n            clean();\n            // Permanently remove image from insertion batch.\n            model.enqueueChange('transparent', writer => {\n                writer.remove(imageElement);\n            });\n        });\n        function clean() {\n            model.enqueueChange('transparent', writer => {\n                writer.removeAttribute('uploadId', imageElement);\n                writer.removeAttribute('uploadStatus', imageElement);\n            });\n            fileRepository.destroyLoader(loader);\n        }\n    }\n}\n// Returns true if non-empty `text/html` is included in data transfer.\n//\n// @param {module:clipboard/datatransfer~DataTransfer} dataTransfer\n// @returns {Boolean}\nexport function isHtmlIncluded(dataTransfer) {\n    return Array.from(dataTransfer.types).includes('text/html') && dataTransfer.getData('text/html') !== '';\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imageupload\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageUploadUI from './imageupload/imageuploadui';\nimport ImageUploadProgress from './imageupload/imageuploadprogress';\nimport ImageUploadEditing from './imageupload/imageuploadediting';\n\n/**\n * Image upload plugin.\n *\n * This plugin do not do anything directly, but loads set of specific plugins to enable image uploading:\n * * {@link module:image/imageupload/imageuploadediting~ImageUploadEditing},\n * * {@link module:image/imageupload/imageuploadui~ImageUploadUI},\n * * {@link module:image/imageupload/imageuploadprogress~ImageUploadProgress}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUpload extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageUpload';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageUploadEditing, ImageUploadUI, ImageUploadProgress ];\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\nexport default class ParagraphCommand extends Command {\n\t/**\n\t * The value of the command. Indicates whether the selection start is placed in a paragraph.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && block.is( 'paragraph' );\n\t\tthis.isEnabled = !!block && checkCanBecomeParagraph( block, model.schema );\n\t}\n\n\t/**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {module:engine/model/selection~Selection} [options.selection] The selection that the command should be applied to.\n\t * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = ( options.selection || document.selection ).getSelectedBlocks();\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( 'paragraph' ) && checkCanBecomeParagraph( block, model.schema ) ) {\n\t\t\t\t\twriter.rename( block, 'paragraph' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeParagraph( block, schema ) {\n\treturn schema.checkChild( block.parent, 'paragraph' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { SchemaContext } from '@ckeditor/ckeditor5-engine/src/model/schema';\nimport Position from '@ckeditor/ckeditor5-engine/src/model/position';\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\n\n/**\n * The paragraph feature for the editor.\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst data = editor.data;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Content autoparagraphing. --------------------------------------------------\n\n\t\t// Handles elements not converted by plugins and checks if would be converted if\n\t\t// we wraps them by a paragraph or changes them to a paragraph.\n\t\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n\t\t\t// When element is already consumed by higher priority converters then do nothing.\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// When element is paragraph-like lets try to change it into a paragraph.\n\t\t\tif ( Paragraph.paragraphLikeElements.has( data.viewItem.name ) ) {\n\t\t\t\tif ( data.viewItem.isEmpty ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\t\t\t\t// Find allowed parent for paragraph that we are going to insert.\n\t\t\t\t// If current parent does not allow to insert paragraph but one of the ancestors does\n\t\t\t\t// then split nodes to allowed parent.\n\t\t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n\n\t\t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n\t\t\t\tif ( !splitResult ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Insert paragraph in allowed position.\n\t\t\t\tconversionApi.writer.insert( paragraph, splitResult.position );\n\n\t\t\t\t// Convert children to paragraph.\n\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, Position.createAt( paragraph ) );\n\n\t\t\t\t// Output range starts before paragraph but ends inside it after last child.\n\t\t\t\t// This is because we want to keep siblings inside the same paragraph as long as it is possible.\n\t\t\t\t// When next node won't be allowed in a paragraph it will split this paragraph anyway.\n\t\t\t\tdata.modelRange = new Range( Position.createBefore( paragraph ), modelRange.end );\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\n\t\t\t// When element is not paragraph-like lets try to wrap it by a paragraph.\n\t\t\t} else if ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tdata = Object.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\t\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\n\t\t\t// When node is already converted then do nothing.\n\t\t\tif ( data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tdata = Object.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Empty roots autoparagraphing. -----------------------------------------------\n\n\t\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\n\t\t// Besides fixing content on #changesDone we also need to handle #dataReady because\n\t\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\n\t\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\n\n\t\teditor.on( 'dataReady', () => {\n\t\t\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Fixes all empty roots.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n\t_autoparagraphEmptyRoots( writer ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\n\t\t\t\t// If paragraph element is allowed in the root, create paragraph element.\n\t\t\t\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\n\t\t\t\t\twriter.insertElement( 'paragraph', root );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td'\n] );\n\nfunction wrapInParagraph( input, position, conversionApi ) {\n\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\tconversionApi.writer.insert( paragraph, position );\n\treturn conversionApi.convertItem( input, Position.createAt( paragraph ) );\n}\n\nfunction isParagraphable( node, position, schema ) {\n\tconst context = new SchemaContext( position );\n\n\t// When paragraph is allowed in this context...\n\tif ( !schema.checkChild( context, 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\t// And a node would be allowed in this paragraph...\n\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module heading/headingcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\nexport default class HeadingCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor instance.\n\t * @param {String} modelElement Name of the element which this command will apply in the model.\n\t */\n\tconstructor( editor, modelElement ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Whether the selection starts in a heading of {@link #modelElement this level}.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\n\t\t/**\n\t\t * Unique identifier of the command, also element's name in the model.\n\t\t * See {@link module:heading/heading~HeadingOption}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.modelElement = modelElement;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst block = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && block.is( this.modelElement );\n\t\tthis.isEnabled = !!block && checkCanBecomeHeading( block, this.modelElement, this.editor.model.schema );\n\t}\n\n\t/**\n\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\n\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => {\n\t\t\t\t\treturn checkCanBecomeHeading( block, this.modelElement, model.schema );\n\t\t\t\t} );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( this.modelElement ) ) {\n\t\t\t\t\twriter.rename( block, this.modelElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeHeading( block, heading, schema ) {\n\treturn schema.checkChild( block.parent, heading ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module heading/headingediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport HeadingCommand from './headingcommand';\n\nconst defaultModelElement = 'paragraph';\n\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'heading', {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tfor ( const option of options ) {\n\t\t\t// Skip paragraph - it is defined in required Paragraph feature.\n\t\t\tif ( option.model !== defaultModelElement ) {\n\t\t\t\t// Schema.\n\t\t\t\teditor.model.schema.register( option.model, {\n\t\t\t\t\tinheritAllFrom: '$block'\n\t\t\t\t} );\n\n\t\t\t\teditor.conversion.elementToElement( option );\n\n\t\t\t\t// Register the heading command for this option.\n\t\t\t\teditor.commands.add( option.model, new HeadingCommand( editor, option.model ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\t// If the enter command is added to the editor, alter its behavior.\n\t\t// Enter at the end of a heading element should create a paragraph.\n\t\tconst editor = this.editor;\n\t\tconst enterCommand = editor.commands.get( 'enter' );\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tif ( enterCommand ) {\n\t\t\tthis.listenTo( enterCommand, 'afterExecute', ( evt, data ) => {\n\t\t\t\tconst positionParent = editor.model.document.selection.getFirstPosition().parent;\n\t\t\t\tconst isHeading = options.some( option => positionParent.is( option.model ) );\n\n\t\t\t\tif ( isHeading && !positionParent.is( defaultModelElement ) && positionParent.childCount === 0 ) {\n\t\t\t\t\tdata.writer.rename( positionParent, defaultModelElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/model\n */\n\nimport extend from '@ckeditor/ckeditor5-utils/src/lib/lodash/extend';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\n/**\n * The base MVC model class.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\t/**\n\t * Creates a new Model instance.\n\t *\n\t * @param {Object} [attributes] The model state attributes to be defined during the instance creation.\n\t * @param {Object} [properties] The (out of state) properties to be appended to the instance during creation.\n\t */\n\tconstructor( attributes, properties ) {\n\t\t// Extend this instance with the additional (out of state) properties.\n\t\tif ( properties ) {\n\t\t\textend( this, properties );\n\t\t}\n\n\t\t// Initialize the attributes.\n\t\tif ( attributes ) {\n\t\t\tthis.set( attributes );\n\t\t}\n\t}\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/dropdownpanelview\n */\n\nimport View from '../view';\n\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the panel is visible.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * Collection of the child views in this panel.\n\t\t *\n\t\t * A common child type is the {@link module:ui/list/listview~ListView} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n\t\t * See {@link module:ui/dropdown/utils~addListToDropdown} and\n\t\t * {@link module:ui/dropdown/utils~addToolbarToDropdown} to learn more about child views of dropdowns.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-dropdown__panel',\n\t\t\t\t\tbind.if( 'isVisible', 'ck-dropdown__panel-visible' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// Drag and drop in the panel should not break the selection in the editor.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/228\n\t\t\t\tselectstart: bind.to( evt => evt.preventDefault() )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the view element or first item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocus() {\n\t\tif ( this.children.length ) {\n\t\t\tthis.children.first.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the view element or last item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocusLast() {\n\t\tif ( this.children.length ) {\n\t\t\tconst lastChild = this.children.last;\n\n\t\t\tif ( typeof lastChild.focusLast === 'function' ) {\n\t\t\t\tlastChild.focusLast();\n\t\t\t} else {\n\t\t\t\tlastChild.focus();\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/dropdownview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/dropdown/dropdown.css';\n\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n *\t\tconst button = new DropdownButtonView( locale );\n *\t\tconst panel = new DropdownPanelView( locale );\n *\t\tconst dropdown = new DropdownView( locale, button, panel );\n *\n *\t\tbutton.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tpanel.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownView extends View {\n\t/**\n\t * Creates an instance of the dropdown.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\n\t * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\n\t */\n\tconstructor( locale, buttonView, panelView ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView} #buttonView\n\t\t */\n\t\tthis.buttonView = buttonView;\n\n\t\t/**\n\t\t * Panel of the dropdown. It opens when the {@link #buttonView} is\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\n\t\t *\n\t\t * Child views can be added to the panel's `children` collection:\n\t\t *\n\t\t *\t\tdropdown.panelView.children.add( childView );\n\t\t *\n\t\t * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\n\t\t * {@link module:ui/viewcollection~ViewCollection#add}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\n\t\t */\n\t\tthis.panelView = panelView;\n\n\t\t/**\n\t\t * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOpen\n\t\t */\n\t\tthis.set( 'isOpen', false );\n\n\t\t/**\n\t\t * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\n\t\t *\n\t\t * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n\t\t * keystrokes of the dropdown:\n\t\t *\n\t\t * * <kbd>▼</kbd> opens the dropdown,\n\t\t * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-dropdown',\n\t\t\t\t\tbind.to( 'isEnabled', isEnabled => isEnabled ? '' : 'ck-disabled' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tbuttonView,\n\t\t\t\tpanelView\n\t\t\t]\n\t\t} );\n\n\t\tbuttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-dropdown__button',\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\n\t\t * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/list/listview~ListView} #listView\n\t\t */\n\n\t\t/**\n\t\t * A child toolbar of the dropdown located in the\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\n\t\t */\n\n\t\t/**\n\t\t * Fired when the toolbar button or list item is executed.\n\t\t *\n\t\t * For {@link #listView} It fires when one of the list items has been\n\t\t * {@link module:ui/list/listitemview~ListItemView#event:execute executed}.\n\t\t *\n\t\t * For {@link #toolbarView} It fires when one of the buttons has been\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\n\t\t * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @event #execute\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Toggle the dropdown when its button has been clicked.\n\t\tthis.listenTo( this.buttonView, 'open', () => {\n\t\t\tthis.isOpen = !this.isOpen;\n\t\t} );\n\n\t\t// Toggle the visibility of the panel when the dropdown becomes open.\n\t\tthis.panelView.bind( 'isVisible' ).to( this, 'isOpen' );\n\n\t\t// Listen for keystrokes coming from within #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\t// Register #element in the focus tracker.\n\t\tthis.focusTracker.add( this.element );\n\n\t\tconst closeDropdown = ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tthis.buttonView.focus();\n\t\t\t\tthis.isOpen = false;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t};\n\n\t\t// Open the dropdown panel using the arrow down key, just like with return or space.\n\t\tthis.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\t\t// Don't open if the dropdown is disabled or already open.\n\t\t\tif ( this.buttonView.isEnabled && !this.isOpen ) {\n\t\t\t\tthis.isOpen = true;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Block the right arrow key (until nested dropdowns are implemented).\n\t\tthis.keystrokes.set( 'arrowright', ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close the dropdown using the arrow left/escape key.\n\t\tthis.keystrokes.set( 'arrowleft', closeDropdown );\n\t\tthis.keystrokes.set( 'esc', closeDropdown );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\n\nimport ButtonView from '../../button/buttonview';\n\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class DropdownButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * An icon that displays arrow to indicate a dropdown button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView}\n\t\t */\n\t\tthis.arrowView = this._createArrowView();\n\n\t\t// The DropdownButton interface expects the open event upon which will open the dropdown.\n\t\tthis.delegate( 'execute' ).to( this, 'open' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.arrowView );\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n\t *\n\t * @private\n\t * @returns {module:ui/icon/iconview~IconView}\n\t */\n\t_createArrowView() {\n\t\tconst arrowView = new IconView();\n\n\t\tarrowView.content = dropdownArrowIcon;\n\n\t\tarrowView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-dropdown__arrow'\n\t\t\t}\n\t\t} );\n\n\t\treturn arrowView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/list/listview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/list/list.css';\n\n/**\n * The list view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ListView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Collection of the child list views.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate list items backwards using the arrowup key.\n\t\t\t\tfocusPrevious: 'arrowup',\n\n\t\t\t\t// Navigate toolbar items forwards using the arrowdown key.\n\t\t\t\tfocusNext: 'arrowdown',\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'ul',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-list'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.items\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/list/listitemview\n */\n\nimport View from '../view';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * The list item view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListItemView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Controls the `tabindex` attribute of the item.\n\t\t *\n\t\t * @observable\n\t\t * @default -1\n\t\t * @member {String} #tabindex\n\t\t */\n\t\tthis.set( 'tabindex', -1 );\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-list__item',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isActive', 'ck-list__item_active' )\n\t\t\t\t],\n\t\t\t\tstyle: bind.to( 'style' ),\n\t\t\t\ttabindex: bind.to( 'tabindex' )\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( 'label' )\n\t\t\t\t}\n\t\t\t],\n\n\t\t\ton: {\n\t\t\t\tclick: bind.to( 'execute' )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The label of the list item.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\n\t\t/**\n\t\t * (Optional) The DOM style attribute of the list item.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #style\n\t\t */\n\n\t\t/**\n\t\t * (Optional) The additional class set on the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\n\t\t/**\n\t\t * (Optional) When set, it marks the item as active among the others.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isActive\n\t\t */\n\n\t\t/**\n\t\t * Fired when the list item has been clicked.\n\t\t *\n\t\t * @event execute\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tconst onKeystrokePress = ( data, cancel ) => {\n\t\t\tthis.fire( 'execute' );\n\t\t\tcancel();\n\t\t};\n\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\t// Execute on Enter and Space key press.\n\t\tthis.keystrokes.set( 'Enter', onKeystrokePress );\n\t\tthis.keystrokes.set( 'Space', onKeystrokePress );\n\t}\n\n\t/**\n\t * Focuses the list item.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/utils\n */\n\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\n\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\n\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( model, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown( locale, ButtonClass = DropdownButtonView ) {\n\tconst buttonView = new ButtonClass( locale );\n\n\tconst panelView = new DropdownPanelView( locale );\n\tconst dropdownView = new DropdownView( locale, buttonView, panelView );\n\n\tbuttonView.bind( 'isEnabled' ).to( dropdownView );\n\n\tif ( buttonView instanceof DropdownButtonView ) {\n\t\tbuttonView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\n\t} else {\n\t\tbuttonView.arrowView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\n\t}\n\n\taddDefaultBehavior( dropdownView );\n\n\treturn dropdownView;\n}\n\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.get( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n */\nexport function addToolbarToDropdown( dropdownView, buttons ) {\n\tconst toolbarView = dropdownView.toolbarView = new ToolbarView();\n\n\tdropdownView.extendTemplate( {\n\t\tattributes: {\n\t\t\tclass: [ 'ck-toolbar-dropdown' ]\n\t\t}\n\t} );\n\n\tbuttons.map( view => toolbarView.items.add( view ) );\n\n\tdropdownView.panelView.children.add( toolbarView );\n\ttoolbarView.items.delegate( 'execute' ).to( dropdownView );\n}\n\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( new Model( { label: 'First item', style: 'color: red' } ) );\n *\t\titems.add( new Model( { label: 'Second item', style: 'color: green', class: 'foo' } ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {module:utils/collection~Collection} items\n * that the inner dropdown {@link module:ui/list/listview~ListView} children are created from.\n *\n * Usually, it is a collection of {@link module:ui/model~Model models}.\n */\nexport function addListToDropdown( dropdownView, items ) {\n\tconst locale = dropdownView.locale;\n\tconst listView = dropdownView.listView = new ListView( locale );\n\n\tlistView.items.bindTo( items ).using( itemModel => {\n\t\tconst item = new ListItemView( locale );\n\n\t\t// Bind all attributes of the model to the item view.\n\t\titem.bind( ...Object.keys( itemModel ) ).to( itemModel );\n\n\t\treturn item;\n\t} );\n\n\tdropdownView.panelView.children.add( listView );\n\n\tlistView.items.delegate( 'execute' ).to( dropdownView );\n}\n\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior( dropdownView ) {\n\tcloseDropdownOnBlur( dropdownView );\n\tcloseDropdownOnExecute( dropdownView );\n\tfocusDropdownContentsOnArrows( dropdownView );\n}\n\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur( dropdownView ) {\n\tdropdownView.on( 'render', () => {\n\t\tclickOutsideHandler( {\n\t\t\temitter: dropdownView,\n\t\t\tactivator: () => dropdownView.isOpen,\n\t\t\tcallback: () => {\n\t\t\t\tdropdownView.isOpen = false;\n\t\t\t},\n\t\t\tcontextElements: [ dropdownView.element ]\n\t\t} );\n\t} );\n}\n\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute( dropdownView ) {\n\t// Close the dropdown when one of the list items has been executed.\n\tdropdownView.on( 'execute', () => {\n\t\tdropdownView.isOpen = false;\n\t} );\n}\n\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows( dropdownView ) {\n\t// If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n\tdropdownView.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\tif ( dropdownView.isOpen ) {\n\t\t\tdropdownView.panelView.focus();\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n\tdropdownView.keystrokes.set( 'arrowup', ( data, cancel ) => {\n\t\tif ( dropdownView.isOpen ) {\n\t\t\tdropdownView.panelView.focusLast();\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module heading/headingui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` drop-down.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = this._getLocalizedOptions();\n        const defaultTitle = t('e');\n        const dropdownTooltip = t('f');\n        // Register UI component.\n        editor.ui.componentFactory.add('headings', locale => {\n            const commands = [];\n            const dropdownItems = new Collection();\n            for (const option of options) {\n                const command = editor.commands.get(option.model);\n                const itemModel = new Model({\n                    commandName: option.model,\n                    label: option.title,\n                    class: option.class\n                });\n                itemModel.bind('isActive').to(command, 'value');\n                // Add the option to the collection.\n                dropdownItems.add(itemModel);\n                commands.push(command);\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, dropdownItems);\n            dropdownView.buttonView.set({\n                isOn: false,\n                withText: true,\n                tooltip: dropdownTooltip\n            });\n            dropdownView.extendTemplate({ attributes: { class: ['ck-heading-dropdown'] } });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n                return areEnabled.some(isEnabled => isEnabled);\n            });\n            dropdownView.buttonView.bind('label').toMany(commands, 'value', (...areActive) => {\n                const index = areActive.findIndex(value => value);\n                // If none of the commands is active, display default title.\n                return options[index] ? options[index].title : defaultTitle;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n\t * Returns heading options as defined in `config.heading.options` but processed to consider\n\t * editor localization, i.e. to display {@link module:heading/heading~HeadingOption}\n\t * in the correct language.\n\t *\n\t * Note: The reason behind this method is that there's no way to use {@link module:utils/locale~Locale#t}\n\t * when the user config is defined because the editor does not exist yet.\n\t *\n\t * @private\n\t * @returns {Array.<module:heading/heading~HeadingOption>}.\n\t */\n    _getLocalizedOptions() {\n        const editor = this.editor;\n        const t = editor.t;\n        const localizedTitles = {\n            Paragraph: t('g'),\n            'Heading 1': t('h'),\n            'Heading 2': t('i'),\n            'Heading 3': t('j')\n        };\n        return editor.config.get('heading.options').map(option => {\n            const title = localizedTitles[option.title];\n            if (title && title != option.title) {\n                // Clone the option to avoid altering the original `config.heading.options`.\n                option = Object.assign({}, option, { title });\n            }\n            return option;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/placeholder\n */\n\nimport '../../theme/placeholder.css';\n\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n\n/**\n * Attaches placeholder to provided element and updates it's visibility. To change placeholder simply call this method\n * once again with new parameters.\n *\n * @param {module:engine/view/view~View} view View controller.\n * @param {module:engine/view/element~Element} element Element to attach placeholder to.\n * @param {String} placeholderText Placeholder text to use.\n * @param {Function} [checkFunction] If provided it will be called before checking if placeholder should be displayed.\n * If function returns `false` placeholder will not be showed.\n */\nexport function attachPlaceholder( view, element, placeholderText, checkFunction ) {\n\tconst document = view.document;\n\n\t// Single listener per document.\n\tif ( !documentPlaceholders.has( document ) ) {\n\t\tdocumentPlaceholders.set( document, new Map() );\n\n\t\t// Create view post fixer that will add placeholder where needed.\n\t\tdocument.registerPostFixer( writer => updateAllPlaceholders( document, writer ) );\n\t}\n\n\t// Store information about element with placeholder.\n\tdocumentPlaceholders.get( document ).set( element, { placeholderText, checkFunction } );\n\n\t// Update view right away.\n\tview.render();\n}\n\n/**\n * Removes placeholder functionality from given element.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function detachPlaceholder( view, element ) {\n\tconst document = element.document;\n\n\tif ( documentPlaceholders.has( document ) ) {\n\t\tdocumentPlaceholders.get( document ).delete( element );\n\t}\n\n\tview.change( writer => {\n\t\twriter.removeClass( 'ck-placeholder', element );\n\t\twriter.removeAttribute( 'data-placeholder', element );\n\t} );\n}\n\n// Updates all placeholders of given document.\n//\n// @private\n// @param {module:engine/view/document~Document} view\n// @param {module:engine/view/writer~Writer} writer\nfunction updateAllPlaceholders( document, writer ) {\n\tconst placeholders = documentPlaceholders.get( document );\n\tlet changed = false;\n\n\tfor ( const [ element, info ] of placeholders ) {\n\t\tif ( updateSinglePlaceholder( writer, element, info ) ) {\n\t\t\tchanged = true;\n\t\t}\n\t}\n\n\treturn changed;\n}\n\n// Updates placeholder class of given element.\n//\n// @private\n// @param {module:engine/view/writer~Writer} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} info\nfunction updateSinglePlaceholder( writer, element, info ) {\n\tconst document = element.document;\n\tconst text = info.placeholderText;\n\tlet changed = false;\n\n\t// Element was removed from document.\n\tif ( !document ) {\n\t\treturn false;\n\t}\n\n\t// Update data attribute if needed.\n\tif ( element.getAttribute( 'data-placeholder' ) !== text ) {\n\t\twriter.setAttribute( 'data-placeholder', text, element );\n\t\tchanged = true;\n\t}\n\n\tconst viewSelection = document.selection;\n\tconst anchor = viewSelection.anchor;\n\tconst checkFunction = info.checkFunction;\n\n\t// If checkFunction is provided and returns false - remove placeholder.\n\tif ( checkFunction && !checkFunction() ) {\n\t\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.removeClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Element is empty for placeholder purposes when it has no children or only ui elements.\n\t// This check is taken from `view.ContainerElement#getFillerOffset`.\n\tconst isEmptyish = !Array.from( element.getChildren() ).some( element => !element.is( 'uiElement' ) );\n\n\t// If element is empty and editor is blurred.\n\tif ( !document.isFocused && isEmptyish ) {\n\t\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.addClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// It there are no child elements and selection is not placed inside element.\n\tif ( isEmptyish && anchor && anchor.parent !== element ) {\n\t\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.addClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\t} else {\n\t\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.removeClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\t}\n\n\treturn changed;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagecaption/utils\n */\n\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\nimport { attachPlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\n\nconst captionSymbol = Symbol( 'imageCaption' );\n\n/**\n * Returns a function that creates a caption editable element for the given {@link module:engine/view/document~Document}.\n *\n * @param {module:engine/view/view~View} view\n * @param {String} placeholderText The text to be displayed when the caption is empty.\n * @return {Function}\n */\nexport function captionElementCreator( view, placeholderText ) {\n\treturn writer => {\n\t\tconst theEditable = writer.createEditableElement( 'figcaption' );\n\t\twriter.setCustomProperty( captionSymbol, true, theEditable );\n\t\tattachPlaceholder( view, theEditable, placeholderText );\n\n\t\treturn toWidgetEditable( theEditable, writer );\n\t};\n}\n\n/**\n * Returns `true` if a given view element is the image caption editable.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @return {Boolean}\n */\nexport function isCaption( viewElement ) {\n\treturn !!viewElement.getCustomProperty( captionSymbol );\n}\n\n/**\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n *\n * @param {module:engine/model/element~Element} imageModelElement\n * @return {module:engine/model/element~Element|null}\n */\nexport function getCaptionFromImage( imageModelElement ) {\n\tfor ( const node of imageModelElement.getChildren() ) {\n\t\tif ( node instanceof ModelElement && node.name == 'caption' ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n * inside the image `<figure>` element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n * cannot be matched.\n */\nexport function matchImageCaption( element ) {\n\tconst parent = element.parent;\n\n\t// Convert only captions for images.\n\tif ( element.name == 'figcaption' && parent && parent.name == 'figure' && parent.hasClass( 'image' ) ) {\n\t\treturn { name: true };\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module image/imagecaption/imagecaptionediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\nimport { upcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\nimport { isImage } from '../image/utils';\nimport {\n    captionElementCreator,\n    getCaptionFromImage,\n    matchImageCaption\n} from './utils';\n/**\n * The image caption engine plugin.\n *\n * It registers proper converters. It takes care of adding a caption element if the image without it is inserted\n * to the model document.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageCaptionEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const schema = editor.model.schema;\n        const data = editor.data;\n        const editing = editor.editing;\n        const t = editor.t;\n        /**\n\t\t * Last selected caption editable.\n\t\t * It is used for hiding the editable when it is empty and the image widget is no longer selected.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/editableelement~EditableElement} #_lastSelectedCaption\n\t\t */\n        // Schema configuration.\n        schema.register('caption', {\n            allowIn: 'image',\n            allowContentOf: '$block',\n            isLimit: true\n        });\n        // Add caption element to each image inserted without it.\n        editor.model.document.registerPostFixer(writer => this._insertMissingModelCaptionElement(writer));\n        // View to model converter for the data pipeline.\n        editor.conversion.for('upcast').add(upcastElementToElement({\n            view: matchImageCaption,\n            model: 'caption'\n        }));\n        // Model to view converter for the data pipeline.\n        const createCaptionForData = writer => writer.createContainerElement('figcaption');\n        data.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForData, false));\n        // Model to view converter for the editing pipeline.\n        const createCaptionForEditing = captionElementCreator(view, t('r'));\n        editing.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForEditing));\n        // Always show caption in view when something is inserted in model.\n        editing.downcastDispatcher.on('insert', this._fixCaptionVisibility(data => data.item), { priority: 'high' });\n        // Hide caption when everything is removed from it.\n        editing.downcastDispatcher.on('remove', this._fixCaptionVisibility(data => data.position.parent), { priority: 'high' });\n        // Update caption visibility on view in post fixer.\n        view.document.registerPostFixer(writer => this._updateCaptionVisibility(writer));\n    }\n    /**\n\t * Updates the view before each rendering, making sure that empty captions (so unnecessary ones) are hidden\n\t * and then visible when the image is selected.\n\t *\n\t * @private\n\t * @param {module:engine/view/writer~Writer} viewWriter\n\t * @returns {Boolean} Returns `true` when view is updated.\n\t */\n    _updateCaptionVisibility(viewWriter) {\n        const mapper = this.editor.editing.mapper;\n        const lastCaption = this._lastSelectedCaption;\n        let viewCaption;\n        // If whole image is selected.\n        const modelSelection = this.editor.model.document.selection;\n        const selectedElement = modelSelection.getSelectedElement();\n        if (selectedElement && selectedElement.is('image')) {\n            const modelCaption = getCaptionFromImage(selectedElement);\n            viewCaption = mapper.toViewElement(modelCaption);\n        }\n        // If selection is placed inside caption.\n        const position = modelSelection.getFirstPosition();\n        const modelCaption = getParentCaption(position.parent);\n        if (modelCaption) {\n            viewCaption = mapper.toViewElement(modelCaption);\n        }\n        // Is currently any caption selected?\n        if (viewCaption) {\n            // Was any caption selected before?\n            if (lastCaption) {\n                // Same caption as before?\n                if (lastCaption === viewCaption) {\n                    return showCaption(viewCaption, viewWriter);\n                } else {\n                    hideCaptionIfEmpty(lastCaption, viewWriter);\n                    this._lastSelectedCaption = viewCaption;\n                    return showCaption(viewCaption, viewWriter);\n                }\n            } else {\n                this._lastSelectedCaption = viewCaption;\n                return showCaption(viewCaption, viewWriter);\n            }\n        } else {\n            // Was any caption selected before?\n            if (lastCaption) {\n                const viewModified = hideCaptionIfEmpty(lastCaption, viewWriter);\n                this._lastSelectedCaption = null;\n                return viewModified;\n            } else {\n                return false;\n            }\n        }\n    }\n    /**\n\t * Returns converter that fixes caption visibility during the model-to-view conversion.\n\t * Checks if the changed node is placed inside the caption element and fixes its visibility in the view.\n\t *\n\t * @private\n\t * @param {Function} nodeFinder\n\t * @returns {Function}\n\t */\n    _fixCaptionVisibility(nodeFinder) {\n        return (evt, data, conversionApi) => {\n            const node = nodeFinder(data);\n            const modelCaption = getParentCaption(node);\n            const mapper = this.editor.editing.mapper;\n            const viewWriter = conversionApi.writer;\n            if (modelCaption) {\n                const viewCaption = mapper.toViewElement(modelCaption);\n                if (viewCaption) {\n                    if (modelCaption.childCount) {\n                        viewWriter.removeClass('ck-hidden', viewCaption);\n                    } else {\n                        viewWriter.addClass('ck-hidden', viewCaption);\n                    }\n                }\n            }\n        };\n    }\n    /**\n\t * Checks whether data inserted to the model document have image element that has no caption element inside it.\n\t * If there is none - adds it to the image element.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer Writer to make changes with.\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n    _insertMissingModelCaptionElement(writer) {\n        const model = this.editor.model;\n        const changes = model.document.differ.getChanges();\n        for (const entry of changes) {\n            if (entry.type == 'insert' && entry.name == 'image') {\n                const item = entry.position.nodeAfter;\n                if (!getCaptionFromImage(item)) {\n                    writer.appendElement('caption', item);\n                    return true;\n                }\n            }\n        }\n    }\n}\n// Creates a converter that converts image caption model element to view element.\n//\n// @private\n// @param {Function} elementCreator\n// @param {Boolean} [hide=true] When set to `false` view element will not be inserted when it's empty.\n// @return {Function}\nfunction captionModelToView(elementCreator, hide = true) {\n    return (evt, data, conversionApi) => {\n        const captionElement = data.item;\n        // Return if element shouldn't be present when empty.\n        if (!captionElement.childCount && !hide) {\n            return;\n        }\n        if (isImage(captionElement.parent)) {\n            if (!conversionApi.consumable.consume(data.item, 'insert')) {\n                return;\n            }\n            const viewImage = conversionApi.mapper.toViewElement(data.range.start.parent);\n            const viewCaption = elementCreator(conversionApi.writer);\n            const viewWriter = conversionApi.writer;\n            // Hide if empty.\n            if (!captionElement.childCount) {\n                viewWriter.addClass('ck-hidden', viewCaption);\n            }\n            insertViewCaptionAndBind(viewCaption, data.item, viewImage, conversionApi);\n        }\n    };\n}\n// Inserts `viewCaption` at the end of `viewImage` and binds it to `modelCaption`.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} viewCaption\n// @param {module:engine/model/element~Element} modelCaption\n// @param {module:engine/view/containerelement~ContainerElement} viewImage\n// @param {Object} conversionApi\nfunction insertViewCaptionAndBind(viewCaption, modelCaption, viewImage, conversionApi) {\n    const viewPosition = ViewPosition.createAt(viewImage, 'end');\n    conversionApi.writer.insert(viewPosition, viewCaption);\n    conversionApi.mapper.bindElements(modelCaption, viewCaption);\n}\n// Checks if the provided node or one of its ancestors is a caption element, and returns it.\n//\n// @private\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/element~Element|null}\nfunction getParentCaption(node) {\n    const ancestors = node.getAncestors({ includeSelf: true });\n    const caption = ancestors.find(ancestor => ancestor.name == 'caption');\n    if (caption && caption.parent && caption.parent.name == 'image') {\n        return caption;\n    }\n    return null;\n}\n// Hides given caption in the view if it's empty.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/writer~Writer} viewWriter\n// @returns {Boolean} Returns `true` if view was modified.\nfunction hideCaptionIfEmpty(caption, viewWriter) {\n    if (!caption.childCount && !caption.hasClass('ck-hidden')) {\n        viewWriter.addClass('ck-hidden', caption);\n        return true;\n    }\n    return false;\n}\n// Shows the caption\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/writer~Writer} viewWriter\n// @returns {Boolean} Returns `true` if view was modified.\nfunction showCaption(caption, viewWriter) {\n    if (caption.hasClass('ck-hidden')) {\n        viewWriter.removeClass('ck-hidden', caption);\n        return true;\n    }\n    return false;\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagestyle/imagestylecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image style command. It is used to apply different image styles.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageStyleCommand extends Command {\n\t/**\n\t * Creates an instance of the image style command. Each command instance is handling one style.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style A style to be applied by this command.\n\t */\n\tconstructor( editor, style ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The value of the command &mdash; `true` if a style handled by the command is applied on a currently selected image,\n\t\t * `false` otherwise.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #value\n\t\t */\n\n\t\t/**\n\t\t * A style handled by this command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:image/imagestyle/imagestyleediting~ImageStyleFormat} #style\n\t\t */\n\t\tthis.style = style;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( !element ) {\n\t\t\tthis.value = false;\n\t\t} else if ( this.style.isDefault ) {\n\t\t\tthis.value = !element.hasAttribute( 'imageStyle' );\n\t\t} else {\n\t\t\tthis.value = ( element.getAttribute( 'imageStyle' ) == this.style.name );\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tif ( this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\t// Default style means that there is no `imageStyle` attribute in the model.\n\t\t\t// https://github.com/ckeditor/ckeditor5-image/issues/147\n\t\t\tif ( this.style.isDefault ) {\n\t\t\t\twriter.removeAttribute( 'imageStyle', imageElement );\n\t\t\t} else {\n\t\t\t\twriter.setAttribute( 'imageStyle', this.style.name, imageElement );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * @module image/imagestyle/converters\n */\n\n/**\n * Returns a converter for the `imageStyle` attribute. It can be used for adding, changing and removing the attribute.\n *\n * @param {Object} styles An object containing available styles. See {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n * for more details.\n * @returns {Function} A model-to-view attribute converter.\n */\nexport function modelToViewStyleAttribute( styles ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if there is class name associated with given value.\n\t\tconst newStyle = getStyleByName( data.attributeNewValue, styles );\n\t\tconst oldStyle = getStyleByName( data.attributeOldValue, styles );\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tif ( oldStyle ) {\n\t\t\tviewWriter.removeClass( oldStyle.className, viewElement );\n\t\t}\n\n\t\tif ( newStyle ) {\n\t\t\tviewWriter.addClass( newStyle.className, viewElement );\n\t\t}\n\t};\n}\n\n/**\n * Returns a view-to-model converter converting image CSS classes to a proper value in the model.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles Styles for which the converter is created.\n * @returns {Function} A view-to-model converter.\n */\nexport function viewToModelStyleAttribute( styles ) {\n\t// Convert only non–default styles.\n\tconst filteredStyles = styles.filter( style => !style.isDefault );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewFigureElement = data.viewItem;\n\t\tconst modelImageElement = first( data.modelRange.getItems() );\n\n\t\t// Check if `imageStyle` attribute is allowed for current element.\n\t\tif ( !conversionApi.schema.checkAttribute( modelImageElement, 'imageStyle' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert style one by one.\n\t\tfor ( const style of filteredStyles ) {\n\t\t\t// Try to consume class corresponding with style.\n\t\t\tif ( conversionApi.consumable.consume( viewFigureElement, { class: style.className } ) ) {\n\t\t\t\t// And convert this style to model attribute.\n\t\t\t\tconversionApi.writer.setAttribute( 'imageStyle', style.name, modelImageElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Returns style with given `name` from array of styles.\n//\n// @param {String} name\n// @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat> } styles\n// @return {module:image/imagestyle/imagestyleediting~ImageStyleFormat|undefined}\nfunction getStyleByName( name, styles ) {\n\tfor ( const style of styles ) {\n\t\tif ( style.name === name ) {\n\t\t\treturn style;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagestyle/utils\n */\n\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nimport fullWidthIcon from '@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg';\nimport leftIcon from '@ckeditor/ckeditor5-core/theme/icons/object-left.svg';\nimport centerIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\nimport rightIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\n\n/**\n * Default image styles provided by the plugin, which can be referred in the\n * {@link module:image/image~ImageConfig#styles} config.\n *\n * Among them, 2 default semantic content styles are available:\n *\n * * `imageStyleFull` is a full–width image without any CSS class,\n * * `imageStyleSide` is a side image styled with the `image-style-side` CSS class\n *\n * There are also 3 styles focused on formatting:\n *\n * * `imageStyleAlignLeft` aligns the image to the left using the `image-style-align-left` class,\n * * `imageStyleAlignCenter` centers the image to the left using the `image-style-align-center` class,\n * * `imageStyleAlignRight` aligns the image to the right using the `image-style-align-right` class,\n *\n * @member {Object.<String,Object>}\n */\nconst defaultStyles = {\n\t// This option is equal to situation when no style is applied.\n\timageStyleFull: {\n\t\tname: 'imageStyleFull',\n\t\ttitle: 'Full size image',\n\t\ticon: fullWidthIcon,\n\t\tisDefault: true\n\t},\n\n\t// This represents side image.\n\timageStyleSide: {\n\t\tname: 'imageStyleSide',\n\t\ttitle: 'Side image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-side'\n\t},\n\n\t// This style represents an imaged aligned to the left.\n\timageStyleAlignLeft: {\n\t\tname: 'imageStyleAlignLeft',\n\t\ttitle: 'Left aligned image',\n\t\ticon: leftIcon,\n\t\tclassName: 'image-style-align-left'\n\t},\n\n\t// This style represents a centered imaged.\n\timageStyleAlignCenter: {\n\t\tname: 'imageStyleAlignCenter',\n\t\ttitle: 'Centered image',\n\t\ticon: centerIcon,\n\t\tclassName: 'image-style-align-center'\n\t},\n\n\t// This style represents an imaged aligned to the right.\n\timageStyleAlignRight: {\n\t\tname: 'imageStyleAlignRight',\n\t\ttitle: 'Right aligned image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-align-right'\n\t}\n};\n\n/**\n * Default image style icons provided by the plugin, which can be referred in the\n * {@link module:image/image~ImageConfig#styles} config.\n *\n * There are 4 icons available: `'full'`, `'left'`, `'center'` and `'right'`.\n *\n * @member {Object.<String, String>}\n */\nconst defaultIcons = {\n\tfull: fullWidthIcon,\n\tleft: leftIcon,\n\tright: rightIcon,\n\tcenter: centerIcon\n};\n\n/**\n * Returns {@link module:image/image~ImageConfig#styles} array with items normalized in the\n * {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat} format and a complete `icon` markup for each style.\n *\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nexport function normalizeImageStyles( configuredStyles = [] ) {\n\treturn configuredStyles\n\t\t.map( _normalizeStyle )\n\t\t.map( style => Object.assign( {}, style ) );\n}\n\n// Normalizes an image style provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}.\n//\n// @param {Object} style\n// @returns {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\nfunction _normalizeStyle( style ) {\n\t// Just the name of the style has been passed.\n\tif ( typeof style == 'string' ) {\n\t\t// If it's one of the defaults, just use it.\n\t\t// Clone the style to avoid overriding defaults.\n\t\tif ( defaultStyles[ style ] ) {\n\t\t\tstyle = Object.assign( {}, defaultStyles[ style ] );\n\t\t}\n\t\t// If it's just a name but none of the defaults, warn because probably it's a mistake.\n\t\telse {\n\t\t\tlog.warn(\n\t\t\t\t'image-style-not-found: There is no such image style of given name.',\n\t\t\t\t{ name: style }\n\t\t\t);\n\n\t\t\t// Normalize the style anyway to prevent errors.\n\t\t\tstyle = {\n\t\t\t\tname: style\n\t\t\t};\n\t\t}\n\t}\n\n\t// If an object style has been passed and if the name matches one of the defaults,\n\t// extend it with defaults – the user wants to customize a default style.\n\t// Note: Don't override the user–defined style object, clone it instead.\n\telse if ( defaultStyles[ style.name ] ) {\n\t\tconst defaultStyle = defaultStyles[ style.name ];\n\t\tconst extendedStyle = Object.assign( {}, style );\n\n\t\tfor ( const prop in defaultStyle ) {\n\t\t\tif ( !style.hasOwnProperty( prop ) ) {\n\t\t\t\textendedStyle[ prop ] = defaultStyle[ prop ];\n\t\t\t}\n\t\t}\n\n\t\tstyle = extendedStyle;\n\t}\n\n\t// If an icon is defined as a string and correspond with a name\n\t// in default icons, use the default icon provided by the plugin.\n\tif ( typeof style.icon == 'string' && defaultIcons[ style.icon ] ) {\n\t\tstyle.icon = defaultIcons[ style.icon ];\n\t}\n\n\treturn style;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleCommand from './imagestylecommand';\nimport ImageEditing from '../image/imageediting';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\nimport { normalizeImageStyles } from './utils';\n\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends {module:core/plugin~Plugin}\n */\nexport default class ImageStyleEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyleEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\t// Define default configuration.\n\t\teditor.config.define( 'image.styles', [ 'imageStyleFull', 'imageStyleSide' ] );\n\n\t\t// Get configuration.\n\t\tconst styles = normalizeImageStyles( editor.config.get( 'image.styles' ) );\n\n\t\t// Allow imageStyle attribute in image.\n\t\t// We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\t\tschema.extend( 'image', { allowAttributes: 'imageStyle' } );\n\n\t\t// Converters for imageStyle attribute from model to view.\n\t\tconst modelToViewConverter = modelToViewStyleAttribute( styles );\n\t\tediting.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\t\tdata.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\n\t\t// Converter for figure element from view to model.\n\t\tdata.upcastDispatcher.on( 'element:figure', viewToModelStyleAttribute( styles ), { priority: 'low' } );\n\n\t\t// Register separate command for each style.\n\t\tfor ( const style of styles ) {\n\t\t\teditor.commands.add( style.name, new ImageStyleCommand( editor, style ) );\n\t\t}\n\t}\n}\n\n/**\n * Image style format descriptor.\n *\n *\t\timport fullWidthIcon from 'path/to/icon.svg`;\n *\n *\t\tconst imageStyleFormat = {\n *\t\t\tname: 'fullSizeImage',\n *\t\t\ticon: fullWidthIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size'\n *\t\t}\n *\n * @typedef {Object} module:image/imagestyle/imagestyleediting~ImageStyleFormat\n * @property {String} name The unique name of the style. It will be used to:\n * * register the {@link module:core/command~Command command} which will apply this style,\n * * store the style's button in the editor {@link module:ui/componentfactory~ComponentFactory},\n * * store the style in the `imageStyle` model attribute.\n * @property {Boolean} [isDefault] When set, the style will be used as the default one.\n * A default style does not apply any CSS class to the view element.\n * @property {String} icon One of the following to be used when creating the style's button:\n *  * An SVG icon source (as an XML string),\n *  * One of {@link module:image/imagestyle/utils~defaultIcons} to use a default icon provided by the plugin.\n * @property {String} title The style's title.\n * @property {String} className The CSS class used to represent the style in view.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module image/imagestyle/imagestyleui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport { normalizeImageStyles } from './utils';\nimport '../../theme/imagestyle.css';\n/**\n * The image style UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleUI extends Plugin {\n    /**\n\t * Returns the default localized style titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:image/imagestyle/utils~defaultStyles} are available:\n\t *\n\t * * `'Full size image'`,\n\t * * `'Side image'`,\n\t * * `'Left aligned image'`,\n\t * * `'Centered image'`,\n\t * * `'Right aligned image'`\n\t *\n\t * @returns {Object.<String,String>}\n\t */\n    get localizedDefaultStylesTitles() {\n        const t = this.editor.t;\n        return {\n            'Full size image': t('l'),\n            'Side image': t('m'),\n            'Left aligned image': t('n'),\n            'Centered image': t('o'),\n            'Right aligned image': t('p')\n        };\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const configuredStyles = editor.config.get('image.styles');\n        const translatedStyles = translateStyles(normalizeImageStyles(configuredStyles), this.localizedDefaultStylesTitles);\n        for (const style of translatedStyles) {\n            this._createButton(style);\n        }\n    }\n    /**\n\t * Creates a button for each style and stores it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style\n\t */\n    _createButton(style) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(style.name, locale => {\n            const command = editor.commands.get(style.name);\n            const view = new ButtonView(locale);\n            view.set({\n                label: style.title,\n                icon: style.icon,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            view.bind('isOn').to(command, 'value');\n            this.listenTo(view, 'execute', () => editor.execute(style.name));\n            return view;\n        });\n    }\n}\n/**\n * Returns translated `title` from the passed styles array.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles\n * @param titles\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nfunction translateStyles(styles, titles) {\n    for (const style of styles) {\n        // Localize the titles of the styles, if a title corresponds with\n        // a localized default provided by the plugin.\n        if (titles[style.title]) {\n            style.title = titles[style.title];\n        }\n    }\n    return styles;\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagetoolbar\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport { isImageWidgetSelected } from './image/utils';\nimport { repositionContextualBalloon, getBalloonPositionData } from './image/ui/utils';\n\nconst balloonClassName = 'ck-toolbar-container';\n\n/**\n * The image toolbar class. Creates an image toolbar that shows up when the image widget is selected.\n *\n * Toolbar components are created using the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}\n * based on the {@link module:core/editor/editor~Editor#config configuration} stored under `image.toolbar`.\n *\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageToolbar';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst balloonToolbar = editor.plugins.get( 'BalloonToolbar' );\n\n\t\t// If `BalloonToolbar` plugin is loaded, it should be disabled for images\n\t\t// which have their own toolbar to avoid duplication.\n\t\t// https://github.com/ckeditor/ckeditor5-image/issues/110\n\t\tif ( balloonToolbar ) {\n\t\t\tthis.listenTo( balloonToolbar, 'show', evt => {\n\t\t\t\tif ( isImageWidgetSelected( editor.editing.view.document.selection ) ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\t\tconst toolbarConfig = editor.config.get( 'image.toolbar' );\n\n\t\t// Don't add the toolbar if there is no configuration.\n\t\tif ( !toolbarConfig || !toolbarConfig.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\n\n\t\t/**\n\t\t * A `ToolbarView` instance used to display the buttons specific for image\n\t\t * editing.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis._toolbar = new ToolbarView();\n\n\t\t// Add buttons to the toolbar.\n\t\tthis._toolbar.fillFromConfig( toolbarConfig, editor.ui.componentFactory );\n\n\t\t// Show balloon panel each time image widget is selected.\n\t\tthis.listenTo( editor.editing.view, 'render', () => {\n\t\t\tthis._checkIsVisible();\n\t\t} );\n\n\t\t// There is no render method after focus is back in editor, we need to check if balloon panel should be visible.\n\t\tthis.listenTo( editor.ui.focusTracker, 'change:isFocused', () => {\n\t\t\tthis._checkIsVisible();\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Checks whether the toolbar should show up or hide depending on the\n\t * current selection.\n\t *\n\t * @private\n\t */\n\t_checkIsVisible() {\n\t\tconst editor = this.editor;\n\n\t\tif ( !editor.ui.focusTracker.isFocused ) {\n\t\t\tthis._hideToolbar();\n\t\t} else {\n\t\t\tif ( isImageWidgetSelected( editor.editing.view.document.selection ) ) {\n\t\t\t\tthis._showToolbar();\n\t\t\t} else {\n\t\t\t\tthis._hideToolbar();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows the {@link #_toolbar} in the {@link #_balloon}.\n\t *\n\t * @private\n\t */\n\t_showToolbar() {\n\t\tconst editor = this.editor;\n\n\t\tif ( this._isVisible ) {\n\t\t\trepositionContextualBalloon( editor );\n\t\t} else {\n\t\t\tif ( !this._balloon.hasView( this._toolbar ) ) {\n\t\t\t\tthis._balloon.add( {\n\t\t\t\t\tview: this._toolbar,\n\t\t\t\t\tposition: getBalloonPositionData( editor ),\n\t\t\t\t\tballoonClassName\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the {@link #_toolbar} from the {@link #_balloon}.\n\t *\n\t * @private\n\t */\n\t_hideToolbar() {\n\t\tif ( !this._isVisible ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._balloon.remove( this._toolbar );\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #_toolbar} is the visible view\n\t * in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isVisible() {\n\t\treturn this._balloon.visibleView == this._toolbar;\n\t}\n}\n\n/**\n * Items to be placed in the image toolbar.\n * The option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\n *\n * Assuming that you use the following features:\n *\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\n * * {@link module:image/imagetextalternative~ImageTextAlternative}.\n *\n * Three toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\n * `'imageStyleFull'`, `'imageStyleSide'`, and `'imageTextAlternative'` so you can configure the toolbar like this:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyleFull', 'imageStyleSide', '|', 'imageTextAlternative' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/findlinkrange\n */\n\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\nimport Position from '@ckeditor/ckeditor5-engine/src/model/position';\n\n/**\n * Walks backward and forward from the start position, node by node, as long as they have the same `linkHref` attribute value and return\n * a {@link module:engine/model/range~Range Range} with the found link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} value The `linkHref` attribute value.\n * @returns {module:engine/model/range~Range} The link range.\n */\nexport default function findLinkRange( position, value ) {\n\treturn new Range( _findBound( position, value, true ), _findBound( position, value, false ) );\n}\n\n// Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same `linkHref` attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} value The `linkHref` attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\nfunction _findBound( position, value, lookBack ) {\n\t// Get node before or after position (depends on `lookBack` flag).\n\t// When position is inside text node then start searching from text node.\n\tlet node = position.textNode || ( lookBack ? position.nodeBefore : position.nodeAfter );\n\n\tlet lastNode = null;\n\n\twhile ( node && node.getAttribute( 'linkHref' ) == value ) {\n\t\tlastNode = node;\n\t\tnode = lookBack ? node.previousSibling : node.nextSibling;\n\t}\n\n\treturn lastNode ? Position.createAt( lastNode, lookBack ? 'before' : 'after' ) : position;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/linkcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\nimport findLinkRange from './findlinkrange';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class LinkCommand extends Command {\n\t/**\n\t * The value of the `'linkHref'` attribute if the start of the selection is located in a node with this attribute.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Object|undefined} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = doc.selection.getAttribute( 'linkHref' );\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'linkHref' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n\t * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n\t *\n\t * When the selection is collapsed and is not inside the text with the `linkHref` attribute, the\n\t * new {@link module:engine/model/text~Text Text node} with the `linkHref` attribute will be inserted in place of caret, but\n\t * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n\t * The selection will be updated to wrap the just inserted text node.\n\t *\n\t * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n\t *\n\t * @fires execute\n\t * @param {String} href Link destination.\n\t */\n\texecute( href ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tmodel.change( writer => {\n\t\t\t// If selection is collapsed then update selected link or insert new one at the place of caret.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tconst position = selection.getFirstPosition();\n\n\t\t\t\t// When selection is inside text with `linkHref` attribute.\n\t\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\t\t// Then update `linkHref` value.\n\t\t\t\t\tconst linkRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ) );\n\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, linkRange );\n\n\t\t\t\t\t// Create new range wrapping changed link.\n\t\t\t\t\twriter.setSelection( linkRange );\n\t\t\t\t}\n\t\t\t\t// If not then insert text node with `linkHref` attribute in place of caret.\n\t\t\t\t// However, since selection in collapsed, attribute value will be used as data for text node.\n\t\t\t\t// So, if `href` is empty, do not create text node.\n\t\t\t\telse if ( href !== '' ) {\n\t\t\t\t\tconst attributes = toMap( selection.getAttributes() );\n\n\t\t\t\t\tattributes.set( 'linkHref', href );\n\n\t\t\t\t\tconst node = writer.createText( href, attributes );\n\n\t\t\t\t\twriter.insert( node, position );\n\n\t\t\t\t\t// Create new range wrapping created node.\n\t\t\t\t\twriter.setSelection( Range.createOn( node ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n\t\t\t\t// omitting nodes where `linkHref` attribute is disallowed.\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), 'linkHref' );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, range );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/unlinkcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from './findlinkrange';\n\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n *\n * @extends module:core/command~Command\n */\nexport default class UnlinkCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this.editor.model.document.selection.hasAttribute( 'linkHref' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is collapsed, removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n\t * When the selection is non-collapsed, removes the `linkHref` attribute from each node in selected ranges.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tmodel.change( writer => {\n\t\t\t// Get ranges to unlink.\n\t\t\tconst rangesToUnlink = selection.isCollapsed ?\n\t\t\t\t[ findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ) ) ] : selection.getRanges();\n\n\t\t\t// Remove `linkHref` attribute from specified ranges.\n\t\t\tfor ( const range of rangesToUnlink ) {\n\t\t\t\twriter.removeAttribute( 'linkHref', range );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/utils\n */\n\nconst linkElementSymbol = Symbol( 'linkElement' );\n\n/**\n * Returns `true` if a given view node is the link element.\n *\n * @param {module:engine/view/node~Node} node\n * @return {Boolean}\n */\nexport function isLinkElement( node ) {\n\treturn node.is( 'attributeElement' ) && !!node.getCustomProperty( linkElementSymbol );\n}\n\n/**\n * Creates link {@link module:engine/view/attributeelement~AttributeElement} with provided `href` attribute.\n *\n * @param {String} href\n * @return {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createLinkElement( href, writer ) {\n\t// Priority 5 - https://github.com/ckeditor/ckeditor5-link/issues/121.\n\tconst linkElement = writer.createAttributeElement( 'a', { href }, 5 );\n\twriter.setCustomProperty( linkElementSymbol, true, linkElement );\n\n\treturn linkElement;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/utils/bindtwostepcarettoattribute\n */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * This helper adds two-step caret movement behavior for the given attribute.\n *\n * For example, when this behavior is enabled for the `linkHref` attribute (which converts to `<a>` element in the view)\n * and the caret is just before an `<a>` element (at a link boundary), then pressing\n * the right arrow key will move caret into that `<a>`element instead of moving it after the next character:\n *\n * * With two-step caret movement: `<p>foo{}<a>bar</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>{}bar</a>biz<p>`\n * * Without two-step caret movement: `<p>foo{}<a>bar</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>b{}ar</a>biz<p>`\n *\n * The same behavior will be changed fo \"leaving\" an attribute element:\n *\n * * With two-step caret movement: `<p>foo<a>bar{}</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>bar</a>{}biz<p>`\n * * Without two-step caret movement: `<p>foo<a>bar{}</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>bar</a>b{}iz<p>`\n *\n * And when moving left:\n *\n * * With two-step caret movement: `<p>foo<a>bar</a>b{}iz<p>` + <kbd>←</kbd> => `<p>foo<a>bar</a>{}biz<p>` +\n * <kbd>←</kbd> => `<p>foo<a>bar{}</a>biz<p>`\n * * Without two-step caret movement: `<p>foo<a>bar</a>b{}iz<p>` + <kbd>←</kbd> => `<p>foo<a>bar{}</a>biz<p>`\n *\n * @param {module:engine/view/view~View} view View controller instance.\n * @param {module:engine/model/model~Model} model Data model instance.\n * @param {module:utils/dom/emittermixin~Emitter} emitter The emitter to which this behavior should be added\n * (e.g. a plugin instance).\n * @param {String} attribute Attribute for which this behavior will be added.\n */\nexport default function bindTwoStepCaretToAttribute( view, model, emitter, attribute ) {\n\tconst modelSelection = model.document.selection;\n\n\t// Listen to keyboard events and handle cursor before the move.\n\temitter.listenTo( view.document, 'keydown', ( evt, data ) => {\n\t\tconst arrowRightPressed = data.keyCode == keyCodes.arrowright;\n\t\tconst arrowLeftPressed = data.keyCode == keyCodes.arrowleft;\n\n\t\t// When neither left or right arrow has been pressed then do noting.\n\t\tif ( !arrowRightPressed && !arrowLeftPressed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// This implementation works only for collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When user tries to expand selection or jump over the whole word or to the beginning/end then\n\t\t// two-steps movement is not necessary.\n\t\tif ( data.shiftKey || data.altKey || data.ctrlKey ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = modelSelection.getFirstPosition();\n\n\t\t// Moving right.\n\t\tif ( arrowRightPressed ) {\n\t\t\t// If gravity is already overridden then do nothing.\n\t\t\t// It means that we already enter `foo<a>{}bar</a>biz` or left `foo<a>bar</a>{}biz` text with attribute\n\t\t\t// and gravity will be restored just after caret movement.\n\t\t\tif ( modelSelection.isGravityOverridden ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If caret sticks to the bound of Text with attribute it means that we are going to\n\t\t\t// enter `foo{}<a>bar</a>biz` or leave `foo<a>bar{}</a>biz` the text with attribute.\n\t\t\tif ( isAtAttributeBoundary( position.nodeAfter, position.nodeBefore, attribute ) ) {\n\t\t\t\t// So we need to prevent caret from being moved.\n\t\t\t\tdata.preventDefault();\n\t\t\t\t// And override default selection gravity.\n\t\t\t\tmodel.change( writer => writer.overrideSelectionGravity() );\n\t\t\t}\n\n\t\t// Moving left.\n\t\t} else {\n\t\t\t// If caret sticks to the bound of Text with attribute and gravity is already overridden it means that\n\t\t\t// we are going to enter `foo<a>bar</a>{}biz` or leave `foo<a>{}bar</a>biz` text with attribute.\n\t\t\tif ( modelSelection.isGravityOverridden && isAtAttributeBoundary( position.nodeBefore, position.nodeAfter, attribute ) ) {\n\t\t\t\t// So we need to prevent cater from being moved.\n\t\t\t\tdata.preventDefault();\n\t\t\t\t// And restore the gravity.\n\t\t\t\tmodel.change( writer => writer.restoreSelectionGravity() );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If we are here we need to check if caret is a one character before the text with attribute bound\n\t\t\t// `foo<a>bar</a>b{}iz` or `foo<a>b{}ar</a>biz`.\n\t\t\tconst nextPosition = position.getShiftedBy( -1 );\n\n\t\t\t// When position is the same it means that parent bound has been reached.\n\t\t\tif ( !nextPosition.isBefore( position ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// When caret is going stick to the bound of Text with attribute after movement then we need to override\n\t\t\t// the gravity before the move. But we need to do it in a custom way otherwise `selection#change:range`\n\t\t\t// event following the overriding will restore the gravity.\n\t\t\tif ( isAtAttributeBoundary( nextPosition.nodeBefore, nextPosition.nodeAfter, attribute ) ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\tlet counter = 0;\n\n\t\t\t\t\t// So let's override the gravity.\n\t\t\t\t\twriter.overrideSelectionGravity( true );\n\n\t\t\t\t\t// But skip the following `change:range` event and restore the gravity on the next one.\n\t\t\t\t\temitter.listenTo( modelSelection, 'change:range', ( evt, data ) => {\n\t\t\t\t\t\tif ( counter++ && data.directChange ) {\n\t\t\t\t\t\t\twriter.restoreSelectionGravity();\n\t\t\t\t\t\t\tevt.off();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n}\n\n// @param {module:engine/model/node~Node} nextNode Node before the position.\n// @param {module:engine/model/node~Node} prevNode Node after the position.\n// @param {String} attribute Attribute name.\n// @returns {Boolean} `true` when position between the nodes sticks to the bound of text with given attribute.\nfunction isAtAttributeBoundary( nextNode, prevNode, attribute ) {\n\tconst isAttrInNext = nextNode ? nextNode.hasAttribute( attribute ) : false;\n\tconst isAttrInPrev = prevNode ? prevNode.hasAttribute( attribute ) : false;\n\n\tif ( isAttrInNext && isAttrInPrev && nextNode.getAttributeKeys( attribute ) !== prevNode.getAttribute( attribute ) ) {\n\t\treturn true;\n\t}\n\n\treturn isAttrInNext && !isAttrInPrev || !isAttrInNext && isAttrInPrev;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/linkediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { downcastAttributeToElement } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\nimport { upcastElementToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\nimport LinkCommand from './linkcommand';\nimport UnlinkCommand from './unlinkcommand';\nimport { createLinkElement } from './utils';\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\n\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow link attribute on all inline nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: 'linkHref' } );\n\n\t\teditor.conversion.for( 'downcast' )\n\t\t\t.add( downcastAttributeToElement( { model: 'linkHref', view: createLinkElement } ) );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.add( upcastElementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a',\n\t\t\t\t\tattribute: {\n\t\t\t\t\t\thref: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'linkHref',\n\t\t\t\t\tvalue: viewElement => viewElement.getAttribute( 'href' )\n\t\t\t\t}\n\t\t\t} ) );\n\n\t\t// Create linking commands.\n\t\teditor.commands.add( 'link', new LinkCommand( editor ) );\n\t\teditor.commands.add( 'unlink', new UnlinkCommand( editor ) );\n\n\t\t// Enable two-step caret movement for `linkHref` attribute.\n\t\tbindTwoStepCaretToAttribute( editor.editing.view, editor.model, this, 'linkHref' );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/clickobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:click Click} event observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View view controller}\n * by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClickObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'click';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when one of the editables has been clicked.\n *\n * Introduced by {@link module:engine/view/observer/clickobserver~ClickObserver}.\n *\n * Note that this event is not available by default. To make it available\n * {@link module:engine/view/observer/clickobserver~ClickObserver} needs to be added\n * to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/clickobserver~ClickObserver\n * @event module:engine/view/document~Document#event:click\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module link/ui/linkformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../theme/linkform.css';\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkFormView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * The URL input view.\n\t\t *\n\t\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView}\n\t\t */\n        this.urlInputView = this._createUrlInput();\n        /**\n\t\t * The Save button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.saveButtonView = this._createButton(t('ad'), checkIcon);\n        this.saveButtonView.type = 'submit';\n        /**\n\t\t * The Cancel button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.cancelButtonView = this._createButton(t('ae'), cancelIcon, 'cancel');\n        /**\n\t\t * A collection of views which can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.saveButtonView.extendTemplate({ attributes: { class: ['ck-button-action'] } });\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: ['ck-link-form'],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.urlInputView,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        submitHandler({ view: this });\n        const childViews = [\n            this.urlInputView,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates a labeled input view.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView} Labeled input view instance.\n\t */\n    _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('af');\n        labeledInput.inputView.placeholder = 'https://example.com';\n        return labeledInput;\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button's icon.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n}    /**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. click on {@link #saveButtonView}.\n *\n * @event submit\n */\n     /**\n * Fired when the form view is canceled, e.g. click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module link/ui/linkactionsview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport unlinkIcon from '../../theme/icons/unlink.svg';\nimport pencilIcon from '@ckeditor/ckeditor5-core/theme/icons/pencil.svg';\nimport '../../theme/linkactions.css';\n/**\n * The link actions view class. This view displays link preview, allows\n * unlinking or editing the link.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkActionsView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the actions.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * The href preview view.\n\t\t *\n\t\t * @member {module:ui/view~View}\n\t\t */\n        this.previewButtonView = this._createPreviewButton();\n        /**\n\t\t * The unlink button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.unlinkButtonView = this._createButton(t('x'), unlinkIcon, 'unlink');\n        /**\n\t\t * The edit link button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.editButtonView = this._createButton(t('y'), pencilIcon, 'edit');\n        /**\n\t\t * Value of the \"href\" attribute of the link to use in the {@link #previewButtonView}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String}\n\t\t */\n        this.set('href');\n        /**\n\t\t * A collection of views which can be focused in the view.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the view.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck-link-actions'],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.previewButtonView,\n                this.editButtonView,\n                this.unlinkButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        const childViews = [\n            this.previewButtonView,\n            this.editButtonView,\n            this.unlinkButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the actions.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button's icon.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.delegate('execute').to(this, eventName);\n        return button;\n    }\n    /**\n\t * Creates a link href preview button.\n\t *\n\t * @private\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createPreviewButton() {\n        const button = new ButtonView(this.locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        button.set({\n            withText: true,\n            tooltip: t('z')\n        });\n        button.extendTemplate({\n            attributes: {\n                class: ['ck-link-actions__preview'],\n                href: bind.to('href'),\n                target: '_blank'\n            }\n        });\n        button.bind('label').to(this, 'href', href => {\n            return href || t('aa');\n        });\n        button.bind('isEnabled').to(this, 'href', href => !!href);\n        button.template.tag = 'a';\n        button.template.eventListeners = {};\n        return button;\n    }\n}    /**\n * Fired when the {@link #editButtonView} is clicked.\n *\n * @event edit\n */\n     /**\n * Fired when the {@link #unlinkButtonView} is clicked.\n *\n * @event unlink\n */","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module link/linkui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport Range from '@ckeditor/ckeditor5-engine/src/view/range';\nimport { isLinkElement } from './utils';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport linkIcon from '../theme/icons/link.svg';\nconst linkKeystroke = 'Ctrl+K';\n/**\n * The link UI plugin. It introduces the Link and Unlink buttons and the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        editor.editing.view.addObserver(ClickObserver);\n        /**\n\t\t * The actions view displayed inside of the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkactionsview~LinkActionsView}\n\t\t */\n        this.actionsView = this._createActionsView();\n        /**\n\t\t * The form view displayed inside the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkformview~LinkFormView}\n\t\t */\n        this.formView = this._createFormView();\n        /**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        // Create toolbar buttons.\n        this._createToolbarLinkButton();\n        // Attach lifecycle actions to the the balloon.\n        this._enableUserBalloonInteractions();\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n\t */\n    _createActionsView() {\n        const editor = this.editor;\n        const actionsView = new LinkActionsView(editor.locale);\n        const linkCommand = editor.commands.get('link');\n        const unlinkCommand = editor.commands.get('unlink');\n        actionsView.bind('href').to(linkCommand, 'value');\n        actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n        actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand);\n        // Execute unlink command after clicking on the \"Edit\" button.\n        this.listenTo(actionsView, 'edit', () => {\n            this._addFormView();\n        });\n        // Execute unlink command after clicking on the \"Unlink\" button.\n        this.listenTo(actionsView, 'unlink', () => {\n            editor.execute('unlink');\n            this._hideUI();\n        });\n        // Close the panel on esc key press when the **actions have focus**.\n        actionsView.keystrokes.set('Esc', (data, cancel) => {\n            this._hideUI();\n            cancel();\n        });\n        return actionsView;\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkformview~LinkFormView} The link form instance.\n\t */\n    _createFormView() {\n        const editor = this.editor;\n        const formView = new LinkFormView(editor.locale);\n        const linkCommand = editor.commands.get('link');\n        formView.urlInputView.bind('value').to(linkCommand, 'value');\n        // Form elements should be read-only when corresponding commands are disabled.\n        formView.urlInputView.bind('isReadOnly').to(linkCommand, 'isEnabled', value => !value);\n        formView.saveButtonView.bind('isEnabled').to(linkCommand);\n        // Execute link command after clicking the \"Save\" button.\n        this.listenTo(formView, 'submit', () => {\n            editor.execute('link', formView.urlInputView.inputView.element.value);\n            this._removeFormView();\n        });\n        // Hide the panel after clicking the \"Cancel\" button.\n        this.listenTo(formView, 'cancel', () => {\n            this._removeFormView();\n        });\n        // Close the panel on esc key press when the **form has focus**.\n        formView.keystrokes.set('Esc', (data, cancel) => {\n            this._removeFormView();\n            cancel();\n        });\n        return formView;\n    }\n    /**\n\t * Creates a toolbar Link button. Clicking this button will show\n\t * a {@link #_balloon} attached to the selection.\n\t *\n\t * @private\n\t */\n    _createToolbarLinkButton() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const t = editor.t;\n        // Handle the `Ctrl+K` keystroke and show the panel.\n        editor.keystrokes.set(linkKeystroke, (keyEvtData, cancel) => {\n            // Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.\n            cancel();\n            if (linkCommand.isEnabled) {\n                this._showUI();\n            }\n        });\n        editor.ui.componentFactory.add('link', locale => {\n            const button = new ButtonView(locale);\n            button.isEnabled = true;\n            button.label = t('v');\n            button.icon = linkIcon;\n            button.keystroke = linkKeystroke;\n            button.tooltip = true;\n            // Bind button to the command.\n            button.bind('isEnabled').to(linkCommand, 'isEnabled');\n            // Show the panel on button click.\n            this.listenTo(button, 'execute', () => this._showUI());\n            return button;\n        });\n    }\n    /**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} is visible or not.\n\t *\n\t * @private\n\t */\n    _enableUserBalloonInteractions() {\n        const viewDocument = this.editor.editing.view.document;\n        // Handle click on view document and show panel when selection is placed inside the link element.\n        // Keep panel open until selection will be inside the same link element.\n        this.listenTo(viewDocument, 'click', () => {\n            const parentLink = this._getSelectedLinkElement();\n            if (parentLink) {\n                // Then show panel but keep focus inside editor editable.\n                this._showUI();\n            }\n        });\n        // Focus the form if the balloon is visible and the Tab key has been pressed.\n        this.editor.keystrokes.set('Tab', (data, cancel) => {\n            if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n                this.actionsView.focus();\n                cancel();\n            }\n        }, {\n            // Use the high priority because the link UI navigation is more important\n            // than other feature's actions, e.g. list indentation.\n            // https://github.com/ckeditor/ckeditor5-link/issues/146\n            priority: 'high'\n        });\n        // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n        this.editor.keystrokes.set('Esc', (data, cancel) => {\n            if (this._isUIVisible) {\n                this._hideUI();\n                cancel();\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this.formView,\n            activator: () => this._isUIVisible,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideUI()\n        });\n    }\n    /**\n\t * Adds the {@link #actionsView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _addActionsView() {\n        this._balloon.add({\n            view: this.actionsView,\n            position: this._getBalloonPositionData()\n        });\n    }\n    /**\n\t * Adds the {@link #formView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _addFormView() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        this._balloon.add({\n            view: this.formView,\n            position: this._getBalloonPositionData()\n        });\n        this.formView.urlInputView.select();\n        // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\n        // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n        // clicked the same link), they would see the old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-link/issues/78\n        // https://github.com/ckeditor/ckeditor5-link/issues/123\n        this.formView.urlInputView.inputView.element.value = linkCommand.value || '';\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _removeFormView() {\n        if (this._isFormInPanel) {\n            this._balloon.remove(this.formView);\n            // Because the form has an input which has focus, the focus must be brought back\n            // to the editor. Otherwise, it would be lost.\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n\t * Shows the right kind of the UI for current state of the command. It's either\n\t * {@link #formView} or {@link #actionsView}.\n\t *\n\t * @private\n\t */\n    _showUI() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        if (!linkCommand.isEnabled || this._isUIInPanel) {\n            return;\n        }\n        // When there's no link under the selection, go straight to the editing UI.\n        if (!this._getSelectedLinkElement()) {\n            this._addActionsView();\n            this._addFormView();\n        }    // Otherwise display just the actions UI.\n        else {\n            this._addActionsView();\n        }\n        // Begin responding to view#render once the UI is added.\n        this._startUpdatingUIOnViewRender();\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * See {@link #_addFormView}, {@link #_addActionsView}.\n\t *\n\t * @protected\n\t */\n    _hideUI() {\n        if (!this._isUIInPanel) {\n            return;\n        }\n        const editingView = this.editor.editing.view;\n        this.stopListening(editingView, 'render');\n        // Remove form first because it's on top of the stack.\n        this._removeFormView();\n        // Then remove the actions view because it's beneath the form.\n        this._balloon.remove(this.actionsView);\n        // Make sure the focus always gets back to the editable.\n        editingView.focus();\n    }\n    /**\n\t * Makes the UI react to the {@link module:engine/view/view~View#event:render} in the view to\n\t * reposition itself as the document changes.\n\t *\n\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `render` event.\n\t *\n\t * @protected\n\t */\n    _startUpdatingUIOnViewRender() {\n        const editor = this.editor;\n        const editing = editor.editing;\n        const editingView = editing.view;\n        let prevSelectedLink = this._getSelectedLinkElement();\n        let prevSelectionParent = getSelectionParent();\n        this.listenTo(editingView, 'render', () => {\n            const selectedLink = this._getSelectedLinkElement();\n            const selectionParent = getSelectionParent();\n            // Hide the panel if:\n            //\n            // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n            //   of the link,\n            // * the selection went to a different parent when creating a NEW link. E.g. someone\n            //   else modified the document.\n            // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n            //\n            // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n            // when fully selected.\n            if (prevSelectedLink && !selectedLink || !prevSelectedLink && selectionParent !== prevSelectionParent) {\n                this._hideUI();\n            }    // Update the position of the panel when:\n                 //  * the selection remains in the original link element,\n                 //  * there was no link element in the first place, i.e. creating a new link\n            else {\n                // If still in a link element, simply update the position of the balloon.\n                // If there was no link (e.g. inserting one), the balloon must be moved\n                // to the new position in the editing view (a new native DOM range).\n                this._balloon.updatePosition(this._getBalloonPositionData());\n            }\n            prevSelectedLink = selectedLink;\n            prevSelectionParent = selectionParent;\n        });\n        function getSelectionParent() {\n            return editingView.document.selection.focus.getAncestors().reverse().find(node => node.is('element'));\n        }\n    }\n    /**\n\t * Returns true when {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isFormInPanel() {\n        return this._balloon.hasView(this.formView);\n    }\n    /**\n\t * Returns true when {@link #actionsView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _areActionsInPanel() {\n        return this._balloon.hasView(this.actionsView);\n    }\n    /**\n\t * Returns true when {@link #actionsView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _areActionsVisible() {\n        return this._balloon.visibleView === this.actionsView;\n    }\n    /**\n\t * Returns true when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isUIInPanel() {\n        return this._isFormInPanel || this._areActionsInPanel;\n    }\n    /**\n\t * Returns true when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isUIVisible() {\n        const visibleView = this._balloon.visibleView;\n        return visibleView == this.formView || this._areActionsVisible;\n    }\n    /**\n\t * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n\t * to the target element or selection.\n\t *\n\t * If the selection is collapsed and inside a link element, the panel will be attached to the\n\t * entire link element. Otherwise, it will be attached to the selection.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n    _getBalloonPositionData() {\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        const targetLink = this._getSelectedLinkElement();\n        const target = targetLink ? // When selection is inside link element, then attach panel to this element.\n        view.domConverter.mapViewToDom(targetLink) : // Otherwise attach panel to the selection.\n        view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n        return { target };\n    }\n    /**\n\t * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n\t * the {@link module:engine/view/document~Document editing view's} selection or `null`\n\t * if there is none.\n\t *\n\t * **Note**: For a non–collapsed selection the link element is only returned when **fully**\n\t * selected and the **only** element within the selection boundaries.\n\t *\n\t * @private\n\t * @returns {module:engine/view/attributeelement~AttributeElement|null}\n\t */\n    _getSelectedLinkElement() {\n        const selection = this.editor.editing.view.document.selection;\n        if (selection.isCollapsed) {\n            return findLinkElementAncestor(selection.getFirstPosition());\n        } else {\n            // The range for fully selected link is usually anchored in adjacent text nodes.\n            // Trim it to get closer to the actual link element.\n            const range = selection.getFirstRange().getTrimmed();\n            const startLink = findLinkElementAncestor(range.start);\n            const endLink = findLinkElementAncestor(range.end);\n            if (!startLink || startLink != endLink) {\n                return null;\n            }\n            // Check if the link element is fully selected.\n            if (Range.createIn(startLink).getTrimmed().isEqual(range)) {\n                return startLink;\n            } else {\n                return null;\n            }\n        }\n    }\n}\n// Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\nfunction findLinkElementAncestor(position) {\n    return position.getAncestors().find(ancestor => isLinkElement(ancestor));\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/listcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class ListCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'numbered'|'bulleted'} type List type that will be handled by this command.\n\t */\n\tconstructor( editor, type ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The type of the list created by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'numbered'|'bulleted'}\n\t\t */\n\t\tthis.type = type == 'bulleted' ? 'bulleted' : 'numbered';\n\n\t\t/**\n\t\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @protected\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => checkCanBecomeListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = this.value === true;\n\t\t// If we are turning off items, we are going to rename them to paragraphs.\n\n\t\tmodel.change( writer => {\n\t\t\t// If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n\t\t\t// To be sure that model is all the time in a good state, we first fix items below turned-off item.\n\t\t\tif ( turnOff ) {\n\t\t\t\t// Start from the model item that is just after the last turned-off item.\n\t\t\t\tlet next = blocks[ blocks.length - 1 ].nextSibling;\n\t\t\t\tlet currentIndent = Number.POSITIVE_INFINITY;\n\t\t\t\tlet changes = [];\n\n\t\t\t\t// Correct indent of all items after the last turned off item.\n\t\t\t\t// Rules that should be followed:\n\t\t\t\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t\t\t\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t\t\t\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t\t\t\t//    should not end up as a child of any of list items that they were not children of before.\n\t\t\t\t// 3. All other items should have their indent changed relatively to it's parent.\n\t\t\t\t//\n\t\t\t\t// For example:\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t// 3        * --------\t\t\t<-- this is turned off.\n\t\t\t\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t\t\t\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t\t\t\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t\t\t\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t\t\t\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t\t\t\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t\t\t\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// After turning off 3 the list becomes:\n\t\t\t\t//\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t//\n\t\t\t\t// 3  --------\n\t\t\t\t//\n\t\t\t\t// 4  * --------\n\t\t\t\t// 5     * --------\n\t\t\t\t// 6  * --------\n\t\t\t\t// 7     * --------\n\t\t\t\t// 8  * --------\n\t\t\t\t// 9     * --------\n\t\t\t\t// 10       * --------\n\t\t\t\t// 11       * --------\n\t\t\t\t// 12 * --------\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t\t\t\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t\t\t\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t\t\t\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t\t\t\t// less conversion (faster).\n\t\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'indent' ) !== 0 ) {\n\t\t\t\t\t// Check each next list item, as long as its indent is bigger than 0.\n\t\t\t\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\t\t\t\tconst indent = next.getAttribute( 'indent' );\n\n\t\t\t\t\t// We check if that's item indent is lower as current relative indent.\n\t\t\t\t\tif ( indent < currentIndent ) {\n\t\t\t\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\t\t\t\tcurrentIndent = indent;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix indent relatively to current relative indent.\n\t\t\t\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\t\t\t\tconst newIndent = indent - currentIndent;\n\n\t\t\t\t\t// Save the entry in changes array. We do not apply it at the moment, because we will need to\n\t\t\t\t\t// reverse the changes so the last item is changed first.\n\t\t\t\t\t// This is to keep model in correct state all the time.\n\t\t\t\t\tchanges.push( { element: next, indent: newIndent } );\n\n\t\t\t\t\t// Find next item.\n\t\t\t\t\tnext = next.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tchanges = changes.reverse();\n\n\t\t\t\tfor ( const item of changes ) {\n\t\t\t\t\twriter.setAttribute( 'indent', item.indent, item.element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are turning on, we might change some items that are already `listItem`s but with different type.\n\t\t\t// Changing one nested list item to other type should also trigger changing all its siblings so the\n\t\t\t// whole nested list is of the same type.\n\t\t\t// Example (assume changing to numbered list):\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ---[--\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t// * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n\t\t\t//   * ---]--\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\tif ( !turnOff ) {\n\t\t\t\t// Find lowest indent among selected items. This will be indicator what is the indent of\n\t\t\t\t// top-most list affected by the command.\n\t\t\t\tlet lowestIndent = Number.POSITIVE_INFINITY;\n\n\t\t\t\tfor ( const item of blocks ) {\n\t\t\t\t\tif ( item.is( 'listItem' ) && item.getAttribute( 'indent' ) < lowestIndent ) {\n\t\t\t\t\t\tlowestIndent = item.getAttribute( 'indent' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Do not execute the fix for top-level lists.\n\t\t\t\tlowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n\n\t\t\t\t// Fix types of list items that are \"before\" the selected blocks.\n\t\t\t\t_fixType( blocks, true, lowestIndent );\n\n\t\t\t\t// Fix types of list items that are \"after\" the selected blocks.\n\t\t\t\t_fixType( blocks, false, lowestIndent );\n\t\t\t}\n\n\t\t\t// Phew! Now it will be easier :).\n\t\t\t// For each block element that was in the selection, we will either: turn it to list item,\n\t\t\t// turn it to paragraph, or change it's type. Or leave it as it is.\n\t\t\t// Do it in reverse as there might be multiple blocks (same as with changing indents).\n\t\t\tfor ( const element of blocks.reverse() ) {\n\t\t\t\tif ( turnOff && element.name == 'listItem' ) {\n\t\t\t\t\t// We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n\t\t\t\t\t// List item specific attributes are removed by post fixer.\n\t\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\t} else if ( !turnOff && element.name != 'listItem' ) {\n\t\t\t\t\t// We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n\t\t\t\t\t// The order of operations is important to keep model in correct state.\n\t\t\t\t\twriter.setAttributes( { type: this.type, indent: 0 }, element );\n\t\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\t} else if ( !turnOff && element.name == 'listItem' && element.getAttribute( 'type' ) != this.type ) {\n\t\t\t\t\t// We are turning on and the element is a `listItem` but has different type - change it's type and\n\t\t\t\t\t// type of it's all siblings that have same indent.\n\t\t\t\t\twriter.setAttribute( 'type', this.type, element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\t// Check whether closest `listItem` ancestor of the position has a correct type.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\treturn !!listItem && listItem.is( 'listItem' ) && listItem.getAttribute( 'type' ) == this.type;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Otherwise, check if list item can be inserted at the position start.\n\t\treturn checkCanBecomeListItem( firstBlock, schema );\n\t}\n}\n\n// Helper function used when one or more list item have their type changed. Fixes type of other list items\n// that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n// not to duplicated code, as same fix has to be performed before and after selection.\n//\n// @param {Array.<module:engine/model/node~Node>} blocks Blocks that are in selection.\n// @param {Boolean} isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n// or blocks after last selected block (`false`).\n// @param {Number} lowestIndent Lowest indent among selected blocks.\nfunction _fixType( blocks, isBackward, lowestIndent ) {\n\t// We need to check previous sibling of first changed item and next siblings of last changed item.\n\tconst startingItem = isBackward ? blocks[ 0 ] : blocks[ blocks.length - 1 ];\n\n\tif ( startingItem.is( 'listItem' ) ) {\n\t\tlet item = startingItem[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t// During processing items, keeps the lowest indent of already processed items.\n\t\t// This saves us from changing too many items.\n\t\t// Following example is for going forward as it is easier to read, however same applies to going backward.\n\t\t// * ------\n\t\t//   * ------\n\t\t//     * --[---\n\t\t//   * ------\t\t<-- `lowestIndent` should be 1\n\t\t//     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n\t\t//     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n\t\t//     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n\t\t// * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n\t\tlet currentIndent = startingItem.getAttribute( 'indent' );\n\n\t\t// Look back until a list item with indent lower than reference `lowestIndent`.\n\t\t// That would be the parent of nested sublist which contains item having `lowestIndent`.\n\t\twhile ( item && item.is( 'listItem' ) && item.getAttribute( 'indent' ) >= lowestIndent ) {\n\t\t\tif ( currentIndent > item.getAttribute( 'indent' ) ) {\n\t\t\t\tcurrentIndent = item.getAttribute( 'indent' );\n\t\t\t}\n\n\t\t\t// Found an item that is in the same nested sublist.\n\t\t\tif ( item.getAttribute( 'indent' ) == currentIndent ) {\n\t\t\t\t// Just add the item to selected blocks like it was selected by the user.\n\t\t\t\tblocks[ isBackward ? 'unshift' : 'push' ]( item );\n\t\t\t}\n\n\t\t\titem = item[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t}\n\t}\n}\n\n// Checks whether the given block can be replaced by a listItem.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeListItem( block, schema ) {\n\treturn schema.checkChild( block.parent, 'listItem' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/indentcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class IndentCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor, indentDirection ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Determines by how much the command will change the list item's indent attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depends on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'indent' ) > lastItem.getAttribute( 'indent' ) ) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = item.getAttribute( 'indent' ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'indent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'indent' );\n\t\t\tconst type = listItem.getAttribute( 'type' );\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'listItem' ) && prev.getAttribute( 'indent' ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'indent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'type' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport ViewContainerElement from '@ckeditor/ckeditor5-engine/src/view/containerelement';\n\n/**\n * @module list/utils\n */\n\n/**\n * Creates list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createViewListItemElement() {\n\tconst viewItem = new ViewContainerElement( 'li' );\n\tviewItem.getFillerOffset = getFillerOffset;\n\n\treturn viewItem;\n}\n\n// Implementation of getFillerOffset for view list item element.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\n\n\treturn this.isEmpty || hasOnlyLists ? 0 : null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/converters\n */\n\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\nimport ModelPosition from '@ckeditor/ckeditor5-engine/src/model/position';\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\n\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\nimport ViewRange from '@ckeditor/ckeditor5-engine/src/view/range';\nimport ViewTreeWalker from '@ckeditor/ckeditor5-engine/src/view/treewalker';\nimport { createViewListItemElement } from './utils';\n\n/**\n * A model-to-view converter for `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewInsertion( evt, data, conversionApi ) {\n\tconst consumable = conversionApi.consumable;\n\n\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t!consumable.test( data.item, 'attribute:type' ) ||\n\t\t!consumable.test( data.item, 'attribute:indent' )\n\t) {\n\t\treturn;\n\t}\n\n\tconsumable.consume( data.item, 'insert' );\n\tconsumable.consume( data.item, 'attribute:type' );\n\tconsumable.consume( data.item, 'attribute:indent' );\n\n\tconst modelItem = data.item;\n\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\tinjectViewList( modelItem, viewItem, conversionApi );\n}\n\n/**\n * A model-to-view converter for `listItem` model element removal.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewRemove( evt, data, conversionApi ) {\n\tconst viewStart = conversionApi.mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'li' ) );\n\tconst viewItem = viewStart.nodeAfter;\n\tconst viewWriter = conversionApi.writer;\n\n\t// 1. Break the container after and before the list item.\n\t// This will create a view list with one view list item - the one to remove.\n\tviewWriter.breakContainer( ViewPosition.createBefore( viewItem ) );\n\tviewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\n\n\t// 2. Remove the list with the item to remove.\n\tconst viewList = viewItem.parent;\n\tconst viewListPrev = viewList.previousSibling;\n\tconst removeRange = ViewRange.createOn( viewList );\n\tconst removed = viewWriter.remove( removeRange );\n\n\t// 3. Merge the whole created by breaking and removing the list.\n\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t}\n\n\t// 4. Bring back nested list that was in the removed <li>.\n\tconst modelItem = conversionApi.mapper.toModelElement( viewItem );\n\n\thoistNestedLists( modelItem.getAttribute( 'indent' ) + 1, data.position, removeRange.start, viewItem, conversionApi );\n\n\t// 5. Unbind removed view item and all children.\n\tfor ( const child of ViewRange.createIn( removed ).getItems() ) {\n\t\tconversionApi.mapper.unbindViewElement( child );\n\t}\n\n\tevt.stop();\n}\n\n/**\n * A model-to-view converter for `type` attribute change on `listItem` model element.\n *\n * This change means that `<li>` elements parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements, changing their name and merging them.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewChangeType( evt, data, conversionApi ) {\n\tif ( !conversionApi.consumable.consume( data.item, 'attribute:type' ) ) {\n\t\treturn;\n\t}\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\tconst viewWriter = conversionApi.writer;\n\n\t// 1. Break the container after and before the list item.\n\t// This will create a view list with one view list item -- the one that changed type.\n\tviewWriter.breakContainer( ViewPosition.createBefore( viewItem ) );\n\tviewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\n\n\t// 2. Change name of the view list that holds the changed view item.\n\t// We cannot just change name property, because that would not render properly.\n\tlet viewList = viewItem.parent;\n\tconst listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n\tviewList = viewWriter.rename( viewList, listName );\n\n\t// 3. Merge the changed view list with other lists, if possible.\n\tmergeViewLists( viewWriter, viewList, viewList.nextSibling );\n\tmergeViewLists( viewWriter, viewList.previousSibling, viewList );\n\n\t// 4. Consumable insertion of children inside the item. They are already handled by re-building the item in view.\n\tfor ( const child of data.item.getChildren() ) {\n\t\tconversionApi.consumable.consume( child, 'insert' );\n\t}\n}\n\n/**\n * A model-to-view converter for `indent` attribute change on `listItem` model element.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewChangeIndent( evt, data, conversionApi ) {\n\tif ( !conversionApi.consumable.consume( data.item, 'attribute:indent' ) ) {\n\t\treturn;\n\t}\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\tconst viewWriter = conversionApi.writer;\n\n\t// 1. Break the container after and before the list item.\n\t// This will create a view list with one view list item -- the one that changed type.\n\tviewWriter.breakContainer( ViewPosition.createBefore( viewItem ) );\n\tviewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\n\n\t// 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n\tconst viewList = viewItem.parent;\n\tconst viewListPrev = viewList.previousSibling;\n\tconst removeRange = ViewRange.createOn( viewList );\n\tviewWriter.remove( removeRange );\n\n\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t}\n\n\t// 3. Bring back nested list that was in the removed <li>.\n\thoistNestedLists( data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi );\n\n\t// 4. Inject view list like it is newly inserted.\n\tinjectViewList( data.item, viewItem, conversionApi );\n\n\t// 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n\tfor ( const child of data.item.getChildren() ) {\n\t\tconversionApi.consumable.consume( child, 'insert' );\n\t}\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n *\t\t<paragraph>xxx</paragraph>       // Instead of this wrong view state:\n *\t\t<listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewSplitOnInsert( evt, data, conversionApi ) {\n\tif ( data.item.name != 'listItem' ) {\n\t\tlet viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst lists = [];\n\n\t\t// Break multiple ULs/OLs if there are.\n\t\t//\n\t\t// Imagine following list:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// Insert paragraph after item 1.1.1:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// In this case 1.1.2 has to become beginning of a new list.\n\t\t// We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n\t\t// Then we need to move those broken pieces one after another and merge:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t// 1.1.2 --------\n\t\t//   1.1.3 --------\n\t\t//     1.1.3.1 --------\n\t\t// 1.2 --------\n\t\t//   1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\twhile ( viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol' ) {\n\t\t\tviewPosition = viewWriter.breakContainer( viewPosition );\n\n\t\t\tif ( viewPosition.parent.name != 'li' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Remove lists that are after inserted element.\n\t\t\t// They will be brought back later, below the inserted element.\n\t\t\tconst removeStart = viewPosition;\n\t\t\tconst removeEnd = ViewPosition.createAt( viewPosition.parent, 'end' );\n\n\t\t\t// Don't remove if there is nothing to remove.\n\t\t\tif ( !removeStart.isEqual( removeEnd ) ) {\n\t\t\t\tconst removed = viewWriter.remove( new ViewRange( removeStart, removeEnd ) );\n\t\t\t\tlists.push( removed );\n\t\t\t}\n\n\t\t\tviewPosition = ViewPosition.createAfter( viewPosition.parent );\n\t\t}\n\n\t\t// Bring back removed lists.\n\t\tif ( lists.length > 0 ) {\n\t\t\tfor ( let i = 0; i < lists.length; i++ ) {\n\t\t\t\tconst previousList = viewPosition.nodeBefore;\n\t\t\t\tconst insertedRange = viewWriter.insert( viewPosition, lists[ i ] );\n\t\t\t\tviewPosition = insertedRange.end;\n\n\t\t\t\t// Don't merge first list! We want a split in that place (this is why this converter is introduced).\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tconst mergePos = mergeViewLists( viewWriter, previousList, previousList.nextSibling );\n\n\t\t\t\t\t// If `mergePos` is in `previousList` it means that the lists got merged.\n\t\t\t\t\t// In this case, we need to fix insert position.\n\t\t\t\t\tif ( mergePos && mergePos.parent == previousList ) {\n\t\t\t\t\t\tviewPosition.offset--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Merge last inserted list with element after it.\n\t\t\tmergeViewLists( viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter );\n\t\t}\n\t}\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul>\n *\t\t<paragraph>xxx</paragraph>       <p>xxx</p>\n *\t\t<listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewMergeAfter( evt, data, conversionApi ) {\n\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\tconst viewItemPrev = viewPosition.nodeBefore;\n\tconst viewItemNext = viewPosition.nodeAfter;\n\n\t// Merge lists if something (remove, move) was done from inside of list.\n\t// Merging will be done only if both items are view lists of the same type.\n\t// The check is done inside the helper function.\n\tmergeViewLists( conversionApi.writer, viewItemPrev, viewItemNext );\n}\n\n/**\n * A view-to-model converter that converts `<li>` view elements into `listItem` model elements.\n *\n * To set correct values of the `type` and `indent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {Object} conversionApi Conversion interface to be used by the callback.\n */\nexport function viewModelConverter( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\tconst writer = conversionApi.writer;\n\t\tconst conversionStore = this.conversionApi.store;\n\n\t\t// 1. Create `listItem` model element.\n\t\tconst listItem = writer.createElement( 'listItem' );\n\n\t\t// 2. Handle `listItem` model element attributes.\n\t\tconversionStore.indent = conversionStore.indent || 0;\n\t\twriter.setAttribute( 'indent', conversionStore.indent, listItem );\n\n\t\t// Set 'bulleted' as default. If this item is pasted into a context,\n\t\tconst type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\n\t\twriter.setAttribute( 'type', type, listItem );\n\n\t\t// `listItem`s created recursively should have bigger indent.\n\t\tconversionStore.indent++;\n\n\t\t// Try to find allowed parent for list item.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( listItem, data.modelCursor );\n\n\t\t// When there is no allowed parent it means that list item cannot be converted at current model position\n\t\t// and in any of position ancestors.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\twriter.insert( listItem, splitResult.position );\n\n\t\t// Remember position after list item, next list items will be inserted at this position.\n\t\tlet nextPosition = ModelPosition.createAfter( listItem );\n\n\t\t// Check all children of the converted `<li>`.\n\t\t// At this point we assume there are no \"whitespace\" view text nodes in view list, between view list items.\n\t\t// This should be handled by `<ul>` and `<ol>` converters.\n\t\tfor ( const child of data.viewItem.getChildren() ) {\n\t\t\t// If this is a view list element, we will convert it after last `listItem` model element.\n\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\t\tnextPosition = conversionApi.convertItem( child, nextPosition ).modelCursor;\n\t\t\t}\n\t\t\t// If it was not a list it was a \"regular\" list item content. Just convert it to `listItem`.\n\t\t\telse {\n\t\t\t\tconversionApi.convertItem( child, ModelPosition.createAt( listItem, 'end' ) );\n\t\t\t}\n\t\t}\n\n\t\tconversionStore.indent--;\n\n\t\t// Result range starts before the first item and ends after the last.\n\t\tdata.modelRange = new ModelRange( data.modelCursor, nextPosition );\n\n\t\t// When modelCursor parent had to be split to insert list item.\n\t\tif ( splitResult.cursorParent ) {\n\t\t\t// Then continue conversion in split element.\n\t\t\tdata.modelCursor = ModelPosition.createAt( splitResult.cursorParent );\n\t\t} else {\n\t\t\t// Otherwise continue conversion after last list item.\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {Object} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanList( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\t// Caching children because when we start removing them iterating fails.\n\t\tconst children = Array.from( data.viewItem.getChildren() );\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( !child.is( 'li' ) ) {\n\t\t\t\tchild.remove();\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {Object} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanListItem( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\tif ( data.viewItem.childCount === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [ ...data.viewItem.getChildren() ];\n\n\t\tlet foundList = false;\n\t\tlet firstNode = true;\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( foundList && !child.is( 'ul' ) && !child.is( 'ol' ) ) {\n\t\t\t\tchild.remove();\n\t\t\t}\n\n\t\t\tif ( child.is( 'text' ) ) {\n\t\t\t\t// If this is the first node and it's a text node, left-trim it.\n\t\t\t\tif ( firstNode ) {\n\t\t\t\t\tchild.data = child.data.replace( /^\\s+/, '' );\n\t\t\t\t}\n\n\t\t\t\t// If this is the last text node before <ul> or <ol>, right-trim it.\n\t\t\t\tif ( !child.nextSibling || ( child.nextSibling.is( 'ul' ) || child.nextSibling.is( 'ol' ) ) ) {\n\t\t\t\t\tchild.data = child.data.replace( /\\s+$/, '' );\n\t\t\t\t}\n\t\t\t} else if ( child.is( 'ul' ) || child.is( 'ol' ) ) {\n\t\t\t\t// If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n\t\t\t\tfoundList = true;\n\t\t\t}\n\n\t\t\tfirstNode = false;\n\t\t}\n\t}\n}\n\n/**\n * The callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between `listItem` elements that would be incorrectly mapped because of how list items are represented in model\n * and view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:modelToViewPosition\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing additional data and placeholder for mapping result.\n */\nexport function modelToViewPosition( evt, data ) {\n\tif ( data.isPhantom ) {\n\t\treturn;\n\t}\n\n\tconst modelItem = data.modelPosition.nodeBefore;\n\n\tif ( modelItem && modelItem.is( 'listItem' ) ) {\n\t\tconst viewItem = data.mapper.toViewElement( modelItem );\n\t\tconst topmostViewList = viewItem.getAncestors().find( element => element.is( 'ul' ) || element.is( 'ol' ) );\n\t\tconst walker = new ViewTreeWalker( {\n\t\t\tstartPosition: ViewPosition.createAt( viewItem, 0 )\n\t\t} );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.type == 'elementStart' && value.item.is( 'li' ) ) {\n\t\t\t\tdata.viewPosition = value.previousPosition;\n\n\t\t\t\tbreak;\n\t\t\t} else if ( value.type == 'elementEnd' && value.item == topmostViewList ) {\n\t\t\t\tdata.viewPosition = value.nextPosition;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between `<li>` elements that would be incorrectly mapped because of how list items are represented in model\n * and view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing additional data and placeholder for mapping result.\n */\nexport function viewToModelPosition( evt, data ) {\n\tconst viewPos = data.viewPosition;\n\tconst viewParent = viewPos.parent;\n\tconst mapper = data.mapper;\n\n\tif ( viewParent.name == 'ul' || viewParent.name == 'ol' ) {\n\t\t// Position is directly in <ul> or <ol>.\n\t\tif ( !viewPos.isAtEnd ) {\n\t\t\t// If position is not at the end, it must be before <li>.\n\t\t\t// Get that <li>, map it to `listItem` and set model position before that `listItem`.\n\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeAfter );\n\n\t\t\tdata.modelPosition = ModelPosition.createBefore( modelNode );\n\t\t} else {\n\t\t\t// Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n\t\t\t// There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n\t\t\t// because that <li> may contain nested items.\n\t\t\t// We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeBefore );\n\t\t\tconst modelLength = mapper.getModelLength( viewPos.nodeBefore );\n\n\t\t\t// Then we get model position before mapped `listItem` and shift it accordingly.\n\t\t\tdata.modelPosition = ModelPosition.createBefore( modelNode ).getShiftedBy( modelLength );\n\t\t}\n\n\t\tevt.stop();\n\t} else if ( viewParent.name == 'li' && viewPos.nodeBefore && ( viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol' ) ) {\n\t\t// In most cases when view position is in <li> it is in text and this is a correct position.\n\t\t// However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n\t\tconst modelNode = mapper.toModelElement( viewParent );\n\n\t\t// Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n\t\t// Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n\t\tlet modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n\t\tlet viewList = viewPos.nodeBefore;\n\n\t\twhile ( viewList && ( viewList.is( 'ul' ) || viewList.is( 'ol' ) ) ) {\n\t\t\tmodelLength += mapper.getModelLength( viewList );\n\n\t\t\tviewList = viewList.previousSibling;\n\t\t}\n\n\t\tdata.modelPosition = ModelPosition.createBefore( modelNode ).getShiftedBy( modelLength );\n\n\t\tevt.stop();\n\t}\n}\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In an example below, there is a correct list structure.\n * Then the middle element will be removed so the list structure will become incorrect:\n *\n *\t\t<listItem type=\"bulleted\" indent=0>Item 1</listItem>\n *\t\t<listItem type=\"bulleted\" indent=1>Item 2</listItem>   <--- this is removed.\n *\t\t<listItem type=\"bulleted\" indent=2>Item 3</listItem>\n *\n * List structure after the middle element removed:\n *\n * \t\t<listItem type=\"bulleted\" indent=0>Item 1</listItem>\n *\t\t<listItem type=\"bulleted\" indent=2>Item 3</listItem>\n *\n * Should become:\n *\n *\t\t<listItem type=\"bulleted\" indent=0>Item 1</listItem>\n *\t\t<listItem type=\"bulleted\" indent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n *\n * @param {module:engine/model/model~Model} model The data model.\n * @param {module:engine/model/writer~Writer} writer The writer to do changes with.\n * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n */\nexport function modelChangePostFixer( model, writer ) {\n\tconst changes = model.document.differ.getChanges();\n\tconst itemToListHead = new Map();\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'insert' && entry.name != 'listItem' ) {\n\t\t\tif ( entry.name != '$text' ) {\n\t\t\t\t// In case of renamed element.\n\t\t\t\tconst item = entry.position.nodeAfter;\n\n\t\t\t\tif ( item.hasAttribute( 'indent' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'indent', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'type' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'type', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst posAfter = entry.position.getShiftedBy( entry.length );\n\n\t\t\t_addListToFix( posAfter );\n\t\t} else if ( entry.type == 'remove' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'indent' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'type' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t}\n\t}\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\t_fixListIndents( listHead );\n\t\t_fixListTypes( listHead );\n\t}\n\n\treturn applied;\n\n\tfunction _addListToFix( position ) {\n\t\tconst prev = position.nodeBefore;\n\n\t\tif ( !prev || !prev.is( 'listItem' ) ) {\n\t\t\tconst item = position.nodeAfter;\n\n\t\t\tif ( item && item.is( 'listItem' ) ) {\n\t\t\t\titemToListHead.set( item, item );\n\t\t\t}\n\t\t} else {\n\t\t\tlet listHead = prev;\n\n\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( listHead.previousSibling && listHead.previousSibling.is( 'listItem' ) ) {\n\t\t\t\tlistHead = listHead.previousSibling;\n\n\t\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemToListHead.set( position.nodeBefore, listHead );\n\t\t}\n\t}\n\n\tfunction _fixListIndents( item ) {\n\t\tlet maxIndent = 0;\n\t\tlet fixBy = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'indent' );\n\n\t\t\tif ( itemIndent > maxIndent ) {\n\t\t\t\tlet newIndent;\n\n\t\t\t\tif ( fixBy === null ) {\n\t\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\t\tnewIndent = maxIndent;\n\t\t\t\t} else {\n\t\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t\t}\n\n\t\t\t\twriter.setAttribute( 'indent', newIndent, item );\n\n\t\t\t\tapplied = true;\n\t\t\t} else {\n\t\t\t\tfixBy = null;\n\t\t\t\tmaxIndent = item.getAttribute( 'indent' ) + 1;\n\t\t\t}\n\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n\n\tfunction _fixListTypes( item ) {\n\t\tlet typesStack = [];\n\t\tlet prev = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'indent' );\n\n\t\t\tif ( prev && prev.getAttribute( 'indent' ) > itemIndent ) {\n\t\t\t\ttypesStack = typesStack.slice( 0, itemIndent + 1 );\n\t\t\t}\n\n\t\t\tif ( itemIndent != 0 ) {\n\t\t\t\tif ( typesStack[ itemIndent ] ) {\n\t\t\t\t\tconst type = typesStack[ itemIndent ];\n\n\t\t\t\t\tif ( item.getAttribute( 'type' ) != type ) {\n\t\t\t\t\t\twriter.setAttribute( 'type', type, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttypesStack[ itemIndent ] = item.getAttribute( 'type' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprev = item;\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n *\t\t<listItem type=\"bulleted\" indent=0>A</listItem>\n *\t\t<listItem type=\"bulleted\" indent=1>B^</listItem>\n *\t\t// At ^ paste:  <listItem type=\"bulleted\" indent=4>X</listItem>\n *\t\t//              <listItem type=\"bulleted\" indent=5>Y</listItem>\n *\t\t<listItem type=\"bulleted\" indent=2>C</listItem>\n *\n * Should become:\n *\n *\t\t<listItem type=\"bulleted\" indent=0>A</listItem>\n *\t\t<listItem type=\"bulleted\" indent=1>BX</listItem>\n *\t\t<listItem type=\"bulleted\" indent=2>Y/listItem>\n *\t\t<listItem type=\"bulleted\" indent=2>C</listItem>\n *\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Array} args Arguments of {@link module:engine/model/model~Model#insertContent}.\n */\nexport function modelIndentPasteFixer( evt, [ content, selection ] ) {\n\t// Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n\t// elements before it and there is no need to fix indents, because even if we insert that content into a list,\n\t// that list will be broken.\n\t// Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n\t// would create incorrect model.\n\tlet item = content.is( 'documentFragment' ) ? content.getChild( 0 ) : content;\n\n\tif ( item && item.is( 'listItem' ) ) {\n\t\t// Get a reference list item. Inserted list items will be fixed according to that item.\n\t\tconst pos = selection.getFirstPosition();\n\t\tlet refItem = null;\n\n\t\tif ( pos.parent.is( 'listItem' ) ) {\n\t\t\trefItem = pos.parent;\n\t\t} else if ( pos.nodeBefore && pos.nodeBefore.is( 'listItem' ) ) {\n\t\t\trefItem = pos.nodeBefore;\n\t\t}\n\n\t\t// If there is `refItem` it means that we do insert list items into an existing list.\n\t\tif ( refItem ) {\n\t\t\t// First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n\t\t\t// to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n\t\t\t// Indent of all those items has to be adjusted to reference item.\n\t\t\tconst indentChange = refItem.getAttribute( 'indent' );\n\n\t\t\t// Fix only if there is anything to fix.\n\t\t\tif ( indentChange > 0 ) {\n\t\t\t\t// Adjust indent of all \"first\" list items in inserted data.\n\t\t\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\t\t\titem.setAttribute( 'indent', item.getAttribute( 'indent' ) + indentChange );\n\n\t\t\t\t\titem = item.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of given `modelItem` model `listItem` element.\n// Then, it binds created view list item (<li>) with model `listItem` element.\n// The function then returns created view list item (<li>).\nfunction generateLiInUl( modelItem, conversionApi ) {\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\tconst listType = modelItem.getAttribute( 'type' ) == 'numbered' ? 'ol' : 'ul';\n\tconst viewItem = createViewListItemElement();\n\n\tconst viewList = viewWriter.createContainerElement( listType, null );\n\tviewList.appendChildren( viewItem );\n\n\tmapper.bindElements( modelItem, viewItem );\n\n\treturn viewItem;\n}\n\n// Helper function that seeks for a list item sibling of given model item (or position) which meets given criteria.\n// `options` object may contain one or more of given values (by default they are `false`):\n// `options.sameIndent` - whether sought sibling should have same indent (default = no),\n// `options.smallerIndent` - whether sought sibling should have smaller indent (default = no).\n// `options.indent` - used as reference item when first parameter is a position\n// Either `options.sameIndent` or `options.biggerIndent` should be set to `true`.\nfunction getSiblingListItem( modelItemOrPosition, options ) {\n\tconst sameIndent = !!options.sameIndent;\n\tconst smallerIndent = !!options.smallerIndent;\n\n\tconst indent = modelItemOrPosition instanceof ModelElement ? modelItemOrPosition.getAttribute( 'indent' ) : options.indent;\n\tlet item = modelItemOrPosition instanceof ModelElement ? modelItemOrPosition.previousSibling : modelItemOrPosition.nodeBefore;\n\n\twhile ( item && item.name == 'listItem' ) {\n\t\tconst itemIndent = item.getAttribute( 'indent' );\n\n\t\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent > itemIndent ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\titem = item.previousSibling;\n\t}\n\n\treturn null;\n}\n\n// Helper function that takes two parameters, that are expected to be view list elements, and merges them.\n// The merge happen only if both parameters are UL or OL elements.\nfunction mergeViewLists( viewWriter, firstList, secondList ) {\n\tif ( firstList && secondList && ( firstList.name == 'ul' || firstList.name == 'ol' ) && firstList.name == secondList.name ) {\n\t\treturn viewWriter.mergeContainers( ViewPosition.createAfter( firstList ) );\n\t}\n\n\treturn null;\n}\n\n// Helper function that takes model list item element `modelItem`, corresponding view list item element `injectedItem`\n// that is not added to the view and is inside a view list element (`ul` or `ol`) and is that's list only child.\n// The list is inserted at correct position (element breaking may be needed) and then merged with it's siblings.\n// See comments below to better understand the algorithm.\nfunction injectViewList( modelItem, injectedItem, conversionApi ) {\n\tconst injectedList = injectedItem.parent;\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Position where view list will be inserted.\n\tlet insertPosition = mapper.toViewPosition( ModelPosition.createBefore( modelItem ) );\n\n\t// 1. Find previous list item that has same or smaller indent. Basically we are looking for a first model item\n\t// that is \"parent\" or \"sibling\" of injected model item.\n\t// If there is no such list item, it means that injected list item is the first item in \"its list\".\n\tconst refItem = getSiblingListItem( modelItem, { sameIndent: true, smallerIndent: true } );\n\tconst prevItem = modelItem.previousSibling;\n\n\tif ( refItem && refItem.getAttribute( 'indent' ) == modelItem.getAttribute( 'indent' ) ) {\n\t\t// There is a list item with same indent - we found same-level sibling.\n\t\t// Break the list after it. Inserted view item will be inserted in the broken space.\n\t\tconst viewItem = mapper.toViewElement( refItem );\n\t\tinsertPosition = viewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\n\t} else {\n\t\t// There is no list item with same indent. Check previous model item.\n\t\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\t\t// If it is a list item, it has to have lower indent.\n\t\t\t// It means that inserted item should be added to it as its nested item.\n\t\t\tinsertPosition = mapper.toViewPosition( ModelPosition.createAt( prevItem, 'end' ) );\n\t\t} else {\n\t\t\t// Previous item is not a list item (or does not exist at all).\n\t\t\t// Just map the position and insert the view item at mapped position.\n\t\t\tinsertPosition = mapper.toViewPosition( ModelPosition.createBefore( modelItem ) );\n\t\t}\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Insert the view item.\n\tviewWriter.insert( insertPosition, injectedList );\n\n\t// 2. Handle possible children of injected model item.\n\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\tconst prevView = mapper.toViewElement( prevItem );\n\n\t\tconst walker = new ViewTreeWalker( {\n\t\t\tboundaries: new ViewRange(\n\t\t\t\tViewPosition.createAt( prevView, 0 ),\n\t\t\t\tinsertPosition\n\t\t\t),\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.item.is( 'li' ) ) {\n\t\t\t\tconst breakPosition = viewWriter.breakContainer( ViewPosition.createBefore( value.item ) );\n\t\t\t\tconst viewList = value.item.parent;\n\n\t\t\t\tconst targetPosition = ViewPosition.createAt( injectedItem, 'end' );\n\t\t\t\tmergeViewLists( viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter );\n\t\t\t\tviewWriter.move( ViewRange.createOn( viewList ), targetPosition );\n\n\t\t\t\twalker.position = breakPosition;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst nextViewList = injectedList.nextSibling;\n\n\t\tif ( nextViewList && ( nextViewList.is( 'ul' ) || nextViewList.is( 'ol' ) ) ) {\n\t\t\tlet lastSubChild = null;\n\n\t\t\tfor ( const child of nextViewList.getChildren() ) {\n\t\t\t\tconst modelChild = mapper.toModelElement( child );\n\n\t\t\t\tif ( modelChild && modelChild.getAttribute( 'indent' ) > modelItem.getAttribute( 'indent' ) ) {\n\t\t\t\t\tlastSubChild = child;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lastSubChild ) {\n\t\t\t\tviewWriter.breakContainer( ViewPosition.createAfter( lastSubChild ) );\n\t\t\t\tviewWriter.move( ViewRange.createOn( lastSubChild.parent ), ViewPosition.createAt( injectedItem, 'end' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Merge inserted view list with its possible neighbour lists.\n\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling );\n\tmergeViewLists( viewWriter, injectedList.previousSibling, injectedList );\n}\n\n// Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n// to other given parameters.\nfunction hoistNestedLists( nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi ) {\n\t// Find correct previous model list item element.\n\t// The element has to have either same or smaller indent than given reference indent.\n\t// This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n\t// Keep in mind that such element might not be found, if removed item was the first item.\n\tconst prevModelItem = getSiblingListItem( modelRemoveStartPosition, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tindent: nextIndent\n\t} );\n\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Indent of found element or `null` if the element has not been found.\n\tconst prevIndent = prevModelItem ? prevModelItem.getAttribute( 'indent' ) : null;\n\n\tlet insertPosition;\n\n\tif ( !prevModelItem ) {\n\t\t// If element has not been found, simply insert lists at the position where the removed item was:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n\t\t//   1.1 --------       <--- this is reference indent.\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1.1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t// 1.2 --------\n\t\tinsertPosition = viewRemoveStartPosition;\n\t} else if ( prevIndent == nextIndent ) {\n\t\t// If element has been found and has same indent as reference indent it means that nested items should\n\t\t// become siblings of found element:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------       <--- this is `prevModelItem`.\n\t\t// 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n\t\t//   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n\t\t//   2.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------\n\t\t//   2.1 --------\n\t\t//   2.2 --------\n\t\tconst prevViewList = mapper.toViewElement( prevModelItem ).parent;\n\t\tinsertPosition = ViewPosition.createAfter( prevViewList );\n\t} else {\n\t\t// If element has been found and has smaller indent as reference indent it means that nested items\n\t\t// should become nested items of found item:\n\t\t//\n\t\t// 1 --------           <--- this is `prevModelItem`.\n\t\t//   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n\t\t//     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n\t\t// because following item may have indent bigger only by one. But this is fixed by postfixer.\n\t\tconst modelPosition = ModelPosition.createAt( prevModelItem, 'end' );\n\t\tinsertPosition = mapper.toViewPosition( modelPosition );\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n\t// are inserted after the first list (no need to recalculate insertion position for them).\n\tfor ( const child of [ ...viewRemovedItem.getChildren() ] ) {\n\t\tif ( child.is( 'ul' ) || child.is( 'ol' ) ) {\n\t\t\tinsertPosition = viewWriter.move( ViewRange.createOn( child ), insertPosition ).end;\n\n\t\t\tmergeViewLists( viewWriter, child, child.nextSibling );\n\t\t\tmergeViewLists( viewWriter, child.previousSibling, child );\n\t\t}\n\t}\n}\n\n// Helper function that for given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n// are after given position.\n// For example:\n// <container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</contain:p>\n// For position ^, a position before \"bar\" will be returned.\nfunction positionAfterUiElements( viewPosition ) {\n\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/listediting\n */\n\nimport ListCommand from './listcommand';\nimport IndentCommand from './indentcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\nimport {\n\tcleanList,\n\tcleanListItem,\n\tmodelViewInsertion,\n\tmodelViewChangeType,\n\tmodelViewMergeAfter,\n\tmodelViewRemove,\n\tmodelViewSplitOnInsert,\n\tmodelViewChangeIndent,\n\tmodelChangePostFixer,\n\tmodelIndentPasteFixer,\n\tviewModelConverter,\n\tmodelToViewPosition,\n\tviewToModelPosition\n} from './converters';\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n * It registers the `numberedList`, `bulletedList`, `indentList` and `outdentList` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Schema.\n\t\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n\t\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n\t\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\t\teditor.model.schema.register( 'listItem', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tallowAttributes: [ 'type', 'indent' ]\n\t\t} );\n\n\t\t// Converters.\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\n\n\t\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\n\t\tediting.mapper.on( 'modelToViewPosition', modelToViewPosition );\n\t\tediting.mapper.on( 'viewToModelPosition', viewToModelPosition );\n\t\tdata.mapper.on( 'modelToViewPosition', modelToViewPosition );\n\n\t\tediting.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tediting.downcastDispatcher.on( 'insert:listItem', modelViewInsertion );\n\t\tdata.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tdata.downcastDispatcher.on( 'insert:listItem', modelViewInsertion );\n\n\t\tediting.downcastDispatcher.on( 'attribute:type:listItem', modelViewChangeType );\n\t\tdata.downcastDispatcher.on( 'attribute:type:listItem', modelViewChangeType );\n\t\tediting.downcastDispatcher.on( 'attribute:indent:listItem', modelViewChangeIndent );\n\t\tdata.downcastDispatcher.on( 'attribute:indent:listItem', modelViewChangeIndent );\n\n\t\tediting.downcastDispatcher.on( 'remove:listItem', modelViewRemove );\n\t\tediting.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\t\tdata.downcastDispatcher.on( 'remove:listItem', modelViewRemove );\n\t\tdata.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\n\t\tdata.upcastDispatcher.on( 'element:ul', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:ol', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', cleanListItem, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', viewModelConverter );\n\n\t\t// Fix indentation of pasted items.\n\t\teditor.model.on( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\n\n\t\t// Register commands for numbered and bulleted list.\n\t\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\n\n\t\t// Register commands for indenting.\n\t\teditor.commands.add( 'indentList', new IndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new IndentCommand( editor, 'backward' ) );\n\n\t\tconst viewDocument = this.editor.editing.view.document;\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\n\t\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t// Check conditions from those that require less computations like those immediately available.\n\t\t\tif ( data.direction !== 'backward' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = this.editor.model.document.selection;\n\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\tif ( positionParent.name !== 'listItem' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n\n\t\t\tif ( previousIsAListItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { priority: 'high' } );\n\n\t\tconst getCommandExecuter = commandName => {\n\t\t\treturn ( data, cancel ) => {\n\t\t\t\tconst command = this.editor.commands.get( commandName );\n\n\t\t\t\tif ( command.isEnabled ) {\n\t\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tthis.editor.keystrokes.set( 'Tab', getCommandExecuter( 'indentList' ) );\n\t\tthis.editor.keystrokes.set( 'Shift+Tab', getCommandExecuter( 'outdentList' ) );\n\t}\n}\n\nfunction getViewListItemLength( element ) {\n\tlet length = 1;\n\n\tfor ( const child of element.getChildren() ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tfor ( const item of child.getChildren() ) {\n\t\t\t\tlength += getViewListItemLength( item );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn length;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module list/listui\n */\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n/**\n * The list UI feature. It introduces the `numberedList` and `bulletedList` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        // Create two buttons and link them with numberedList and bulletedList commands.\n        const t = this.editor.t;\n        this._addButton('numberedList', t('t'), numberedListIcon);\n        this._addButton('bulletedList', t('u'), bulletedListIcon);\n    }\n    /**\n\t * Helper method for initializing a button and linking it with an appropriate command.\n\t *\n\t * @private\n\t * @param {String} commandName The name of the command.\n\t * @param {Object} label The button label.\n\t * @param {String} icon The source of the icon.\n\t */\n    _addButton(commandName, label, icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(commandName, locale => {\n            const command = editor.commands.get(commandName);\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label,\n                icon,\n                tooltip: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => editor.execute(commandName));\n            return buttonView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport ClassicEditorBase from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\nimport EssentialsPlugin from '@ckeditor/ckeditor5-essentials/src/essentials';\nimport UploadadapterPlugin from '@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter';\nimport AutoformatPlugin from '@ckeditor/ckeditor5-autoformat/src/autoformat';\nimport BoldPlugin from '@ckeditor/ckeditor5-basic-styles/src/bold';\nimport ItalicPlugin from '@ckeditor/ckeditor5-basic-styles/src/italic';\nimport BlockquotePlugin from '@ckeditor/ckeditor5-block-quote/src/blockquote';\nimport EasyimagePlugin from '@ckeditor/ckeditor5-easy-image/src/easyimage';\nimport HeadingPlugin from '@ckeditor/ckeditor5-heading/src/heading';\nimport ImagePlugin from '@ckeditor/ckeditor5-image/src/image';\nimport ImagecaptionPlugin from '@ckeditor/ckeditor5-image/src/imagecaption';\nimport ImagestylePlugin from '@ckeditor/ckeditor5-image/src/imagestyle';\nimport ImagetoolbarPlugin from '@ckeditor/ckeditor5-image/src/imagetoolbar';\nimport LinkPlugin from '@ckeditor/ckeditor5-link/src/link';\nimport ListPlugin from '@ckeditor/ckeditor5-list/src/list';\nimport ParagraphPlugin from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport ImageuploadPlugin from '@ckeditor/ckeditor5-image/src/imageupload';\n\nexport default class ClassicEditor extends ClassicEditorBase {}\n\nClassicEditor.build = {\n\tplugins: [\n\t\tEssentialsPlugin,\n\t\tUploadadapterPlugin,\n\t\tAutoformatPlugin,\n\t\tBoldPlugin,\n\t\tItalicPlugin,\n\t\tBlockquotePlugin,\n\t\tEasyimagePlugin,\n\t\tHeadingPlugin,\n\t\tImagePlugin,\n\t\tImagecaptionPlugin,\n\t\tImagestylePlugin,\n\t\tImagetoolbarPlugin,\n\t\tLinkPlugin,\n\t\tListPlugin,\n\t\tParagraphPlugin,\n\t\tImageuploadPlugin\n\t],\n\tconfig: {\n\t\ttoolbar: {\n\t\t\titems: [\n\t\t\t\t'headings',\n\t\t\t\t'|',\n\t\t\t\t'bold',\n\t\t\t\t'italic',\n\t\t\t\t'link',\n\t\t\t\t'bulletedList',\n\t\t\t\t'numberedList',\n\t\t\t\t'blockQuote',\n\t\t\t\t'undo',\n\t\t\t\t'redo'\n\t\t\t]\n\t\t},\n\t\timage: {\n\t\t\ttoolbar: [\n\t\t\t\t'imageStyleFull',\n\t\t\t\t'imageStyleSide',\n\t\t\t\t'|',\n\t\t\t\t'imageTextAlternative'\n\t\t\t]\n\t\t},\n\t\tlanguage: 'en'\n\t}\n};\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module essentials/essentials\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\nimport Typing from '@ckeditor/ckeditor5-typing/src/typing';\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\n\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Essentials extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard, Enter, Typing, Undo ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Essentials';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module autoformat/autoformat\n */\n\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * Includes a set of predefined autoformatting actions. For a detailed overview, check\n * the {@glink features/autoformat Autoformatting feature documentation}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Autoformat extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Autoformat';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tthis._addListAutoformats();\n\t\tthis._addBasicStylesAutoformats();\n\t\tthis._addHeadingAutoformats();\n\t\tthis._addBlockQuoteAutoformats();\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n\t *\n\t * @private\n\t */\n\t_addListAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bulletedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^[*-]\\s$/, 'bulletedList' );\n\t\t}\n\n\t\tif ( commands.get( 'numberedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^\\d+[.|)]\\s$/, 'numberedList' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n\t *\n\t * @private\n\t */\n\t_addBasicStylesAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bold' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tnew InlineAutoformatEditing( this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, 'bold' );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(__)([^_]+)(__)$/g, 'bold' );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'italic' ) ) {\n\t\t\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n\t\t\t// text before the pattern (e.g. `(?:^|[^\\*])`).\n\n\t\t\t/* eslint-disable no-new */\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, 'italic' );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, 'italic' );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'code' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tnew InlineAutoformatEditing( this.editor, /(`)([^`]+)(`)$/g, 'code' );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading1` will be executed when typing `#`,\n\t * * `heading2` will be executed when typing `##`,\n\t * * ... up to `heading6` and `######`.\n\t *\n\t * @private\n\t */\n\t_addHeadingAutoformats() {\n\t\tArray.from( this.editor.commands.names() )\n\t\t\t.filter( name => name.match( /^heading[1-6]$/ ) )\n\t\t\t.forEach( commandName => {\n\t\t\t\tconst level = commandName[ 7 ];\n\t\t\t\tconst pattern = new RegExp( `^(#{${ level }})\\\\s$` );\n\n\t\t\t\t// eslint-disable-next-line no-new\n\t\t\t\tnew BlockAutoformatEditing( this.editor, pattern, () => {\n\t\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\t} );\n\t\t\t} );\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t *\n\t * @private\n\t */\n\t_addBlockQuoteAutoformats() {\n\t\tif ( this.editor.commands.get( 'blockQuote' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^>\\s$/, 'blockQuote' );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/bold\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BoldEditing from './bold/boldediting';\nimport BoldUI from './bold/boldui';\n\n/**\n * The bold feature.\n *\n * It loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Bold extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BoldEditing, BoldUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Bold';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/italic\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n\n/**\n * The italic feature.\n *\n * It loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Italic extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ItalicEditing, ItalicUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Italic';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module block-quote/blockquote\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BlockQuoteEditing from './blockquoteediting';\nimport BlockQuoteUI from './blockquoteui';\n\n/**\n * The block quote plugin.\n *\n * It loads the {@link module:block-quote/blockquoteediting~BlockQuoteEditing block quote editing feature}\n * and {@link module:block-quote/blockquoteui~BlockQuoteUI block quote UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuote extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BlockQuoteEditing, BlockQuoteUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockQuote';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module easy-image/easyimage\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport CloudServicesUploadAdapter from './cloudservicesuploadadapter';\nimport Image from '@ckeditor/ckeditor5-image/src/image';\nimport ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';\n\n/**\n * The Easy Image feature.\n *\n * This plugin enables:\n *\n * * {@link module:image/image~Image},\n * * {@link module:image/imageupload~ImageUpload},\n * * {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter}.\n *\n * After enabling the Easy Image plugin you need to configure the Cloud Services integration through\n * {@link module:cloudservices/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class EasyImage extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [\n\t\t\tCloudServicesUploadAdapter,\n\t\t\tImage,\n\t\t\tImageUpload\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'EasyImage';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module heading/heading\n */\n\nimport HeadingEditing from './headingediting';\nimport HeadingUI from './headingui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport '../theme/heading.css';\n\n/**\n * The headings feature.\n *\n * It loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature documentation}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Heading extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ HeadingEditing, HeadingUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Heading';\n\t}\n}\n\n/**\n * The configuration of the heading feature. Introduced by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n * Read more in {@link module:heading/heading~HeadingConfig}.\n *\n * @member {module:heading/heading~HeadingConfig} module:core/editor/editorconfig~EditorConfig#heading\n */\n\n/**\n * The configuration of the heading feature.\n * The option is used by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n * \t\t\t\theading: ... // Heading feature config.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface HeadingConfig\n */\n\n/**\n * The available heading options.\n *\n * The default value is:\n *\n *\t\tconst headingConfig = {\n *\t\t\toptions: [\n *\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *\t\t\t]\n *\t\t};\n *\n * It defines 3 levels of headings. In the editor model they will use `heading1`, `heading2`, and `heading3` elements.\n * Their respective view elements (so the elements output by the editor) will be: `h2`, `h3`, and `h4`. This means that\n * if you choose \"Heading 1\" in the headings dropdown the editor will turn the current block to `<heading1>` in the model\n * which will result in rendering (and outputting to data) the `<h2>` element.\n *\n * The `title` and `class` properties will be used by the `headings` dropdown to render available options.\n * Usually, the first option in the headings dropdown is the \"Paragraph\" option, hence it's also defined on the list.\n * However, you don't need to define its view representation because it's handled by\n * the {@link module:paragraph/paragraph~Paragraph} feature (which is required by\n * the {@link module:heading/headingediting~HeadingEditing} feature).\n *\n * You can **read more** about configuring heading levels and **see more examples** in\n * the {@glink features/headings Headings} guide.\n *\n * Note: In the model you should always start from `heading1`, regardless of how the headings are represented in the view.\n * That's assumption is used by features like {@link module:autoformat/autoformat~Autoformat} to know which element\n * they should use when applying the first level heading.\n *\n * The defined headings are also available in {@link module:core/commandcollection~CommandCollection} under their model names.\n * For example, the below code will apply `<heading1>` to the current selection:\n *\n *\t\teditor.execute( 'heading1' );\n *\n * @member {Array.<module:heading/heading~HeadingOption>} module:heading/heading~HeadingConfig#options\n */\n\n/**\n * Heading option descriptor.\n *\n * @typedef {Object} module:heading/heading~HeadingOption\n * @property {String} model Name of the model element to convert.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view Definition of a view element to convert from/to.\n * @property {String} title The user-readable title of the option.\n * @property {String} class The class which will be added to the dropdown item representing this option.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagecaption\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageCaptionEditing from './imagecaption/imagecaptionediting';\n\nimport '../theme/imagecaption.css';\n\n/**\n * The image caption plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageCaption extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageCaptionEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageCaption';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module image/imagestyle\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleEditing from './imagestyle/imagestyleediting';\nimport ImageStyleUI from './imagestyle/imagestyleui';\n\n/**\n * The image style plugin.\n *\n * It loads the {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing}\n * and {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyle extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageStyleEditing, ImageStyleUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyle';\n\t}\n}\n\n/**\n * Available image styles.\n * The option is used by the {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing} feature.\n *\n * The default value is:\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [ 'imageStyleFull', 'imageStyleSide' ]\n *\t\t};\n *\n * which configures two default styles:\n *\n *  * the \"full\" style which doesn't apply any class, e.g. for images styled to span 100% width of the content,\n *  * the \"side\" style with the `.image-style-side` CSS class.\n *\n * See {@link module:image/imagestyle/utils~defaultStyles} to learn more about default\n * styles provided by the image feature.\n *\n * The {@link module:image/imagestyle/utils~defaultStyles default styles} can be customized,\n * e.g. to change the icon, title or CSS class of the style. The feature also provides several\n * {@link module:image/imagestyle/utils~defaultIcons default icons} to chose from.\n *\n *\t\timport customIcon from 'custom-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// This will only customize the icon of the \"full\" style.\n *\t\t\t\t// Note: 'right' is one of default icons provided by the feature.\n *\t\t\t\t{ name: 'imageStyleFull', icon: 'right' },\n *\n *\t\t\t\t// This will customize the icon, title and CSS class of the default \"side\" style.\n *\t\t\t\t{ name: 'imageStyleSide', icon: customIcon, title: 'My side style', class: 'custom-side-image' }\n *\t\t\t]\n *\t\t};\n *\n * If none of the default styles is good enough, it is possible to define independent custom styles too:\n *\n *\t\timport fullSizeIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\n *\t\timport sideIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// A completely custom full size style with no class, used as a default.\n *\t\t\t\t{ name: 'fullSize', title: 'Full size', icon: fullSizeIcon, isDefault: true },\n *\n *\t\t\t\t{ name: 'side', title: 'To the side', icon: sideIcon, className: 'side-image' }\n *\t\t\t]\n *\t\t};\n *\n * Note: Setting `title` to one of {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * Read more about styling images in the {@glink features/image#image-styles Image styles guide}.\n *\n * The feature creates commands based on defined styles, so you can change the style of a selected image by executing\n * the following command:\n *\n *\t\teditor.execute( 'imageStyleSide' );\n *\n * The features creates also buttons which execute the commands, so assuming that you use the\n * default image styles setting you can {@link module:image/image~ImageConfig#toolbar configure the image toolbar}\n * to contain these options:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyleFull', 'imageStyleSide' ]\n *\t\t};\n *\n * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} module:image/image~ImageConfig#styles\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/link\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkEditing from './linkediting';\nimport LinkUI from './linkui';\n\n/**\n * The link plugin. It introduces the Link and Unlink buttons and the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It loads the {@link module:link/linkediting~LinkEditing link editing feature}\n * and {@link module:link/linkui~LinkUI link UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Link extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ LinkEditing, LinkUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Link';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/list\n */\n\nimport ListEditing from './listediting';\nimport ListUI from './listui';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The list feature.\n *\n * It loads the {@link module:list/listediting~ListEditing list editing feature}\n * and {@link module:list/listui~ListUI list UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class List extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ListEditing, ListUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'List';\n\t}\n}\n","module.exports = \".ck-link-actions .ck-link-actions__preview{display:inline-block}.ck-link-actions .ck-link-actions__preview .ck-button__label{overflow:hidden}.ck-link-actions{padding:var(--ck-spacing-standard)}.ck-link-actions .ck-button.ck-link-actions__preview{padding-left:0;padding-right:0}.ck-link-actions .ck-button.ck-link-actions__preview,.ck-link-actions .ck-button.ck-link-actions__preview:active,.ck-link-actions .ck-button.ck-link-actions__preview:focus,.ck-link-actions .ck-button.ck-link-actions__preview:hover{background:none}.ck-link-actions .ck-button.ck-link-actions__preview:active{box-shadow:none}.ck-link-actions .ck-button.ck-link-actions__preview:focus .ck-button__label{text-decoration:underline}.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{padding:0 var(--ck-spacing-standard);color:var(--ck-color-link-default);text-overflow:ellipsis;cursor:pointer;max-width:var(--ck-input-text-width);min-width:3em;text-align:center}.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label:hover{text-decoration:underline}.ck-link-actions:focus{outline:none}.ck-link-actions>:not(:first-child){margin-left:var(--ck-spacing-standard)}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./linkactions.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./linkactions.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./linkactions.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-link-form .ck-labeled-input{display:inline-block}.ck-link-form .ck-label{display:none}.ck-link-form{padding:var(--ck-spacing-standard)}.ck-link-form:focus{outline:none}.ck-link-form>:not(:first-child){margin-left:var(--ck-spacing-standard)}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./linkform.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./linkform.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./linkform.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-image-style-spacing:1.5em}.ck-content .image-style-align-center,.ck-content .image-style-align-left,.ck-content .image-style-align-right,.ck-content .image-style-side{max-width:50%}.ck-content .image-style-side{float:right;margin-left:var(--ck-image-style-spacing)}.ck-content .image-style-align-left{float:left;margin-right:var(--ck-image-style-spacing)}.ck-content .image-style-align-center{margin-left:auto;margin-right:auto}.ck-content .image-style-align-right{float:right;margin-left:var(--ck-image-style-spacing)}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imagestyle.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imagestyle.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imagestyle.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-content .image>figcaption{color:#333;background-color:#f7f7f7;padding:.6em;font-size:.75em;outline-offset:-1px}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imagecaption.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imagecaption.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imagecaption.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-placeholder:before{content:attr(data-placeholder);pointer-events:none;cursor:text;color:var(--ck-color-engine-placeholder-text)}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./placeholder.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./placeholder.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./placeholder.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-heading_heading1{font-size:20px}.ck-heading_heading2{font-size:17px}.ck-heading_heading3{font-size:14px}[class*=ck-heading_heading]{font-weight:700}.ck-dropdown.ck-heading-dropdown .ck-dropdown__button .ck-button__label{width:8em}\"","module.exports = \".ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners,.ck-rounded-corners .ck-dropdown .ck-dropdown__panel .ck-list{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck-dropdown .ck-dropdown__panel .ck-list>.ck-list__item{line-height:calc(.8*var(--ck-line-height-base)*var(--ck-font-size-base));padding:calc(.4*var(--ck-line-height-base)*var(--ck-font-size-base))}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./listdropdown.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./listdropdown.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./listdropdown.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-toolbar-dropdown .ck-toolbar{flex-wrap:nowrap}.ck-toolbar-dropdown .ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck-toolbar-dropdown .ck-toolbar{border:0}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./toolbardropdown.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./toolbardropdown.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./toolbardropdown.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden}.ck-list__item{display:block}.ck-list__item:focus{position:relative;z-index:var(--ck-z-default)}.ck-list{border-radius:0}.ck-list.ck-rounded-corners,.ck-rounded-corners .ck-list{border-radius:var(--ck-border-radius)}.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck-list__item{padding:var(--ck-spacing-medium);cursor:default;min-width:12em}.ck-list__item:focus,.ck-list__item:hover{background:var(--ck-color-list-item-background-hover)}.ck-list__item:focus{box-shadow:var(--ck-focus-outer-shadow),0 0;outline:none}.ck-list__item_active{background:var(--ck-color-list-item-background-active);color:var(--ck-color-list-item-text-active)}.ck-list__item_active:focus,.ck-list__item_active:hover{background:var(--ck-color-list-item-background-active-focus)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./list.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./list.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./list.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-dropdown{display:inline-block;position:relative}.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default);position:absolute;top:50%;transform:translate3d(0,-50%,0)}.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);position:absolute;left:0;transform:translate3d(0,100%,0)}.ck-dropdown__panel-visible{display:inline-block;will-change:transform}:root{--ck-dropdown-arrow-size:calc(0.5 * var(--ck-icon-size))}.ck-dropdown{font-size:inherit}.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);width:var(--ck-dropdown-arrow-size)}.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}.ck-dropdown .ck-button.ck-dropdown__button{padding-right:calc(2.5 * var(--ck-spacing-standard))}.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck-dropdown__panel{border-radius:0;box-shadow:var(--ck-drop-shadow),0 0}.ck-dropdown__panel.ck-rounded-corners,.ck-rounded-corners .ck-dropdown__panel{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck-dropdown__panel{background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./dropdown.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./dropdown.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./dropdown.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \"figure.image{position:relative;overflow:hidden}figure.image.ck-infinite-progress:before{content:\\\"\\\";position:absolute;top:0;right:0}figure.image .ck-progress-bar{position:absolute;top:0;left:0}:root{--ck-image-upload-progress-line-width:30px}figure.image.ck-appear{animation:a .7s}figure.image.ck-infinite-progress:before{width:var(--ck-image-upload-progress-line-width);height:2px;background:var(--ck-color-upload-infinite-background);animation-name:b;animation-duration:1.5s;animation-iteration-count:infinite;transition-timing-function:linear}figure.image.ck-image-upload-placeholder>img{width:100%}figure.image .ck-progress-bar{height:2px;width:0;background:var(--ck-color-upload-bar-background);transition:width .1s}@keyframes a{0%{opacity:0}to{opacity:1}}@keyframes b{0%{width:var(--ck-image-upload-progress-line-width);right:0}50%{width:calc(var(--ck-image-upload-progress-line-width) * 1.5)}to{right:100%}}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imageuploadprogress.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imageuploadprogress.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./imageuploadprogress.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-content .image{clear:both;text-align:center}.ck-content .image>img{display:block;margin:0 auto;max-width:100%}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./image.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./image.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./image.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:\\\"\\\";position:absolute}.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-z-default)}.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-z-default) + 1)}.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-z-default)}.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-z-default) + 1)}.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-z-default)}.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-z-default) + 1)}.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px}.ck-balloon-panel{border-radius:0}.ck-balloon-panel.ck-rounded-corners,.ck-rounded-corners .ck-balloon-panel{border-radius:var(--ck-border-radius)}.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck-balloon-panel[class*=arrow_n]:after,.ck-balloon-panel[class*=arrow_n]:before{border-width:0 var(--ck-balloon-arrow-half-width) var(--ck-balloon-arrow-height)}.ck-balloon-panel[class*=arrow_n]:before{border-color:transparent transparent var(--ck-color-panel-border)}.ck-balloon-panel[class*=arrow_n]:after{border-color:transparent transparent var(--ck-color-panel-background);margin-top:var(--ck-balloon-arrow-offset)}.ck-balloon-panel[class*=arrow_s]:after,.ck-balloon-panel[class*=arrow_s]:before{border-width:var(--ck-balloon-arrow-height) var(--ck-balloon-arrow-half-width) 0}.ck-balloon-panel[class*=arrow_s]:before{border-color:var(--ck-color-panel-border) transparent transparent}.ck-balloon-panel[class*=arrow_s]:after{border-color:var(--ck-color-panel-background) transparent transparent;margin-bottom:var(--ck-balloon-arrow-offset)}.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(-1 * var(--ck-balloon-arrow-half-width));top:calc(-1 * var(--ck-balloon-arrow-height))}.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(2 * var(--ck-balloon-arrow-half-width));top:calc(-1 * var(--ck-balloon-arrow-height))}.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(2 * var(--ck-balloon-arrow-half-width));top:calc(-1 * var(--ck-balloon-arrow-height))}.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(-1 * var(--ck-balloon-arrow-half-width));bottom:calc(-1 * var(--ck-balloon-arrow-height))}.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(2 * var(--ck-balloon-arrow-half-width));bottom:calc(-1 * var(--ck-balloon-arrow-height))}.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(2 * var(--ck-balloon-arrow-half-width));bottom:calc(-1 * var(--ck-balloon-arrow-height))}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./balloonpanel.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./balloonpanel.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./balloonpanel.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-text-alternative-form .ck-labeled-input{display:inline-block}.ck-text-alternative-form .ck-label{display:none}.ck-text-alternative-form{padding:var(--ck-spacing-standard)}.ck-text-alternative-form:focus{outline:none}.ck-text-alternative-form>:not(:first-child){margin-left:var(--ck-spacing-standard)}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./textalternativeform.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./textalternativeform.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./textalternativeform.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-input-text-width:18em}.ck-input-text{border-radius:0}.ck-input-text.ck-rounded-corners,.ck-rounded-corners .ck-input-text{border-radius:var(--ck-border-radius)}.ck-input-text{box-shadow:var(--ck-inner-shadow),0 0;background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition-property:box-shadow,border;transition:.2s ease-in-out}.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),var(--ck-inner-shadow)}.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./inputtext.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./inputtext.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./inputtext.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-widget-outline-thickness:3px;--ck-color-widget-border-blurred:#dedede;--ck-color-widget-border-hover:#ffd15c;--ck-color-widget-editable-focused-background:var(--ck-color-base-background),}.ck-widget{margin:var(--ck-spacing-standard) 0;padding:0}.ck-widget.ck-widget_selected,.ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-widget-border-blurred)}.ck-widget:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-widget-border-hover)}.ck-widget .ck-editable{border:1px solid transparent}.ck-widget .ck-editable.ck-editable_focused,.ck-widget .ck-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focused-background)}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./widget.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./widget.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./widget.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-content blockquote{overflow:hidden;padding-left:1.5em;margin-left:0;font-style:italic;border-left:5px solid #ccc}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./blockquote.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./blockquote.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./blockquote.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-button,a.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck-button .ck-tooltip,a.ck-button .ck-tooltip{display:block}.ck-button,a.ck-button{position:relative}.ck-button.ck-button_with-text .ck-button__label,a.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck-button:hover .ck-tooltip,a.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck-button .ck-button__label,.ck-button:focus:not(:hover) .ck-tooltip,a.ck-button .ck-button__label,a.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck-button,a.ck-button{background:var(--ck-color-button-default-background)}.ck-button:not(.ck-disabled):focus,.ck-button:not(.ck-disabled):hover,a.ck-button:not(.ck-disabled):focus,a.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-focus-background)}.ck-button:not(.ck-disabled):active,a.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck-button.ck-disabled,a.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck-button,a.ck-button{border-radius:0}.ck-button.ck-rounded-corners,.ck-rounded-corners .ck-button,.ck-rounded-corners a.ck-button,a.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck-button,a.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent}.ck-button:focus,a.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0;border-color:transparent}.ck-button.ck-disabled .ck-button__icon,a.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck-button.ck-disabled .ck-button__label,a.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck-button.ck-button_with-text,a.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}.ck-button.ck-button_with-text .ck-button__icon,a.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(-1 * var(--ck-spacing-small));margin-right:var(--ck-spacing-small)}.ck-button.ck-on,a.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck-button.ck-on:not(.ck-disabled):focus,.ck-button.ck-on:not(.ck-disabled):hover,a.ck-button.ck-on:not(.ck-disabled):focus,a.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-focus-background)}.ck-button.ck-on:not(.ck-disabled):active,a.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck-button.ck-on.ck-disabled,a.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck-button .ck-button__icon use,.ck-button .ck-button__icon use *,a.ck-button .ck-button__icon use,a.ck-button .ck-button__icon use *{color:inherit}.ck-button .ck-button__label,a.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}.ck-button-action,a.ck-button-action{background:var(--ck-color-button-action-background)}.ck-button-action:not(.ck-disabled):focus,.ck-button-action:not(.ck-disabled):hover,a.ck-button-action:not(.ck-disabled):focus,a.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-focus-background)}.ck-button-action:not(.ck-disabled):active,a.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck-button-action.ck-disabled,a.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck-button-action,a.ck-button-action{color:var(--ck-color-button-action-text)}.ck-button-bold,a.ck-button-bold{font-weight:700}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./button.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./button.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./button.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-tooltip,.ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck-tooltip__text{display:inline-block}.ck-tooltip__text:after{content:\\\"\\\";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck-tooltip{left:50%}.ck-tooltip.ck-tooltip_s{bottom:calc(-1 * var(--ck-tooltip-arrow-size));transform:translateY(100%)}.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after{top:calc(-1 * var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-color:transparent transparent var(--ck-color-tooltip-background);border-width:0 var(--ck-tooltip-arrow-size) var(--ck-tooltip-arrow-size)}.ck-tooltip.ck-tooltip_n{top:calc(-1 * var(--ck-tooltip-arrow-size));transform:translateY(-100%)}.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(-1 * var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-color:var(--ck-color-tooltip-background) transparent transparent;border-width:var(--ck-tooltip-arrow-size) var(--ck-tooltip-arrow-size) 0}.ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck-tooltip__text,.ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck-tooltip__text:after{border-style:solid;left:50%}.ck-tooltip,.ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./tooltip.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./tooltip.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./tooltip.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \"svg.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base) * var(--ck-font-size-normal))}svg.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}svg.ck-icon,svg.ck-icon *{color:inherit;cursor:inherit}svg.ck-icon *{fill:currentColor}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./icon.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./icon.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./icon.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-editor{position:relative}.ck-editor__top .ck-sticky-panel .ck-toolbar{z-index:var(--ck-z-modal);border-radius:0}.ck-editor__top .ck-sticky-panel .ck-toolbar.ck-rounded-corners,.ck-rounded-corners .ck-editor__top .ck-sticky-panel .ck-toolbar{border-radius:var(--ck-border-radius);border-bottom-left-radius:0;border-bottom-right-radius:0}.ck-editor__top .ck-sticky-panel .ck-toolbar{border-bottom-width:0}.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar{border-bottom-width:1px;border-radius:0}.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar.ck-rounded-corners,.ck-rounded-corners .ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar{border-radius:var(--ck-border-radius);border-radius:0}.ck-editor__main .ck-editor__editable{background:var(--ck-color-base-background);border-radius:0}.ck-editor__main .ck-editor__editable.ck-rounded-corners,.ck-rounded-corners .ck-editor__main .ck-editor__editable{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}.ck-editor__main .ck-editor__editable:not(.ck-focused){border-color:var(--ck-color-base-border)}\"","\nvar content = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./classiceditor.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./classiceditor.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./classiceditor.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row wrap;align-items:center}.ck-toolbar.ck-toolbar_vertical{flex-direction:column}.ck-toolbar__separator{display:inline-block}.ck-toolbar__newline{display:block;width:100%}.ck-toolbar_floating{flex-wrap:nowrap}.ck-toolbar{border-radius:0}.ck-rounded-corners .ck-toolbar,.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck-toolbar>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck-toolbar.ck-toolbar_vertical{padding:0}.ck-toolbar.ck-toolbar_vertical>*{width:100%;margin:0;border-radius:0;border:0}.ck-toolbar>:last-child{margin-right:0}.ck-toolbar-container .ck-toolbar{border:0}.ck-toolbar__separator{align-self:stretch;width:1px;margin-top:0;margin-bottom:0;background:var(--ck-color-toolbar-border)}.ck-toolbar__newline{margin:0}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./toolbar.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./toolbar.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./toolbar.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-editor .ck-sticky-panel .ck-sticky-panel__content_sticky{z-index:var(--ck-z-modal);position:fixed;top:0}.ck-editor .ck-sticky-panel .ck-sticky-panel__content_sticky_bottom-limit{top:auto;position:absolute}.ck-editor .ck-sticky-panel .ck-sticky-panel__content_sticky{box-shadow:var(--ck-drop-shadow),0 0;border-width:0 1px 1px;border-top-left-radius:0;border-top-right-radius:0}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./stickypanel.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./stickypanel.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./stickypanel.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-label{display:block}.ck-voice-label{display:none}.ck-label{font-weight:700}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./label.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./label.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./label.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-editor__editable{border-radius:0}.ck-editor__editable.ck-rounded-corners,.ck-rounded-corners .ck-editor__editable{border-radius:var(--ck-border-radius)}.ck-editor__editable.ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./editorui.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./editorui.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./editorui.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n","module.exports = \".ck-hidden{display:none!important}.ck-reset,.ck-reset_all,.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:999;--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-focus-border:#47a4f5;--ck-color-focus-shadow:#77baf8;--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,.15);--ck-color-shadow-inner:rgba(0,0,0,.1);--ck-color-button-default-background:transparent;--ck-color-button-default-focus-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-focus-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-focus-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#5c5c5c;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-item-background-hover:var(--ck-color-base-foreground);--ck-color-list-item-background-active:var(--ck-color-base-active);--ck-color-list-item-background-active-focus:var(--ck-color-base-active-focus);--ck-color-list-item-text-active:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#c2c2c2;--ck-color-upload-bar-background:#6cb5f9;--ck-color-upload-infinite-background:rgba(0,0,0,.1);--ck-color-link-default:#0000f0;--ck-disabled-opacity:.5;--ck-focus-outer-shadow:0 0 3px var(--ck-color-focus-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck-reset,.ck-reset_all,.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck-reset_all,.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck-reset_all .ck-rtl *{text-align:right}.ck-reset_all iframe{vertical-align:inherit}.ck-reset_all textarea{white-space:pre-wrap}.ck-reset_all input[type=password],.ck-reset_all input[type=text],.ck-reset_all textarea{cursor:text}.ck-reset_all input[type=password][disabled],.ck-reset_all input[type=text][disabled],.ck-reset_all textarea[disabled]{cursor:default}.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck-reset_all button::-moz-focus-inner{padding:0;border:0}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit) * 1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit) * 0.8);--ck-spacing-small:calc(var(--ck-spacing-unit) * 0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit) * 0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit) * 0.16)}\"","\nvar content = require(\"!!../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./globals.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../ckeditor5-build-classic/node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./globals.css\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/postcss-loader/lib/index.js??ref--5-1!./globals.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var object = { 'user': 'fred' };\n * var getter = _.constant(object);\n *\n * getter() === object;\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant';\nimport root from './_root';\n\n/** Used to determine if values are of the language type `Object`. */\nvar objectTypes = {\n  'function': true,\n  'object': true\n};\n\n/** Detect free variable `exports`. */\nvar freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n  ? exports\n  : undefined;\n\n/** Detect free variable `module`. */\nvar freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n  ? module\n  : undefined;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = (freeModule && freeModule.exports === freeExports)\n  ? freeExports\n  : undefined;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = !Buffer ? constant(false) : function(value) {\n  return value instanceof Buffer;\n};\n\nexport default isBuffer;\n"],"sourceRoot":""}